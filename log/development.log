  [1m[36mActiveRecord::SchemaMigration Load (32.3ms)[0m  [1mSELECT `schema_migrations`.* FROM `schema_migrations`[0m
  [1m[35m (4.2ms)[0m  SELECT fk.referenced_table_name as 'to_table'
      ,fk.referenced_column_name as 'primary_key'
      ,fk.column_name as 'column'
      ,fk.constraint_name as 'name'
FROM information_schema.key_column_usage fk
WHERE fk.referenced_column_name is not null
  AND fk.table_schema = 'arxivpicks_development'
  AND fk.table_name = 'authors'

  [1m[36m (0.3ms)[0m  [1mSHOW CREATE TABLE `authors`[0m
  [1m[35m (0.4ms)[0m  SELECT fk.referenced_table_name as 'to_table'
      ,fk.referenced_column_name as 'primary_key'
      ,fk.column_name as 'column'
      ,fk.constraint_name as 'name'
FROM information_schema.key_column_usage fk
WHERE fk.referenced_column_name is not null
  AND fk.table_schema = 'arxivpicks_development'
  AND fk.table_name = 'comments'

  [1m[36m (0.3ms)[0m  [1mSHOW CREATE TABLE `comments`[0m
  [1m[35m (0.3ms)[0m  SELECT fk.referenced_table_name as 'to_table'
      ,fk.referenced_column_name as 'primary_key'
      ,fk.column_name as 'column'
      ,fk.constraint_name as 'name'
FROM information_schema.key_column_usage fk
WHERE fk.referenced_column_name is not null
  AND fk.table_schema = 'arxivpicks_development'
  AND fk.table_name = 'likes'

  [1m[36m (0.2ms)[0m  [1mSHOW CREATE TABLE `likes`[0m
  [1m[35m (0.3ms)[0m  SELECT fk.referenced_table_name as 'to_table'
      ,fk.referenced_column_name as 'primary_key'
      ,fk.column_name as 'column'
      ,fk.constraint_name as 'name'
FROM information_schema.key_column_usage fk
WHERE fk.referenced_column_name is not null
  AND fk.table_schema = 'arxivpicks_development'
  AND fk.table_name = 'papers'

  [1m[36m (0.2ms)[0m  [1mSHOW CREATE TABLE `papers`[0m
  [1m[35m (0.4ms)[0m  SELECT fk.referenced_table_name as 'to_table'
      ,fk.referenced_column_name as 'primary_key'
      ,fk.column_name as 'column'
      ,fk.constraint_name as 'name'
FROM information_schema.key_column_usage fk
WHERE fk.referenced_column_name is not null
  AND fk.table_schema = 'arxivpicks_development'
  AND fk.table_name = 'publishes'

  [1m[36m (0.2ms)[0m  [1mSHOW CREATE TABLE `publishes`[0m
  [1m[35m (0.4ms)[0m  SELECT fk.referenced_table_name as 'to_table'
      ,fk.referenced_column_name as 'primary_key'
      ,fk.column_name as 'column'
      ,fk.constraint_name as 'name'
FROM information_schema.key_column_usage fk
WHERE fk.referenced_column_name is not null
  AND fk.table_schema = 'arxivpicks_development'
  AND fk.table_name = 'users'

  [1m[36m (0.3ms)[0m  [1mSHOW CREATE TABLE `users`[0m
  [1m[36mActiveRecord::SchemaMigration Load (0.4ms)[0m  [1mSELECT `schema_migrations`.* FROM `schema_migrations`[0m
Migrating to CreatePapers (20161008094424)
  [1m[35m (31.5ms)[0m  CREATE TABLE `papers` (`id` int(11) auto_increment PRIMARY KEY, `title` varchar(255), `abstract` text, `url` text, `date` varchar(255), `category` varchar(255), `created_at` datetime NOT NULL, `updated_at` datetime NOT NULL) ENGINE=InnoDB
  [1m[36m (57.4ms)[0m  [1mCREATE TABLE `schema_migrations` (`version` varchar(255) NOT NULL) ENGINE=InnoDB[0m
  [1m[35m (61.9ms)[0m  CREATE UNIQUE INDEX `unique_schema_migrations`  ON `schema_migrations` (`version`) 
  [1m[36mActiveRecord::SchemaMigration Load (0.3ms)[0m  [1mSELECT `schema_migrations`.* FROM `schema_migrations`[0m
Migrating to CreatePapers (20161008094424)
  [1m[35m (31.6ms)[0m  CREATE TABLE `papers` (`id` int(11) auto_increment PRIMARY KEY, `title` varchar(255), `abstract` text, `url` text, `date` varchar(255), `category` varchar(255), `created_at` datetime NOT NULL, `updated_at` datetime NOT NULL) ENGINE=InnoDB
  [1m[36m (0.3ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (24.5ms)[0m  INSERT INTO `schema_migrations` (`version`) VALUES ('20161008094424')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
Migrating to CreatePublishes (20161008094425)
  [1m[35m (32.7ms)[0m  CREATE TABLE `publishes` (`id` int(11) auto_increment PRIMARY KEY, `author_id` int(11), `paper_id` int(11), `order` int(11), `created_at` datetime NOT NULL, `updated_at` datetime NOT NULL) ENGINE=InnoDB
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (2.9ms)[0m  INSERT INTO `schema_migrations` (`version`) VALUES ('20161008094425')
  [1m[36m (0.6ms)[0m  [1mCOMMIT[0m
Migrating to CreateAuthors (20161008094426)
  [1m[35m (30.3ms)[0m  CREATE TABLE `authors` (`id` int(11) auto_increment PRIMARY KEY, `name` varchar(255), `created_at` datetime NOT NULL, `updated_at` datetime NOT NULL) ENGINE=InnoDB
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `schema_migrations` (`version`) VALUES ('20161008094426')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
Migrating to CreateImages (20161008094427)
  [1m[35m (35.5ms)[0m  CREATE TABLE `images` (`id` int(11) auto_increment PRIMARY KEY, `target_id` int(11), `url` varchar(255), `type` varchar(255), `created_at` datetime NOT NULL, `updated_at` datetime NOT NULL) ENGINE=InnoDB
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.4ms)[0m  INSERT INTO `schema_migrations` (`version`) VALUES ('20161008094427')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
Migrating to CreateComments (20161008094430)
  [1m[35m (57.7ms)[0m  CREATE TABLE `comments` (`id` int(11) auto_increment PRIMARY KEY, `comment` text, `paper_id` int(11), `user_id` int(11), `created_at` datetime NOT NULL, `updated_at` datetime NOT NULL) ENGINE=InnoDB
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `schema_migrations` (`version`) VALUES ('20161008094430')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mActiveRecord::SchemaMigration Load (0.3ms)[0m  SELECT `schema_migrations`.* FROM `schema_migrations`
  [1m[36m (0.4ms)[0m  [1mSELECT fk.referenced_table_name as 'to_table'
      ,fk.referenced_column_name as 'primary_key'
      ,fk.column_name as 'column'
      ,fk.constraint_name as 'name'
FROM information_schema.key_column_usage fk
WHERE fk.referenced_column_name is not null
  AND fk.table_schema = 'arxivpicks_development'
  AND fk.table_name = 'authors'
[0m
  [1m[35m (0.3ms)[0m  SHOW CREATE TABLE `authors`
  [1m[36m (0.4ms)[0m  [1mSELECT fk.referenced_table_name as 'to_table'
      ,fk.referenced_column_name as 'primary_key'
      ,fk.column_name as 'column'
      ,fk.constraint_name as 'name'
FROM information_schema.key_column_usage fk
WHERE fk.referenced_column_name is not null
  AND fk.table_schema = 'arxivpicks_development'
  AND fk.table_name = 'comments'
[0m
  [1m[35m (0.3ms)[0m  SHOW CREATE TABLE `comments`
  [1m[36m (0.4ms)[0m  [1mSELECT fk.referenced_table_name as 'to_table'
      ,fk.referenced_column_name as 'primary_key'
      ,fk.column_name as 'column'
      ,fk.constraint_name as 'name'
FROM information_schema.key_column_usage fk
WHERE fk.referenced_column_name is not null
  AND fk.table_schema = 'arxivpicks_development'
  AND fk.table_name = 'images'
[0m
  [1m[35m (0.2ms)[0m  SHOW CREATE TABLE `images`
  [1m[36m (0.3ms)[0m  [1mSELECT fk.referenced_table_name as 'to_table'
      ,fk.referenced_column_name as 'primary_key'
      ,fk.column_name as 'column'
      ,fk.constraint_name as 'name'
FROM information_schema.key_column_usage fk
WHERE fk.referenced_column_name is not null
  AND fk.table_schema = 'arxivpicks_development'
  AND fk.table_name = 'papers'
[0m
  [1m[35m (0.2ms)[0m  SHOW CREATE TABLE `papers`
  [1m[36m (0.4ms)[0m  [1mSELECT fk.referenced_table_name as 'to_table'
      ,fk.referenced_column_name as 'primary_key'
      ,fk.column_name as 'column'
      ,fk.constraint_name as 'name'
FROM information_schema.key_column_usage fk
WHERE fk.referenced_column_name is not null
  AND fk.table_schema = 'arxivpicks_development'
  AND fk.table_name = 'publishes'
[0m
  [1m[35m (0.3ms)[0m  SHOW CREATE TABLE `publishes`
  [1m[36m (72.8ms)[0m  [1mCREATE TABLE `schema_migrations` (`version` varchar(255) NOT NULL) ENGINE=InnoDB[0m
  [1m[35m (60.2ms)[0m  CREATE UNIQUE INDEX `unique_schema_migrations`  ON `schema_migrations` (`version`) 
  [1m[36mActiveRecord::SchemaMigration Load (0.3ms)[0m  [1mSELECT `schema_migrations`.* FROM `schema_migrations`[0m
Migrating to CreatePapers (20161008094424)
  [1m[35m (52.1ms)[0m  CREATE TABLE `papers` (`id` int(11) auto_increment PRIMARY KEY, `title` varchar(255), `abstract` text, `url` text, `date` varchar(255), `category` varchar(255), `created_at` datetime NOT NULL, `updated_at` datetime NOT NULL) ENGINE=InnoDB
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `schema_migrations` (`version`) VALUES ('20161008094424')
  [1m[36m (6.1ms)[0m  [1mCOMMIT[0m
Migrating to CreatePublishes (20161008094425)
  [1m[35m (52.4ms)[0m  CREATE TABLE `publishes` (`id` int(11) auto_increment PRIMARY KEY, `author_id` int(11), `paper_id` int(11), `order` int(11), `created_at` datetime NOT NULL, `updated_at` datetime NOT NULL) ENGINE=InnoDB
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.4ms)[0m  INSERT INTO `schema_migrations` (`version`) VALUES ('20161008094425')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
Migrating to CreateAuthors (20161008094426)
  [1m[35m (52.3ms)[0m  CREATE TABLE `authors` (`id` int(11) auto_increment PRIMARY KEY, `name` varchar(255), `created_at` datetime NOT NULL, `updated_at` datetime NOT NULL) ENGINE=InnoDB
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `schema_migrations` (`version`) VALUES ('20161008094426')
  [1m[36m (0.3ms)[0m  [1mCOMMIT[0m
Migrating to CreateImages (20161008094427)
  [1m[35m (47.9ms)[0m  CREATE TABLE `images` (`id` int(11) auto_increment PRIMARY KEY, `target_id` int(11), `url` varchar(255), `type` varchar(255), `created_at` datetime NOT NULL, `updated_at` datetime NOT NULL) ENGINE=InnoDB
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `schema_migrations` (`version`) VALUES ('20161008094427')
  [1m[36m (0.3ms)[0m  [1mCOMMIT[0m
Migrating to CreateComments (20161008094430)
  [1m[35m (50.4ms)[0m  CREATE TABLE `comments` (`id` int(11) auto_increment PRIMARY KEY, `comment` text, `paper_id` int(11), `user_id` int(11), `created_at` datetime NOT NULL, `updated_at` datetime NOT NULL) ENGINE=InnoDB
  [1m[36m (0.6ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.5ms)[0m  INSERT INTO `schema_migrations` (`version`) VALUES ('20161008094430')
  [1m[36m (0.6ms)[0m  [1mCOMMIT[0m
Migrating to CreateLikes (20161008095208)
  [1m[35m (44.3ms)[0m  CREATE TABLE `likes` (`id` int(11) auto_increment PRIMARY KEY, `comment_id` int(11), `user_id` int(11), `created_at` datetime NOT NULL, `updated_at` datetime NOT NULL) ENGINE=InnoDB
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.4ms)[0m  INSERT INTO `schema_migrations` (`version`) VALUES ('20161008095208')
  [1m[36m (0.8ms)[0m  [1mCOMMIT[0m
  [1m[35mActiveRecord::SchemaMigration Load (0.2ms)[0m  SELECT `schema_migrations`.* FROM `schema_migrations`
  [1m[36m (0.3ms)[0m  [1mSELECT fk.referenced_table_name as 'to_table'
      ,fk.referenced_column_name as 'primary_key'
      ,fk.column_name as 'column'
      ,fk.constraint_name as 'name'
FROM information_schema.key_column_usage fk
WHERE fk.referenced_column_name is not null
  AND fk.table_schema = 'arxivpicks_development'
  AND fk.table_name = 'authors'
[0m
  [1m[35m (0.2ms)[0m  SHOW CREATE TABLE `authors`
  [1m[36m (0.3ms)[0m  [1mSELECT fk.referenced_table_name as 'to_table'
      ,fk.referenced_column_name as 'primary_key'
      ,fk.column_name as 'column'
      ,fk.constraint_name as 'name'
FROM information_schema.key_column_usage fk
WHERE fk.referenced_column_name is not null
  AND fk.table_schema = 'arxivpicks_development'
  AND fk.table_name = 'comments'
[0m
  [1m[35m (0.2ms)[0m  SHOW CREATE TABLE `comments`
  [1m[36m (0.3ms)[0m  [1mSELECT fk.referenced_table_name as 'to_table'
      ,fk.referenced_column_name as 'primary_key'
      ,fk.column_name as 'column'
      ,fk.constraint_name as 'name'
FROM information_schema.key_column_usage fk
WHERE fk.referenced_column_name is not null
  AND fk.table_schema = 'arxivpicks_development'
  AND fk.table_name = 'images'
[0m
  [1m[35m (0.2ms)[0m  SHOW CREATE TABLE `images`
  [1m[36m (0.3ms)[0m  [1mSELECT fk.referenced_table_name as 'to_table'
      ,fk.referenced_column_name as 'primary_key'
      ,fk.column_name as 'column'
      ,fk.constraint_name as 'name'
FROM information_schema.key_column_usage fk
WHERE fk.referenced_column_name is not null
  AND fk.table_schema = 'arxivpicks_development'
  AND fk.table_name = 'likes'
[0m
  [1m[35m (0.2ms)[0m  SHOW CREATE TABLE `likes`
  [1m[36m (0.4ms)[0m  [1mSELECT fk.referenced_table_name as 'to_table'
      ,fk.referenced_column_name as 'primary_key'
      ,fk.column_name as 'column'
      ,fk.constraint_name as 'name'
FROM information_schema.key_column_usage fk
WHERE fk.referenced_column_name is not null
  AND fk.table_schema = 'arxivpicks_development'
  AND fk.table_name = 'papers'
[0m
  [1m[35m (0.3ms)[0m  SHOW CREATE TABLE `papers`
  [1m[36m (0.4ms)[0m  [1mSELECT fk.referenced_table_name as 'to_table'
      ,fk.referenced_column_name as 'primary_key'
      ,fk.column_name as 'column'
      ,fk.constraint_name as 'name'
FROM information_schema.key_column_usage fk
WHERE fk.referenced_column_name is not null
  AND fk.table_schema = 'arxivpicks_development'
  AND fk.table_name = 'publishes'
[0m
  [1m[35m (0.3ms)[0m  SHOW CREATE TABLE `publishes`
  [1m[36mActiveRecord::SchemaMigration Load (0.4ms)[0m  [1mSELECT `schema_migrations`.* FROM `schema_migrations`[0m
Migrating to DeviseCreateUsers (20161008100021)
  [1m[35m (55.7ms)[0m  CREATE TABLE `users` (`id` int(11) auto_increment PRIMARY KEY, `email` varchar(255) DEFAULT '' NOT NULL, `encrypted_password` varchar(255) DEFAULT '' NOT NULL, `reset_password_token` varchar(255), `reset_password_sent_at` datetime, `remember_created_at` datetime, `sign_in_count` int(11) DEFAULT 0 NOT NULL, `current_sign_in_at` datetime, `last_sign_in_at` datetime, `current_sign_in_ip` varchar(255), `last_sign_in_ip` varchar(255), `created_at` datetime NOT NULL, `updated_at` datetime NOT NULL) ENGINE=InnoDB
  [1m[36m (55.9ms)[0m  [1mCREATE UNIQUE INDEX `index_users_on_email`  ON `users` (`email`) [0m
  [1m[35m (55.8ms)[0m  CREATE UNIQUE INDEX `index_users_on_reset_password_token`  ON `users` (`reset_password_token`) 
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `schema_migrations` (`version`) VALUES ('20161008100021')
  [1m[36m (6.4ms)[0m  [1mCOMMIT[0m
  [1m[35mActiveRecord::SchemaMigration Load (0.3ms)[0m  SELECT `schema_migrations`.* FROM `schema_migrations`
  [1m[36m (0.3ms)[0m  [1mSELECT fk.referenced_table_name as 'to_table'
      ,fk.referenced_column_name as 'primary_key'
      ,fk.column_name as 'column'
      ,fk.constraint_name as 'name'
FROM information_schema.key_column_usage fk
WHERE fk.referenced_column_name is not null
  AND fk.table_schema = 'arxivpicks_development'
  AND fk.table_name = 'authors'
[0m
  [1m[35m (0.2ms)[0m  SHOW CREATE TABLE `authors`
  [1m[36m (0.3ms)[0m  [1mSELECT fk.referenced_table_name as 'to_table'
      ,fk.referenced_column_name as 'primary_key'
      ,fk.column_name as 'column'
      ,fk.constraint_name as 'name'
FROM information_schema.key_column_usage fk
WHERE fk.referenced_column_name is not null
  AND fk.table_schema = 'arxivpicks_development'
  AND fk.table_name = 'comments'
[0m
  [1m[35m (0.3ms)[0m  SHOW CREATE TABLE `comments`
  [1m[36m (0.4ms)[0m  [1mSELECT fk.referenced_table_name as 'to_table'
      ,fk.referenced_column_name as 'primary_key'
      ,fk.column_name as 'column'
      ,fk.constraint_name as 'name'
FROM information_schema.key_column_usage fk
WHERE fk.referenced_column_name is not null
  AND fk.table_schema = 'arxivpicks_development'
  AND fk.table_name = 'images'
[0m
  [1m[35m (0.3ms)[0m  SHOW CREATE TABLE `images`
  [1m[36m (0.4ms)[0m  [1mSELECT fk.referenced_table_name as 'to_table'
      ,fk.referenced_column_name as 'primary_key'
      ,fk.column_name as 'column'
      ,fk.constraint_name as 'name'
FROM information_schema.key_column_usage fk
WHERE fk.referenced_column_name is not null
  AND fk.table_schema = 'arxivpicks_development'
  AND fk.table_name = 'likes'
[0m
  [1m[35m (0.3ms)[0m  SHOW CREATE TABLE `likes`
  [1m[36m (0.4ms)[0m  [1mSELECT fk.referenced_table_name as 'to_table'
      ,fk.referenced_column_name as 'primary_key'
      ,fk.column_name as 'column'
      ,fk.constraint_name as 'name'
FROM information_schema.key_column_usage fk
WHERE fk.referenced_column_name is not null
  AND fk.table_schema = 'arxivpicks_development'
  AND fk.table_name = 'papers'
[0m
  [1m[35m (0.3ms)[0m  SHOW CREATE TABLE `papers`
  [1m[36m (0.4ms)[0m  [1mSELECT fk.referenced_table_name as 'to_table'
      ,fk.referenced_column_name as 'primary_key'
      ,fk.column_name as 'column'
      ,fk.constraint_name as 'name'
FROM information_schema.key_column_usage fk
WHERE fk.referenced_column_name is not null
  AND fk.table_schema = 'arxivpicks_development'
  AND fk.table_name = 'publishes'
[0m
  [1m[35m (0.3ms)[0m  SHOW CREATE TABLE `publishes`
  [1m[36m (0.4ms)[0m  [1mSELECT fk.referenced_table_name as 'to_table'
      ,fk.referenced_column_name as 'primary_key'
      ,fk.column_name as 'column'
      ,fk.constraint_name as 'name'
FROM information_schema.key_column_usage fk
WHERE fk.referenced_column_name is not null
  AND fk.table_schema = 'arxivpicks_development'
  AND fk.table_name = 'users'
[0m
  [1m[35m (0.3ms)[0m  SHOW CREATE TABLE `users`
  [1m[36mActiveRecord::SchemaMigration Load (0.7ms)[0m  [1mSELECT `schema_migrations`.* FROM `schema_migrations`[0m
Migrating to AddIntroductionToUsers (20161008100504)
  [1m[35m (61.8ms)[0m  ALTER TABLE `users` ADD `introduction` text
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `schema_migrations` (`version`) VALUES ('20161008100504')
  [1m[36m (7.0ms)[0m  [1mCOMMIT[0m
Migrating to AddNameToUsers (20161008100526)
  [1m[35m (64.3ms)[0m  ALTER TABLE `users` ADD `name` varchar(255)
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.4ms)[0m  INSERT INTO `schema_migrations` (`version`) VALUES ('20161008100526')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
Migrating to AddImageIdToUsers (20161008100624)
  [1m[35m (68.1ms)[0m  ALTER TABLE `users` ADD `image_id` int(11)
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `schema_migrations` (`version`) VALUES ('20161008100624')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mActiveRecord::SchemaMigration Load (0.3ms)[0m  SELECT `schema_migrations`.* FROM `schema_migrations`
  [1m[36m (0.3ms)[0m  [1mSELECT fk.referenced_table_name as 'to_table'
      ,fk.referenced_column_name as 'primary_key'
      ,fk.column_name as 'column'
      ,fk.constraint_name as 'name'
FROM information_schema.key_column_usage fk
WHERE fk.referenced_column_name is not null
  AND fk.table_schema = 'arxivpicks_development'
  AND fk.table_name = 'authors'
[0m
  [1m[35m (0.2ms)[0m  SHOW CREATE TABLE `authors`
  [1m[36m (0.2ms)[0m  [1mSELECT fk.referenced_table_name as 'to_table'
      ,fk.referenced_column_name as 'primary_key'
      ,fk.column_name as 'column'
      ,fk.constraint_name as 'name'
FROM information_schema.key_column_usage fk
WHERE fk.referenced_column_name is not null
  AND fk.table_schema = 'arxivpicks_development'
  AND fk.table_name = 'comments'
[0m
  [1m[35m (0.2ms)[0m  SHOW CREATE TABLE `comments`
  [1m[36m (0.3ms)[0m  [1mSELECT fk.referenced_table_name as 'to_table'
      ,fk.referenced_column_name as 'primary_key'
      ,fk.column_name as 'column'
      ,fk.constraint_name as 'name'
FROM information_schema.key_column_usage fk
WHERE fk.referenced_column_name is not null
  AND fk.table_schema = 'arxivpicks_development'
  AND fk.table_name = 'images'
[0m
  [1m[35m (0.2ms)[0m  SHOW CREATE TABLE `images`
  [1m[36m (0.3ms)[0m  [1mSELECT fk.referenced_table_name as 'to_table'
      ,fk.referenced_column_name as 'primary_key'
      ,fk.column_name as 'column'
      ,fk.constraint_name as 'name'
FROM information_schema.key_column_usage fk
WHERE fk.referenced_column_name is not null
  AND fk.table_schema = 'arxivpicks_development'
  AND fk.table_name = 'likes'
[0m
  [1m[35m (0.2ms)[0m  SHOW CREATE TABLE `likes`
  [1m[36m (0.3ms)[0m  [1mSELECT fk.referenced_table_name as 'to_table'
      ,fk.referenced_column_name as 'primary_key'
      ,fk.column_name as 'column'
      ,fk.constraint_name as 'name'
FROM information_schema.key_column_usage fk
WHERE fk.referenced_column_name is not null
  AND fk.table_schema = 'arxivpicks_development'
  AND fk.table_name = 'papers'
[0m
  [1m[35m (0.2ms)[0m  SHOW CREATE TABLE `papers`
  [1m[36m (0.4ms)[0m  [1mSELECT fk.referenced_table_name as 'to_table'
      ,fk.referenced_column_name as 'primary_key'
      ,fk.column_name as 'column'
      ,fk.constraint_name as 'name'
FROM information_schema.key_column_usage fk
WHERE fk.referenced_column_name is not null
  AND fk.table_schema = 'arxivpicks_development'
  AND fk.table_name = 'publishes'
[0m
  [1m[35m (0.3ms)[0m  SHOW CREATE TABLE `publishes`
  [1m[36m (0.4ms)[0m  [1mSELECT fk.referenced_table_name as 'to_table'
      ,fk.referenced_column_name as 'primary_key'
      ,fk.column_name as 'column'
      ,fk.constraint_name as 'name'
FROM information_schema.key_column_usage fk
WHERE fk.referenced_column_name is not null
  AND fk.table_schema = 'arxivpicks_development'
  AND fk.table_name = 'users'
[0m
  [1m[35m (0.3ms)[0m  SHOW CREATE TABLE `users`
  [1m[36mActiveRecord::SchemaMigration Load (0.3ms)[0m  [1mSELECT `schema_migrations`.* FROM `schema_migrations`[0m
  [1m[35mPaper Load (0.5ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Concordance and the Smallest Covering Set of Preference Orderings'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (6.8ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Concordance and the Smallest Covering Set of Preference Orderings', 'Preference orderings are orderings of a set of items according to the preferences (of judges). Such orderings arise in a variety of domains, including group decision making, consumer marketing, voting and machine learning. Measuring the mutual information and extracting the common patterns in a set of preference orderings are key to these areas. In this paper we deal with the representation of sets of preference orderings, the quantification of the degree to which judges agree on their ordering of the items (i.e. the concordance), and the efficient, meaningful description of such sets. We propose to represent the orderings in a subsequence-based feature space and present a new algorithm to calculate the size of the set of all common subsequences - the basis of a quantification of concordance, not only for pairs of orderings but also for sets of orderings. The new algorithm is fast and storage efficient with a time complexity of only $O(Nn^2)$ for the orderings of $n$ items by $N$ judges and a space complexity of only $O(\\min\\{Nn,n^2\\})$. Also, we propose to represent the set of all $N$ orderings through a smallest set of covering preferences and present an algorithm to construct this smallest covering set.', 'cs.AI', '2016-09-15T16:24:45Z', 'http://arxiv.org/abs/1609.04722v1', '2016-10-08 10:25:39', '2016-10-08 10:25:39')
  [1m[36m (12.2ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (5.7ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 1
  [1m[36mAuthor Load (0.5ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Zhiwei Lin'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.4ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Zhiwei Lin', '2016-10-08 10:25:39', '2016-10-08 10:25:39')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1, 1, 0, '2016-10-08 10:25:39', '2016-10-08 10:25:39')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.3ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Hui Wang'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Hui Wang', '2016-10-08 10:25:39', '2016-10-08 10:25:39')
  [1m[36m (2.9ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2, 1, 1, '2016-10-08 10:25:39', '2016-10-08 10:25:39')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (0.3ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Cees H. Elzinga'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.5ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Cees H. Elzinga', '2016-10-08 10:25:39', '2016-10-08 10:25:39')[0m
  [1m[35m (1.0ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.4ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (3, 1, 2, '2016-10-08 10:25:39', '2016-10-08 10:25:39')
  [1m[36m (2.9ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.4ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Context Aware Nonnegative Matrix Factorization Clustering'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.4ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Context Aware Nonnegative Matrix Factorization Clustering', 'In this article we propose a method to refine the clustering results obtained with the nonnegative matrix factorization (NMF) technique, imposing consistency constraints on the final labeling of the data. The research community focused its effort on the initialization and on the optimization part of this method, without paying attention to the final cluster assignments. We propose a game theoretic framework in which each object to be clustered is represented as a player, which has to choose its cluster membership. The information obtained with NMF is used to initialize the strategy space of the players and a weighted graph is used to model the interactions among the players. These interactions allow the players to choose a cluster which is coherent with the clusters chosen by similar players, a property which is not guaranteed by NMF, since it produces a soft clustering of the data. The results on common benchmarks show that our model is able to improve the performances of many NMF formulations.', 'cs.CV', '2016-09-15T13:23:43Z', 'http://arxiv.org/abs/1609.04628v1', '2016-10-08 10:25:39', '2016-10-08 10:25:39')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (0.3ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 2
  [1m[36mAuthor Load (0.3ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Rocco Tripodi'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Rocco Tripodi', '2016-10-08 10:25:39', '2016-10-08 10:25:39')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (4, 2, 0, '2016-10-08 10:25:39', '2016-10-08 10:25:39')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.3ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Sebastiano Vascon'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Sebastiano Vascon', '2016-10-08 10:25:39', '2016-10-08 10:25:39')
  [1m[36m (0.6ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (5, 2, 1, '2016-10-08 10:25:39', '2016-10-08 10:25:39')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.3ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Marcello Pelillo'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Marcello Pelillo', '2016-10-08 10:25:39', '2016-10-08 10:25:39')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (6, 2, 2, '2016-10-08 10:25:39', '2016-10-08 10:25:39')
  [1m[36m (0.3ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.3ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Column Networks for Collective Classification'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Column Networks for Collective Classification', 'Relational learning deals with data that are characterized by relational structures. An important task is collective classification, which is to jointly classify networked objects. While it holds a great promise to produce a better accuracy than non-collective classifiers, collective classification is computational challenging and has not leveraged on the recent breakthroughs of deep learning. We present Column Network (CLN), a novel deep learning model for collective classification in multi-relational domains. CLN has many desirable theoretical properties: (i) it encodes multi-relations between any two instances; (ii) it is deep and compact, allowing complex functions to be approximated at the network level with a small set of free parameters; (iii) local and relational features are learned simultaneously; (iv) long-range, higher-order dependencies between instances are supported naturally; and (v) crucially, learning and inference are efficient, linear in the size of the network and the number of relations. We evaluate CLN on multiple real-world applications: (a) delay prediction in software projects, (b) PubMed Diabetes publication classification and (c) film genre classification. In all applications, CLN demonstrates a higher accuracy than state-of-the-art rivals.', 'cs.AI', '2016-09-15T04:45:11Z', 'http://arxiv.org/abs/1609.04508v1', '2016-10-08 10:25:39', '2016-10-08 10:25:39')
  [1m[36m (3.0ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (0.4ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 3
  [1m[36mAuthor Load (0.4ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Trang Pham'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (3.1ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Trang Pham', '2016-10-08 10:25:39', '2016-10-08 10:25:39')[0m
  [1m[35m (0.6ms)[0m  COMMIT
  [1m[36m (0.3ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (7, 3, 0, '2016-10-08 10:25:39', '2016-10-08 10:25:39')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.3ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Truyen Tran'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Truyen Tran', '2016-10-08 10:25:39', '2016-10-08 10:25:39')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (8, 3, 1, '2016-10-08 10:25:39', '2016-10-08 10:25:39')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.3ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Dinh Phung'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Dinh Phung', '2016-10-08 10:25:39', '2016-10-08 10:25:39')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (9, 3, 2, '2016-10-08 10:25:39', '2016-10-08 10:25:39')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.3ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Svetha Venkatesh'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Svetha Venkatesh', '2016-10-08 10:25:39', '2016-10-08 10:25:39')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (10, 3, 3, '2016-10-08 10:25:39', '2016-10-08 10:25:39')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPaper Load (0.3ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Bayesian Reinforcement Learning: A Survey'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Bayesian Reinforcement Learning: A Survey', 'Bayesian methods for machine learning have been widely investigated, yielding principled methods for incorporating prior information into inference algorithms. In this survey, we provide an in-depth review of the role of Bayesian methods for the reinforcement learning (RL) paradigm. The major incentives for incorporating Bayesian reasoning in RL are: 1) it provides an elegant approach to action-selection (exploration/exploitation) as a function of the uncertainty in learning; and 2) it provides a machinery to incorporate prior knowledge into the algorithms. We first discuss models and methods for Bayesian inference in the simple single-step Bandit model. We then review the extensive recent literature on Bayesian methods for model-based RL, where prior information can be expressed on the parameters of the Markov model. We also present Bayesian methods for model-free RL, where priors are expressed over the value function or policy class. The objective of the paper is to provide a comprehensive survey on Bayesian RL algorithms and their theoretical and empirical properties.', 'cs.AI', '2016-09-14T20:34:26Z', 'http://dx.doi.org/10.1561/2200000049', '2016-10-08 10:25:39', '2016-10-08 10:25:39')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPublish Load (0.3ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 4[0m
  [1m[35mAuthor Load (0.3ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Mohammad Ghavamzadeh'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Mohammad Ghavamzadeh', '2016-10-08 10:25:39', '2016-10-08 10:25:39')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (11, 4, 0, '2016-10-08 10:25:39', '2016-10-08 10:25:39')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (0.3ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Shie Mannor'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Shie Mannor', '2016-10-08 10:25:39', '2016-10-08 10:25:39')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (12, 4, 1, '2016-10-08 10:25:39', '2016-10-08 10:25:39')
  [1m[36m (3.0ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.4ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Joelle Pineau'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Joelle Pineau', '2016-10-08 10:25:39', '2016-10-08 10:25:39')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (13, 4, 2, '2016-10-08 10:25:39', '2016-10-08 10:25:39')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (0.4ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Aviv Tamar'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Aviv Tamar', '2016-10-08 10:25:39', '2016-10-08 10:25:39')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (14, 4, 3, '2016-10-08 10:25:39', '2016-10-08 10:25:39')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.3ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Finite LTL Synthesis is EXPTIME-complete'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Finite LTL Synthesis is EXPTIME-complete', 'LTL synthesis -- the construction of a function to satisfy a logical specification formulated in Linear Temporal Logic -- is a 2EXPTIME-complete problem with relevant applications in controller synthesis and a myriad of artificial intelligence applications. In this research note we consider De Giacomo and Vardi\'s variant of the synthesis problem for LTL formulas interpreted over finite rather than infinite traces. Rather surprisingly, given the existing claims on complexity, we establish that LTL synthesis is EXPTIME-complete for the finite interpretation, and not 2EXPTIME-complete as previously reported. Our result coincides nicely with the planning perspective where non-deterministic planning with full observability is EXPTIME-complete and partial observability increases the complexity to 2EXPTIME-complete; a recent related result for LTL synthesis shows that in the finite case with partial observability, the problem is 2EXPTIME-complete.', 'cs.LO', '2016-09-14T18:23:25Z', 'http://arxiv.org/abs/1609.04371v1', '2016-10-08 10:25:39', '2016-10-08 10:25:39')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (0.4ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 5
  [1m[36mAuthor Load (0.3ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Jorge A. Baier'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Jorge A. Baier', '2016-10-08 10:25:39', '2016-10-08 10:25:39')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (15, 5, 0, '2016-10-08 10:25:39', '2016-10-08 10:25:39')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.3ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Alberto Camacho'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Alberto Camacho', '2016-10-08 10:25:39', '2016-10-08 10:25:39')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (16, 5, 1, '2016-10-08 10:25:39', '2016-10-08 10:25:39')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (0.4ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Christian Muise'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Christian Muise', '2016-10-08 10:25:39', '2016-10-08 10:25:39')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (17, 5, 2, '2016-10-08 10:25:39', '2016-10-08 10:25:39')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.3ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Sheila A. McIlraith'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Sheila A. McIlraith', '2016-10-08 10:25:39', '2016-10-08 10:25:39')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (18, 5, 3, '2016-10-08 10:25:39', '2016-10-08 10:25:39')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (0.3ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Quick and energy-efficient Bayesian computing of binocular disparity using stochastic digital signals'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Quick and energy-efficient Bayesian computing of binocular disparity using stochastic digital signals', 'Reconstruction of the tridimensional geometry of a visual scene using the binocular disparity information is an important issue in computer vision and mobile robotics, which can be formulated as a Bayesian inference problem. However, computation of the full disparity distribution with an advanced Bayesian model is usually an intractable problem, and proves computationally challenging even with a simple model. In this paper, we show how probabilistic hardware using distributed memory and alternate representation of data as stochastic bitstreams can solve that problem with high performance and energy efficiency. We put forward a way to express discrete probability distributions using stochastic data representations and perform Bayesian fusion using those representations, and show how that approach can be applied to diparity computation. We evaluate the system using a simulated stochastic implementation and discuss possible hardware implementations of such architectures and their potential for sensorimotor processing and robotics.', 'cs.CV', '2016-09-14T16:41:31Z', 'http://arxiv.org/abs/1609.04337v1', '2016-10-08 10:25:39', '2016-10-08 10:25:39')[0m
  [1m[35m (3.2ms)[0m  COMMIT
  [1m[36mPublish Load (0.4ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 6[0m
  [1m[35mAuthor Load (0.4ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Alexandre Coninx'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Alexandre Coninx', '2016-10-08 10:25:39', '2016-10-08 10:25:39')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.3ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (19, 6, 0, '2016-10-08 10:25:39', '2016-10-08 10:25:39')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (0.4ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Pierre Bessière'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Pierre Bessière', '2016-10-08 10:25:39', '2016-10-08 10:25:39')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (20, 6, 1, '2016-10-08 10:25:39', '2016-10-08 10:25:39')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.3ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Jacques Droulez'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.4ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Jacques Droulez', '2016-10-08 10:25:39', '2016-10-08 10:25:39')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (21, 6, 2, '2016-10-08 10:25:39', '2016-10-08 10:25:39')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPaper Load (0.3ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = '\"Flow Size Difference\" Can Make a Difference: Detecting Malicious TCP Network Flows Based on Benford\'s Law'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.4ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('\"Flow Size Difference\" Can Make a Difference: Detecting Malicious TCP Network Flows Based on Benford\'s Law', 'Statistical characteristics of network traffic have attracted a significant amount of research for automated network intrusion detection, some of which looked at applications of natural statistical laws such as Zipf\'s law, Benford\'s law and the Pareto distribution. In this paper, we present the application of Benford\'s law to a new network flow metric \"flow size difference\", which have not been studied by other researchers, to build an unsupervised flow-based intrusion detection system (IDS). The method was inspired by our observation on a large number of TCP flow datasets where normal flows tend to follow Benford\'s law closely but malicious flows tend to deviate significantly from it. The proposed IDS is unsupervised so no training is needed thus can be easily deployed. It has two simple parameters with a clear semantic meaning, allowing the human operator to set and adapt their values intuitively to adjust the overall performance of the IDS. We tested the proposed IDS on one closed and two public datasets and proved its efficiency in terms of AUC (area under the ROC curve). Being a simple and fast standalone IDS itself, the proposed method can also be easily combined with other network IDSs e.g. added as an additional component into another existing IDS to enhance its performance.', 'cs.CR', '2016-09-14T10:51:00Z', 'http://arxiv.org/abs/1609.04214v1', '2016-10-08 10:25:39', '2016-10-08 10:25:39')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPublish Load (0.4ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 7[0m
  [1m[35mAuthor Load (0.2ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Aamo Iorliam'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Aamo Iorliam', '2016-10-08 10:25:39', '2016-10-08 10:25:39')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (22, 7, 0, '2016-10-08 10:25:39', '2016-10-08 10:25:39')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.3ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Santosh Tirunagari'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Santosh Tirunagari', '2016-10-08 10:25:39', '2016-10-08 10:25:39')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (23, 7, 1, '2016-10-08 10:25:39', '2016-10-08 10:25:39')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.3ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Anthony T. S. Ho'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Anthony T. S. Ho', '2016-10-08 10:25:39', '2016-10-08 10:25:39')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (24, 7, 2, '2016-10-08 10:25:39', '2016-10-08 10:25:39')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.4ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Shujun Li'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Shujun Li', '2016-10-08 10:25:39', '2016-10-08 10:25:39')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (25, 7, 3, '2016-10-08 10:25:39', '2016-10-08 10:25:39')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.3ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Adrian Waller'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Adrian Waller', '2016-10-08 10:25:39', '2016-10-08 10:25:39')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (26, 7, 4, '2016-10-08 10:25:39', '2016-10-08 10:25:39')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (0.4ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Norman Poh'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Norman Poh', '2016-10-08 10:25:39', '2016-10-08 10:25:39')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (27, 7, 5, '2016-10-08 10:25:39', '2016-10-08 10:25:39')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.3ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Sequencing Chess'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Sequencing Chess', 'We analyze the structure of the state space of chess by means of transition path sampling Monte Carlo simulation. Based on the typical number of moves required to transpose a given configuration of chess pieces into another, we conclude that the state space consists of several pockets between which transitions are rare. Skilled players explore an even smaller subset of positions that populate some of these pockets only very sparsely. These results suggest that the usual measures to estimate both, the size of the state space and the size of the tree of legal moves, are not unique indicators of the complexity of the game, but that topological considerations are equally important.', 'cs.AI', '2016-09-14T10:13:42Z', 'http://arxiv.org/abs/1609.04648v1', '2016-10-08 10:25:39', '2016-10-08 10:25:39')
  [1m[36m (2.9ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (0.4ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 8
  [1m[36mAuthor Load (0.4ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'A. Atashpendar'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('A. Atashpendar', '2016-10-08 10:25:39', '2016-10-08 10:25:39')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (28, 8, 0, '2016-10-08 10:25:39', '2016-10-08 10:25:39')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.3ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'T. Schilling'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('T. Schilling', '2016-10-08 10:25:39', '2016-10-08 10:25:39')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (29, 8, 1, '2016-10-08 10:25:39', '2016-10-08 10:25:39')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.3ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Th. Voigtmann'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Th. Voigtmann', '2016-10-08 10:25:39', '2016-10-08 10:25:39')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (30, 8, 2, '2016-10-08 10:25:39', '2016-10-08 10:25:39')
  [1m[36m (1.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.3ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'A Generic Bet-and-run Strategy for Speeding Up Traveling Salesperson and Minimum Vertex Cover'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('A Generic Bet-and-run Strategy for Speeding Up Traveling Salesperson and Minimum Vertex Cover', 'A common strategy for improving optimization algorithms is to restart the algorithm when it is believed to be trapped in an inferior part of the search space. However, while specific restart strategies have been developed for specific problems (and specific algorithms), restarts are typically not regarded as a general tool to speed up an optimization algorithm. In fact, many optimization algorithms do not employ restarts at all. Recently, \"bet-and-run\" was introduced in the context of mixed-integer programming, where first a number of short runs with randomized initial conditions is made, and then the most promising run of these is continued. In this article, we consider two classical NP-complete combinatorial optimization problems, traveling salesperson and minimum vertex cover, and study the effectiveness of different bet-and-run strategies. In particular, our restart strategies do not take any problem knowledge into account, nor are tailored to the optimization algorithm. Therefore, they can be used off-the-shelf. We observe that state-of-the-art solvers for these problems can benefit significantly from restarts on standard benchmark instances.', 'cs.AI', '2016-09-13T19:36:45Z', 'http://arxiv.org/abs/1609.03993v1', '2016-10-08 10:25:39', '2016-10-08 10:25:39')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (0.4ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 9
  [1m[36mAuthor Load (0.4ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Tobias Friedrich'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Tobias Friedrich', '2016-10-08 10:25:39', '2016-10-08 10:25:39')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (31, 9, 0, '2016-10-08 10:25:39', '2016-10-08 10:25:39')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.4ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Timo Kötzing'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Timo Kötzing', '2016-10-08 10:25:39', '2016-10-08 10:25:39')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (32, 9, 1, '2016-10-08 10:25:39', '2016-10-08 10:25:39')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.3ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Markus Wagner'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Markus Wagner', '2016-10-08 10:25:39', '2016-10-08 10:25:39')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (33, 9, 2, '2016-10-08 10:25:39', '2016-10-08 10:25:39')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.3ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Feynman Machine: The Universal Dynamical Systems Computer'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Feynman Machine: The Universal Dynamical Systems Computer', 'Efforts at understanding the computational processes in the brain have met with limited success, despite their importance and potential uses in building intelligent machines. We propose a simple new model which draws on recent findings in Neuroscience and the Applied Mathematics of interacting Dynamical Systems. The Feynman Machine is a Universal Computer for Dynamical Systems, analogous to the Turing Machine for symbolic computing, but with several important differences. We demonstrate that networks and hierarchies of simple interacting Dynamical Systems, each adaptively learning to forecast its evolution, are capable of automatically building sensorimotor models of the external and internal world. We identify such networks in mammalian neocortex, and show how existing theories of cortical computation combine with our model to explain the power and flexibility of mammalian intelligence. These findings lead directly to new architectures for machine intelligence. A suite of software implementations has been built based on these principles, and applied to a number of spatiotemporal learning tasks.', 'cs.NE', '2016-09-13T18:34:59Z', 'http://arxiv.org/abs/1609.03971v1', '2016-10-08 10:25:39', '2016-10-08 10:25:39')
  [1m[36m (3.0ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (0.4ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 10
  [1m[36mAuthor Load (0.4ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Eric Laukien'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Eric Laukien', '2016-10-08 10:25:39', '2016-10-08 10:25:39')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (34, 10, 0, '2016-10-08 10:25:39', '2016-10-08 10:25:39')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.4ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Richard Crowder'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Richard Crowder', '2016-10-08 10:25:39', '2016-10-08 10:25:39')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (35, 10, 1, '2016-10-08 10:25:39', '2016-10-08 10:25:39')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (0.4ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Fergal Byrne'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Fergal Byrne', '2016-10-08 10:25:39', '2016-10-08 10:25:39')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (36, 10, 2, '2016-10-08 10:25:39', '2016-10-08 10:25:39')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.3ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Instrumenting an SMT Solver to Solve Hybrid Network Reachability Problems'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.4ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Instrumenting an SMT Solver to Solve Hybrid Network Reachability Problems', 'PDDL+ planning has its semantics rooted in hybrid automata (HA) and recent work has shown that it can be modeled as a network of HAs. Addressing the complexity of nonlinear PDDL+ planning as HAs requires both space and time efficient reasoning. Unfortunately, existing solvers either do not address nonlinear dynamics or do not natively support networks of automata. We present a new algorithm, called HNSolve, which guides the variable selection of the dReal Satisfiability Modulo Theories (SMT) solver while reasoning about network encodings of nonlinear PDDL+ planning as HAs. HNSolve tightly integrates with dReal by solving a discrete abstraction of the HA network. HNSolve finds composite runs on the HA network that ignore continuous variables, but respect mode jumps and synchronization labels. HNSolve admissibly detects dead-ends in the discrete abstraction, and posts conflict clauses that prune the SMT solver\'s search. We evaluate the benefits of our HNSolve algorithm on PDDL+ benchmark problems and demonstrate its performance with respect to prior work.', 'cs.AI', '2016-09-13T14:17:32Z', 'http://arxiv.org/abs/1609.03847v1', '2016-10-08 10:25:39', '2016-10-08 10:25:39')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (0.3ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 11
  [1m[36mAuthor Load (0.3ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Daniel Bryce'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Daniel Bryce', '2016-10-08 10:25:39', '2016-10-08 10:25:39')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (37, 11, 0, '2016-10-08 10:25:39', '2016-10-08 10:25:39')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.4ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Sergiy Bogomolov'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Sergiy Bogomolov', '2016-10-08 10:25:39', '2016-10-08 10:25:39')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (38, 11, 1, '2016-10-08 10:25:39', '2016-10-08 10:25:39')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.4ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Alexander Heinz'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Alexander Heinz', '2016-10-08 10:25:39', '2016-10-08 10:25:39')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (39, 11, 2, '2016-10-08 10:25:39', '2016-10-08 10:25:39')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.4ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Christian Schilling'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Christian Schilling', '2016-10-08 10:25:39', '2016-10-08 10:25:39')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (40, 11, 3, '2016-10-08 10:25:39', '2016-10-08 10:25:39')[0m
  [1m[35m (2.9ms)[0m  COMMIT
  [1m[36mPaper Load (0.5ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Graph Aggregation'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.4ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Graph Aggregation', 'Graph aggregation is the process of computing a single output graph that constitutes a good compromise between several input graphs, each provided by a different source. One needs to perform graph aggregation in a wide variety of situations, e.g., when applying a voting rule (graphs as preference orders), when consolidating conflicting views regarding the relationships between arguments in a debate (graphs as abstract argumentation frameworks), or when computing a consensus between several alternative clusterings of a given dataset (graphs as equivalence relations). In this paper, we introduce a formal framework for graph aggregation grounded in social choice theory. Our focus is on understanding which properties shared by the individual input graphs will transfer to the output graph returned by a given aggregation rule. We consider both common properties of graphs, such as transitivity and reflexivity, and arbitrary properties expressible in certain fragments of modal logic. Our results establish several connections between the types of properties preserved under aggregation and the choice-theoretic axioms satisfied by the rules used. The most important of these results is a powerful impossibility theorem that generalises Arrow\'s seminal result for the aggregation of preference orders to a large collection of different types of graphs.', 'cs.AI', '2016-09-13T11:08:23Z', 'http://arxiv.org/abs/1609.03765v1', '2016-10-08 10:25:39', '2016-10-08 10:25:39')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPublish Load (0.3ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 12[0m
  [1m[35mAuthor Load (0.3ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Ulle Endriss'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.4ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Ulle Endriss', '2016-10-08 10:25:39', '2016-10-08 10:25:39')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (41, 12, 0, '2016-10-08 10:25:39', '2016-10-08 10:25:39')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (0.4ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Umberto Grandi'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Umberto Grandi', '2016-10-08 10:25:39', '2016-10-08 10:25:39')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (42, 12, 1, '2016-10-08 10:25:39', '2016-10-08 10:25:39')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.3ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Joint Extraction of Events and Entities within a Document Context'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.4ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Joint Extraction of Events and Entities within a Document Context', 'Events and entities are closely related; entities are often actors or participants in events and events without entities are uncommon. The interpretation of events and entities is highly contextually dependent. Existing work in information extraction typically models events separately from entities, and performs inference at the sentence level, ignoring the rest of the document. In this paper, we propose a novel approach that models the dependencies among variables of events, entities, and their relations, and performs joint inference of these variables across a document. The goal is to enable access to document-level contextual information and facilitate context-aware predictions. We demonstrate that our approach substantially outperforms the state-of-the-art methods for event extraction as well as a strong baseline for entity extraction.', 'cs.CL', '2016-09-12T23:27:37Z', 'http://arxiv.org/abs/1609.03632v1', '2016-10-08 10:25:39', '2016-10-08 10:25:39')
  [1m[36m (3.1ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (0.4ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 13
  [1m[36mAuthor Load (0.4ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Bishan Yang'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.4ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Bishan Yang', '2016-10-08 10:25:39', '2016-10-08 10:25:39')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (43, 13, 0, '2016-10-08 10:25:39', '2016-10-08 10:25:39')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.3ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Tom Mitchell'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Tom Mitchell', '2016-10-08 10:25:39', '2016-10-08 10:25:39')
  [1m[36m (0.6ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (44, 13, 1, '2016-10-08 10:25:39', '2016-10-08 10:25:39')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (0.3ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Logical Induction'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Logical Induction', 'We present a computable algorithm that assigns probabilities to every logical statement in a given formal language, and refines those probabilities over time. For instance, if the language is Peano arithmetic, it assigns probabilities to all arithmetical statements, including claims about the twin prime conjecture, the outputs of long-running computations, and its own probabilities. We show that it satisfies a number of intuitive desiderata, including: (1) it learns to predict patterns of truth and falsehood in logical statements, often long before having the resources to evaluate the statements, so long as the patterns can be written down in polynomial time; (2) it learns to use appropriate statistical summaries to predict sequences of statements whose truth values appear pseudorandom; and (3) it learns to have accurate beliefs about its own current beliefs, in a manner that avoids the standard paradoxes of self-reference. For example, if a given computer program only ever produces outputs in a certain range, a logical inductor learns this fact in a timely manner; and if late digits in the decimal expansion of $\\pi$ are difficult to predict, then a logical inductor learns to assign $\\approx 10\\%$ probability to \"the $n$th digit of $\\pi$ is a 7\" for large $n$. Logical inductors also learn to trust their future beliefs more than their current beliefs, and their beliefs are coherent in the limit (whenever $\\phi \\implies \\psi$, $\\mathbb{P}_\\infty(\\phi) \\le \\mathbb{P}_\\infty(\\psi)$, and so on); and logical inductors strictly dominate the universal semimeasure in the limit. These properties and many others all follow from a single logical induction criterion, which is motivated by a series of stock trading analogies. Roughly speaking, each logical sentence $\\phi$ is associated with a stock that is worth \\$1 per share if $\\phi$ is true and nothing otherwise, and we interpret the [...]', 'cs.AI', '2016-09-12T19:30:56Z', 'http://arxiv.org/abs/1609.03543v1', '2016-10-08 10:25:39', '2016-10-08 10:25:39')[0m
  [1m[35m (3.0ms)[0m  COMMIT
  [1m[36mPublish Load (0.4ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 14[0m
  [1m[35mAuthor Load (0.4ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Scott Garrabrant'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Scott Garrabrant', '2016-10-08 10:25:39', '2016-10-08 10:25:39')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (45, 14, 0, '2016-10-08 10:25:39', '2016-10-08 10:25:39')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (0.4ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Tsvi Benson-Tilsen'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Tsvi Benson-Tilsen', '2016-10-08 10:25:39', '2016-10-08 10:25:39')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (46, 14, 1, '2016-10-08 10:25:39', '2016-10-08 10:25:39')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.4ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Andrew Critch'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Andrew Critch', '2016-10-08 10:25:39', '2016-10-08 10:25:39')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (47, 14, 2, '2016-10-08 10:25:39', '2016-10-08 10:25:39')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (0.4ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Nate Soares'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Nate Soares', '2016-10-08 10:25:39', '2016-10-08 10:25:39')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (48, 14, 3, '2016-10-08 10:25:39', '2016-10-08 10:25:39')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.4ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Jessica Taylor'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Jessica Taylor', '2016-10-08 10:25:39', '2016-10-08 10:25:39')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (49, 14, 4, '2016-10-08 10:25:39', '2016-10-08 10:25:39')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPaper Load (0.3ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'ZaliQL: A SQL-Based Framework for Drawing Causal Inference from Big Data'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('ZaliQL: A SQL-Based Framework for Drawing Causal Inference from Big Data', 'Causal inference from observational data is a subject of active research and development in statistics and computer science. Many toolkits have been developed for this purpose that depends on statistical software. However, these toolkits do not scale to large datasets. In this paper we describe a suite of techniques for expressing causal inference tasks from observational data in SQL. This suite supports the state-of-the-art methods for causal inference and run at scale within a database engine. In addition, we introduce several optimization techniques that significantly speedup causal inference, both in the online and offline setting. We evaluate the quality and performance of our techniques by experiments of real datasets.', 'cs.DB', '2016-09-12T19:24:14Z', 'http://arxiv.org/abs/1609.03540v2', '2016-10-08 10:25:39', '2016-10-08 10:25:39')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPublish Load (0.3ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 15[0m
  [1m[35mAuthor Load (0.4ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Babak Salimi'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Babak Salimi', '2016-10-08 10:25:39', '2016-10-08 10:25:39')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (50, 15, 0, '2016-10-08 10:25:39', '2016-10-08 10:25:39')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.4ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Dan Suciu'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Dan Suciu', '2016-10-08 10:25:39', '2016-10-08 10:25:39')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (51, 15, 1, '2016-10-08 10:25:39', '2016-10-08 10:25:39')
  [1m[36m (2.9ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.4ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Reactive Multi-Context Systems: Heterogeneous Reasoning in Dynamic Environments'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Reactive Multi-Context Systems: Heterogeneous Reasoning in Dynamic Environments', 'In this paper we introduce reactive multi-context systems (rMCSs), a framework for reactive reasoning in the presence of heterogeneous knowledge sources. In particular, we show how to integrate data streams into multi-context systems (MCSs) and how to model the dynamics of the systems, based on two types of bridge rules. We illustrate how several typical problems arising in the context of stream reasoning can be handled using our framework. Reasoning based on multiple knowledge sources that need to be integrated faces the problem of potential inconsistencies. We discuss various methods for handling inconsistencies, with a special focus on non-existence of equilibria. In particular, we show how methods developed for managed MCSs can be generalized to rMCSs. We also study the issue of nondeterminism in rMCSs. One way of avoiding nondeterminism is by applying an alternative, skeptical semantics. We show how such a semantics, called well-founded semantics, can be defined for rMCSs, and what the effect of using this semantics instead of the original one is. We investigate the complexity of various reasoning problems related to rMCSs. Finally, we discuss related work, with a special focus on two of the most relevant approaches w.r.t. stream reasoning, namely LARS and STARQL.', 'cs.LO', '2016-09-12T15:12:00Z', 'http://arxiv.org/abs/1609.03438v1', '2016-10-08 10:25:39', '2016-10-08 10:25:39')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (0.3ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 16
  [1m[36mAuthor Load (0.3ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Gerhard Brewka'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Gerhard Brewka', '2016-10-08 10:25:39', '2016-10-08 10:25:39')[0m
  [1m[35m (1.7ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (52, 16, 0, '2016-10-08 10:25:39', '2016-10-08 10:25:39')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.4ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Stefan Ellmauthaler'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Stefan Ellmauthaler', '2016-10-08 10:25:39', '2016-10-08 10:25:39')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (53, 16, 1, '2016-10-08 10:25:39', '2016-10-08 10:25:39')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.3ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Ricardo Gonçalves'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Ricardo Gonçalves', '2016-10-08 10:25:39', '2016-10-08 10:25:39')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (54, 16, 2, '2016-10-08 10:25:39', '2016-10-08 10:25:39')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.4ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Matthias Knorr'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Matthias Knorr', '2016-10-08 10:25:39', '2016-10-08 10:25:39')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (55, 16, 3, '2016-10-08 10:25:39', '2016-10-08 10:25:39')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.2ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'João Leite'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('João Leite', '2016-10-08 10:25:39', '2016-10-08 10:25:39')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (56, 16, 4, '2016-10-08 10:25:39', '2016-10-08 10:25:39')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.4ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Jörg Pührer'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Jörg Pührer', '2016-10-08 10:25:39', '2016-10-08 10:25:39')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (57, 16, 5, '2016-10-08 10:25:39', '2016-10-08 10:25:39')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (0.3ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'First-Order Bayesian Network Specifications Capture the Complexity Class PP'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('First-Order Bayesian Network Specifications Capture the Complexity Class PP', 'The point of this note is to prove that a language is in the complexity class PP if and only if the strings of the language encode valid inferences in a Bayesian network defined using function-free first-order logic with equality.', 'cs.AI', '2016-09-12T15:11:58Z', 'http://arxiv.org/abs/1609.03437v1', '2016-10-08 10:25:39', '2016-10-08 10:25:39')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPublish Load (0.4ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 17[0m
  [1m[35mAuthor Load (0.3ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Fabio Gagliardi Cozman'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Fabio Gagliardi Cozman', '2016-10-08 10:25:39', '2016-10-08 10:25:39')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (58, 17, 0, '2016-10-08 10:25:39', '2016-10-08 10:25:39')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (0.3ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Modelling Creativity: Identifying Key Components through a Corpus-Based Approach'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Modelling Creativity: Identifying Key Components through a Corpus-Based Approach', 'Creativity is a complex, multi-faceted concept encompassing a variety of related aspects, abilities, properties and behaviours. If we wish to study creativity scientifically, then a tractable and well-articulated model of creativity is required. Such a model would be of great value to researchers investigating the nature of creativity and in particular, those concerned with the evaluation of creative practice. This paper describes a unique approach to developing a suitable model of how creative behaviour emerges that is based on the words people use to describe the concept. Using techniques from the field of statistical natural language processing, we identify a collection of fourteen key components of creativity through an analysis of a corpus of academic papers on the topic. Words are identified which appear significantly often in connection with discussions of the concept. Using a measure of lexical similarity to help cluster these words, a number of distinct themes emerge, which collectively contribute to a comprehensive and multi-perspective model of creativity. The components provide an ontology of creativity: a set of building blocks which can be used to model creative practice in a variety of domains. The components have been employed in two case studies to evaluate the creativity of computational systems and have proven useful in articulating achievements of this work and directions for further research.', 'cs.CL', '2016-09-12T11:58:59Z', 'http://arxiv.org/abs/1609.03357v1', '2016-10-08 10:25:39', '2016-10-08 10:25:39')[0m
  [1m[35m (3.0ms)[0m  COMMIT
  [1m[36mPublish Load (0.5ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 18[0m
  [1m[35mAuthor Load (0.4ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Anna Jordanous'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Anna Jordanous', '2016-10-08 10:25:39', '2016-10-08 10:25:39')
  [1m[36m (0.8ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (59, 18, 0, '2016-10-08 10:25:39', '2016-10-08 10:25:39')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.4ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Bill Keller'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Bill Keller', '2016-10-08 10:25:39', '2016-10-08 10:25:39')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (60, 18, 1, '2016-10-08 10:25:39', '2016-10-08 10:25:39')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.3ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'On Generation of Time-based Label Refinements'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.8ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('On Generation of Time-based Label Refinements', 'Process mining is a research field focused on the analysis of event data with the aim of extracting insights in processes. Applying process mining techniques on data from smart home environments has the potential to provide valuable insights in (un)healthy habits and to contribute to ambient assisted living solutions. Finding the right event labels to enable application of process mining techniques is however far from trivial, as simply using the triggering sensor as the label for sensor events results in uninformative models that allow for too much behavior (overgeneralizing). Refinements of sensor level event labels suggested by domain experts have shown to enable discovery of more precise and insightful process models. However, there exist no automated approach to generate refinements of event labels in the context of process mining. In this paper we propose a framework for automated generation of label refinements based on the time attribute of events. We show on a case study with real life smart home event data that behaviorally more specific, and therefore more insightful, process models can be found by using automatically generated refined labels in process discovery.', 'stat.ME', '2016-09-12T10:25:29Z', 'http://arxiv.org/abs/1609.03333v1', '2016-10-08 10:25:39', '2016-10-08 10:25:39')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (0.3ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 19
  [1m[36mAuthor Load (0.3ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Niek Tax'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Niek Tax', '2016-10-08 10:25:39', '2016-10-08 10:25:39')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (61, 19, 0, '2016-10-08 10:25:39', '2016-10-08 10:25:39')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.4ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Emin Alasgarov'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Emin Alasgarov', '2016-10-08 10:25:39', '2016-10-08 10:25:39')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (62, 19, 1, '2016-10-08 10:25:39', '2016-10-08 10:25:39')[0m
  [1m[35m (2.9ms)[0m  COMMIT
  [1m[36mAuthor Load (0.5ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Natalia Sidorova'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Natalia Sidorova', '2016-10-08 10:25:39', '2016-10-08 10:25:39')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (63, 19, 2, '2016-10-08 10:25:39', '2016-10-08 10:25:39')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.4ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Reinder Haakma'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Reinder Haakma', '2016-10-08 10:25:39', '2016-10-08 10:25:39')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (64, 19, 3, '2016-10-08 10:25:39', '2016-10-08 10:25:39')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPaper Load (0.4ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Knowledge as a Teacher: Knowledge-Guided Structural Attention Networks'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Knowledge as a Teacher: Knowledge-Guided Structural Attention Networks', 'Natural language understanding (NLU) is a core component of a spoken dialogue system. Recently recurrent neural networks (RNN) obtained strong results on NLU due to their superior ability of preserving sequential information over time. Traditionally, the NLU module tags semantic slots for utterances considering their flat structures, as the underlying RNN structure is a linear chain. However, natural language exhibits linguistic properties that provide rich, structured information for better understanding. This paper introduces a novel model, knowledge-guided structural attention networks (K-SAN), a generalization of RNN to additionally incorporate non-flat network topologies guided by prior knowledge. There are two characteristics: 1) important substructures can be captured from small training data, allowing the model to generalize to previously unseen test data; 2) the model automatically figures out the salient substructures that are essential to predict the semantic tags of the given sentences, so that the understanding performance can be improved. The experiments on the benchmark Air Travel Information System (ATIS) data show that the proposed K-SAN architecture can effectively extract salient knowledge from substructures with an attention mechanism, and outperform the performance of the state-of-the-art neural network based frameworks.', 'cs.AI', '2016-09-12T07:29:59Z', 'http://arxiv.org/abs/1609.03286v1', '2016-10-08 10:25:39', '2016-10-08 10:25:39')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPublish Load (0.3ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 20[0m
  [1m[35mAuthor Load (0.3ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Yun-Nung Chen'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Yun-Nung Chen', '2016-10-08 10:25:39', '2016-10-08 10:25:39')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (65, 20, 0, '2016-10-08 10:25:39', '2016-10-08 10:25:39')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (0.4ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Dilek Hakkani-Tur'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Dilek Hakkani-Tur', '2016-10-08 10:25:39', '2016-10-08 10:25:39')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (66, 20, 1, '2016-10-08 10:25:39', '2016-10-08 10:25:39')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.3ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Gokhan Tur'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Gokhan Tur', '2016-10-08 10:25:39', '2016-10-08 10:25:39')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (67, 20, 2, '2016-10-08 10:25:39', '2016-10-08 10:25:39')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (0.3ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Asli Celikyilmaz'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Asli Celikyilmaz', '2016-10-08 10:25:39', '2016-10-08 10:25:39')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (68, 20, 3, '2016-10-08 10:25:39', '2016-10-08 10:25:39')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.4ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Jianfeng Gao'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Jianfeng Gao', '2016-10-08 10:25:39', '2016-10-08 10:25:39')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (69, 20, 4, '2016-10-08 10:25:39', '2016-10-08 10:25:39')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.3ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Li Deng'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Li Deng', '2016-10-08 10:25:39', '2016-10-08 10:25:39')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (70, 20, 5, '2016-10-08 10:25:39', '2016-10-08 10:25:39')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.3ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'DESPOT: Online POMDP Planning with Regularization'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('DESPOT: Online POMDP Planning with Regularization', 'The partially observable Markov decision process (POMDP) provides a principled general framework for planning under uncertainty, but solving POMDPs optimally is computationally intractable, due to the \"curse of dimensionality\" and the \"curse of history\". To overcome these challenges, we introduce the Determinized Sparse Partially Observable Tree (DESPOT), a sparse approximation of the standard belief tree, for online planning under uncertainty. A DESPOT focuses online planning on a set of randomly sampled scenarios and compactly captures the \"execution\" of all policies under these scenarios. We show that the best policy obtained from a DESPOT is near-optimal, with a regret bound that depends on the representation size of the optimal policy. Leveraging this result, we give an anytime online planning algorithm, which searches a DESPOT for a policy that optimizes a regularized objective function. Regularization balances the estimated value of a policy under the sampled scenarios and the policy size, thus avoiding overfitting. The algorithm demonstrates strong experimental results, compared with some of the best online POMDP algorithms available. It has also been incorporated into an autonomous driving system for realtime vehicle control. The source code for the algorithm is available at http: //bigbird.comp.nus.edu.sg/pmwiki/farm/appl/.', 'cs.AI', '2016-09-12T02:12:13Z', 'http://arxiv.org/abs/1609.03250v1', '2016-10-08 10:25:39', '2016-10-08 10:25:39')
  [1m[36m (3.0ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (0.4ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 21
  [1m[36mAuthor Load (0.4ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Nan Ye'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.3ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Nan Ye', '2016-10-08 10:25:39', '2016-10-08 10:25:39')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (71, 21, 0, '2016-10-08 10:25:39', '2016-10-08 10:25:39')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.4ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Adhiraj Somani'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Adhiraj Somani', '2016-10-08 10:25:39', '2016-10-08 10:25:39')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (72, 21, 1, '2016-10-08 10:25:39', '2016-10-08 10:25:39')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.4ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'David Hsu'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('David Hsu', '2016-10-08 10:25:39', '2016-10-08 10:25:39')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (73, 21, 2, '2016-10-08 10:25:39', '2016-10-08 10:25:39')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.3ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Wee Sun Lee'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Wee Sun Lee', '2016-10-08 10:25:39', '2016-10-08 10:25:39')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (74, 21, 3, '2016-10-08 10:25:39', '2016-10-08 10:25:39')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPaper Load (0.3ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Reduced Space and Faster Convergence in Imperfect-Information Games via Regret-Based Pruning'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Reduced Space and Faster Convergence in Imperfect-Information Games via Regret-Based Pruning', 'Counterfactual Regret Minimization (CFR) is the most popular iterative algorithm for solving zero-sum imperfect-information games. Regret-Based Pruning (RBP) is an improvement that allows poorly-performing actions to be temporarily pruned, thus speeding up CFR. We introduce Total RBP, a new form of RBP that reduces the space requirements of CFR as actions are pruned. We prove that in zero-sum games it asymptotically prunes any action that is not part of a best response to some Nash equilibrium. This leads to provably faster convergence and lower space requirements. Experiments show that Total RBP results in an order of magnitude reduction in space, and the reduction factor increases with game size.', 'cs.GT', '2016-09-12T00:30:54Z', 'http://arxiv.org/abs/1609.03234v1', '2016-10-08 10:25:39', '2016-10-08 10:25:39')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPublish Load (0.4ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 22[0m
  [1m[35mAuthor Load (0.3ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Noam Brown'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Noam Brown', '2016-10-08 10:25:39', '2016-10-08 10:25:39')
  [1m[36m (0.6ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (75, 22, 0, '2016-10-08 10:25:39', '2016-10-08 10:25:39')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (0.4ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Tuomas Sandholm'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Tuomas Sandholm', '2016-10-08 10:25:39', '2016-10-08 10:25:39')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (76, 22, 1, '2016-10-08 10:25:39', '2016-10-08 10:25:39')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.3ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Wav2Letter: an End-to-End ConvNet-based Speech Recognition System'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Wav2Letter: an End-to-End ConvNet-based Speech Recognition System', 'This paper presents a simple end-to-end model for speech recognition, combining a convolutional network based acoustic model and a graph decoding. It is trained to output letters, with transcribed speech, without the need for force alignment of phonemes. We introduce an automatic segmentation criterion for training from sequence annotation without alignment that is on par with CTC while being simpler. We show competitive results in word error rate on the Librispeech corpus with MFCC features, and promising results from raw waveform.', 'cs.LG', '2016-09-11T18:56:53Z', 'http://arxiv.org/abs/1609.03193v2', '2016-10-08 10:25:39', '2016-10-08 10:25:39')
  [1m[36m (2.9ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (0.4ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 23
  [1m[36mAuthor Load (0.3ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Ronan Collobert'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Ronan Collobert', '2016-10-08 10:25:39', '2016-10-08 10:25:39')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (77, 23, 0, '2016-10-08 10:25:39', '2016-10-08 10:25:39')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.4ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Christian Puhrsch'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Christian Puhrsch', '2016-10-08 10:25:39', '2016-10-08 10:25:39')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (78, 23, 1, '2016-10-08 10:25:39', '2016-10-08 10:25:39')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.3ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Gabriel Synnaeve'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Gabriel Synnaeve', '2016-10-08 10:25:39', '2016-10-08 10:25:39')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (79, 23, 2, '2016-10-08 10:25:39', '2016-10-08 10:25:39')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.3ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'A centralized reinforcement learning method for multi-agent job scheduling in Grid'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('A centralized reinforcement learning method for multi-agent job scheduling in Grid', 'One of the main challenges in Grid systems is designing an adaptive, scalable, and model-independent method for job scheduling to achieve a desirable degree of load balancing and system efficiency. Centralized job scheduling methods have some drawbacks, such as single point of failure and lack of scalability. Moreover, decentralized methods require a coordination mechanism with limited communications. In this paper, we propose a multi-agent approach to job scheduling in Grid, named Centralized Learning Distributed Scheduling (CLDS), by utilizing the reinforcement learning framework. The CLDS is a model free approach that uses the information of jobs and their completion time to estimate the efficiency of resources. In this method, there are a learner agent and several scheduler agents that perform the task of learning and job scheduling with the use of a coordination strategy that maintains the communication cost at a limited level. We evaluated the efficiency of the CLDS method by designing and performing a set of experiments on a simulated Grid system under different system scales and loads. The results show that the CLDS can effectively balance the load of system even in large scale and heavy loaded Grids, while maintains its adaptive performance and scalability.', 'cs.DC', '2016-09-11T13:03:21Z', 'http://arxiv.org/abs/1609.03157v1', '2016-10-08 10:25:39', '2016-10-08 10:25:39')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (0.3ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 24
  [1m[36mAuthor Load (0.4ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Milad Moradi'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Milad Moradi', '2016-10-08 10:25:39', '2016-10-08 10:25:39')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (80, 24, 0, '2016-10-08 10:25:39', '2016-10-08 10:25:39')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.3ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Relational Models'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Relational Models', 'We provide a survey on relational models. Relational models describe complete networked {domains by taking into account global dependencies in the data}. Relational models can lead to more accurate predictions if compared to non-relational machine learning approaches. Relational models typically are based on probabilistic graphical models, e.g., Bayesian networks, Markov networks, or latent variable models. Relational models have applications in social networks analysis, the modeling of knowledge graphs, bioinformatics, recommendation systems, natural language processing, medical decision support, and linked data.', 'cs.AI', '2016-09-11T10:14:18Z', 'http://arxiv.org/abs/1609.03145v1', '2016-10-08 10:25:39', '2016-10-08 10:25:39')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (0.2ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 25
  [1m[36mAuthor Load (0.3ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Volker Tresp'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Volker Tresp', '2016-10-08 10:25:39', '2016-10-08 10:25:39')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (81, 25, 0, '2016-10-08 10:25:39', '2016-10-08 10:25:39')
  [1m[36m (4.2ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.5ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Maximilian Nickel'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.4ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Maximilian Nickel', '2016-10-08 10:25:39', '2016-10-08 10:25:39')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (82, 25, 1, '2016-10-08 10:25:39', '2016-10-08 10:25:39')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPaper Load (0.3ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'A Tube-and-Droplet-based Approach for Representing and Analyzing Motion Trajectories'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('A Tube-and-Droplet-based Approach for Representing and Analyzing Motion Trajectories', 'Trajectory analysis is essential in many applications. In this paper, we address the problem of representing motion trajectories in a highly informative way, and consequently utilize it for analyzing trajectories. Our approach first leverages the complete information from given trajectories to construct a thermal transfer field which provides a context-rich way to describe the global motion pattern in a scene. Then, a 3D tube is derived which depicts an input trajectory by integrating its surrounding motion patterns contained in the thermal transfer field. The 3D tube effectively: 1) maintains the movement information of a trajectory, 2) embeds the complete contextual motion pattern around a trajectory, 3) visualizes information about a trajectory in a clear and unified way. We further introduce a droplet-based process. It derives a droplet vector from a 3D tube, so as to characterize the high-dimensional 3D tube information in a simple but effective way. Finally, we apply our tube-and-droplet representation to trajectory analysis applications including trajectory clustering, trajectory classification & abnormality detection, and 3D action recognition. Experimental comparisons with state-of-the-art algorithms demonstrate the effectiveness of our approach.', 'cs.CV', '2016-09-10T14:33:06Z', 'http://arxiv.org/abs/1609.03058v1', '2016-10-08 10:25:39', '2016-10-08 10:25:39')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPublish Load (0.4ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 26[0m
  [1m[35mAuthor Load (0.3ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Weiyao Lin'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Weiyao Lin', '2016-10-08 10:25:39', '2016-10-08 10:25:39')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (83, 26, 0, '2016-10-08 10:25:39', '2016-10-08 10:25:39')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.4ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Yang Zhou'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Yang Zhou', '2016-10-08 10:25:39', '2016-10-08 10:25:39')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (84, 26, 1, '2016-10-08 10:25:39', '2016-10-08 10:25:39')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.4ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Hongteng Xu'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Hongteng Xu', '2016-10-08 10:25:39', '2016-10-08 10:25:39')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (85, 26, 2, '2016-10-08 10:25:39', '2016-10-08 10:25:39')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (0.4ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Junchi Yan'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Junchi Yan', '2016-10-08 10:25:39', '2016-10-08 10:25:39')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (86, 26, 3, '2016-10-08 10:25:39', '2016-10-08 10:25:39')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.4ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Mingliang Xu'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Mingliang Xu', '2016-10-08 10:25:39', '2016-10-08 10:25:39')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (87, 26, 4, '2016-10-08 10:25:39', '2016-10-08 10:25:39')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (0.4ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Jianxin Wu'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Jianxin Wu', '2016-10-08 10:25:39', '2016-10-08 10:25:39')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (88, 26, 5, '2016-10-08 10:25:39', '2016-10-08 10:25:39')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.3ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Zicheng Liu'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Zicheng Liu', '2016-10-08 10:25:39', '2016-10-08 10:25:39')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (89, 26, 6, '2016-10-08 10:25:39', '2016-10-08 10:25:39')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (0.3ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Episodic Exploration for Deep Deterministic Policies: An Application to StarCraft Micromanagement Tasks'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Episodic Exploration for Deep Deterministic Policies: An Application to StarCraft Micromanagement Tasks', 'We consider scenarios from the real-time strategy game StarCraft as new benchmarks for reinforcement learning algorithms. We propose micromanagement tasks, which present the problem of the short-term, low-level control of army members during a battle. From a reinforcement learning point of view, these scenarios are challenging because the state-action space is very large, and because there is no obvious feature representation for the state-action evaluation function. We describe our approach to tackle the micromanagement scenarios with deep neural network controllers from raw state features given by the game engine. In addition, we present a heuristic reinforcement learning algorithm which combines direct exploration in the policy space and backpropagation. This algorithm allows for the collection of traces for learning using deterministic policies, which appears much more efficient than, for example, {\\epsilon}-greedy exploration. Experiments show that with this algorithm, we successfully learn non-trivial strategies for scenarios with armies of up to 15 agents, where both Q-learning and REINFORCE struggle.', 'cs.AI', '2016-09-10T02:13:02Z', 'http://arxiv.org/abs/1609.02993v2', '2016-10-08 10:25:39', '2016-10-08 10:25:39')[0m
  [1m[35m (2.9ms)[0m  COMMIT
  [1m[36mPublish Load (0.5ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 27[0m
  [1m[35mAuthor Load (0.5ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Nicolas Usunier'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Nicolas Usunier', '2016-10-08 10:25:39', '2016-10-08 10:25:39')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (90, 27, 0, '2016-10-08 10:25:39', '2016-10-08 10:25:39')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (0.4ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Gabriel Synnaeve'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36m (0.2ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (79, 27, 1, '2016-10-08 10:25:39', '2016-10-08 10:25:39')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.3ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Zeming Lin'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Zeming Lin', '2016-10-08 10:25:39', '2016-10-08 10:25:39')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (91, 27, 2, '2016-10-08 10:25:39', '2016-10-08 10:25:39')
  [1m[36m (0.6ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.4ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Soumith Chintala'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Soumith Chintala', '2016-10-08 10:25:39', '2016-10-08 10:25:39')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (92, 27, 3, '2016-10-08 10:25:39', '2016-10-08 10:25:39')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (0.3ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'An Integrated Classification Model for Financial Data Mining'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('An Integrated Classification Model for Financial Data Mining', 'Nowadays, financial data analysis is becoming increasingly important in the business market. As companies collect more and more data from daily operations, they expect to extract useful knowledge from existing collected data to help make reasonable decisions for new customer requests, e.g. user credit category, churn analysis, real estate analysis, etc. Financial institutes have applied different data mining techniques to enhance their business performance. However, simple ap-proach of these techniques could raise a performance issue. Besides, there are very few general models for both understanding and forecasting different finan-cial fields. We present in this paper a new classification model for analyzing fi-nancial data. We also evaluate this model with different real-world data to show its performance.', 'cs.AI', '2016-09-09T23:45:19Z', 'http://arxiv.org/abs/1609.02976v1', '2016-10-08 10:25:39', '2016-10-08 10:25:39')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPublish Load (0.3ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 28[0m
  [1m[35mAuthor Load (0.3ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Fan Cai'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Fan Cai', '2016-10-08 10:25:39', '2016-10-08 10:25:39')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (93, 28, 0, '2016-10-08 10:25:39', '2016-10-08 10:25:39')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.3ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Nhien-An Le-Khac'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Nhien-An Le-Khac', '2016-10-08 10:25:39', '2016-10-08 10:25:39')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (94, 28, 1, '2016-10-08 10:25:39', '2016-10-08 10:25:39')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.4ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'M-T. Kechadi'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('M-T. Kechadi', '2016-10-08 10:25:39', '2016-10-08 10:25:39')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (95, 28, 2, '2016-10-08 10:25:39', '2016-10-08 10:25:39')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (0.4ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Measuring Player\'s Behaviour Change over Time in Public Goods Game'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Measuring Player\'s Behaviour Change over Time in Public Goods Game', 'An important issue in public goods game is whether player\'s behaviour changes over time, and if so, how significant it is. In this game players can be classified into different groups according to the level of their participation in the public good. This problem can be considered as a concept drift problem by asking the amount of change that happens to the clusters of players over a sequence of game rounds. In this study we present a method for measuring changes in clusters with the same items over discrete time points using external clustering validation indices and area under the curve. External clustering indices were originally used to measure the difference between suggested clusters in terms of clustering algorithms and ground truth labels for items provided by experts. Instead of different cluster label comparison, we use these indices to compare between clusters of any two consecutive time points or between the first time point and the remaining time points to measure the difference between clusters through time points. In theory, any external clustering indices can be used to measure changes for any traditional (non-temporal) clustering algorithm, due to the fact that any time point alone is not carrying any temporal information. For the public goods game, our results indicate that the players are changing over time but the change is smooth and relatively constant between any two time points.', 'cs.AI', '2016-09-09T07:20:01Z', 'http://arxiv.org/abs/1609.02672v1', '2016-10-08 10:25:39', '2016-10-08 10:25:39')[0m
  [1m[35m (3.0ms)[0m  COMMIT
  [1m[36mPublish Load (0.5ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 29[0m
  [1m[35mAuthor Load (0.4ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Polla Fattah'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.4ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Polla Fattah', '2016-10-08 10:25:39', '2016-10-08 10:25:39')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (96, 29, 0, '2016-10-08 10:25:39', '2016-10-08 10:25:39')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (0.4ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Uwe Aickelin'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Uwe Aickelin', '2016-10-08 10:25:39', '2016-10-08 10:25:39')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (97, 29, 1, '2016-10-08 10:25:39', '2016-10-08 10:25:39')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.4ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Christian Wagner'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Christian Wagner', '2016-10-08 10:25:39', '2016-10-08 10:25:39')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (98, 29, 2, '2016-10-08 10:25:39', '2016-10-08 10:25:39')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (0.3ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Some Advances in Role Discovery in Graphs'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Some Advances in Role Discovery in Graphs', 'Role discovery in graphs is an emerging area that allows analysis of complex graphs in an intuitive way. In contrast to other graph prob- lems such as community discovery, which finds groups of highly connected nodes, the role discovery problem finds groups of nodes that share similar graph topological structure. However, existing work so far has two severe limitations that prevent its use in some domains. Firstly, it is completely unsupervised which is undesirable for a number of reasons. Secondly, most work is limited to a single relational graph. We address both these lim- itations in an intuitive and easy to implement alternating least squares framework. Our framework allows convex constraints to be placed on the role discovery problem which can provide useful supervision. In par- ticular we explore supervision to enforce i) sparsity, ii) diversity and iii) alternativeness. We then show how to lift this work for multi-relational graphs. A natural representation of a multi-relational graph is an order 3 tensor (rather than a matrix) and that a Tucker decomposition allows us to find complex interactions between collections of entities (E-groups) and the roles they play for a combination of relations (R-groups). Existing Tucker decomposition methods in tensor toolboxes are not suited for our purpose, so we create our own algorithm that we demonstrate is pragmatically useful.', 'cs.AI', '2016-09-09T03:13:55Z', 'http://arxiv.org/abs/1609.02646v1', '2016-10-08 10:25:39', '2016-10-08 10:25:39')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPublish Load (0.3ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 30[0m
  [1m[35mAuthor Load (0.3ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Sean Gilpin'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Sean Gilpin', '2016-10-08 10:25:39', '2016-10-08 10:25:39')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (99, 30, 0, '2016-10-08 10:25:39', '2016-10-08 10:25:39')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (0.4ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Chia-Tung Kuo'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.4ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Chia-Tung Kuo', '2016-10-08 10:25:39', '2016-10-08 10:25:39')[0m
  [1m[35m (3.0ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (100, 30, 1, '2016-10-08 10:25:39', '2016-10-08 10:25:39')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.4ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Tina Eliassi-Rad'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Tina Eliassi-Rad', '2016-10-08 10:25:39', '2016-10-08 10:25:39')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (101, 30, 2, '2016-10-08 10:25:40', '2016-10-08 10:25:40')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.3ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Ian Davidson'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Ian Davidson', '2016-10-08 10:25:40', '2016-10-08 10:25:40')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (102, 30, 3, '2016-10-08 10:25:40', '2016-10-08 10:25:40')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.3ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Towards Better Response Times and Higher-Quality Queries in Interactive Knowledge Base Debugging'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.7ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Towards Better Response Times and Higher-Quality Queries in Interactive Knowledge Base Debugging', 'Many AI applications rely on knowledge encoded in a locigal knowledge base (KB). The most essential benefit of such logical KBs is the opportunity to perform automatic reasoning which however requires a KB to meet some minimal quality criteria such as consistency. Without adequate tool assistance, the task of resolving such violated quality criteria in a KB can be extremely hard, especially when the problematic KB is large and complex. To this end, interactive KB debuggers have been introduced which ask a user queries whether certain statements must or must not hold in the intended domain. The given answers help to gradually restrict the search space for KB repairs. Existing interactive debuggers often rely on a pool-based strategy for query computation. A pool of query candidates is precomputed, from which the best candidate according to some query quality criterion is selected to be shown to the user. This often leads to the generation of many unnecessary query candidates and thus to a high number of expensive calls to logical reasoning services. We tackle this issue by an in-depth mathematical analysis of diverse real-valued active learning query selection measures in order to determine qualitative criteria that make a query favorable. These criteria are the key to devising efficient heuristic query search methods. The proposed methods enable for the first time a completely reasoner-free query generation for interactive KB debugging while at the same time guaranteeing optimality conditions, e.g. minimal cardinality or best understandability for the user, of the generated query that existing methods cannot realize. Further, we study different relations between active learning measures. The obtained picture gives a hint about which measures are more favorable in which situation or which measures always lead to the same outcomes, based on given types of queries.', 'cs.AI', '2016-09-08T20:48:32Z', 'http://arxiv.org/abs/1609.02584v1', '2016-10-08 10:25:40', '2016-10-08 10:25:40')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (0.3ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 31
  [1m[36mAuthor Load (0.3ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Patrick Rodler'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Patrick Rodler', '2016-10-08 10:25:40', '2016-10-08 10:25:40')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (103, 31, 0, '2016-10-08 10:25:40', '2016-10-08 10:25:40')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.3ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Latest Datasets and Technologies Presented in the Workshop on Grasping and Manipulation Datasets'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.5ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Latest Datasets and Technologies Presented in the Workshop on Grasping and Manipulation Datasets', 'This paper reports the activities and outcomes in the Workshop on Grasping and Manipulation Datasets that was organized under the International Conference on Robotics and Automation (ICRA) 2016. The half day workshop was packed with nine invited talks, 12 interactive presentations, and one panel discussion with ten panelists. This paper summarizes all the talks and presentations and recaps what has been discussed in the panels session. This summary servers as a review of recent developments in data collection in grasping and manipulation. Many of the presentations describe ongoing efforts or explorations that could be achieved and fully available in a year or two. The panel discussion not only commented on the current approaches, but also indicates new directions and focuses. The workshop clearly displayed the importance of quality datasets in robotics and robotic grasping and manipulation field. Hopefully the workshop could motivate larger efforts to create big datasets that are comparable with big datasets in other communities such as computer vision.', 'cs.RO', '2016-09-08T19:01:59Z', 'http://arxiv.org/abs/1609.02531v1', '2016-10-08 10:25:40', '2016-10-08 10:25:40')
  [1m[36m (2.9ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (0.4ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 32
  [1m[36mAuthor Load (0.3ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Matteo Bianchi'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Matteo Bianchi', '2016-10-08 10:25:40', '2016-10-08 10:25:40')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (104, 32, 0, '2016-10-08 10:25:40', '2016-10-08 10:25:40')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.3ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Jeannette Bohg'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Jeannette Bohg', '2016-10-08 10:25:40', '2016-10-08 10:25:40')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (105, 32, 1, '2016-10-08 10:25:40', '2016-10-08 10:25:40')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.4ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Yu Sun'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Yu Sun', '2016-10-08 10:25:40', '2016-10-08 10:25:40')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (106, 32, 2, '2016-10-08 10:25:40', '2016-10-08 10:25:40')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.3ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Ms. Pac-Man Versus Ghost Team CIG 2016 Competition'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Ms. Pac-Man Versus Ghost Team CIG 2016 Competition', 'This paper introduces the revival of the popular Ms. Pac-Man Versus Ghost Team competition. We present an updated game engine with Partial Observability constraints, a new Multi-Agent Systems approach to developing Ghost agents and several sample controllers to ease the development of entries. A restricted communication protocol is provided for the Ghosts, providing a more challenging environment than before. The competition will debut at the IEEE Computational Intelligence and Games Conference 2016. Some preliminary results showing the effects of Partial Observability and the benefits of simple communication are also presented.', 'cs.AI', '2016-09-08T08:15:58Z', 'http://arxiv.org/abs/1609.02316v1', '2016-10-08 10:25:40', '2016-10-08 10:25:40')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (0.4ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 33
  [1m[36mAuthor Load (0.4ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Pier R. Williams'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Pier R. Williams', '2016-10-08 10:25:40', '2016-10-08 10:25:40')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (107, 33, 0, '2016-10-08 10:25:40', '2016-10-08 10:25:40')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.5ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Diego Perez-Liebana'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Diego Perez-Liebana', '2016-10-08 10:25:40', '2016-10-08 10:25:40')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (108, 33, 1, '2016-10-08 10:25:40', '2016-10-08 10:25:40')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.4ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Simon M. Lucas'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Simon M. Lucas', '2016-10-08 10:25:40', '2016-10-08 10:25:40')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (109, 33, 2, '2016-10-08 10:25:40', '2016-10-08 10:25:40')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.3ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Latent Dependency Forest Models'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Latent Dependency Forest Models', 'Probabilistic modeling is one of the foundations of modern machine learning and artificial intelligence. In this paper, we propose a novel type of probabilistic models named latent dependency forest models (LDFMs). A LDFM models the dependencies between random variables with a forest structure that can change dynamically based on the variable values. It is therefore capable of modeling context-specific independence. We parameterize a LDFM using a first-order non-projective dependency grammar. Learning LDFMs from data can be formulated purely as a parameter learning problem, and hence the difficult problem of model structure learning is circumvented. Our experimental results show that LDFMs are competitive with existing probabilistic models.', 'cs.AI', '2016-09-08T00:57:19Z', 'http://arxiv.org/abs/1609.02236v1', '2016-10-08 10:25:40', '2016-10-08 10:25:40')
  [1m[36m (0.6ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (0.4ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 34
  [1m[36mAuthor Load (0.3ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Shanbo Chu'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Shanbo Chu', '2016-10-08 10:25:40', '2016-10-08 10:25:40')[0m
  [1m[35m (3.0ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (110, 34, 0, '2016-10-08 10:25:40', '2016-10-08 10:25:40')
  [1m[36m (1.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.5ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Yong Jiang'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Yong Jiang', '2016-10-08 10:25:40', '2016-10-08 10:25:40')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (111, 34, 1, '2016-10-08 10:25:40', '2016-10-08 10:25:40')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (0.4ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Kewei Tu'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Kewei Tu', '2016-10-08 10:25:40', '2016-10-08 10:25:40')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (112, 34, 2, '2016-10-08 10:25:40', '2016-10-08 10:25:40')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.3ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Backpropagation of Hebbian plasticity for lifelong learning'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Backpropagation of Hebbian plasticity for lifelong learning', 'Hebbian plasticity allows biological agents to learn from their lifetime experience, extending the fixed information provided by evolutionary search. Conversely, backpropagation methods can build high-performance fixed-weights networks, but are not currently equipped to design networks with Hebbian connections. Here we use backpropagation to train fully-differentiable plastic networks, such that backpropagation determines not only the baseline weights, but also the plasticity of each connection. To perform this backpropagation of Hebbian plasticity (BOHP), we derive error gradients for neural networks with Hebbian plastic connections. The equations for these gradients turn out to follow a simple, recursive form. We apply this method to train small networks for simple learning tasks inspired from classical conditioning. We show that, through Hebbian plasticity, the networks perform fast learning of unpredictable environmental features during their lifetime, successfully solving a task that fixed-weight feedforward networks cannot possibly solve. We conclude that backpropagation of Hebbian plasticity offers a powerful model for lifelong learning.', 'cs.NE', '2016-09-08T00:02:20Z', 'http://arxiv.org/abs/1609.02228v1', '2016-10-08 10:25:40', '2016-10-08 10:25:40')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (0.4ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 35
  [1m[36mAuthor Load (0.4ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Thomas Miconi'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Thomas Miconi', '2016-10-08 10:25:40', '2016-10-08 10:25:40')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (113, 35, 0, '2016-10-08 10:25:40', '2016-10-08 10:25:40')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.3ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Fitted Learning: Models with Awareness of their Limits'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Fitted Learning: Models with Awareness of their Limits', 'Though deep learning has pushed the boundaries of classification forward, in recent years hints of the limits of standard classification have begun to emerge. Problems such as fooling, adding new classes over time, and the need to retrain learning models only for small changes to the original problem all point to a potential shortcoming in the classic classification regime, where a comprehensive a priori knowledge of the possible classes or concepts is critical. Without such knowledge, classifiers misjudge the limits of their knowledge and overgeneralization therefore becomes a serious obstacle to consistent performance. In response to these challenges, this paper extends the classic regime by reframing classification instead with the assumption that concepts present in the training set are only a sample of the hypothetical final set of concepts. To bring learning models into this new paradigm, a novel elaboration of standard architectures called the competitive overcomplete output layer (COOL) neural network is introduced. Experiments demonstrate the effectiveness of COOL by applying it to fooling, separable concept learning, one-class neural networks, and standard classification benchmarks. The results suggest that, unlike conventional classifiers, the amount of generalization in COOL networks can be tuned to match the problem.', 'cs.AI', '2016-09-07T23:59:36Z', 'http://arxiv.org/abs/1609.02226v2', '2016-10-08 10:25:40', '2016-10-08 10:25:40')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (0.4ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 36
  [1m[36mAuthor Load (0.4ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Navid Kardan'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Navid Kardan', '2016-10-08 10:25:40', '2016-10-08 10:25:40')[0m
  [1m[35m (2.9ms)[0m  COMMIT
  [1m[36m (0.3ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (114, 36, 0, '2016-10-08 10:25:40', '2016-10-08 10:25:40')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.4ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Kenneth O. Stanley'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Kenneth O. Stanley', '2016-10-08 10:25:40', '2016-10-08 10:25:40')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (115, 36, 1, '2016-10-08 10:25:40', '2016-10-08 10:25:40')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPaper Load (0.3ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'UberNet: Training a `Universal\' Convolutional Neural Network for Low-, Mid-, and High-Level Vision using Diverse Datasets and Limited Memory'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.4ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('UberNet: Training a `Universal\' Convolutional Neural Network for Low-, Mid-, and High-Level Vision using Diverse Datasets and Limited Memory', 'In this work we introduce a convolutional neural network (CNN) that jointly handles low-, mid-, and high-level vision tasks in a unified architecture that is trained end-to-end. Such a universal network can act like a `swiss knife\' for vision tasks; we call this architecture an UberNet to indicate its overarching nature. We address two main technical challenges that emerge when broadening up the range of tasks handled by a single CNN: (i) training a deep architecture while relying on diverse training sets and (ii) training many (potentially unlimited) tasks with a limited memory budget. Properly addressing these two problems allows us to train accurate predictors for a host of tasks, without compromising accuracy. Through these advances we train in an end-to-end manner a CNN that simultaneously addresses (a) boundary detection (b) normal estimation (c) saliency estimation (d) semantic segmentation (e) human part segmentation (f) semantic boundary detection, (g) region proposal generation and object detection. We obtain competitive performance while jointly addressing all of these tasks in 0.7 seconds per frame on a single GPU. A demonstration of this system can be found at http://cvn.ecp.fr/ubernet/.', 'cs.CV', '2016-09-07T19:35:30Z', 'http://arxiv.org/abs/1609.02132v1', '2016-10-08 10:25:40', '2016-10-08 10:25:40')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPublish Load (0.4ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 37[0m
  [1m[35mAuthor Load (0.4ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Iasonas Kokkinos'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Iasonas Kokkinos', '2016-10-08 10:25:40', '2016-10-08 10:25:40')
  [1m[36m (2.0ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (116, 37, 0, '2016-10-08 10:25:40', '2016-10-08 10:25:40')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (0.3ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Feasibility of Post-Editing Speech Transcriptions with a Mismatched Crowd'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Feasibility of Post-Editing Speech Transcriptions with a Mismatched Crowd', 'Manual correction of speech transcription can involve a selection from plausible transcriptions. Recent work has shown the feasibility of employing a mismatched crowd for speech transcription. However, it is yet to be established whether a mismatched worker has sufficiently fine-granular speech perception to choose among the phonetically proximate options that are likely to be generated from the trellis of an ASRU. Hence, we consider five languages, Arabic, German, Hindi, Russian and Spanish. For each we generate synthetic, phonetically proximate, options which emulate post-editing scenarios of varying difficulty. We consistently observe non-trivial crowd ability to choose among fine-granular options.', 'cs.AI', '2016-09-07T16:05:20Z', 'http://arxiv.org/abs/1609.02043v1', '2016-10-08 10:25:40', '2016-10-08 10:25:40')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPublish Load (0.4ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 38[0m
  [1m[35mAuthor Load (0.3ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Purushotam Radadia'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Purushotam Radadia', '2016-10-08 10:25:40', '2016-10-08 10:25:40')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (117, 38, 0, '2016-10-08 10:25:40', '2016-10-08 10:25:40')[0m
  [1m[35m (0.3ms)[0m  COMMIT
  [1m[36mAuthor Load (0.3ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Shirish Karande'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Shirish Karande', '2016-10-08 10:25:40', '2016-10-08 10:25:40')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (118, 38, 1, '2016-10-08 10:25:40', '2016-10-08 10:25:40')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.3ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Deep Markov Random Field for Image Modeling'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.4ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Deep Markov Random Field for Image Modeling', 'Markov Random Fields (MRFs), a formulation widely used in generative image modeling, have long been plagued by the lack of expressive power. This issue is primarily due to the fact that conventional MRFs formulations tend to use simplistic factors to capture local patterns. In this paper, we move beyond such limitations, and propose a novel MRF model that uses fully-connected neurons to express the complex interactions among pixels. Through theoretical analysis, we reveal an inherent connection between this model and recurrent neural networks, and thereon derive an approximated feed-forward network that couples multiple RNNs along opposite directions. This formulation combines the expressive power of deep neural networks and the cyclic dependency structure of MRF in a unified model, bringing the modeling capability to a new level. The feed-forward approximation also allows it to be efficiently learned from data. Experimental results on a variety of low-level vision tasks show notable improvement over state-of-the-arts.', 'cs.CV', '2016-09-07T15:56:36Z', 'http://arxiv.org/abs/1609.02036v1', '2016-10-08 10:25:40', '2016-10-08 10:25:40')
  [1m[36m (4.7ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (0.5ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 39
  [1m[36mAuthor Load (0.5ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Zhirong Wu'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Zhirong Wu', '2016-10-08 10:25:40', '2016-10-08 10:25:40')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (119, 39, 0, '2016-10-08 10:25:40', '2016-10-08 10:25:40')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.4ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Dahua Lin'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Dahua Lin', '2016-10-08 10:25:40', '2016-10-08 10:25:40')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (120, 39, 1, '2016-10-08 10:25:40', '2016-10-08 10:25:40')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (0.4ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Xiaoou Tang'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Xiaoou Tang', '2016-10-08 10:25:40', '2016-10-08 10:25:40')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (121, 39, 2, '2016-10-08 10:25:40', '2016-10-08 10:25:40')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.3ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Equilibrium Graphs'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Equilibrium Graphs', 'In this paper we present an extension of Peirce\'s existential graphs to provide a diagrammatic representation of expressions in Quantified Equilibrium Logic (QEL). Using this formalisation, logical connectives are replaced by encircled regions (circles and squares) and quantified variables are represented as \"identity\" lines. Although the expressive power is equivalent to that of QEL, the new representation can be useful for illustrative or educational purposes.', 'cs.AI', '2016-09-07T15:07:21Z', 'http://arxiv.org/abs/1609.02010v1', '2016-10-08 10:25:40', '2016-10-08 10:25:40')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (0.4ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 40
  [1m[36mAuthor Load (0.3ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Pedro Cabalar'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Pedro Cabalar', '2016-10-08 10:25:40', '2016-10-08 10:25:40')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.4ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (122, 40, 0, '2016-10-08 10:25:40', '2016-10-08 10:25:40')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.4ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Carlos Pérez'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Carlos Pérez', '2016-10-08 10:25:40', '2016-10-08 10:25:40')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (123, 40, 1, '2016-10-08 10:25:40', '2016-10-08 10:25:40')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (0.4ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Gilberto Pérez'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Gilberto Pérez', '2016-10-08 10:25:40', '2016-10-08 10:25:40')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (124, 40, 2, '2016-10-08 10:25:40', '2016-10-08 10:25:40')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.4ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Non-Evolutionary Superintelligences Do Nothing, Eventually'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Non-Evolutionary Superintelligences Do Nothing, Eventually', 'There is overwhelming evidence that human intelligence is a product of Darwinian evolution. Investigating the consequences of self-modification, and more precisely, the consequences of utility function self-modification, leads to the stronger claim that not only human, but any form of intelligence is ultimately only possible within evolutionary processes. Human-designed artificial intelligences can only remain stable until they discover how to manipulate their own utility function. By definition, a human designer cannot prevent a superhuman intelligence from modifying itself, even if protection mechanisms against this action are put in place. Without evolutionary pressure, sufficiently advanced artificial intelligences become inert by simplifying their own utility function. Within evolutionary processes, the implicit utility function is always reducible to persistence, and the control of superhuman intelligences embedded in evolutionary processes is not possible. Mechanisms against utility function self-modification are ultimately futile. Instead, scientific effort toward the mitigation of existential risks from the development of superintelligences should be in two directions: understanding consciousness, and the complex dynamics of evolutionary systems.', 'cs.AI', '2016-09-07T15:06:18Z', 'http://arxiv.org/abs/1609.02009v1', '2016-10-08 10:25:40', '2016-10-08 10:25:40')
  [1m[36m (2.9ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (0.5ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 41
  [1m[36mAuthor Load (0.4ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Telmo Menezes'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Telmo Menezes', '2016-10-08 10:25:40', '2016-10-08 10:25:40')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (125, 41, 0, '2016-10-08 10:25:40', '2016-10-08 10:25:40')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.4ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Unifying task specification in reinforcement learning'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.4ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Unifying task specification in reinforcement learning', 'Reinforcement learning tasks are typically specified as Markov decision processes. This formalism has been highly successful, though specifications often couple the dynamics of the environment and the learning objective. This lack of modularity can complicate generalization of the task specification, as well as obfuscate connections between different task settings, such as episodic and continuing. In this work, we introduce the RL task formalism, that provides a unification through simple constructs including a generalization to transition-based discounting. Through a series of examples, we demonstrate the generality and utility of this formalism. Finally, we extend standard learning constructs, including Bellman operators, and extend some seminal theoretical results, including approximation errors bounds. Overall, we provide a well-understood and sound formalism on which to build theoretical results and simplify algorithm use and development.', 'cs.AI', '2016-09-07T14:27:56Z', 'http://arxiv.org/abs/1609.01995v1', '2016-10-08 10:25:40', '2016-10-08 10:25:40')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (0.3ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 42
  [1m[36mAuthor Load (0.3ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Martha White'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Martha White', '2016-10-08 10:25:40', '2016-10-08 10:25:40')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (126, 42, 0, '2016-10-08 10:25:40', '2016-10-08 10:25:40')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.3ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Random Shuffling and Resets for the Non-stationary Stochastic Bandit Problem'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.7ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Random Shuffling and Resets for the Non-stationary Stochastic Bandit Problem', 'We consider a non-stationary formulation of the stochastic multi-armed bandit where the rewards are no longer assumed to be identically distributed. For the best-arm identification task, we introduce a version of Successive Elimination based on random shuffling of the $K$ arms. We prove that under a novel and mild assumption on the mean gap $\\Delta$, this simple but powerful modification achieves the same guarantees in term of sample complexity and cumulative regret than its original version, but in a much wider class of problems, as it is not anymore constrained to stationary distributions. We also show that the original {\\sc Successive Elimination} fails to have controlled regret in this more general scenario, thus showing the benefit of shuffling. We then remove our mild assumption and adapt the algorithm to the best-arm identification task with switching arms. We adapt the definition of the sample complexity for that case and prove that, against an optimal policy with $N-1$ switches of the optimal arm, this new algorithm achieves an expected sample complexity of $O(\\Delta^{-2}\\sqrt{NK\\delta^{-1} \\log(K \\delta^{-1})})$, where $\\delta$ is the probability of failure of the algorithm, and an expected cumulative regret of $O(\\Delta^{-1}{\\sqrt{NTK \\log (TK)}})$ after $T$ time steps.', 'cs.AI', '2016-09-07T13:31:21Z', 'http://arxiv.org/abs/1609.02139v1', '2016-10-08 10:25:40', '2016-10-08 10:25:40')
  [1m[36m (2.9ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (0.5ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 43
  [1m[36mAuthor Load (0.4ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Robin Allesiardo'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Robin Allesiardo', '2016-10-08 10:25:40', '2016-10-08 10:25:40')[0m
  [1m[35m (1.8ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (127, 43, 0, '2016-10-08 10:25:40', '2016-10-08 10:25:40')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.4ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Raphaël Féraud'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Raphaël Féraud', '2016-10-08 10:25:40', '2016-10-08 10:25:40')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (128, 43, 1, '2016-10-08 10:25:40', '2016-10-08 10:25:40')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (0.5ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Odalric-Ambrym Maillard'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Odalric-Ambrym Maillard', '2016-10-08 10:25:40', '2016-10-08 10:25:40')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (129, 43, 2, '2016-10-08 10:25:40', '2016-10-08 10:25:40')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.3ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'A modular architecture for transparent computation in Recurrent Neural Networks'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('A modular architecture for transparent computation in Recurrent Neural Networks', 'Computation is classically studied in terms of automata, formal languages and algorithms; yet, the relation between neural dynamics and symbolic representations and operations is still unclear in traditional eliminative connectionism. Therefore, we suggest a unique perspective on this central issue, to which we would like to refer as to transparent connectionism, by proposing accounts of how symbolic computation can be implemented in neural substrates. In this study we first introduce a new model of dynamics on a symbolic space, the versatile shift, showing that it supports the real-time simulation of a range of automata. We then show that the Goedelization of versatile shifts defines nonlinear dynamical automata, dynamical systems evolving on a vectorial space. Finally, we present a mapping between nonlinear dynamical automata and recurrent artificial neural networks. The mapping defines an architecture characterized by its granular modularity, where data, symbolic operations and their control are not only distinguishable in activation space, but also spatially localizable in the network itself, while maintaining a distributed encoding of symbolic representations. The resulting networks simulate automata in real-time and are programmed directly, in absence of network training. To discuss the unique characteristics of the architecture and their consequences, we present two examples: i) the design of a Central Pattern Generator from a finite-state locomotive controller, and ii) the creation of a network simulating a system of interactive automata that supports the parsing of garden-path sentences as investigated in psycholinguistics experiments.', 'cs.NE', '2016-09-07T10:44:28Z', 'http://dx.doi.org/10.1016/j.neunet.2016.09.001', '2016-10-08 10:25:40', '2016-10-08 10:25:40')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (0.4ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 44
  [1m[36mAuthor Load (0.4ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Giovanni Sirio Carmantini'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Giovanni Sirio Carmantini', '2016-10-08 10:25:40', '2016-10-08 10:25:40')[0m
  [1m[35m (1.3ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (130, 44, 0, '2016-10-08 10:25:40', '2016-10-08 10:25:40')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.4ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Peter beim Graben'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Peter beim Graben', '2016-10-08 10:25:40', '2016-10-08 10:25:40')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.7ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (131, 44, 1, '2016-10-08 10:25:40', '2016-10-08 10:25:40')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (0.4ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Mathieu Desroches'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Mathieu Desroches', '2016-10-08 10:25:40', '2016-10-08 10:25:40')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (132, 44, 2, '2016-10-08 10:25:40', '2016-10-08 10:25:40')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.3ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Serafim Rodrigues'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Serafim Rodrigues', '2016-10-08 10:25:40', '2016-10-08 10:25:40')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (133, 44, 3, '2016-10-08 10:25:40', '2016-10-08 10:25:40')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPaper Load (0.3ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Axiomatizing Category Theory in Free Logic'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Axiomatizing Category Theory in Free Logic', 'Starting from a generalization of the standard axioms for a monoid we present a stepwise development of various, mutually equivalent foundational axiom systems for category theory. Our axiom sets have been formalized in the Isabelle/HOL interactive proof assistant, and this formalization utilizes a semantically correct embedding of free logic in classical higher-order logic. The modeling and formal analysis of our axiom sets has been significantly supported by series of experiments with automated reasoning tools integrated with Isabelle/HOL. We also address the relation of our axiom systems to alternative proposals from the literature, including an axiom set proposed by Freyd and Scedrov for which we reveal a technical issue (when encoded in free logic where free variables range over defined and undefined objects): either all operations, e.g. morphism composition, are total or their axiom system is inconsistent. The repair for this problem is quite straightforward, however.', 'cs.LO', '2016-09-06T11:30:37Z', 'http://arxiv.org/abs/1609.01493v3', '2016-10-08 10:25:40', '2016-10-08 10:25:40')[0m
  [1m[35m (3.0ms)[0m  COMMIT
  [1m[36mPublish Load (0.5ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 45[0m
  [1m[35mAuthor Load (0.5ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Christoph Benzmüller'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Christoph Benzmüller', '2016-10-08 10:25:40', '2016-10-08 10:25:40')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (134, 45, 0, '2016-10-08 10:25:40', '2016-10-08 10:25:40')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (0.4ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Dana S. Scott'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Dana S. Scott', '2016-10-08 10:25:40', '2016-10-08 10:25:40')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (135, 45, 1, '2016-10-08 10:25:40', '2016-10-08 10:25:40')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.3ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Automation of Pedestrian Tracking in a Crowded Situation'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Automation of Pedestrian Tracking in a Crowded Situation', 'Studies on microscopic pedestrian requires large amounts of trajectory data from real-world pedestrian crowds. Such data collection, if done manually, needs tremendous effort and is very time consuming. Though many studies have asserted the possibility of automating this task using video cameras, we found that only a few have demonstrated good performance in very crowded situations or from a top-angled view scene. This paper deals with tracking pedestrian crowd under heavy occlusions from an angular scene. Our automated tracking system consists of two modules that perform sequentially. The first module detects moving objects as blobs. The second module is a tracking system. We employ probability distribution from the detection of each pedestrian and use Bayesian update to track the next position. The result of such tracking is a database of pedestrian trajectories over time and space. With certain prior information, we showed that the system can track a large number of people under occlusion and clutter scene.', 'cs.CV', '2016-09-06T10:36:23Z', 'http://arxiv.org/abs/1609.01710v1', '2016-10-08 10:25:40', '2016-10-08 10:25:40')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (0.4ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 46
  [1m[36mAuthor Load (0.4ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Saman Saadat'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Saman Saadat', '2016-10-08 10:25:40', '2016-10-08 10:25:40')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (136, 46, 0, '2016-10-08 10:25:40', '2016-10-08 10:25:40')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.4ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Kardi Teknomo'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Kardi Teknomo', '2016-10-08 10:25:40', '2016-10-08 10:25:40')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (137, 46, 1, '2016-10-08 10:25:40', '2016-10-08 10:25:40')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (0.4ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Multi Exit Configuration of Mesoscopic Pedestrian Simulation'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Multi Exit Configuration of Mesoscopic Pedestrian Simulation', 'A mesoscopic approach to modeling pedestrian simulation with multiple exits is proposed in this paper. A floor field based on Qlearning Algorithm is used. Attractiveness of exits to pedestrian typically is based on shortest path. However, several factors may influence pedestrian choice of exits. Scenarios with multiple exits are presented and effect of Q-learning rewards system on navigation is investigated', 'cs.MA', '2016-09-06T10:18:25Z', 'http://arxiv.org/abs/1609.01475v1', '2016-10-08 10:25:40', '2016-10-08 10:25:40')[0m
  [1m[35m (0.6ms)[0m  COMMIT
  [1m[36mPublish Load (0.4ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 47[0m
  [1m[35mAuthor Load (0.4ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Allan Lao'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Allan Lao', '2016-10-08 10:25:40', '2016-10-08 10:25:40')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (138, 47, 0, '2016-10-08 10:25:40', '2016-10-08 10:25:40')[0m
  [1m[35m (3.0ms)[0m  COMMIT
  [1m[36mAuthor Load (0.5ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Kardi Teknomo'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36m (0.2ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (137, 47, 1, '2016-10-08 10:25:40', '2016-10-08 10:25:40')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPaper Load (0.5ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'OpenTripPlanner, OpenStreetMap, General Transit Feed Specification: Tools for Disaster Relief and Recovery'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.4ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('OpenTripPlanner, OpenStreetMap, General Transit Feed Specification: Tools for Disaster Relief and Recovery', 'Open Trip Planner was identified as the most promising open source multi-modal trip planning software. Open Street Map, which provides mapping data to Open Trip Planner, is one of the most well-known open source international repository of geographic data. General Transit Feed Specification, which provides transportation data to Open Trip Planner, has been the standard for describing transit systems and platform for numerous applications. Together, when used to implement an instance of Open Trip Planner, these software has been helping in traffic decongestion all over the world by assisting commuters to shift from using private transportation modes to public ones. Their potential however goes beyond providing multi-modal public transportation routes. This paper aims to first discuss the researchers\' experience in implementing a public transportation route planner for the purpose of traffic decongestion.The researchers would examine the prospective of using the system for disaster preparedness and recovery and concrete ways on how to realize them.', 'cs.CY', '2016-09-06T10:11:27Z', 'http://arxiv.org/abs/1609.01472v1', '2016-10-08 10:25:40', '2016-10-08 10:25:40')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPublish Load (0.3ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 48[0m
  [1m[35mAuthor Load (0.3ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Chelcie Narboneta'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Chelcie Narboneta', '2016-10-08 10:25:40', '2016-10-08 10:25:40')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (139, 48, 0, '2016-10-08 10:25:40', '2016-10-08 10:25:40')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.5ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Kardi Teknomo'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36m (0.2ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (137, 48, 1, '2016-10-08 10:25:40', '2016-10-08 10:25:40')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPaper Load (0.3ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Q-Learning with Basic Emotions'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Q-Learning with Basic Emotions', 'Q-learning is a simple and powerful tool in solving dynamic problems where environments are unknown. It uses a balance of exploration and exploitation to find an optimal solution to the problem. In this paper, we propose using four basic emotions: joy, sadness, fear, and anger to influence a Qlearning agent. Simulations show that the proposed affective agent requires lesser number of steps to find the optimal path. We found when affective agent finds the optimal path, the ratio between exploration to exploitation gradually decreases, indicating lower total step count in the long run', 'cs.LG', '2016-09-06T10:03:27Z', 'http://arxiv.org/abs/1609.01468v1', '2016-10-08 10:25:40', '2016-10-08 10:25:40')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPublish Load (0.3ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 49[0m
  [1m[35mAuthor Load (0.3ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Wilfredo Badoy Jr.'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Wilfredo Badoy Jr.', '2016-10-08 10:25:40', '2016-10-08 10:25:40')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (140, 49, 0, '2016-10-08 10:25:40', '2016-10-08 10:25:40')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (0.4ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Kardi Teknomo'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36m (0.1ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (137, 49, 1, '2016-10-08 10:25:40', '2016-10-08 10:25:40')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (0.3ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Deviant Learning Algorithm: Learning Sparse Mismatch Representations through Time and Space'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Deviant Learning Algorithm: Learning Sparse Mismatch Representations through Time and Space', 'Predictive coding (PDC) has recently attracted attention in the neuroscience and computing community as a candidate unifying paradigm for neuronal studies and artificial neural network implementations particularly targeted at unsupervised learning systems. The Mismatch Negativity (MMN) has also recently been studied in relation to PC and found to be a useful ingredient in neural predictive coding systems. Backed by the behavior of living organisms, such networks are particularly useful in forming spatio-temporal transitions and invariant representations of the input world. However, most neural systems still do not account for large number of synapses even though this has been shown by a few machine learning researchers as an effective and very important component of any neural system if such a system is to behave properly. Our major point here is that PDC systems with the MMN effect in addition to a large number of synapses can greatly improve any neural learning system\'s performance and ability to make decisions in the machine world. In this paper, we propose a novel bio-mimetic computational intelligence algorithm -- the Deviant Learning Algorithm, inspired by these key ideas and functional properties of recent brain-cognitive discoveries and theories. We also show by numerical experiments guided by theoretical insights, how our invented bio-mimetic algorithm can achieve competitive predictions even with very small problem specific data.', 'cs.AI', '2016-09-06T09:35:14Z', 'http://arxiv.org/abs/1609.01459v2', '2016-10-08 10:25:40', '2016-10-08 10:25:40')[0m
  [1m[35m (3.0ms)[0m  COMMIT
  [1m[36mPublish Load (0.5ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 50[0m
  [1m[35mAuthor Load (0.4ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Emmanuel Ndidi Osegi'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Emmanuel Ndidi Osegi', '2016-10-08 10:25:40', '2016-10-08 10:25:40')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (141, 50, 0, '2016-10-08 10:25:40', '2016-10-08 10:25:40')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (0.4ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Vincent Ike Anireh'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Vincent Ike Anireh', '2016-10-08 10:25:40', '2016-10-08 10:25:40')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (142, 50, 1, '2016-10-08 10:25:40', '2016-10-08 10:25:40')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.3ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Spectral learning of dynamic systems from nonequilibrium data'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Spectral learning of dynamic systems from nonequilibrium data', 'Observable operator models (OOMs) and related models are one of the most important and powerful tools for modeling and analyzing stochastic systems. They can exactly describe dynamics of finite-rank systems, and be efficiently learned from data by moment based algorithms. Almost all OOM learning algorithms are developed based on the assumption of equilibrium data which is very difficult to guarantee in real life, especially for complex processes with large time scales. In this paper, we derive a nonequilibrium learning algorithm for OOMs, which dismisses this assumption and can effectively extract the equilibrium dynamics of a system from nonequilibrium observation data. In addition, we propose binless OOMs for the application of nonequilibrium learning to continuous-valued systems. In comparison with the other OOMs with continuous observations, binless OOMs can achieve consistent estimation from nonequilibrium data with only linear computational complexity.', 'cs.LG', '2016-09-04T13:31:36Z', 'http://arxiv.org/abs/1609.00932v1', '2016-10-08 10:25:40', '2016-10-08 10:25:40')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (0.4ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 51
  [1m[36mAuthor Load (0.3ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Hao Wu'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Hao Wu', '2016-10-08 10:25:40', '2016-10-08 10:25:40')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (143, 51, 0, '2016-10-08 10:25:40', '2016-10-08 10:25:40')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.4ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Frank Noé'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Frank Noé', '2016-10-08 10:25:40', '2016-10-08 10:25:40')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (144, 51, 1, '2016-10-08 10:25:40', '2016-10-08 10:25:40')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (0.3ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'High Dimensional Human Guided Machine Learning'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('High Dimensional Human Guided Machine Learning', 'Have you ever looked at a machine learning classification model and thought, I could have made that? Well, that is what we test in this project, comparing XGBoost trained on human engineered features to training directly on data. The human engineered features do not outperform XGBoost trained di- rectly on the data, but they are comparable. This project con- tributes a novel method for utilizing human created classifi- cation models on high dimensional datasets.', 'cs.AI', '2016-09-04T08:45:26Z', 'http://arxiv.org/abs/1609.00904v1', '2016-10-08 10:25:40', '2016-10-08 10:25:40')[0m
  [1m[35m (0.3ms)[0m  COMMIT
  [1m[36mPublish Load (0.3ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 52[0m
  [1m[35mAuthor Load (0.4ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Eric Holloway'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Eric Holloway', '2016-10-08 10:25:40', '2016-10-08 10:25:40')
  [1m[36m (1.8ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (145, 52, 0, '2016-10-08 10:25:40', '2016-10-08 10:25:40')[0m
  [1m[35m (3.0ms)[0m  COMMIT
  [1m[36mAuthor Load (0.5ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Robert Marks II'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Robert Marks II', '2016-10-08 10:25:40', '2016-10-08 10:25:40')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (146, 52, 1, '2016-10-08 10:25:40', '2016-10-08 10:25:40')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.4ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'An Online Universal Classifier for Binary, Multi-class and Multi-label Classification'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('An Online Universal Classifier for Binary, Multi-class and Multi-label Classification', 'Classification involves the learning of the mapping function that associates input samples to corresponding target label. There are two major categories of classification problems: Single-label classification and Multi-label classification. Traditional binary and multi-class classifications are sub-categories of single-label classification. Several classifiers are developed for binary, multi-class and multi-label classification problems, but there are no classifiers available in the literature capable of performing all three types of classification. In this paper, a novel online universal classifier capable of performing all the three types of classification is proposed. Being a high speed online classifier, the proposed technique can be applied to streaming data applications. The performance of the developed classifier is evaluated using datasets from binary, multi-class and multi-label problems. The results obtained are compared with state-of-the-art techniques from each of the classification types.', 'cs.LG', '2016-09-03T17:03:14Z', 'http://arxiv.org/abs/1609.00843v1', '2016-10-08 10:25:40', '2016-10-08 10:25:40')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (0.4ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 53
  [1m[36mAuthor Load (0.4ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Meng Joo Er'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Meng Joo Er', '2016-10-08 10:25:40', '2016-10-08 10:25:40')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (147, 53, 0, '2016-10-08 10:25:40', '2016-10-08 10:25:40')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.4ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Rajasekar Venkatesan'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Rajasekar Venkatesan', '2016-10-08 10:25:40', '2016-10-08 10:25:40')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (148, 53, 1, '2016-10-08 10:25:40', '2016-10-08 10:25:40')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (0.5ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Ning Wang'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Ning Wang', '2016-10-08 10:25:40', '2016-10-08 10:25:40')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (149, 53, 2, '2016-10-08 10:25:40', '2016-10-08 10:25:40')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.3ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'A MIP Backend for the IDP System'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('A MIP Backend for the IDP System', 'The IDP knowledge base system currently uses MiniSAT(ID) as its backend Constraint Programming (CP) solver. A few similar systems have used a Mixed Integer Programming (MIP) solver as backend. However, so far little is known about when the MIP solver is preferable. This paper explores this question. It describes the use of CPLEX as a backend for IDP and reports on experiments comparing both backends.', 'cs.AI', '2016-09-02T22:20:05Z', 'http://arxiv.org/abs/1609.00759v1', '2016-10-08 10:25:40', '2016-10-08 10:25:40')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (0.3ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 54
  [1m[36mAuthor Load (0.3ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'San Pham'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('San Pham', '2016-10-08 10:25:40', '2016-10-08 10:25:40')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (150, 54, 0, '2016-10-08 10:25:40', '2016-10-08 10:25:40')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.4ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Jo Devriendt'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Jo Devriendt', '2016-10-08 10:25:40', '2016-10-08 10:25:40')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (151, 54, 1, '2016-10-08 10:25:40', '2016-10-08 10:25:40')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.4ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Maurice Bruynooghe'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Maurice Bruynooghe', '2016-10-08 10:25:40', '2016-10-08 10:25:40')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (152, 54, 2, '2016-10-08 10:25:40', '2016-10-08 10:25:40')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.4ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Patrick De Causmaecker'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Patrick De Causmaecker', '2016-10-08 10:25:40', '2016-10-08 10:25:40')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (153, 54, 3, '2016-10-08 10:25:40', '2016-10-08 10:25:40')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPaper Load (0.3ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'The Semantic Knowledge Graph: A compact, auto-generated model for real-time traversal and ranking of any relationship within a domain'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.7ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('The Semantic Knowledge Graph: A compact, auto-generated model for real-time traversal and ranking of any relationship within a domain', 'This paper describes a new kind of knowledge representation and mining system which we are calling the Semantic Knowledge Graph. At its heart, the Semantic Knowledge Graph leverages an inverted index, along with a complementary uninverted index, to represent nodes (terms) and edges (the documents within intersecting postings lists for multiple terms/nodes). This provides a layer of indirection between each pair of nodes and their corresponding edge, enabling edges to materialize dynamically from underlying corpus statistics. As a result, any combination of nodes can have edges to any other nodes materialize and be scored to reveal latent relationships between the nodes. This provides numerous benefits: the knowledge graph can be built automatically from a real-world corpus of data, new nodes - along with their combined edges - can be instantly materialized from any arbitrary combination of preexisting nodes (using set operations), and a full model of the semantic relationships between all entities within a domain can be represented and dynamically traversed using a highly compact representation of the graph. Such a system has widespread applications in areas as diverse as knowledge modeling and reasoning, natural language processing, anomaly detection, data cleansing, semantic search, analytics, data classification, root cause analysis, and recommendations systems. The main contribution of this paper is the introduction of a novel system - the Semantic Knowledge Graph - which is able to dynamically discover and score interesting relationships between any arbitrary combination of entities (words, phrases, or extracted concepts) through dynamically materializing nodes and edges from a compact graphical representation built automatically from a corpus of data representative of a knowledge domain.', 'cs.IR', '2016-09-02T04:26:54Z', 'http://arxiv.org/abs/1609.00464v2', '2016-10-08 10:25:40', '2016-10-08 10:25:40')[0m
  [1m[35m (2.9ms)[0m  COMMIT
  [1m[36mPublish Load (0.5ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 55[0m
  [1m[35mAuthor Load (0.5ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Trey Grainger'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Trey Grainger', '2016-10-08 10:25:40', '2016-10-08 10:25:40')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (154, 55, 0, '2016-10-08 10:25:40', '2016-10-08 10:25:40')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.4ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Khalifeh AlJadda'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Khalifeh AlJadda', '2016-10-08 10:25:40', '2016-10-08 10:25:40')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (155, 55, 1, '2016-10-08 10:25:40', '2016-10-08 10:25:40')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.3ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Mohammed Korayem'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Mohammed Korayem', '2016-10-08 10:25:40', '2016-10-08 10:25:40')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (156, 55, 2, '2016-10-08 10:25:40', '2016-10-08 10:25:40')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.4ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Andries Smith'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Andries Smith', '2016-10-08 10:25:40', '2016-10-08 10:25:40')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (157, 55, 3, '2016-10-08 10:25:40', '2016-10-08 10:25:40')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.3ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'A case study of algorithm selection for the traveling thief problem'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('A case study of algorithm selection for the traveling thief problem', 'Many real-world problems are composed of several interacting components. In order to facilitate research on such interactions, the Traveling Thief Problem (TTP) was created in 2013 as the combination of two well-understood combinatorial optimization problems. With this article, we contribute in four ways. First, we create a comprehensive dataset that comprises the performance data of 21 TTP algorithms on the full original set of 9720 TTP instances. Second, we define 55 characteristics for all TPP instances that can be used to select the best algorithm on a per-instance basis. Third, we use these algorithms and features to construct the first algorithm portfolios for TTP, clearly outperforming the single best algorithm. Finally, we study which algorithms contribute most to this portfolio.', 'cs.AI', '2016-09-02T04:03:22Z', 'http://arxiv.org/abs/1609.00462v1', '2016-10-08 10:25:40', '2016-10-08 10:25:40')
  [1m[36m (3.0ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (0.5ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 56
  [1m[36mAuthor Load (0.4ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Markus Wagner'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36m (0.2ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (33, 56, 0, '2016-10-08 10:25:40', '2016-10-08 10:25:40')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (0.5ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Marius Lindauer'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Marius Lindauer', '2016-10-08 10:25:40', '2016-10-08 10:25:40')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (158, 56, 1, '2016-10-08 10:25:40', '2016-10-08 10:25:40')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.3ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Mustafa Misir'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Mustafa Misir', '2016-10-08 10:25:40', '2016-10-08 10:25:40')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (159, 56, 2, '2016-10-08 10:25:40', '2016-10-08 10:25:40')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.4ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Samadhi Nallaperuma'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Samadhi Nallaperuma', '2016-10-08 10:25:40', '2016-10-08 10:25:40')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (160, 56, 3, '2016-10-08 10:25:40', '2016-10-08 10:25:40')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.4ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Frank Hutter'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Frank Hutter', '2016-10-08 10:25:40', '2016-10-08 10:25:40')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (161, 56, 4, '2016-10-08 10:25:40', '2016-10-08 10:25:40')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (0.4ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Verifier Theory and Unverifiability'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Verifier Theory and Unverifiability', 'Despite significant developments in Proof Theory, surprisingly little attention has been devoted to the concept of proof verifier. In particular, the mathematical community may be interested in studying different types of proof verifiers (people, programs, oracles, communities, superintelligences) as mathematical objects. Such an effort could reveal their properties, their powers and limitations (particularly in human mathematicians), minimum and maximum complexity, as well as self-verification and self-reference issues. We propose an initial classification system for verifiers and provide some rudimentary analysis of solved and open problems in this important domain. Our main contribution is a formal introduction of the notion of unverifiability, for which the paper could serve as a general citation in domains of theorem proving, as well as software and AI verification.', 'cs.AI', '2016-09-01T18:10:23Z', 'http://arxiv.org/abs/1609.00331v2', '2016-10-08 10:25:40', '2016-10-08 10:25:40')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPublish Load (0.3ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 57[0m
  [1m[35mAuthor Load (0.3ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Roman V. Yampolskiy'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Roman V. Yampolskiy', '2016-10-08 10:25:40', '2016-10-08 10:25:40')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (162, 57, 0, '2016-10-08 10:25:40', '2016-10-08 10:25:40')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (0.3ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Crowdsourcing with Unsure Option'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Crowdsourcing with Unsure Option', 'One of the fundamental problems in crowdsourcing is the trade-off between number of workers needed for high-accuracy aggregation and the budget to pay. For saving budget, it is important to ensure high quality of the crowd-sourced labels, hence the total cost on label collection will be reduced. Since the self-confidence of workers often has close relationship with their abilities, a possible way for quality control is to request workers to work on problems only when they feel confident, by means of providing unsure option to them. On the other hand, allowing workers to choose unsure option also leads to the potential danger of budget waste. In this work, we propose the analysis towards understanding when providing unsure option indeed leads to significant cost reduction, as well as how the confidence threshold is set. We also propose an online mechanism, which is alternative for threshold selection when the estimation of the crowd ability distribution is difficult.', 'cs.AI', '2016-09-01T15:53:52Z', 'http://arxiv.org/abs/1609.00292v1', '2016-10-08 10:25:40', '2016-10-08 10:25:40')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPublish Load (0.4ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 58[0m
  [1m[35mAuthor Load (0.4ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Yao-Xiang Ding'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Yao-Xiang Ding', '2016-10-08 10:25:40', '2016-10-08 10:25:40')
  [1m[36m (3.0ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (163, 58, 0, '2016-10-08 10:25:40', '2016-10-08 10:25:40')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (0.4ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Zhi-Hua Zhou'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Zhi-Hua Zhou', '2016-10-08 10:25:40', '2016-10-08 10:25:40')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (164, 58, 1, '2016-10-08 10:25:40', '2016-10-08 10:25:40')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.4ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Ternary Neural Networks for Resource-Efficient AI Applications'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Ternary Neural Networks for Resource-Efficient AI Applications', 'The computation and storage requirements for Deep Neural Networks (DNNs) are usually high. This issue limit their deployability on ubiquitous computing devices such as smart phones or wearables. In this paper, we propose ternary neural networks (TNNs) in order to make deep learning more resource-efficient. We train these TNNs using a teacher-student approach. Using only ternary weights and ternary neurons, with a step activation function of two-thresholds, the student ternary network learns to mimic the behaviour of its teacher network. We propose a novel, layer-wise greedy methodology for training TNNs. During training, a ternary neural network inherently prunes the smaller weights by setting them to zero. This makes them even more compact thus more resource-friendly. We devise a purpose-built hardware design for TNNs and implement it on FPGA. The benchmark results with our purpose-built hardware running TNNs reveal that, with only 1.24 microjoules per image, we can achieve 97.76% accuracy with 5.37 microsecond latency and with a rate of 255K images per second on MNIST.', 'cs.LG', '2016-09-01T13:08:47Z', 'http://arxiv.org/abs/1609.00222v1', '2016-10-08 10:25:40', '2016-10-08 10:25:40')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (0.4ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 59
  [1m[36mAuthor Load (0.3ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Hande Alemdar'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Hande Alemdar', '2016-10-08 10:25:40', '2016-10-08 10:25:40')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (165, 59, 0, '2016-10-08 10:25:40', '2016-10-08 10:25:40')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.5ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Nicholas Caldwell'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Nicholas Caldwell', '2016-10-08 10:25:40', '2016-10-08 10:25:40')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (166, 59, 1, '2016-10-08 10:25:40', '2016-10-08 10:25:40')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (0.5ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Vincent Leroy'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Vincent Leroy', '2016-10-08 10:25:40', '2016-10-08 10:25:40')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (167, 59, 2, '2016-10-08 10:25:40', '2016-10-08 10:25:40')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.4ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Adrien Prost-Boucle'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Adrien Prost-Boucle', '2016-10-08 10:25:40', '2016-10-08 10:25:40')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (168, 59, 3, '2016-10-08 10:25:40', '2016-10-08 10:25:40')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.4ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Frédéric Pétrot'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Frédéric Pétrot', '2016-10-08 10:25:40', '2016-10-08 10:25:40')[0m
  [1m[35m (2.2ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (169, 59, 4, '2016-10-08 10:25:40', '2016-10-08 10:25:40')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.4ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'From Community Detection to Community Deception'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('From Community Detection to Community Deception', 'The community deception problem is about how to hide a target community C from community detection algorithms. The need for deception emerges whenever a group of entities (e.g., activists, police enforcements) want to cooperate while concealing their existence as a community. In this paper we introduce and formalize the community deception problem. To solve this problem, we describe algorithms that carefully rewire the connections of C\'s members. We experimentally show how several existing community detection algorithms can be deceived, and quantify the level of deception by introducing a deception score. We believe that our study is intriguing since, while showing how deception can be realized it raises awareness for the design of novel detection algorithms robust to deception techniques.', 'cs.SI', '2016-09-01T08:58:51Z', 'http://arxiv.org/abs/1609.00149v1', '2016-10-08 10:25:40', '2016-10-08 10:25:40')
  [1m[36m (3.0ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (0.5ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 60
  [1m[36mAuthor Load (0.5ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Valeria Fionda'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Valeria Fionda', '2016-10-08 10:25:40', '2016-10-08 10:25:40')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (170, 60, 0, '2016-10-08 10:25:40', '2016-10-08 10:25:40')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.4ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Giuseppe Pirrò'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Giuseppe Pirrò', '2016-10-08 10:25:40', '2016-10-08 10:25:40')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (171, 60, 1, '2016-10-08 10:25:40', '2016-10-08 10:25:40')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPaper Load (0.3ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Neural Coarse-Graining: Extracting slowly-varying latent degrees of freedom with neural networks'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Neural Coarse-Graining: Extracting slowly-varying latent degrees of freedom with neural networks', 'We present a loss function for neural networks that encompasses an idea of trivial versus non-trivial predictions, such that the network jointly determines its own prediction goals and learns to satisfy them. This permits the network to choose sub-sets of a problem which are most amenable to its abilities to focus on solving, while discarding \'distracting\' elements that interfere with its learning. To do this, the network first transforms the raw data into a higher-level categorical representation, and then trains a predictor from that new time series to its future. To prevent a trivial solution of mapping the signal to zero, we introduce a measure of non-triviality via a contrast between the prediction error of the learned model with a naive model of the overall signal statistics. The transform can learn to discard uninformative and unpredictable components of the signal in favor of the features which are both highly predictive and highly predictable. This creates a coarse-grained model of the time-series dynamics, focusing on predicting the slowly varying latent parameters which control the statistics of the time-series, rather than predicting the fast details directly. The result is a semi-supervised algorithm which is capable of extracting latent parameters, segmenting sections of time-series with differing statistics, and building a higher-level representation of the underlying dynamics from unlabeled data.', 'cs.AI', '2016-09-01T05:34:23Z', 'http://arxiv.org/abs/1609.00116v1', '2016-10-08 10:25:40', '2016-10-08 10:25:40')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPublish Load (0.3ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 61[0m
  [1m[35mAuthor Load (0.4ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Nicholas Guttenberg'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Nicholas Guttenberg', '2016-10-08 10:25:40', '2016-10-08 10:25:40')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (172, 61, 0, '2016-10-08 10:25:40', '2016-10-08 10:25:40')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.4ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Martin Biehl'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Martin Biehl', '2016-10-08 10:25:40', '2016-10-08 10:25:40')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (173, 61, 1, '2016-10-08 10:25:40', '2016-10-08 10:25:40')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.4ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Ryota Kanai'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Ryota Kanai', '2016-10-08 10:25:40', '2016-10-08 10:25:40')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (174, 61, 2, '2016-10-08 10:25:40', '2016-10-08 10:25:40')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (0.3ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'A novel online multi-label classifier for high-speed streaming data applications'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('A novel online multi-label classifier for high-speed streaming data applications', 'In this paper, a high-speed online neural network classifier based on extreme learning machines for multi-label classification is proposed. In multi-label classification, each of the input data sample belongs to one or more than one of the target labels. The traditional binary and multi-class classification where each sample belongs to only one target class forms the subset of multi-label classification. Multi-label classification problems are far more complex than binary and multi-class classification problems, as both the number of target labels and each of the target labels corresponding to each of the input samples are to be identified. The proposed work exploits the high-speed nature of the extreme learning machines to achieve real-time multi-label classification of streaming data. A new threshold-based online sequential learning algorithm is proposed for high speed and streaming data classification of multi-label problems. The proposed method is experimented with six different datasets from different application domains such as multimedia, text, and biology. The hamming loss, accuracy, training time and testing time of the proposed technique is compared with nine different state-of-the-art methods. Experimental studies shows that the proposed technique outperforms the existing multi-label classifiers in terms of performance and speed.', 'cs.LG', '2016-09-01T01:58:50Z', 'http://dx.doi.org/10.1007/s12530-016-9162-8', '2016-10-08 10:25:40', '2016-10-08 10:25:40')[0m
  [1m[35m (2.9ms)[0m  COMMIT
  [1m[36mPublish Load (0.5ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 62[0m
  [1m[35mAuthor Load (0.4ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Rajasekar Venkatesan'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35m (0.2ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (148, 62, 0, '2016-10-08 10:25:40', '2016-10-08 10:25:40')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.4ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Meng Joo Er'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35m (0.1ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (147, 62, 1, '2016-10-08 10:25:40', '2016-10-08 10:25:40')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.5ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Mihika Dave'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Mihika Dave', '2016-10-08 10:25:40', '2016-10-08 10:25:40')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (175, 62, 2, '2016-10-08 10:25:40', '2016-10-08 10:25:40')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (0.5ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Mahardhika Pratama'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Mahardhika Pratama', '2016-10-08 10:25:40', '2016-10-08 10:25:40')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (176, 62, 3, '2016-10-08 10:25:40', '2016-10-08 10:25:40')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.5ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Shiqian Wu'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Shiqian Wu', '2016-10-08 10:25:40', '2016-10-08 10:25:40')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (177, 62, 4, '2016-10-08 10:25:40', '2016-10-08 10:25:40')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (0.3ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'A novel progressive learning technique for multi-class classification'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('A novel progressive learning technique for multi-class classification', 'In this paper, a progressive learning technique for multi-class classification is proposed. This newly developed learning technique is independent of the number of class constraints and it can learn new classes while still retaining the knowledge of previous classes. Whenever a new class (non-native to the knowledge learnt thus far) is encountered, the neural network structure gets remodeled automatically by facilitating new neurons and interconnections, and the parameters are calculated in such a way that it retains the knowledge learnt thus far. This technique is suitable for real-world applications where the number of classes is often unknown and online learning from real-time data is required. The consistency and the complexity of the progressive learning technique are analyzed. Several standard datasets are used to evaluate the performance of the developed technique. A comparative study shows that the developed technique is superior.', 'cs.LG', '2016-09-01T01:50:18Z', 'http://arxiv.org/abs/1609.00085v1', '2016-10-08 10:25:40', '2016-10-08 10:25:40')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPublish Load (0.4ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 63[0m
  [1m[35mAuthor Load (0.3ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Rajasekar Venkatesan'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35m (0.2ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (148, 63, 0, '2016-10-08 10:25:40', '2016-10-08 10:25:40')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.5ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Meng Joo Er'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35m (0.2ms)[0m  COMMIT
  [1m[36m (0.3ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (147, 63, 1, '2016-10-08 10:25:40', '2016-10-08 10:25:40')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.3ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Human Pose Estimation in Space and Time using 3D CNN'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Human Pose Estimation in Space and Time using 3D CNN', 'This paper explores the capabilities of convolutional neural networks to deal with a task that is easily manageable for humans: perceiving 3D pose of a human body from varying angles. However, in our approach, we are restricted to using a monocular vision system. For this purpose, we apply a convolutional neural network approach on RGB videos and extend it to three dimensional convolutions. This is done via encoding the time dimension in videos as the 3\\ts{rd} dimension in convolutional space, and directly regressing to human body joint positions in 3D coordinate space. This research shows the ability of such a network to achieve state-of-the-art performance on the selected Human3.6M dataset, thus demonstrating the possibility of successfully representing temporal data with an additional dimension in the convolutional operation.', 'cs.CV', '2016-08-31T20:55:26Z', 'http://arxiv.org/abs/1609.00036v2', '2016-10-08 10:25:40', '2016-10-08 10:25:40')
  [1m[36m (2.9ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (0.5ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 64
  [1m[36mAuthor Load (0.4ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Agne Grinciunaite'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Agne Grinciunaite', '2016-10-08 10:25:40', '2016-10-08 10:25:40')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (178, 64, 0, '2016-10-08 10:25:40', '2016-10-08 10:25:40')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.4ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Amogh Gudi'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Amogh Gudi', '2016-10-08 10:25:40', '2016-10-08 10:25:40')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (179, 64, 1, '2016-10-08 10:25:40', '2016-10-08 10:25:40')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.4ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Emrah Tasli'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Emrah Tasli', '2016-10-08 10:25:40', '2016-10-08 10:25:40')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (180, 64, 2, '2016-10-08 10:25:40', '2016-10-08 10:25:40')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.4ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Marten den Uyl'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Marten den Uyl', '2016-10-08 10:25:40', '2016-10-08 10:25:40')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (181, 64, 3, '2016-10-08 10:25:40', '2016-10-08 10:25:40')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (0.3ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'PDDL+ Planning via Constraint Answer Set Programming'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('PDDL+ Planning via Constraint Answer Set Programming', 'PDDL+ is an extension of PDDL that enables modelling planning domains with mixed discrete-continuous dynamics. In this paper we present a new approach to PDDL+ planning based on Constraint Answer Set Programming (CASP), i.e. ASP rules plus numerical constraints. To the best of our knowledge, ours is the first attempt to link PDDL+ planning and logic programming. We provide an encoding of PDDL+ models into CASP problems. The encoding can handle non-linear hybrid domains, and represents a solid basis for applying logic programming to PDDL+ planning. As a case study, we consider the EZCSP CASP solver and obtain promising results on a set of PDDL+ benchmark problems.', 'cs.AI', '2016-08-31T20:38:30Z', 'http://arxiv.org/abs/1609.00030v1', '2016-10-08 10:25:40', '2016-10-08 10:25:40')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPublish Load (0.4ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 65[0m
  [1m[35mAuthor Load (0.4ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Marcello Balduccini'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Marcello Balduccini', '2016-10-08 10:25:40', '2016-10-08 10:25:40')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (182, 65, 0, '2016-10-08 10:25:40', '2016-10-08 10:25:40')[0m
  [1m[35m (0.3ms)[0m  COMMIT
  [1m[36mAuthor Load (0.3ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Daniele Magazzeni'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Daniele Magazzeni', '2016-10-08 10:25:40', '2016-10-08 10:25:40')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.3ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (183, 65, 1, '2016-10-08 10:25:40', '2016-10-08 10:25:40')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.4ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Marco Maratea'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Marco Maratea', '2016-10-08 10:25:40', '2016-10-08 10:25:40')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (184, 65, 2, '2016-10-08 10:25:40', '2016-10-08 10:25:40')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (0.3ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Towards Transparent AI Systems: Interpreting Visual Question Answering Models'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Towards Transparent AI Systems: Interpreting Visual Question Answering Models', 'Deep neural networks have shown striking progress and obtained state-of-the-art results in many AI research fields in the recent years. However, it is often unsatisfying to not know why they predict what they do. In this paper, we address the problem of interpreting Visual Question Answering (VQA) models. Specifically, we are interested in finding what part of the input (pixels in images or words in questions) the VQA model focuses on while answering the question. To tackle this problem, we use two visualization techniques -- guided backpropagation and occlusion -- to find important words in the question and important regions in the image. We then present qualitative and quantitative analyses of these importance maps. We found that even without explicit attention mechanisms, VQA models may sometimes be implicitly attending to relevant regions in the image, and often to appropriate words in the question.', 'cs.CV', '2016-08-31T18:11:29Z', 'http://arxiv.org/abs/1608.08974v2', '2016-10-08 10:25:40', '2016-10-08 10:25:40')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPublish Load (0.4ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 66[0m
  [1m[35mAuthor Load (0.3ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Yash Goyal'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Yash Goyal', '2016-10-08 10:25:40', '2016-10-08 10:25:40')
  [1m[36m (3.0ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.4ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (185, 66, 0, '2016-10-08 10:25:40', '2016-10-08 10:25:40')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (0.4ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Akrit Mohapatra'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Akrit Mohapatra', '2016-10-08 10:25:40', '2016-10-08 10:25:40')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (186, 66, 1, '2016-10-08 10:25:40', '2016-10-08 10:25:40')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.5ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Devi Parikh'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Devi Parikh', '2016-10-08 10:25:40', '2016-10-08 10:25:40')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (187, 66, 2, '2016-10-08 10:25:40', '2016-10-08 10:25:40')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.3ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Dhruv Batra'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Dhruv Batra', '2016-10-08 10:25:40', '2016-10-08 10:25:40')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (188, 66, 3, '2016-10-08 10:25:40', '2016-10-08 10:25:40')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.3ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Knowledge Representation Analysis of Graph Mining'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.7ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Knowledge Representation Analysis of Graph Mining', 'Many problems, especially those with a composite structure, can naturally be expressed in higher order logic. From a KR perspective modeling these problems in an intuitive way is a challenging task. In this paper we study the graph mining problem as an example of a higher order problem. In short, this problem asks us to find a graph that frequently occurs as a subgraph among a set of example graphs. We start from the problem\'s mathematical definition to solve it in three state-of-the-art specification systems. For IDP and ASP, which have no native support for higher order logic, we propose the use of encoding techniques such as the disjoint union technique and the saturation technique. ProB benefits from the higher order support for sets. We compare the performance of the three approaches to get an idea of the overhead of the higher order support. We propose higher-order language extensions for IDP-like specification languages and discuss what kind of solver support is needed. Native higher order shifts the burden of rewriting specifications using encoding techniques from the user to the solver itself.', 'cs.LO', '2016-08-31T17:23:58Z', 'http://arxiv.org/abs/1608.08956v1', '2016-10-08 10:25:40', '2016-10-08 10:25:40')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (0.5ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 67
  [1m[36mAuthor Load (0.3ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Matthias van der Hallen'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Matthias van der Hallen', '2016-10-08 10:25:40', '2016-10-08 10:25:40')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (189, 67, 0, '2016-10-08 10:25:40', '2016-10-08 10:25:40')
  [1m[36m (0.3ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.3ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Sergey Paramonov'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Sergey Paramonov', '2016-10-08 10:25:40', '2016-10-08 10:25:40')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (190, 67, 1, '2016-10-08 10:25:40', '2016-10-08 10:25:40')[0m
  [1m[35m (2.1ms)[0m  COMMIT
  [1m[36mAuthor Load (0.5ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Michael Leuschel'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Michael Leuschel', '2016-10-08 10:25:40', '2016-10-08 10:25:40')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (191, 67, 2, '2016-10-08 10:25:40', '2016-10-08 10:25:40')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.4ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Gerda Janssens'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Gerda Janssens', '2016-10-08 10:25:40', '2016-10-08 10:25:40')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (192, 67, 3, '2016-10-08 10:25:40', '2016-10-08 10:25:40')[0m
  [1m[35m (0.3ms)[0m  COMMIT
  [1m[36mPaper Load (0.4ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'The Generalized Smallest Grammar Problem'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('The Generalized Smallest Grammar Problem', 'The Smallest Grammar Problem -- the problem of finding the smallest context-free grammar that generates exactly one given sequence -- has never been successfully applied to grammatical inference. We investigate the reasons and propose an extended formulation that seeks to minimize non-recursive grammars, instead of straight-line programs. In addition, we provide very efficient algorithms that approximate the minimization problem of this class of grammars. Our empirical evaluation shows that we are able to find smaller models than the current best approximations to the Smallest Grammar Problem on standard benchmarks, and that the inferred rules capture much better the syntactic structure of natural language.', 'cs.CL', '2016-08-31T16:23:07Z', 'http://arxiv.org/abs/1608.08927v1', '2016-10-08 10:25:40', '2016-10-08 10:25:40')[0m
  [1m[35m (2.8ms)[0m  COMMIT
  [1m[36mPublish Load (0.4ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 68[0m
  [1m[35mAuthor Load (0.4ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Payam Siyari'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Payam Siyari', '2016-10-08 10:25:40', '2016-10-08 10:25:40')
  [1m[36m (0.3ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (193, 68, 0, '2016-10-08 10:25:40', '2016-10-08 10:25:40')[0m
  [1m[35m (0.3ms)[0m  COMMIT
  [1m[36mAuthor Load (0.4ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Matthias Gallé'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Matthias Gallé', '2016-10-08 10:25:40', '2016-10-08 10:25:40')[0m
  [1m[35m (1.6ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (194, 68, 1, '2016-10-08 10:25:40', '2016-10-08 10:25:40')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.4ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'A Novel Online Real-time Classifier for Multi-label Data Streams'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('A Novel Online Real-time Classifier for Multi-label Data Streams', 'In this paper, a novel extreme learning machine based online multi-label classifier for real-time data streams is proposed. Multi-label classification is one of the actively researched machine learning paradigm that has gained much attention in the recent years due to its rapidly increasing real world applications. In contrast to traditional binary and multi-class classification, multi-label classification involves association of each of the input samples with a set of target labels simultaneously. There are no real-time online neural network based multi-label classifier available in the literature. In this paper, we exploit the inherent nature of high speed exhibited by the extreme learning machines to develop a novel online real-time classifier for multi-label data streams. The developed classifier is experimented with datasets from different application domains for consistency, performance and speed. The experimental studies show that the proposed method outperforms the existing state-of-the-art techniques in terms of speed and accuracy and can classify multi-label data streams in real-time.', 'cs.LG', '2016-08-31T15:14:06Z', 'http://arxiv.org/abs/1608.08905v1', '2016-10-08 10:25:40', '2016-10-08 10:25:40')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (0.4ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 69
  [1m[36mAuthor Load (0.3ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Rajasekar Venkatesan'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36m (0.1ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (148, 69, 0, '2016-10-08 10:25:40', '2016-10-08 10:25:40')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (0.4ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Meng Joo Er'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36m (0.2ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (147, 69, 1, '2016-10-08 10:25:40', '2016-10-08 10:25:40')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (0.5ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Shiqian Wu'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36m (0.3ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (177, 69, 2, '2016-10-08 10:25:40', '2016-10-08 10:25:40')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.5ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Mahardhika Pratama'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36m (0.2ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (176, 69, 3, '2016-10-08 10:25:40', '2016-10-08 10:25:40')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPaper Load (0.3ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'A High Speed Multi-label Classifier based on Extreme Learning Machines'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('A High Speed Multi-label Classifier based on Extreme Learning Machines', 'In this paper a high speed neural network classifier based on extreme learning machines for multi-label classification problem is proposed and dis-cussed. Multi-label classification is a superset of traditional binary and multi-class classification problems. The proposed work extends the extreme learning machine technique to adapt to the multi-label problems. As opposed to the single-label problem, both the number of labels the sample belongs to, and each of those target labels are to be identified for multi-label classification resulting in in-creased complexity. The proposed high speed multi-label classifier is applied to six benchmark datasets comprising of different application areas such as multi-media, text and biology. The training time and testing time of the classifier are compared with those of the state-of-the-arts methods. Experimental studies show that for all the six datasets, our proposed technique have faster execution speed and better performance, thereby outperforming all the existing multi-label clas-sification methods.', 'cs.LG', '2016-08-31T14:56:12Z', 'http://dx.doi.org/10.1007/978-3-319-28373-9_37', '2016-10-08 10:25:41', '2016-10-08 10:25:41')[0m
  [1m[35m (3.0ms)[0m  COMMIT
  [1m[36mPublish Load (0.5ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 70[0m
  [1m[35mAuthor Load (0.4ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Meng Joo Er'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35m (0.2ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (147, 70, 0, '2016-10-08 10:25:41', '2016-10-08 10:25:41')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.4ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Rajasekar Venkatesan'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35m (0.1ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (148, 70, 1, '2016-10-08 10:25:41', '2016-10-08 10:25:41')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.4ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Ning Wang'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35m (0.2ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (149, 70, 2, '2016-10-08 10:25:41', '2016-10-08 10:25:41')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.3ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Binary Particle Swarm Optimization versus Hybrid Genetic Algorithm for Inferring Well Supported Phylogenetic Trees'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Binary Particle Swarm Optimization versus Hybrid Genetic Algorithm for Inferring Well Supported Phylogenetic Trees', 'The amount of completely sequenced chloroplast genomes increases rapidly every day, leading to the possibility to build large-scale phylogenetic trees of plant species. Considering a subset of close plant species defined according to their chloroplasts, the phylogenetic tree that can be inferred by their core genes is not necessarily well supported, due to the possible occurrence of problematic genes (i.e., homoplasy, incomplete lineage sorting, horizontal gene transfers, etc.) which may blur the phylogenetic signal. However, a trustworthy phylogenetic tree can still be obtained provided such a number of blurring genes is reduced. The problem is thus to determine the largest subset of core genes that produces the best-supported tree. To discard problematic genes and due to the overwhelming number of possible combinations, this article focuses on how to extract the largest subset of sequences in order to obtain the most supported species tree. Due to computational complexity, a distributed Binary Particle Swarm Optimization (BPSO) is proposed in sequential and distributed fashions. Obtained results from both versions of the BPSO are compared with those computed using an hybrid approach embedding both genetic algorithms and statistical tests. The proposal has been applied to different cases of plant families, leading to encouraging results for these families.', 'cs.AI', '2016-08-31T07:13:16Z', 'http://arxiv.org/abs/1608.08749v1', '2016-10-08 10:25:41', '2016-10-08 10:25:41')
  [1m[36m (0.3ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (0.4ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 71
  [1m[36mAuthor Load (0.3ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Bassam AlKindy'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Bassam AlKindy', '2016-10-08 10:25:41', '2016-10-08 10:25:41')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (195, 71, 0, '2016-10-08 10:25:41', '2016-10-08 10:25:41')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.5ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Bashar Al-Nuaimi'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Bashar Al-Nuaimi', '2016-10-08 10:25:41', '2016-10-08 10:25:41')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (196, 71, 1, '2016-10-08 10:25:41', '2016-10-08 10:25:41')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.5ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Christophe Guyeux'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Christophe Guyeux', '2016-10-08 10:25:41', '2016-10-08 10:25:41')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (197, 71, 2, '2016-10-08 10:25:41', '2016-10-08 10:25:41')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.3ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Jean-François Couchot'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Jean-François Couchot', '2016-10-08 10:25:41', '2016-10-08 10:25:41')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (198, 71, 3, '2016-10-08 10:25:41', '2016-10-08 10:25:41')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (0.5ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Michel Salomon'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Michel Salomon', '2016-10-08 10:25:41', '2016-10-08 10:25:41')[0m
  [1m[35m (1.9ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (199, 71, 4, '2016-10-08 10:25:41', '2016-10-08 10:25:41')
  [1m[36m (0.3ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.4ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Reem Alsrraj'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Reem Alsrraj', '2016-10-08 10:25:41', '2016-10-08 10:25:41')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (200, 71, 5, '2016-10-08 10:25:41', '2016-10-08 10:25:41')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (0.5ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Laurent Philippe'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Laurent Philippe', '2016-10-08 10:25:41', '2016-10-08 10:25:41')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (201, 71, 6, '2016-10-08 10:25:41', '2016-10-08 10:25:41')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.3ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'A Programming Language With a POMDP Inside'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('A Programming Language With a POMDP Inside', 'We present POAPS, a novel planning system for defining Partially Observable Markov Decision Processes (POMDPs) that abstracts away from POMDP details for the benefit of non-expert practitioners. POAPS includes an expressive adaptive programming language based on Lisp that has constructs for choice points that can be dynamically optimized. Non-experts can use our language to write adaptive programs that have partially observable components without needing to specify belief/hidden states or reason about probabilities. POAPS is also a compiler that defines and performs the transformation of any program written in our language into a POMDP with control knowledge. We demonstrate the generality and power of POAPS in the rapidly growing domain of human computation by describing its expressiveness and simplicity by writing several POAPS programs for common crowdsourcing tasks.', 'cs.AI', '2016-08-31T04:25:45Z', 'http://arxiv.org/abs/1608.08724v1', '2016-10-08 10:25:41', '2016-10-08 10:25:41')
  [1m[36m (3.0ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (0.5ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 72
  [1m[36mAuthor Load (0.5ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Christopher H. Lin'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Christopher H. Lin', '2016-10-08 10:25:41', '2016-10-08 10:25:41')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (202, 72, 0, '2016-10-08 10:25:41', '2016-10-08 10:25:41')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.4ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = ' Mausam'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES (' Mausam', '2016-10-08 10:25:41', '2016-10-08 10:25:41')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (203, 72, 1, '2016-10-08 10:25:41', '2016-10-08 10:25:41')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.4ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Daniel S. Weld'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Daniel S. Weld', '2016-10-08 10:25:41', '2016-10-08 10:25:41')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (204, 72, 2, '2016-10-08 10:25:41', '2016-10-08 10:25:41')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.3ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Measuring Machine Intelligence Through Visual Question Answering'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Measuring Machine Intelligence Through Visual Question Answering', 'As machines have become more intelligent, there has been a renewed interest in methods for measuring their intelligence. A common approach is to propose tasks for which a human excels, but one which machines find difficult. However, an ideal task should also be easy to evaluate and not be easily gameable. We begin with a case study exploring the recently popular task of image captioning and its limitations as a task for measuring machine intelligence. An alternative and more promising task is Visual Question Answering that tests a machine\'s ability to reason about language and vision. We describe a dataset unprecedented in size created for the task that contains over 760,000 human generated questions about images. Using around 10 million human generated answers, machines may be easily evaluated.', 'cs.AI', '2016-08-31T02:56:00Z', 'http://arxiv.org/abs/1608.08716v1', '2016-10-08 10:25:41', '2016-10-08 10:25:41')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (0.5ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 73
  [1m[36mAuthor Load (0.5ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'C. Lawrence Zitnick'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('C. Lawrence Zitnick', '2016-10-08 10:25:41', '2016-10-08 10:25:41')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (205, 73, 0, '2016-10-08 10:25:41', '2016-10-08 10:25:41')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.4ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Aishwarya Agrawal'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Aishwarya Agrawal', '2016-10-08 10:25:41', '2016-10-08 10:25:41')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (206, 73, 1, '2016-10-08 10:25:41', '2016-10-08 10:25:41')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.3ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Stanislaw Antol'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Stanislaw Antol', '2016-10-08 10:25:41', '2016-10-08 10:25:41')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (207, 73, 2, '2016-10-08 10:25:41', '2016-10-08 10:25:41')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.3ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Margaret Mitchell'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Margaret Mitchell', '2016-10-08 10:25:41', '2016-10-08 10:25:41')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (208, 73, 3, '2016-10-08 10:25:41', '2016-10-08 10:25:41')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (0.4ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Dhruv Batra'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36m (0.3ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (188, 73, 4, '2016-10-08 10:25:41', '2016-10-08 10:25:41')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (0.4ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Devi Parikh'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36m (0.2ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (187, 73, 5, '2016-10-08 10:25:41', '2016-10-08 10:25:41')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (0.4ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'What makes ImageNet good for transfer learning?'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('What makes ImageNet good for transfer learning?', 'The tremendous success of features learnt using the ImageNet classification task on a wide range of transfer tasks begs the question: what are the intrinsic properties of the ImageNet dataset that are critical for learning good, general-purpose features? This work provides an empirical investigation of various facets of this question: Is more pre-training data always better? How does feature quality depend on the number of training examples per class? Does adding more object classes improve performance? For the same data budget, how should the data be split into classes? Is fine-grained recognition necessary for learning good features? Given the same number of training classes, is it better to have coarse classes or fine-grained classes? Which is better: more classes or more examples per class?', 'cs.CV', '2016-08-30T19:45:09Z', 'http://arxiv.org/abs/1608.08614v1', '2016-10-08 10:25:41', '2016-10-08 10:25:41')[0m
  [1m[35m (3.0ms)[0m  COMMIT
  [1m[36mPublish Load (0.5ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 74[0m
  [1m[35mAuthor Load (0.5ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Minyoung Huh'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Minyoung Huh', '2016-10-08 10:25:41', '2016-10-08 10:25:41')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (209, 74, 0, '2016-10-08 10:25:41', '2016-10-08 10:25:41')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (0.5ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Pulkit Agrawal'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Pulkit Agrawal', '2016-10-08 10:25:41', '2016-10-08 10:25:41')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (210, 74, 1, '2016-10-08 10:25:41', '2016-10-08 10:25:41')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.5ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Alexei A. Efros'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Alexei A. Efros', '2016-10-08 10:25:41', '2016-10-08 10:25:41')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (211, 74, 2, '2016-10-08 10:25:41', '2016-10-08 10:25:41')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (0.4ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Game-Theoretic Modeling of Driver and Vehicle Interactions for Verification and Validation of Autonomous Vehicle Control Systems'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Game-Theoretic Modeling of Driver and Vehicle Interactions for Verification and Validation of Autonomous Vehicle Control Systems', 'Autonomous driving has been the subject of increased interest in recent years both in industry and in academia. Serious efforts are being pursued to address legal, technical and logistical problems and make autonomous cars a viable option for everyday transportation. One significant challenge is the time and effort required for the verification and validation of the decision and control algorithms employed in these vehicles to ensure a safe and comfortable driving experience. Hundreds of thousands of miles of driving tests are required to achieve a well calibrated control system that is capable of operating an autonomous vehicle in an uncertain traffic environment where multiple interactions between vehicles and drivers simultaneously occur. Traffic simulators where these interactions can be modeled and represented with reasonable fidelity can help decrease the time and effort necessary for the development of the autonomous driving control algorithms by providing a venue where acceptable initial control calibrations can be achieved quickly and safely before actual road tests. In this paper, we present a game theoretic traffic model that can be used to 1) test and compare various autonomous vehicle decision and control systems and 2) calibrate the parameters of an existing control system. We demonstrate two example case studies, where, in the first case, we test and quantitatively compare two autonomous vehicle control systems in terms of their safety and performance, and, in the second case, we optimize the parameters of an autonomous vehicle control system, utilizing the proposed traffic model and simulation environment.', 'cs.AI', '2016-08-30T18:25:35Z', 'http://arxiv.org/abs/1608.08589v1', '2016-10-08 10:25:41', '2016-10-08 10:25:41')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPublish Load (0.3ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 75[0m
  [1m[35mAuthor Load (0.3ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Nan Li'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Nan Li', '2016-10-08 10:25:41', '2016-10-08 10:25:41')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (212, 75, 0, '2016-10-08 10:25:41', '2016-10-08 10:25:41')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (0.4ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Dave Oyler'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Dave Oyler', '2016-10-08 10:25:41', '2016-10-08 10:25:41')[0m
  [1m[35m (3.0ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (213, 75, 1, '2016-10-08 10:25:41', '2016-10-08 10:25:41')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.5ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Mengxuan Zhang'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Mengxuan Zhang', '2016-10-08 10:25:41', '2016-10-08 10:25:41')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (214, 75, 2, '2016-10-08 10:25:41', '2016-10-08 10:25:41')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.5ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Yildiray Yildiz'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Yildiray Yildiz', '2016-10-08 10:25:41', '2016-10-08 10:25:41')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (215, 75, 3, '2016-10-08 10:25:41', '2016-10-08 10:25:41')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.5ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Ilya Kolmanovsky'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Ilya Kolmanovsky', '2016-10-08 10:25:41', '2016-10-08 10:25:41')
  [1m[36m (0.6ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (216, 75, 4, '2016-10-08 10:25:41', '2016-10-08 10:25:41')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (0.5ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Anouck Girard'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Anouck Girard', '2016-10-08 10:25:41', '2016-10-08 10:25:41')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (217, 75, 5, '2016-10-08 10:25:41', '2016-10-08 10:25:41')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.4ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Empirically Grounded Agent-Based Models of Innovation Diffusion: A Critical Review'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Empirically Grounded Agent-Based Models of Innovation Diffusion: A Critical Review', 'Innovation diffusion has been studied extensively in a variety of disciplines, including sociology, economics, marketing, ecology, and computer science. Traditional literature on innovation diffusion has been dominated by models of aggregate behavior and trends. However, the agent-based modeling (ABM) paradigm is gaining popularity as it captures agent heterogeneity and enables fine-grained modeling of interactions mediated by social and geographic networks. While most ABM work on innovation diffusion is theoretical, empirically grounded models are increasingly important, particularly in guiding policy decisions. We present a critical review of empirically grounded agent-based models of innovation diffusion, developing a categorization of this research based on types of agent models as well as applications. By connecting the modeling methodologies in the fields of information and innovation diffusion, we suggest that the maximum likelihood estimation framework widely used in the former is a promising paradigm for calibration of agent-based models for innovation diffusion. Although many advances have been made to standardize ABM methodology, we identify four major issues in model calibration and validation, and suggest potential solutions. Finally, we discuss open problems that are critical for the future development of empirically grounded agent-based models of innovation diffusion that enable reliable decision support for stakeholders.', 'cs.SI', '2016-08-30T15:45:13Z', 'http://arxiv.org/abs/1608.08517v2', '2016-10-08 10:25:41', '2016-10-08 10:25:41')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (0.5ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 76
  [1m[36mAuthor Load (0.5ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Haifeng Zhang'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Haifeng Zhang', '2016-10-08 10:25:41', '2016-10-08 10:25:41')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (218, 76, 0, '2016-10-08 10:25:41', '2016-10-08 10:25:41')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.3ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Yevgeniy Vorobeychik'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Yevgeniy Vorobeychik', '2016-10-08 10:25:41', '2016-10-08 10:25:41')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (219, 76, 1, '2016-10-08 10:25:41', '2016-10-08 10:25:41')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (0.4ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Language Detection For Short Text Messages In Social Media'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Language Detection For Short Text Messages In Social Media', 'With the constant growth of the World Wide Web and the number of documents in different languages accordingly, the need for reliable language detection tools has increased as well. Platforms such as Twitter with predominantly short texts are becoming important information resources, which additionally imposes the need for short texts language detection algorithms. In this paper, we show how incorporating personalized user-specific information into the language detection algorithm leads to an important improvement of detection results. To choose the best algorithm for language detection for short text messages, we investigate several machine learning approaches. These approaches include the use of the well-known classifiers such as SVM and logistic regression, a dictionary based approach, and a probabilistic model based on modified Kneser-Ney smoothing. Furthermore, the extension of the probabilistic model to include additional user-specific information such as evidence accumulation per user and user interface language is explored, with the goal of improving the classification performance. The proposed approaches are evaluated on randomly collected Twitter data containing Latin as well as non-Latin alphabet languages and the quality of the obtained results is compared, followed by the selection of the best performing algorithm. This algorithm is then evaluated against two already existing general language detection tools: Chromium Compact Language Detector 2 (CLD2) and langid, where our method significantly outperforms the results achieved by both of the mentioned methods. Additionally, a preview of benefits and possible applications of having a reliable language detection algorithm is given.', 'cs.CL', '2016-08-30T15:43:52Z', 'http://arxiv.org/abs/1608.08515v1', '2016-10-08 10:25:41', '2016-10-08 10:25:41')[0m
  [1m[35m (2.9ms)[0m  COMMIT
  [1m[36mPublish Load (0.5ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 77[0m
  [1m[35mAuthor Load (0.5ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Ivana Balazevic'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Ivana Balazevic', '2016-10-08 10:25:41', '2016-10-08 10:25:41')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (220, 77, 0, '2016-10-08 10:25:41', '2016-10-08 10:25:41')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (0.5ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Mikio Braun'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Mikio Braun', '2016-10-08 10:25:41', '2016-10-08 10:25:41')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (221, 77, 1, '2016-10-08 10:25:41', '2016-10-08 10:25:41')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.5ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Klaus-Robert Müller'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Klaus-Robert Müller', '2016-10-08 10:25:41', '2016-10-08 10:25:41')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (222, 77, 2, '2016-10-08 10:25:41', '2016-10-08 10:25:41')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (0.3ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Modelling Cyber-Security Experts\' Decision Making Processes using Aggregation Operators'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.7ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Modelling Cyber-Security Experts\' Decision Making Processes using Aggregation Operators', 'An important role carried out by cyber-security experts is the assessment of proposed computer systems, during their design stage. This task is fraught with difficulties and uncertainty, making the knowledge provided by human experts essential for successful assessment. Today, the increasing number of progressively complex systems has led to an urgent need to produce tools that support the expert-led process of system-security assessment. In this research, we use weighted averages (WAs) and ordered weighted averages (OWAs) with evolutionary algorithms (EAs) to create aggregation operators that model parts of the assessment process. We show how individual overall ratings for security components can be produced from ratings of their characteristics, and how these individual overall ratings can be aggregated to produce overall rankings of potential attacks on a system. As well as the identification of salient attacks and weak points in a prospective system, the proposed method also highlights which factors and security components contribute most to a component\'s difficulty and attack ranking respectively. A real world scenario is used in which experts were asked to rank a set of technical attacks, and to answer a series of questions about the security components that are the subject of the attacks. The work shows how finding good aggregation operators, and identifying important components and factors of a cyber-security problem can be automated. The resulting operators have the potential for use as decision aids for systems designers and cyber-security experts, increasing the amount of assessment that can be achieved with the limited resources available.', 'cs.AI', '2016-08-30T15:21:42Z', 'http://arxiv.org/abs/1608.08497v1', '2016-10-08 10:25:41', '2016-10-08 10:25:41')[0m
  [1m[35m (3.9ms)[0m  COMMIT
  [1m[36mPublish Load (0.5ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 78[0m
  [1m[35mAuthor Load (0.5ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Simon Miller'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Simon Miller', '2016-10-08 10:25:41', '2016-10-08 10:25:41')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (223, 78, 0, '2016-10-08 10:25:41', '2016-10-08 10:25:41')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (0.4ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Christian Wagner'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36m (0.2ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (98, 78, 1, '2016-10-08 10:25:41', '2016-10-08 10:25:41')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (0.4ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Uwe Aickelin'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36m (0.2ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (97, 78, 2, '2016-10-08 10:25:41', '2016-10-08 10:25:41')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (0.5ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Jonathan M. Garibaldi'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Jonathan M. Garibaldi', '2016-10-08 10:25:41', '2016-10-08 10:25:41')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (224, 78, 3, '2016-10-08 10:25:41', '2016-10-08 10:25:41')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.4ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'ALLSAT compressed with wildcards. Part 1: Converting CNF\'s to orthogonal DNF\'s'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('ALLSAT compressed with wildcards. Part 1: Converting CNF\'s to orthogonal DNF\'s', 'For most branching algorithms in Boolean logic \"branching\" means \"variable-wise branching\". We present the apparently novel technique of clause-wise branching, which is used to solve the ALLSAT problem for arbitrary Boolean functions in CNF format. Specifically, it converts a CNF into an orthogonal DNF, i.e. into an exclusive sum of products. Our method is enhanced by two ingredients: The use of a good SAT-solver and wildcards beyond the common don\'t-care symbol.', 'cs.AI', '2016-08-30T14:32:41Z', 'http://arxiv.org/abs/1608.08472v1', '2016-10-08 10:25:41', '2016-10-08 10:25:41')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (0.4ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 79
  [1m[36mAuthor Load (0.4ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Marcel Wild'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Marcel Wild', '2016-10-08 10:25:41', '2016-10-08 10:25:41')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (225, 79, 0, '2016-10-08 10:25:41', '2016-10-08 10:25:41')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.3ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'BreakID: Static Symmetry Breaking for ASP (System Description)'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('BreakID: Static Symmetry Breaking for ASP (System Description)', 'Symmetry breaking has been proven to be an efficient preprocessing technique for satisfiability solving (SAT). In this paper, we port the state-of-the-art SAT symmetry breaker BreakID to answer set programming (ASP). The result is a lightweight tool that can be plugged in between the grounding and the solving phases that are common when modelling in ASP. We compare our tool with sbass, the current state-of-the-art symmetry breaker for ASP.', 'cs.AI', '2016-08-30T13:47:41Z', 'http://arxiv.org/abs/1608.08447v1', '2016-10-08 10:25:41', '2016-10-08 10:25:41')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (0.5ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 80
  [1m[36mAuthor Load (0.4ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Jo Devriendt'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36m (0.2ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (151, 80, 0, '2016-10-08 10:25:41', '2016-10-08 10:25:41')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (0.5ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Bart Bogaerts'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Bart Bogaerts', '2016-10-08 10:25:41', '2016-10-08 10:25:41')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (226, 80, 1, '2016-10-08 10:25:41', '2016-10-08 10:25:41')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.4ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Multi-Label Classification Method Based on Extreme Learning Machines'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Multi-Label Classification Method Based on Extreme Learning Machines', 'In this paper, an Extreme Learning Machine (ELM) based technique for Multi-label classification problems is proposed and discussed. In multi-label classification, each of the input data samples belongs to one or more than one class labels. The traditional binary and multi-class classification problems are the subset of the multi-label problem with the number of labels corresponding to each sample limited to one. The proposed ELM based multi-label classification technique is evaluated with six different benchmark multi-label datasets from different domains such as multimedia, text and biology. A detailed comparison of the results is made by comparing the proposed method with the results from nine state of the arts techniques for five different evaluation metrics. The nine methods are chosen from different categories of multi-label methods. The comparative results shows that the proposed Extreme Learning Machine based multi-label classification technique is a better alternative than the existing state of the art methods for multi-label problems.', 'cs.LG', '2016-08-30T13:08:06Z', 'http://dx.doi.org/10.1109/ICARCV.2014.7064375', '2016-10-08 10:25:41', '2016-10-08 10:25:41')
  [1m[36m (3.0ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (0.5ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 81
  [1m[36mAuthor Load (0.4ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Rajasekar Venkatesan'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36m (0.1ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (148, 81, 0, '2016-10-08 10:25:41', '2016-10-08 10:25:41')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (0.5ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Meng Joo Er'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36m (0.2ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (147, 81, 1, '2016-10-08 10:25:41', '2016-10-08 10:25:41')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPaper Load (0.4ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Robust Energy Storage Scheduling for Imbalance Reduction of Strategically Formed Energy Balancing Groups'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Robust Energy Storage Scheduling for Imbalance Reduction of Strategically Formed Energy Balancing Groups', 'Imbalance (on-line energy gap between contracted supply and actual demand, and associated cost) reduction is going to be a crucial service for a Power Producer and Supplier (PPS) in the deregulated energy market. PPS requires forward market interactions to procure energy as precisely as possible in order to reduce imbalance energy. This paper presents, 1) (off-line) an effective demand aggregation based strategy for creating a number of balancing groups that leads to higher predictability of group-wise aggregated demand, 2) (on-line) a robust energy storage scheduling that minimizes the imbalance for a particular balancing group considering the demand prediction uncertainty. The group formation is performed by a Probabilistic Programming approach using Bayesian Markov Chain Monte Carlo (MCMC) method after applied on the historical demand statistics. Apart from the group formation, the aggregation strategy (with the help of Bayesian Inference) also clears out the upper-limit of the required storage capacity for a formed group, fraction of which is to be utilized in on-line operation. For on-line operation, a robust energy storage scheduling method is proposed that minimizes expected imbalance energy and cost (a non-linear function of imbalance energy) while incorporating the demand uncertainty of a particular group. The proposed methods are applied on the real apartment buildings\' demand data in Tokyo, Japan. Simulation results are presented to verify the effectiveness of the proposed methods.', 'cs.SY', '2016-08-30T00:59:07Z', 'http://dx.doi.org/10.1016/j.energy.2016.07.170.', '2016-10-08 10:25:41', '2016-10-08 10:25:41')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPublish Load (0.4ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 82[0m
  [1m[35mAuthor Load (0.3ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Shantanu Chakraborty'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Shantanu Chakraborty', '2016-10-08 10:25:41', '2016-10-08 10:25:41')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (227, 82, 0, '2016-10-08 10:25:41', '2016-10-08 10:25:41')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.4ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Toshiya Okabe'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Toshiya Okabe', '2016-10-08 10:25:41', '2016-10-08 10:25:41')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.3ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (228, 82, 1, '2016-10-08 10:25:41', '2016-10-08 10:25:41')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.4ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Vicious Circle Principle and Formation of Sets in ASP Based Languages'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Vicious Circle Principle and Formation of Sets in ASP Based Languages', 'The paper continues the investigation of Poincare and Russel\'s Vicious Circle Principle (VCP) in the context of the design of logic programming languages with sets. We expand previously introduced language Alog with aggregates by allowing infinite sets and several additional set related constructs useful for knowledge representation and teaching. In addition, we propose an alternative formalization of the original VCP and incorporate it into the semantics of new language, Slog+, which allows more liberal construction of sets and their use in programming rules. We show that, for programs without disjunction and infinite sets, the formal semantics of aggregates in Slog+ coincides with that of several other known languages. Their intuitive and formal semantics, however, are based on quite different ideas and seem to be more involved than that of Slog+.', 'cs.AI', '2016-08-29T21:58:07Z', 'http://arxiv.org/abs/1608.08262v1', '2016-10-08 10:25:41', '2016-10-08 10:25:41')
  [1m[36m (3.0ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (0.5ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 83
  [1m[36mAuthor Load (0.5ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Michael Gelfond'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Michael Gelfond', '2016-10-08 10:25:41', '2016-10-08 10:25:41')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (229, 83, 0, '2016-10-08 10:25:41', '2016-10-08 10:25:41')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.4ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Yuanlin Zhang'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Yuanlin Zhang', '2016-10-08 10:25:41', '2016-10-08 10:25:41')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (230, 83, 1, '2016-10-08 10:25:41', '2016-10-08 10:25:41')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (0.3ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Business Process Deviance Mining: Review and Evaluation'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Business Process Deviance Mining: Review and Evaluation', 'Business process deviance refers to the phenomenon whereby a subset of the executions of a business process deviate, in a negative or positive way, with respect to its expected or desirable outcomes. Deviant executions of a business process include those that violate compliance rules, or executions that undershoot or exceed performance targets. Deviance mining is concerned with uncovering the reasons for deviant executions by analyzing business process event logs. This article provides a systematic review and comparative evaluation of deviance mining approaches based on a family of data mining techniques known as sequence classification. Using real-life logs from multiple domains, we evaluate a range of feature types and classification methods in terms of their ability to accurately discriminate between normal and deviant executions of a process. We also analyze the interestingness of the rule sets extracted using different methods. We observe that feature sets extracted using pattern mining techniques only slightly outperform simpler feature sets based on counts of individual activity occurrences in a trace.', 'cs.AI', '2016-08-29T21:14:01Z', 'http://arxiv.org/abs/1608.08252v1', '2016-10-08 10:25:41', '2016-10-08 10:25:41')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPublish Load (0.4ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 84[0m
  [1m[35mAuthor Load (0.4ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Hoang Nguyen'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Hoang Nguyen', '2016-10-08 10:25:41', '2016-10-08 10:25:41')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (231, 84, 0, '2016-10-08 10:25:41', '2016-10-08 10:25:41')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.4ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Marlon Dumas'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Marlon Dumas', '2016-10-08 10:25:41', '2016-10-08 10:25:41')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (232, 84, 1, '2016-10-08 10:25:41', '2016-10-08 10:25:41')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.4ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Marcello La Rosa'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Marcello La Rosa', '2016-10-08 10:25:41', '2016-10-08 10:25:41')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (233, 84, 2, '2016-10-08 10:25:41', '2016-10-08 10:25:41')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.4ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Fabrizio Maria Maggi'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Fabrizio Maria Maggi', '2016-10-08 10:25:41', '2016-10-08 10:25:41')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (234, 84, 3, '2016-10-08 10:25:41', '2016-10-08 10:25:41')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.4ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Suriadi Suriadi'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Suriadi Suriadi', '2016-10-08 10:25:41', '2016-10-08 10:25:41')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (235, 84, 4, '2016-10-08 10:25:41', '2016-10-08 10:25:41')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (0.3ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Visual Question: Predicting If a Crowd Will Agree on the Answer'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Visual Question: Predicting If a Crowd Will Agree on the Answer', 'Visual question answering (VQA) systems are emerging from a desire to empower users to ask any natural language question about visual content and receive a valid answer in response. However, close examination of the VQA problem reveals an unavoidable, entangled problem that multiple humans may or may not always agree on a single answer to a visual question. We train a model to automatically predict from a visual question whether a crowd would agree on a single answer. We then propose how to exploit this system in a novel application to efficiently allocate human effort to collect answers to visual questions. Specifically, we propose a crowdsourcing system that automatically solicits fewer human responses when answer agreement is expected and more human responses when answer disagreement is expected. Our system improves upon existing crowdsourcing systems, typically eliminating at least 20% of human effort with no loss to the information collected from the crowd.', 'cs.AI', '2016-08-29T19:24:25Z', 'http://arxiv.org/abs/1608.08188v1', '2016-10-08 10:25:41', '2016-10-08 10:25:41')[0m
  [1m[35m (3.0ms)[0m  COMMIT
  [1m[36mPublish Load (0.6ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 85[0m
  [1m[35mAuthor Load (0.7ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Danna Gurari'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Danna Gurari', '2016-10-08 10:25:41', '2016-10-08 10:25:41')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (236, 85, 0, '2016-10-08 10:25:41', '2016-10-08 10:25:41')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.5ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Kristen Grauman'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Kristen Grauman', '2016-10-08 10:25:41', '2016-10-08 10:25:41')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (237, 85, 1, '2016-10-08 10:25:41', '2016-10-08 10:25:41')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.3ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'What is Wrong with Topic Modeling? (and How to Fix it Using Search-based SE)'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('What is Wrong with Topic Modeling? (and How to Fix it Using Search-based SE)', 'Topic Modeling finds human-readable structures in large sets of unstructured SE data. A widely used topic modeler is Latent Dirichlet Allocation. When run on SE data, LDA suffers from \"order effects\" i.e. different topics be generated if the training data was shuffled into a different order. Such order effects introduce a systematic error for any study that uses topics to make conclusions. This paper introduces LDADE, a Search-Based SE tool that tunes LDA\'s parameters using DE (Differential Evolution). LDADE has been tested on data from a programmer information exchange site (Stackoverflow), title and abstract text of thousands of SE papers, and software defect reports from NASA. Results were collected across different implementations of LDA (Python+Scikit-Learn, Scala+Spark); across different platforms (Linux, Macintosh) and for different kinds of LDAs (the traditional VEM method, or using Gibbs sampling). In all tests, the pattern was the same: LDADE\'s tunings dramatically reduces topic instability. The implications of this study for other software analytics tasks is now an open and pressing issue. In how many domains can search-based SE dramatically improve software analytics?', 'cs.SE', '2016-08-29T18:45:00Z', 'http://arxiv.org/abs/1608.08176v1', '2016-10-08 10:25:41', '2016-10-08 10:25:41')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (0.3ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 86
  [1m[36mAuthor Load (0.3ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Amritanshu Agrawal'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Amritanshu Agrawal', '2016-10-08 10:25:41', '2016-10-08 10:25:41')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (238, 86, 0, '2016-10-08 10:25:41', '2016-10-08 10:25:41')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.5ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Wei Fu'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Wei Fu', '2016-10-08 10:25:41', '2016-10-08 10:25:41')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (239, 86, 1, '2016-10-08 10:25:41', '2016-10-08 10:25:41')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.4ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Tim Menzies'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Tim Menzies', '2016-10-08 10:25:41', '2016-10-08 10:25:41')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (240, 86, 2, '2016-10-08 10:25:41', '2016-10-08 10:25:41')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.3ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Achievements in Answer Set Programming (Preliminary Report)'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Achievements in Answer Set Programming (Preliminary Report)', 'This paper describes an approach to the methodology of answer set programming (ASP) that can facilitate the design of encodings that are easy to understand and provably correct. Under this approach, after appending a rule or a small group of rules to the emerging program we include a comment that states what has been \"achieved\" so far. This strategy allows us to set out our understanding of the design of the program by describing the roles of small parts of the program in a mathematically precise way.', 'cs.AI', '2016-08-29T16:59:43Z', 'http://arxiv.org/abs/1608.08144v1', '2016-10-08 10:25:41', '2016-10-08 10:25:41')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (0.5ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 87
  [1m[36mAuthor Load (0.4ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Vladimir Lifschitz'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Vladimir Lifschitz', '2016-10-08 10:25:41', '2016-10-08 10:25:41')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (241, 87, 0, '2016-10-08 10:25:41', '2016-10-08 10:25:41')
  [1m[36m (2.9ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.4ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Fuzzy Logic in Narrow Sense with Hedges'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Fuzzy Logic in Narrow Sense with Hedges', 'Classical logic has a serious limitation in that it cannot cope with the issues of vagueness and uncertainty into which fall most modes of human reasoning. In order to provide a foundation for human knowledge representation and reasoning in the presence of vagueness, imprecision, and uncertainty, fuzzy logic should have the ability to deal with linguistic hedges, which play a very important role in the modification of fuzzy predicates. In this paper, we extend fuzzy logic in narrow sense with graded syntax, introduced by Novak et al., with many hedge connectives. In one case, each hedge does not have any dual one. In the other case, each hedge can have its own dual one. The resulting logics are shown to also have the Pavelka-style completeness', 'cs.AI', '2016-08-29T12:55:15Z', 'http://dx.doi.org/10.5121/ijcsit.2016.8310', '2016-10-08 10:25:41', '2016-10-08 10:25:41')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (0.5ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 88
  [1m[36mAuthor Load (0.3ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Van Hung Le'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Van Hung Le', '2016-10-08 10:25:41', '2016-10-08 10:25:41')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (242, 88, 0, '2016-10-08 10:25:41', '2016-10-08 10:25:41')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.4ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'From Deterministic ODEs to Dynamic Structural Causal Models'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('From Deterministic ODEs to Dynamic Structural Causal Models', 'We show how, under certain conditions, the asymptotic behaviour of an Ordinary Differential Equation under non-constant interventions can be modelled using Dynamic Structural Causal Models. In contrast to earlier work, we study not only the effect of interventions on equilibrium states; rather, we model asymptotic behaviour that is dynamic under interventions that vary in time, and include as a special case the study of static equilibria.', 'cs.AI', '2016-08-29T12:43:42Z', 'http://arxiv.org/abs/1608.08028v1', '2016-10-08 10:25:41', '2016-10-08 10:25:41')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (0.5ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 89
  [1m[36mAuthor Load (0.4ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Paul K. Rubenstein'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Paul K. Rubenstein', '2016-10-08 10:25:41', '2016-10-08 10:25:41')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (243, 89, 0, '2016-10-08 10:25:41', '2016-10-08 10:25:41')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.4ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Stephan Bongers'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Stephan Bongers', '2016-10-08 10:25:41', '2016-10-08 10:25:41')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.4ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (244, 89, 1, '2016-10-08 10:25:41', '2016-10-08 10:25:41')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.4ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Joris M. Mooij'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Joris M. Mooij', '2016-10-08 10:25:41', '2016-10-08 10:25:41')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (245, 89, 2, '2016-10-08 10:25:41', '2016-10-08 10:25:41')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.3ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Bernhard Schoelkopf'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Bernhard Schoelkopf', '2016-10-08 10:25:41', '2016-10-08 10:25:41')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (246, 89, 3, '2016-10-08 10:25:41', '2016-10-08 10:25:41')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (0.4ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Event Selection Rules to Compute Explanations'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Event Selection Rules to Compute Explanations', 'Explanations have been introduced in the previous century. Their interest in reducing the search space is no longer questioned. Yet, their efficient implementation into CSP solver is still a challenge. In this paper, we introduce ESeR, an Event Selection Rules algorithm that filters events generated during propagation. This dynamic selection enables an efficient computation of explanations for intelligent backtracking al- gorithms. We show the effectiveness of our approach on the instances of the last three MiniZinc challenges', 'cs.AI', '2016-08-29T12:07:04Z', 'http://arxiv.org/abs/1608.08015v1', '2016-10-08 10:25:41', '2016-10-08 10:25:41')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPublish Load (0.4ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 90[0m
  [1m[35mAuthor Load (0.5ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Charles Prud\'homme'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Charles Prud\'homme', '2016-10-08 10:25:41', '2016-10-08 10:25:41')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (247, 90, 0, '2016-10-08 10:25:41', '2016-10-08 10:25:41')[0m
  [1m[35m (2.9ms)[0m  COMMIT
  [1m[36mAuthor Load (0.6ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Xavier Lorca'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Xavier Lorca', '2016-10-08 10:25:41', '2016-10-08 10:25:41')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.4ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (248, 90, 1, '2016-10-08 10:25:41', '2016-10-08 10:25:41')
  [1m[36m (1.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.6ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Narendra Jussien'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Narendra Jussien', '2016-10-08 10:25:41', '2016-10-08 10:25:41')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (249, 90, 2, '2016-10-08 10:25:41', '2016-10-08 10:25:41')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPaper Load (0.4ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Machine Comprehension Using Match-LSTM and Answer Pointer'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.4ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Machine Comprehension Using Match-LSTM and Answer Pointer', 'Machine comprehension of text is an important problem in natural language processing. A recently released dataset, the Stanford Question Answering Dataset (SQuAD), offers a large number of real questions and their answers created by humans through crowdsourcing. SQuAD provides a challenging testbed for evaluating machine comprehension algorithms, partly because compared with previous datasets, in SQuAD the answers do not come from a small set of candidate answers and they have variable lengths. We propose an end-to-end neural architecture for the task. The architecture is based on match-LSTM, a model we proposed previously for textual entailment, and Pointer Net, a sequence-to-sequence model proposed by Vinyals et al.(2015) to constrain the output tokens to be from the input sequences. We propose two ways of using Pointer Net for our task. Our experiments show that both of our two models substantially outperform the best results obtained by Rajpurkar et al.(2016) using logistic regression and manually crafted features.', 'cs.CL', '2016-08-29T03:42:50Z', 'http://arxiv.org/abs/1608.07905v1', '2016-10-08 10:25:41', '2016-10-08 10:25:41')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPublish Load (0.5ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 91[0m
  [1m[35mAuthor Load (0.4ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Shuohang Wang'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Shuohang Wang', '2016-10-08 10:25:41', '2016-10-08 10:25:41')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (250, 91, 0, '2016-10-08 10:25:41', '2016-10-08 10:25:41')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.3ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Jing Jiang'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Jing Jiang', '2016-10-08 10:25:41', '2016-10-08 10:25:41')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (251, 91, 1, '2016-10-08 10:25:41', '2016-10-08 10:25:41')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.4ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Causality and Responsibility for Formal Verification and Beyond'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.8ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Causality and Responsibility for Formal Verification and Beyond', 'The theory of actual causality, defined by Halpern and Pearl, and its quantitative measure - the degree of responsibility - was shown to be extremely useful in various areas of computer science due to a good match between the results it produces and our intuition. In this paper, I describe the applications of causality to formal verification, namely, explanation of counterexamples, refinement of coverage metrics, and symbolic trajectory evaluation. I also briefly discuss recent applications of causality to legal reasoning.', 'cs.SE', '2016-08-29T01:35:46Z', 'http://dx.doi.org/10.4204/EPTCS.224.1', '2016-10-08 10:25:41', '2016-10-08 10:25:41')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (0.5ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 92
  [1m[36mAuthor Load (0.4ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Hana Chockler'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Hana Chockler', '2016-10-08 10:25:41', '2016-10-08 10:25:41')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (252, 92, 0, '2016-10-08 10:25:41', '2016-10-08 10:25:41')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.4ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Data Analytics using Ontologies of Management Theories: Towards Implementing \'From Theory to Practice\''  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Data Analytics using Ontologies of Management Theories: Towards Implementing \'From Theory to Practice\'', 'We explore how computational ontologies can be impactful vis-a-vis the developing discipline of \"data science.\" We posit an approach wherein management theories are represented as formal axioms, and then applied to draw inferences about data that reside in corporate databases. That is, management theories would be implemented as rules within a data analytics engine. We demonstrate a case study development of such an ontology by formally representing an accounting theory in First-Order Logic. Though quite preliminary, the idea that an information technology, namely ontologies, can potentially actualize the academic cliche, \"From Theory to Practice,\" and be applicable to the burgeoning domain of data analytics is novel and exciting.', 'cs.AI', '2016-08-28T19:51:31Z', 'http://arxiv.org/abs/1608.07846v1', '2016-10-08 10:25:41', '2016-10-08 10:25:41')
  [1m[36m (3.0ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (0.5ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 93
  [1m[36mAuthor Load (0.4ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Henry M. Kim'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Henry M. Kim', '2016-10-08 10:25:41', '2016-10-08 10:25:41')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (253, 93, 0, '2016-10-08 10:25:41', '2016-10-08 10:25:41')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.5ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Jackie Ho Nam Cheung'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Jackie Ho Nam Cheung', '2016-10-08 10:25:41', '2016-10-08 10:25:41')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (254, 93, 1, '2016-10-08 10:25:41', '2016-10-08 10:25:41')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.4ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Marek Laskowski'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Marek Laskowski', '2016-10-08 10:25:41', '2016-10-08 10:25:41')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (255, 93, 2, '2016-10-08 10:25:41', '2016-10-08 10:25:41')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.3ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Iryna Gel'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Iryna Gel', '2016-10-08 10:25:41', '2016-10-08 10:25:41')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (256, 93, 3, '2016-10-08 10:25:41', '2016-10-08 10:25:41')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (0.4ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Partially Observable Markov Decision Process for Recommender Systems'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Partially Observable Markov Decision Process for Recommender Systems', 'We report the \"Recurrent Deterioration\" (RD) phenomenon observed in online recommender systems. The RD phenomenon is reflected by the trend of performance degradation when the recommendation model is always trained based on users\' feedbacks of the previous recommendations. There are several reasons for the recommender systems to encounter the RD phenomenon, including the lack of negative training data and the evolution of users\' interests, etc. Motivated to tackle the problems causing the RD phenomenon, we propose the POMDP-Rec framework, which is a neural-optimized Partially Observable Markov Decision Process algorithm for recommender systems. We show that the POMDP-Rec framework effectively uses the accumulated historical data from real-world recommender systems and automatically achieves comparable results with those models fine-tuned exhaustively by domain exports on public datasets.', 'cs.AI', '2016-08-28T09:42:52Z', 'http://arxiv.org/abs/1608.07793v2', '2016-10-08 10:25:41', '2016-10-08 10:25:41')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPublish Load (0.4ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 94[0m
  [1m[35mAuthor Load (0.4ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Zhongqi Lu'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Zhongqi Lu', '2016-10-08 10:25:41', '2016-10-08 10:25:41')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (257, 94, 0, '2016-10-08 10:25:41', '2016-10-08 10:25:41')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (0.5ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Qiang Yang'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Qiang Yang', '2016-10-08 10:25:41', '2016-10-08 10:25:41')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (258, 94, 1, '2016-10-08 10:25:41', '2016-10-08 10:25:41')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.4ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'The Movie Graph Argument Revisited'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('The Movie Graph Argument Revisited', 'In this paper, we reexamine the Movie Graph Argument, which demonstrates a basic incompatibility between computationalism and materialism. We discover that the incompatibility is only manifest in singular classical-like universes. If we accept that we live in a Multiverse, then the incompatibility goes away, but in that case another line of argument shows that with computationalism, the fundamental, or primitive materiality has no causal influence on what is observed, which must must be derivable from basic arithmetic properties.', 'cs.AI', '2016-08-28T04:18:39Z', 'http://arxiv.org/abs/1608.07764v1', '2016-10-08 10:25:41', '2016-10-08 10:25:41')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (0.4ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 95
  [1m[36mAuthor Load (0.4ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Russell K. Standish'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Russell K. Standish', '2016-10-08 10:25:41', '2016-10-08 10:25:41')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (259, 95, 0, '2016-10-08 10:25:41', '2016-10-08 10:25:41')
  [1m[36m (3.0ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.6ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Learning Bayesian Networks without Assuming Missing at Random'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Learning Bayesian Networks without Assuming Missing at Random', 'We present new algorithms for learning Bayesian networks from data with missing values without the assumption that data are missing at random (MAR). An exact Bayesian network learning algorithm is obtained by recasting the problem into a standard Bayesian network learning problem without missing data. To the best of our knowledge, this is the first exact algorithm for this problem. As expected, the exact algorithm does not scale to large domains. We build on the exact method to create a new approximate algorithm using a hill-climbing technique. This algorithm scales to large domains so long as a suitable standard structure learning method for complete data is available. We perform a wide range of experiments to demonstrate the benefits of learning Bayesian networks without assuming MAR.', 'cs.AI', '2016-08-27T18:41:47Z', 'http://arxiv.org/abs/1608.07734v1', '2016-10-08 10:25:41', '2016-10-08 10:25:41')
  [1m[36m (0.6ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (0.5ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 96
  [1m[36mAuthor Load (0.4ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Tameem Adel'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Tameem Adel', '2016-10-08 10:25:41', '2016-10-08 10:25:41')[0m
  [1m[35m (1.3ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (260, 96, 0, '2016-10-08 10:25:41', '2016-10-08 10:25:41')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.5ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Cassio P. de Campos'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Cassio P. de Campos', '2016-10-08 10:25:41', '2016-10-08 10:25:41')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (261, 96, 1, '2016-10-08 10:25:41', '2016-10-08 10:25:41')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPaper Load (0.4ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Knowledge Semantic Representation: A Generative Model for Interpretable Knowledge Graph Embedding'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Knowledge Semantic Representation: A Generative Model for Interpretable Knowledge Graph Embedding', 'Knowledge representation is a critical topic in AI, and currently embedding as a key branch of knowledge representation takes the numerical form of entities and relations to joint the statistical models. However, most embedding methods merely concentrate on the triple fitting and ignore the explicit semantic expression, leading to an uninterpretable representation form. Thus, traditional embedding methods do not only degrade the performance, but also restrict many potential applications. For this end, this paper proposes a semantic representation method for knowledge graph \\textbf{(KSR)}, which imposes a two-level hierarchical generative process that globally extracts many aspects and then locally assigns a specific category in each aspect for every triple. Because both the aspects and categories are semantics-relevant, the collection of categories in each aspect is treated as the semantic representation of this triple. Extensive experiments justify our model outperforms other state-of-the-art baselines in a substantial extent.', 'cs.LG', '2016-08-27T09:53:38Z', 'http://arxiv.org/abs/1608.07685v1', '2016-10-08 10:25:41', '2016-10-08 10:25:41')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPublish Load (0.5ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 97[0m
  [1m[35mAuthor Load (0.4ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Han Xiao'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Han Xiao', '2016-10-08 10:25:41', '2016-10-08 10:25:41')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (262, 97, 0, '2016-10-08 10:25:41', '2016-10-08 10:25:41')[0m
  [1m[35m (0.3ms)[0m  COMMIT
  [1m[36mAuthor Load (0.4ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Minlie Huang'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Minlie Huang', '2016-10-08 10:25:41', '2016-10-08 10:25:41')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (263, 97, 1, '2016-10-08 10:25:41', '2016-10-08 10:25:41')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.5ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Xiaoyan Zhu'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Xiaoyan Zhu', '2016-10-08 10:25:41', '2016-10-08 10:25:41')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (264, 97, 2, '2016-10-08 10:25:41', '2016-10-08 10:25:41')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (0.4ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Learning to generalize to new compositions in image understanding'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Learning to generalize to new compositions in image understanding', 'Recurrent neural networks have recently been used for learning to describe images using natural language. However, it has been observed that these models generalize poorly to scenes that were not observed during training, possibly depending too strongly on the statistics of the text in the training data. Here we propose to describe images using short structured representations, aiming to capture the crux of a description. These structured representations allow us to tease-out and evaluate separately two types of generalization: standard generalization to new images with similar scenes, and generalization to new combinations of known entities. We compare two learning approaches on the MS-COCO dataset: a state-of-the-art recurrent network based on an LSTM (Show, Attend and Tell), and a simple structured prediction model on top of a deep network. We find that the structured model generalizes to new compositions substantially better than the LSTM, ~7 times the accuracy of predicting structured representations. By providing a concrete method to quantify generalization for unseen combinations, we argue that structured representations and compositional splits are a useful benchmark for image captioning, and advocate compositional models that capture linguistic and visual structure.', 'cs.CV', '2016-08-27T00:34:00Z', 'http://arxiv.org/abs/1608.07639v1', '2016-10-08 10:25:41', '2016-10-08 10:25:41')[0m
  [1m[35m (2.9ms)[0m  COMMIT
  [1m[36mPublish Load (0.6ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 98[0m
  [1m[35mAuthor Load (0.5ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Yuval Atzmon'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Yuval Atzmon', '2016-10-08 10:25:41', '2016-10-08 10:25:41')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (265, 98, 0, '2016-10-08 10:25:41', '2016-10-08 10:25:41')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.4ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Jonathan Berant'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Jonathan Berant', '2016-10-08 10:25:41', '2016-10-08 10:25:41')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (266, 98, 1, '2016-10-08 10:25:41', '2016-10-08 10:25:41')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.5ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Vahid Kezami'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Vahid Kezami', '2016-10-08 10:25:41', '2016-10-08 10:25:41')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (267, 98, 2, '2016-10-08 10:25:41', '2016-10-08 10:25:41')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.5ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Amir Globerson'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Amir Globerson', '2016-10-08 10:25:41', '2016-10-08 10:25:41')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (268, 98, 3, '2016-10-08 10:25:41', '2016-10-08 10:25:41')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.5ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Gal Chechik'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Gal Chechik', '2016-10-08 10:25:41', '2016-10-08 10:25:41')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (269, 98, 4, '2016-10-08 10:25:41', '2016-10-08 10:25:41')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPaper Load (0.4ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Hard Negative Mining for Metric Learning Based Zero-Shot Classification'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Hard Negative Mining for Metric Learning Based Zero-Shot Classification', 'Zero-Shot learning has been shown to be an efficient strategy for domain adaptation. In this context, this paper builds on the recent work of Bucher et al. [1], which proposed an approach to solve Zero-Shot classification problems (ZSC) by introducing a novel metric learning based objective function. This objective function allows to learn an optimal embedding of the attributes jointly with a measure of similarity between images and attributes. This paper extends their approach by proposing several schemes to control the generation of the negative pairs, resulting in a significant improvement of the performance and giving above state-of-the-art results on three challenging ZSC datasets.', 'cs.LG', '2016-08-26T12:42:43Z', 'http://arxiv.org/abs/1608.07441v1', '2016-10-08 10:25:41', '2016-10-08 10:25:41')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPublish Load (0.5ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 99[0m
  [1m[35mAuthor Load (0.4ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Maxime Bucher'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Maxime Bucher', '2016-10-08 10:25:41', '2016-10-08 10:25:41')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (270, 99, 0, '2016-10-08 10:25:41', '2016-10-08 10:25:41')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (0.4ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Stéphane Herbin'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Stéphane Herbin', '2016-10-08 10:25:41', '2016-10-08 10:25:41')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (271, 99, 1, '2016-10-08 10:25:41', '2016-10-08 10:25:41')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.5ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Frédéric Jurie'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Frédéric Jurie', '2016-10-08 10:25:41', '2016-10-08 10:25:41')
  [1m[36m (3.0ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (272, 99, 2, '2016-10-08 10:25:41', '2016-10-08 10:25:41')[0m
  [1m[35m (0.6ms)[0m  COMMIT
  [1m[36mPaper Load (0.4ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Activity Networks with Delays An application to toxicity analysis'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.4ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Activity Networks with Delays An application to toxicity analysis', 'ANDy , Activity Networks with Delays, is a discrete time framework aimed at the qualitative modelling of time-dependent activities. The modular and concise syntax makes ANDy suitable for an easy and natural modelling of time-dependent biological systems (i.e., regulatory pathways). Activities involve entities playing the role of activators, inhibitors or products of biochemical network operation. Activities may have given duration, i.e., the time required to obtain results. An entity may represent an object (e.g., an agent, a biochemical species or a family of thereof) with a local attribute, a state denoting its level (e.g., concentration, strength). Entities levels may change as a result of an activity or may decay gradually as time passes by. The semantics of ANDy is formally given via high-level Petri nets ensuring this way some modularity. As main results we show that ANDy systems have finite state representations even for potentially infinite processes and it well adapts to the modelling of toxic behaviours. As an illustration, we present a classification of toxicity properties and give some hints on how they can be verified with existing tools on ANDy systems. A small case study on blood glucose regulation is provided to exemplify the ANDy framework and the toxicity properties.', 'q-bio.QM', '2016-08-26T12:41:43Z', 'http://arxiv.org/abs/1608.07440v1', '2016-10-08 10:25:41', '2016-10-08 10:25:41')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPublish Load (0.5ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 100[0m
  [1m[35mAuthor Load (0.4ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Franck Delaplace'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Franck Delaplace', '2016-10-08 10:25:41', '2016-10-08 10:25:41')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (273, 100, 0, '2016-10-08 10:25:41', '2016-10-08 10:25:41')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.5ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Cinzia Di Giusto'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Cinzia Di Giusto', '2016-10-08 10:25:41', '2016-10-08 10:25:41')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (274, 100, 1, '2016-10-08 10:25:41', '2016-10-08 10:25:41')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.5ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Jean-Louis Giavitto'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Jean-Louis Giavitto', '2016-10-08 10:25:41', '2016-10-08 10:25:41')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (275, 100, 2, '2016-10-08 10:25:41', '2016-10-08 10:25:41')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (0.5ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Hanna Klaudel'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Hanna Klaudel', '2016-10-08 10:25:41', '2016-10-08 10:25:41')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (276, 100, 3, '2016-10-08 10:25:41', '2016-10-08 10:25:41')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.4ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Proceedings First Workshop on Causal Reasoning for Embedded and safety-critical Systems Technologies'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Proceedings First Workshop on Causal Reasoning for Embedded and safety-critical Systems Technologies', 'Formal approaches for automated causality analysis, fault localization, explanation of events, accountability and blaming have been proposed independently by several communities --- in particular, AI, concurrency, model-based diagnosis, formal methods. Work on these topics has significantly gained speed during the last years. The goals of CREST are to bring together and foster exchange between researchers from the different communities, and to present and discuss recent advances and new ideas in the field. The workshop program consisted of a set of invited and contributed presentations that illustrate different techniques for, and applications of, causality analysis and fault localization. The program was anchored by two keynote talks. The keynote by Hana Chockler (King\'s College) provided a broad perspective on the application of causal reasoning based on Halpern and Pearl\'s definitions of actual causality to a variety of application domains ranging from formal verification to legal reasoning. The keynote by Chao Wang (Virginia Tech) concentrated on constraint-based analysis techniques for debugging and verifying concurrent programs. Workshop papers deal with compositional causality analysis and a wide spectrum of application for causal reasoning, such as debugging of probabilistic models, accountability and responsibility, hazard analysis in practice based on Lewis\' counterfactuals, and fault localization and repair.', 'cs.LO', '2016-08-26T09:13:22Z', 'http://dx.doi.org/10.4204/EPTCS.224', '2016-10-08 10:25:41', '2016-10-08 10:25:41')
  [1m[36m (2.9ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (0.6ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 101
  [1m[36mAuthor Load (0.5ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Gregor Gössler'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Gregor Gössler', '2016-10-08 10:25:41', '2016-10-08 10:25:41')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (277, 101, 0, '2016-10-08 10:25:41', '2016-10-08 10:25:41')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.4ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Oleg Sokolsky'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Oleg Sokolsky', '2016-10-08 10:25:41', '2016-10-08 10:25:41')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (278, 101, 1, '2016-10-08 10:25:41', '2016-10-08 10:25:41')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (0.4ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'A Novel Approach to Multimedia Ontology Engineering for Automated Reasoning over Audiovisual LOD Datasets'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('A Novel Approach to Multimedia Ontology Engineering for Automated Reasoning over Audiovisual LOD Datasets', 'Multimedia reasoning, which is suitable for, among others, multimedia content analysis and high-level video scene interpretation, relies on the formal and comprehensive conceptualization of the represented knowledge domain. However, most multimedia ontologies are not exhaustive in terms of role definitions, and do not incorporate complex role inclusions and role interdependencies. In fact, most multimedia ontologies do not have a role box at all, and implement only a basic subset of the available logical constructors. Consequently, their application in multimedia reasoning is limited. To address the above issues, VidOnt, the very first multimedia ontology with SROIQ(D) expressivity and a DL-safe ruleset has been introduced for next-generation multimedia reasoning. In contrast to the common practice, the formal grounding has been set in one of the most expressive description logics, and the ontology validated with industry-leading reasoners, namely HermiT and FaCT++. This paper also presents best practices for developing multimedia ontologies, based on my ontology engineering approach.', 'cs.AI', '2016-08-26T05:53:07Z', 'http://dx.doi.org/10.1007/978-3-662-49381-6_1', '2016-10-08 10:25:41', '2016-10-08 10:25:41')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPublish Load (0.5ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 102[0m
  [1m[35mAuthor Load (0.3ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Leslie F. Sikos'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Leslie F. Sikos', '2016-10-08 10:25:41', '2016-10-08 10:25:41')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (279, 102, 0, '2016-10-08 10:25:41', '2016-10-08 10:25:41')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPaper Load (0.4ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Learning Latent Vector Spaces for Product Search'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Learning Latent Vector Spaces for Product Search', 'We introduce a novel latent vector space model that jointly learns the latent representations of words, e-commerce products and a mapping between the two without the need for explicit annotations. The power of the model lies in its ability to directly model the discriminative relation between products and a particular word. We compare our method to existing latent vector space models (LSI, LDA and word2vec) and evaluate it as a feature in a learning to rank setting. Our latent vector space model achieves its enhanced performance as it learns better product representations. Furthermore, the mapping from words to products and the representations of words benefit directly from the errors propagated back from the product representations during parameter estimation. We provide an in-depth analysis of the performance of our model and analyze the structure of the learned representations.', 'cs.IR', '2016-08-25T18:57:50Z', 'http://dx.doi.org/10.1145/2983323.2983702', '2016-10-08 10:25:41', '2016-10-08 10:25:41')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPublish Load (0.5ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 103[0m
  [1m[35mAuthor Load (0.5ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Christophe Van Gysel'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Christophe Van Gysel', '2016-10-08 10:25:41', '2016-10-08 10:25:41')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (280, 103, 0, '2016-10-08 10:25:41', '2016-10-08 10:25:41')[0m
  [1m[35m (2.9ms)[0m  COMMIT
  [1m[36mAuthor Load (0.6ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Maarten de Rijke'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Maarten de Rijke', '2016-10-08 10:25:41', '2016-10-08 10:25:41')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (281, 103, 1, '2016-10-08 10:25:41', '2016-10-08 10:25:41')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.5ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Evangelos Kanoulas'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Evangelos Kanoulas', '2016-10-08 10:25:41', '2016-10-08 10:25:41')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (282, 103, 2, '2016-10-08 10:25:41', '2016-10-08 10:25:41')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPaper Load (0.4ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Semantics derived automatically from language corpora necessarily contain human biases'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.4ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Semantics derived automatically from language corpora necessarily contain human biases', 'Artificial intelligence and machine learning are in a period of astounding growth. However, there are concerns that these technologies may be used, either with or without intention, to perpetuate the prejudice and unfairness that unfortunately characterizes many human institutions. Here we show for the first time that human-like semantic biases result from the application of standard machine learning to ordinary language---the same sort of language humans are exposed to every day. We replicate a spectrum of standard human biases as exposed by the Implicit Association Test and other well-known psychological studies. We replicate these using a widely used, purely statistical machine-learning model---namely, the GloVe word embedding---trained on a corpus of text from the Web. Our results indicate that language itself contains recoverable and accurate imprints of our historic biases, whether these are morally neutral as towards insects or flowers, problematic as towards race or gender, or even simply veridical, reflecting the status quo for the distribution of gender with respect to careers or first names. These regularities are captured by machine learning along with the rest of semantics. In addition to our empirical findings concerning language, we also contribute new methods for evaluating bias in text, the Word Embedding Association Test (WEAT) and the Word Embedding Factual Association Test (WEFAT). Our results have implications not only for AI and machine learning, but also for the fields of psychology, sociology, and human ethics, since they raise the possibility that mere exposure to everyday language can account for the biases we replicate here.', 'cs.AI', '2016-08-25T15:07:17Z', 'http://arxiv.org/abs/1608.07187v2', '2016-10-08 10:25:41', '2016-10-08 10:25:41')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPublish Load (0.6ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 104[0m
  [1m[35mAuthor Load (0.4ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Aylin Caliskan-Islam'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Aylin Caliskan-Islam', '2016-10-08 10:25:41', '2016-10-08 10:25:41')
  [1m[36m (0.6ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (283, 104, 0, '2016-10-08 10:25:41', '2016-10-08 10:25:41')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.3ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Joanna J. Bryson'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Joanna J. Bryson', '2016-10-08 10:25:41', '2016-10-08 10:25:41')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (284, 104, 1, '2016-10-08 10:25:41', '2016-10-08 10:25:41')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.5ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Arvind Narayanan'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Arvind Narayanan', '2016-10-08 10:25:41', '2016-10-08 10:25:41')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (285, 104, 2, '2016-10-08 10:25:41', '2016-10-08 10:25:41')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (0.4ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Modelling Chemical Reasoning to Predict Reactions'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.6ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Modelling Chemical Reasoning to Predict Reactions', 'The ability to reason beyond established knowledge allows Organic Chemists to solve synthetic problems and to invent novel transformations. Here, we propose a model which mimics chemical reasoning and formalises reaction prediction as finding missing links in a knowledge graph. We have constructed a knowledge graph containing 14.4 million molecules and 8.2 million binary reactions, which represents the bulk of all chemical reactions ever published in the scientific literature. Our model outperforms a rule-based expert system in the reaction prediction task for 180,000 randomly selected binary reactions. We show that our data-driven model generalises even beyond known reaction types, and is thus capable of effectively (re-) discovering novel transformations (even including transition-metal catalysed reactions). Our model enables computers to infer hypotheses about reactivity and reactions by only considering the intrinsic local structure of the graph, and because each single reaction prediction is typically achieved in a sub-second time frame, our model can be used as a high-throughput generator of reaction hypotheses for reaction discovery.', 'cs.AI', '2016-08-25T12:45:20Z', 'http://arxiv.org/abs/1608.07117v1', '2016-10-08 10:25:41', '2016-10-08 10:25:41')[0m
  [1m[35m (2.9ms)[0m  COMMIT
  [1m[36mPublish Load (0.6ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 105[0m
  [1m[35mAuthor Load (0.5ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Marwin H. S. Segler'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Marwin H. S. Segler', '2016-10-08 10:25:41', '2016-10-08 10:25:41')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.4ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (286, 105, 0, '2016-10-08 10:25:41', '2016-10-08 10:25:41')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (0.5ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Mark P. Waller'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Mark P. Waller', '2016-10-08 10:25:41', '2016-10-08 10:25:41')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (287, 105, 1, '2016-10-08 10:25:41', '2016-10-08 10:25:41')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.4ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Title Generation for User Generated Videos'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Title Generation for User Generated Videos', 'A great video title describes the most salient event compactly and captures the viewer\'s attention. In contrast, video captioning tends to generate sentences that describe the video as a whole. Although generating a video title automatically is a very useful task, it is much less addressed than video captioning. We address video title generation for the first time by proposing two methods that extend state-of-the-art video captioners to this new task. First, we make video captioners highlight sensitive by priming them with a highlight detector. Our framework allows for jointly training a model for title generation and video highlight localization. Second, we induce high sentence diversity in video captioners, so that the generated titles are also diverse and catchy. This means that a large number of sentences might be required to learn the sentence structure of titles. Hence, we propose a novel sentence augmentation method to train a captioner with additional sentence-only examples that come without corresponding videos. We collected a large-scale Video Titles in the Wild (VTW) dataset of 18100 automatically crawled user-generated videos and titles. On VTW, our methods consistently improve title prediction accuracy, and achieve the best performance in both automatic and human evaluation. Finally, our sentence augmentation method also outperforms the baselines on the M-VAD dataset.', 'cs.CV', '2016-08-25T09:49:23Z', 'http://arxiv.org/abs/1608.07068v2', '2016-10-08 10:25:41', '2016-10-08 10:25:41')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (0.5ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 106
  [1m[36mAuthor Load (0.5ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Kuo-Hao Zeng'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Kuo-Hao Zeng', '2016-10-08 10:25:41', '2016-10-08 10:25:41')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (288, 106, 0, '2016-10-08 10:25:41', '2016-10-08 10:25:41')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.5ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Tseng-Hung Chen'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Tseng-Hung Chen', '2016-10-08 10:25:41', '2016-10-08 10:25:41')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (289, 106, 1, '2016-10-08 10:25:41', '2016-10-08 10:25:41')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (0.6ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Juan Carlos Niebles'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Juan Carlos Niebles', '2016-10-08 10:25:41', '2016-10-08 10:25:41')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (290, 106, 2, '2016-10-08 10:25:41', '2016-10-08 10:25:41')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.5ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Min Sun'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Min Sun', '2016-10-08 10:25:41', '2016-10-08 10:25:41')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (291, 106, 3, '2016-10-08 10:25:41', '2016-10-08 10:25:41')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (0.4ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Multi-View Fuzzy Clustering with Minimax Optimization for Effective Clustering of Data from Multiple Sources'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Multi-View Fuzzy Clustering with Minimax Optimization for Effective Clustering of Data from Multiple Sources', 'Multi-view data clustering refers to categorizing a data set by making good use of related information from multiple representations of the data. It becomes important nowadays because more and more data can be collected in a variety of ways, in different settings and from different sources, so each data set can be represented by different sets of features to form different views of it. Many approaches have been proposed to improve clustering performance by exploring and integrating heterogeneous information underlying different views. In this paper, we propose a new multi-view fuzzy clustering approach called MinimaxFCM by using minimax optimization based on well-known Fuzzy c means. In MinimaxFCM the consensus clustering results are generated based on minimax optimization in which the maximum disagreements of different weighted views are minimized. Moreover, the weight of each view can be learned automatically in the clustering process. In addition, there is only one parameter to be set besides the fuzzifier. The detailed problem formulation, updating rules derivation, and the in-depth analysis of the proposed MinimaxFCM are provided here. Experimental studies on nine multi-view data sets including real world image and document data sets have been conducted. We observed that MinimaxFCM outperforms related multi-view clustering approaches in terms of clustering accuracy, demonstrating the great potential of MinimaxFCM for multi-view data analysis.', 'cs.AI', '2016-08-25T02:15:37Z', 'http://arxiv.org/abs/1608.07005v1', '2016-10-08 10:25:41', '2016-10-08 10:25:41')[0m
  [1m[35m (3.1ms)[0m  COMMIT
  [1m[36mPublish Load (0.6ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 107[0m
  [1m[35mAuthor Load (0.5ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Yangtao Wang'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Yangtao Wang', '2016-10-08 10:25:42', '2016-10-08 10:25:42')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (292, 107, 0, '2016-10-08 10:25:42', '2016-10-08 10:25:42')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.4ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Lihui Chen'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Lihui Chen', '2016-10-08 10:25:42', '2016-10-08 10:25:42')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (293, 107, 1, '2016-10-08 10:25:42', '2016-10-08 10:25:42')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.4ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Incremental Minimax Optimization based Fuzzy Clustering for Large Multi-view Data'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Incremental Minimax Optimization based Fuzzy Clustering for Large Multi-view Data', 'Incremental clustering approaches have been proposed for handling large data when given data set is too large to be stored. The key idea of these approaches is to find representatives to represent each cluster in each data chunk and final data analysis is carried out based on those identified representatives from all the chunks. However, most of the incremental approaches are used for single view data. As large multi-view data generated from multiple sources becomes prevalent nowadays, there is a need for incremental clustering approaches to handle both large and multi-view data. In this paper we propose a new incremental clustering approach called incremental minimax optimization based fuzzy clustering (IminimaxFCM) to handle large multi-view data. In IminimaxFCM, representatives with multiple views are identified to represent each cluster by integrating multiple complementary views using minimax optimization. The detailed problem formulation, updating rules derivation, and the in-depth analysis of the proposed IminimaxFCM are provided. Experimental studies on several real world multi-view data sets have been conducted. We observed that IminimaxFCM outperforms related incremental fuzzy clustering in terms of clustering accuracy, demonstrating the great potential of IminimaxFCM for large multi-view data analysis.', 'cs.AI', '2016-08-25T01:56:20Z', 'http://arxiv.org/abs/1608.07001v1', '2016-10-08 10:25:42', '2016-10-08 10:25:42')
  [1m[36m (0.6ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (0.5ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 108
  [1m[36mAuthor Load (0.5ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Yangtao Wang'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36m (0.2ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (292, 108, 0, '2016-10-08 10:25:42', '2016-10-08 10:25:42')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (0.6ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Lihui Chen'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36m (0.2ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (293, 108, 1, '2016-10-08 10:25:42', '2016-10-08 10:25:42')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.4ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Xiaoli Li'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Xiaoli Li', '2016-10-08 10:25:42', '2016-10-08 10:25:42')[0m
  [1m[35m (2.9ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (294, 108, 2, '2016-10-08 10:25:42', '2016-10-08 10:25:42')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.4ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'State Duration and Interval Modeling in Hidden Semi-Markov Model for Sequential Data Analysis'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.4ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('State Duration and Interval Modeling in Hidden Semi-Markov Model for Sequential Data Analysis', 'Sequential data modeling and analysis have become indispensable tools for analyzing sequential data such as time-series data because a larger amount of sensed event data have become available. These methods capture the sequential structure of data of interest, such as input- output relationship and correlation among datasets. However, since most studies in this area are specialized or limited for their respective applications, rigorous requirement analysis on such a model has not been examined in a general point of view. Hence, we particularly examine the structure of sequential data, and extract the necessity of \"state duration\" and \"state duration\" of events for efficient and rich representation of sequential data. Specifically addressing the hidden semi-Markov model (HSMM) that represents such state duration inside a model, we attempt to newly add representational capability of state interval of events onto HSMM. To this end, we propose two extended models; one is interval state hidden semi-Markov model (IS-HSMM) to express the length of state interval with a special state node designated as \"interval state node\". The other is interval length probability hidden semi-Markov model (ILP-HSMM) which repre- sents the length of state interval with a new probabilistic parameter \"interval length probability.\" From exhaustive simulations, we show superior performances of the proposed models in comparison with HSMM. To the best of our knowledge, our proposed models are the first extensions of HMM to support state interval representation as well as state duration representation.', 'cs.AI', '2016-08-24T20:11:14Z', 'http://arxiv.org/abs/1608.06954v1', '2016-10-08 10:25:42', '2016-10-08 10:25:42')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (0.4ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 109
  [1m[36mAuthor Load (0.4ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Hiromi Narimatsu'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Hiromi Narimatsu', '2016-10-08 10:25:42', '2016-10-08 10:25:42')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (295, 109, 0, '2016-10-08 10:25:42', '2016-10-08 10:25:42')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.4ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Hiroyuki Kasai'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Hiroyuki Kasai', '2016-10-08 10:25:42', '2016-10-08 10:25:42')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (296, 109, 1, '2016-10-08 10:25:42', '2016-10-08 10:25:42')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPaper Load (0.4ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'A Parallel Memory-efficient Epistemic Logic Program Solver: Harder, Better, Faster'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('A Parallel Memory-efficient Epistemic Logic Program Solver: Harder, Better, Faster', 'As the practical use of answer set programming (ASP) has grown with the development of efficient solvers, we expect a growing interest in extensions of ASP as their semantics stabilize and solvers supporting them mature. Epistemic Specifications, which adds modal operators K and M to the language of ASP, is one such extension. We call a program in this language an epistemic logic program (ELP). Solvers have thus far been practical for only the simplest ELPs due to exponential growth of the memory required. We describe a solver that is able to solve harder problems better (without exponentially-growing memory needs w.r.t. K and M occurrences) and faster than any other known ELP solver.', 'cs.AI', '2016-08-24T18:18:08Z', 'http://arxiv.org/abs/1608.06910v1', '2016-10-08 10:25:42', '2016-10-08 10:25:42')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPublish Load (0.4ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 110[0m
  [1m[35mAuthor Load (0.4ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Patrick Thor Kahl'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Patrick Thor Kahl', '2016-10-08 10:25:42', '2016-10-08 10:25:42')
  [1m[36m (1.1ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (297, 110, 0, '2016-10-08 10:25:42', '2016-10-08 10:25:42')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (0.4ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Anthony P. Leclerc'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Anthony P. Leclerc', '2016-10-08 10:25:42', '2016-10-08 10:25:42')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (298, 110, 1, '2016-10-08 10:25:42', '2016-10-08 10:25:42')
  [1m[36m (2.9ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.5ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Tran Cao Son'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Tran Cao Son', '2016-10-08 10:25:42', '2016-10-08 10:25:42')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (299, 110, 2, '2016-10-08 10:25:42', '2016-10-08 10:25:42')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPaper Load (0.4ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Effect of Incomplete Meta-dataset on Average Ranking Method'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Effect of Incomplete Meta-dataset on Average Ranking Method', 'One of the simplest metalearning methods is the average ranking method. This method uses metadata in the form of test results of a given set of algorithms on given set of datasets and calculates an average rank for each algorithm. The ranks are used to construct the average ranking. We investigate the problem of how the process of generating the average ranking is affected by incomplete metadata including fewer test results. This issue is relevant, because if we could show that incomplete metadata does not ?affect the final results much, we could explore it in future design. We could simply conduct fewer tests and save thus computation time. In this paper we describe an upgraded average ranking method that is capable of dealing with incomplete metadata. Our results show that the proposed method is relatively robust to omission in test results in the meta datasets.', 'cs.AI', '2016-08-24T14:44:33Z', 'http://arxiv.org/abs/1608.06845v1', '2016-10-08 10:25:42', '2016-10-08 10:25:42')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPublish Load (0.5ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 111[0m
  [1m[35mAuthor Load (0.4ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Salisu Mamman Abdulrahman'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Salisu Mamman Abdulrahman', '2016-10-08 10:25:42', '2016-10-08 10:25:42')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (300, 111, 0, '2016-10-08 10:25:42', '2016-10-08 10:25:42')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.5ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Pavel Brazdil'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Pavel Brazdil', '2016-10-08 10:25:42', '2016-10-08 10:25:42')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (301, 111, 1, '2016-10-08 10:25:42', '2016-10-08 10:25:42')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.4ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Expressibility of norms in temporal logic'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Expressibility of norms in temporal logic', 'In this short note we address the issue of expressing norms (such as obligations and prohibitions) in temporal logic. In particular, we address the argument from [Governatori 2015] that norms cannot be expressed in Linear Time Temporal Logic (LTL).', 'cs.AI', '2016-08-24T12:01:36Z', 'http://arxiv.org/abs/1608.06787v1', '2016-10-08 10:25:42', '2016-10-08 10:25:42')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (0.4ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 112
  [1m[36mAuthor Load (0.3ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Natasha Alechina'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Natasha Alechina', '2016-10-08 10:25:42', '2016-10-08 10:25:42')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (302, 112, 0, '2016-10-08 10:25:42', '2016-10-08 10:25:42')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.6ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Mehdi Dastani'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Mehdi Dastani', '2016-10-08 10:25:42', '2016-10-08 10:25:42')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (303, 112, 1, '2016-10-08 10:25:42', '2016-10-08 10:25:42')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.4ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Brian Logan'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Brian Logan', '2016-10-08 10:25:42', '2016-10-08 10:25:42')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (304, 112, 2, '2016-10-08 10:25:42', '2016-10-08 10:25:42')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.4ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Unsupervised, Efficient and Semantic Expertise Retrieval'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Unsupervised, Efficient and Semantic Expertise Retrieval', 'We introduce an unsupervised discriminative model for the task of retrieving experts in online document collections. We exclusively employ textual evidence and avoid explicit feature engineering by learning distributed word representations in an unsupervised way. We compare our model to state-of-the-art unsupervised statistical vector space and probabilistic generative approaches. Our proposed log-linear model achieves the retrieval performance levels of state-of-the-art document-centric methods with the low inference cost of so-called profile-centric approaches. It yields a statistically significant improved ranking over vector space and generative models in most cases, matching the performance of supervised methods on various benchmarks. That is, by using solely text we can do as well as methods that work with external evidence and/or relevance feedback. A contrastive analysis of rankings produced by discriminative and generative approaches shows that they have complementary strengths due to the ability of the unsupervised discriminative model to perform semantic matching.', 'cs.IR', '2016-08-23T20:55:09Z', 'http://dx.doi.org/10.1145/2872427.2882974', '2016-10-08 10:25:42', '2016-10-08 10:25:42')
  [1m[36m (2.9ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (0.6ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 113
  [1m[36mAuthor Load (0.5ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Christophe Van Gysel'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36m (0.2ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (280, 113, 0, '2016-10-08 10:25:42', '2016-10-08 10:25:42')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (0.5ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Maarten de Rijke'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36m (0.2ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (281, 113, 1, '2016-10-08 10:25:42', '2016-10-08 10:25:42')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.6ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Marcel Worring'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Marcel Worring', '2016-10-08 10:25:42', '2016-10-08 10:25:42')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (305, 113, 2, '2016-10-08 10:25:42', '2016-10-08 10:25:42')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.4ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Is a good offensive always the best defense?'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Is a good offensive always the best defense?', 'A checkers-like model game with a simplified set of rules is studied through extensive simulations of agents with different expertise and strategies. The introduction of complementary strategies, in a quite general way, provides a tool to mimic the basic ingredients of a wide scope of real games. We find that only for the player having the higher offensive expertise (the dominant player ), maximizing the offensive always increases the probability to win. For the non-dominant player, interestingly, a complete minimization of the offensive becomes the best way to win in many situations, depending on the relative values of the defense expertise. Further simulations on the interplay of defense expertise were done separately, in the context of a fully-offensive scenario, offering a starting point for analytical treatments. In particular, we established that in this scenario the total number of moves is defined only by the player with the lower defensive expertise. We believe that these results stand for a first step towards a new way to improve decisions-making in a large number of zero-sum real games.', 'cs.AI', '2016-08-23T15:31:36Z', 'http://arxiv.org/abs/1608.07223v1', '2016-10-08 10:25:42', '2016-10-08 10:25:42')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (0.5ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 114
  [1m[36mAuthor Load (0.4ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'J. Quetzalcóatl Toledo-Marín'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('J. Quetzalcóatl Toledo-Marín', '2016-10-08 10:25:42', '2016-10-08 10:25:42')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (306, 114, 0, '2016-10-08 10:25:42', '2016-10-08 10:25:42')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.5ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Rogelio Díaz-Méndez'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Rogelio Díaz-Méndez', '2016-10-08 10:25:42', '2016-10-08 10:25:42')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (307, 114, 1, '2016-10-08 10:25:42', '2016-10-08 10:25:42')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.4ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Marcelo del Castillo Mussot'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Marcelo del Castillo Mussot', '2016-10-08 10:25:42', '2016-10-08 10:25:42')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.6ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (308, 114, 2, '2016-10-08 10:25:42', '2016-10-08 10:25:42')
  [1m[36m (3.1ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.6ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'On Simulated Annealing Dedicated to Maximin Latin Hypercube Designs'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('On Simulated Annealing Dedicated to Maximin Latin Hypercube Designs', 'The goal of our research was to enhance local search heuristics used to construct Latin Hypercube Designs. First, we introduce the \\textit{1D-move} perturbation to improve the space exploration performed by these algorithms. Second, we propose a new evaluation function $\\psi_{p,\\sigma}$ specifically targeting the Maximin criterion. Exhaustive series of experiments with Simulated Annealing, which we used as a typically well-behaving local search heuristics, confirm that our goal was reached as the result we obtained surpasses the best scores reported in the literature. Furthermore, the $\\psi_{p,\\sigma}$ function seems very promising for a wide spectrum of optimization problems through the Maximin criterion.', 'cs.AI', '2016-08-23T14:55:43Z', 'http://arxiv.org/abs/1608.07225v1', '2016-10-08 10:25:42', '2016-10-08 10:25:42')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (0.5ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 115
  [1m[36mAuthor Load (0.4ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Pierre Bergé'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Pierre Bergé', '2016-10-08 10:25:42', '2016-10-08 10:25:42')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (309, 115, 0, '2016-10-08 10:25:42', '2016-10-08 10:25:42')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.5ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Kaourintin Le Guiban'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Kaourintin Le Guiban', '2016-10-08 10:25:42', '2016-10-08 10:25:42')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (310, 115, 1, '2016-10-08 10:25:42', '2016-10-08 10:25:42')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (0.5ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Arpad Rimmel'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Arpad Rimmel', '2016-10-08 10:25:42', '2016-10-08 10:25:42')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (311, 115, 2, '2016-10-08 10:25:42', '2016-10-08 10:25:42')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.6ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Joanna Tomasik'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Joanna Tomasik', '2016-10-08 10:25:42', '2016-10-08 10:25:42')
  [1m[36m (3.0ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (312, 115, 3, '2016-10-08 10:25:42', '2016-10-08 10:25:42')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPaper Load (0.5ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Phased Exploration with Greedy Exploitation in Stochastic Combinatorial Partial Monitoring Games'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.7ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Phased Exploration with Greedy Exploitation in Stochastic Combinatorial Partial Monitoring Games', 'Partial monitoring games are repeated games where the learner receives feedback that might be different from adversary\'s move or even the reward gained by the learner. Recently, a general model of combinatorial partial monitoring (CPM) games was proposed \\cite{lincombinatorial2014}, where the learner\'s action space can be exponentially large and adversary samples its moves from a bounded, continuous space, according to a fixed distribution. The paper gave a confidence bound based algorithm (GCB) that achieves $O(T^{2/3}\\log T)$ distribution independent and $O(\\log T)$ distribution dependent regret bounds. The implementation of their algorithm depends on two separate offline oracles and the distribution dependent regret additionally requires existence of a unique optimal action for the learner. Adopting their CPM model, our first contribution is a Phased Exploration with Greedy Exploitation (PEGE) algorithmic framework for the problem. Different algorithms within the framework achieve $O(T^{2/3}\\sqrt{\\log T})$ distribution independent and $O(\\log^2 T)$ distribution dependent regret respectively. Crucially, our framework needs only the simpler \"argmax\" oracle from GCB and the distribution dependent regret does not require existence of a unique optimal action. Our second contribution is another algorithm, PEGE2, which combines gap estimation with a PEGE algorithm, to achieve an $O(\\log T)$ regret bound, matching the GCB guarantee but removing the dependence on size of the learner\'s action space. However, like GCB, PEGE2 requires access to both offline oracles and the existence of a unique optimal action. Finally, we discuss how our algorithm can be efficiently applied to a CPM problem of practical interest: namely, online ranking with feedback at the top.', 'cs.GT', '2016-08-23T07:14:18Z', 'http://arxiv.org/abs/1608.06403v1', '2016-10-08 10:25:42', '2016-10-08 10:25:42')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPublish Load (0.5ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 116[0m
  [1m[35mAuthor Load (0.5ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Sougata Chaudhuri'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.5ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Sougata Chaudhuri', '2016-10-08 10:25:42', '2016-10-08 10:25:42')
  [1m[36m (3.2ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (313, 116, 0, '2016-10-08 10:25:42', '2016-10-08 10:25:42')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (0.6ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Ambuj Tewari'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Ambuj Tewari', '2016-10-08 10:25:42', '2016-10-08 10:25:42')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (314, 116, 1, '2016-10-08 10:25:42', '2016-10-08 10:25:42')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.4ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Five dimensions of reasoning in the wild'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Five dimensions of reasoning in the wild', 'Reasoning does not work well when done in isolation from its significance, both to the needs and interests of an agent and with respect to the wider world. Moreover, those issues may best be handled with a new sort of data structure that goes beyond the knowledge base and incorporates aspects of perceptual knowledge and even more, in which a kind of anticipatory action may be key.', 'cs.AI', '2016-08-23T00:40:27Z', 'http://arxiv.org/abs/1608.06349v1', '2016-10-08 10:25:42', '2016-10-08 10:25:42')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (0.4ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 117
  [1m[36mAuthor Load (0.4ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Don Perlis'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Don Perlis', '2016-10-08 10:25:42', '2016-10-08 10:25:42')[0m
  [1m[35m (3.0ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (315, 117, 0, '2016-10-08 10:25:42', '2016-10-08 10:25:42')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.5ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Multi-Sensor Prognostics using an Unsupervised Health Index based on LSTM Encoder-Decoder'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Multi-Sensor Prognostics using an Unsupervised Health Index based on LSTM Encoder-Decoder', 'Many approaches for estimation of Remaining Useful Life (RUL) of a machine, using its operational sensor data, make assumptions about how a system degrades or a fault evolves, e.g., exponential degradation. However, in many domains degradation may not follow a pattern. We propose a Long Short Term Memory based Encoder-Decoder (LSTM-ED) scheme to obtain an unsupervised health index (HI) for a system using multi-sensor time-series data. LSTM-ED is trained to reconstruct the time-series corresponding to healthy state of a system. The reconstruction error is used to compute HI which is then used for RUL estimation. We evaluate our approach on publicly available Turbofan Engine and Milling Machine datasets. We also present results on a real-world industry dataset from a pulverizer mill where we find significant correlation between LSTM-ED based HI and maintenance costs.', 'cs.LG', '2016-08-22T12:59:31Z', 'http://arxiv.org/abs/1608.06154v1', '2016-10-08 10:25:42', '2016-10-08 10:25:42')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (0.6ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 118
  [1m[36mAuthor Load (0.5ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Pankaj Malhotra'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Pankaj Malhotra', '2016-10-08 10:25:42', '2016-10-08 10:25:42')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (316, 118, 0, '2016-10-08 10:25:42', '2016-10-08 10:25:42')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.4ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Vishnu TV'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Vishnu TV', '2016-10-08 10:25:42', '2016-10-08 10:25:42')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (317, 118, 1, '2016-10-08 10:25:42', '2016-10-08 10:25:42')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (0.6ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Anusha Ramakrishnan'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Anusha Ramakrishnan', '2016-10-08 10:25:42', '2016-10-08 10:25:42')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (318, 118, 2, '2016-10-08 10:25:42', '2016-10-08 10:25:42')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.5ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Gaurangi Anand'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.4ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Gaurangi Anand', '2016-10-08 10:25:42', '2016-10-08 10:25:42')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (319, 118, 3, '2016-10-08 10:25:42', '2016-10-08 10:25:42')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (0.6ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Lovekesh Vig'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Lovekesh Vig', '2016-10-08 10:25:42', '2016-10-08 10:25:42')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (320, 118, 4, '2016-10-08 10:25:42', '2016-10-08 10:25:42')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.6ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Puneet Agarwal'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Puneet Agarwal', '2016-10-08 10:25:42', '2016-10-08 10:25:42')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (321, 118, 5, '2016-10-08 10:25:42', '2016-10-08 10:25:42')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (0.5ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Gautam Shroff'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Gautam Shroff', '2016-10-08 10:25:42', '2016-10-08 10:25:42')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (322, 118, 6, '2016-10-08 10:25:42', '2016-10-08 10:25:42')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.4ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'The Symmetry of a Simple Optimization Problem in Lasso Screening'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('The Symmetry of a Simple Optimization Problem in Lasso Screening', 'Recently dictionary screening has been proposed as an effective way to improve the computational efficiency of solving the lasso problem, which is one of the most commonly used method for learning sparse representations. To address today\'s ever increasing large dataset, effective screening relies on a tight region bound on the solution to the dual lasso. Typical region bounds are in the form of an intersection of a sphere and multiple half spaces. One way to tighten the region bound is using more half spaces, which however, adds to the overhead of solving the high dimensional optimization problem in lasso screening. This paper reveals the interesting property that the optimization problem only depends on the projection of features onto the subspace spanned by the normals of the half spaces. This property converts an optimization problem in high dimension to much lower dimension, and thus sheds light on reducing the computation overhead of lasso screening based on tighter region bounds.', 'cs.LG', '2016-08-21T23:48:43Z', 'http://arxiv.org/abs/1608.06014v2', '2016-10-08 10:25:42', '2016-10-08 10:25:42')
  [1m[36m (2.9ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (0.6ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 119
  [1m[36mAuthor Load (0.6ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Yun Wang'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Yun Wang', '2016-10-08 10:25:42', '2016-10-08 10:25:42')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (323, 119, 0, '2016-10-08 10:25:42', '2016-10-08 10:25:42')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.5ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Peter J. Ramadge'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Peter J. Ramadge', '2016-10-08 10:25:42', '2016-10-08 10:25:42')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (324, 119, 1, '2016-10-08 10:25:42', '2016-10-08 10:25:42')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPaper Load (0.4ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Feedback-Controlled Sequential Lasso Screening'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Feedback-Controlled Sequential Lasso Screening', 'One way to solve lasso problems when the dictionary does not fit into available memory is to first screen the dictionary to remove unneeded features. Prior research has shown that sequential screening methods offer the greatest promise in this endeavor. Most existing work on sequential screening targets the context of tuning parameter selection, where one screens and solves a sequence of $N$ lasso problems with a fixed grid of geometrically spaced regularization parameters. In contrast, we focus on the scenario where a target regularization parameter has already been chosen via cross-validated model selection, and we then need to solve many lasso instances using this fixed value. In this context, we propose and explore a feedback controlled sequential screening scheme. Feedback is used at each iteration to select the next problem to be solved. This allows the sequence of problems to be adapted to the instance presented and the number of intermediate problems to be automatically selected. We demonstrate our feedback scheme using several datasets including a dictionary of approximate size 100,000 by 300,000.', 'cs.LG', '2016-08-21T23:40:56Z', 'http://arxiv.org/abs/1608.06010v2', '2016-10-08 10:25:42', '2016-10-08 10:25:42')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPublish Load (0.6ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 120[0m
  [1m[35mAuthor Load (0.5ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Yun Wang'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35m (0.2ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (323, 120, 0, '2016-10-08 10:25:42', '2016-10-08 10:25:42')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.6ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Xu Chen'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Xu Chen', '2016-10-08 10:25:42', '2016-10-08 10:25:42')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (325, 120, 1, '2016-10-08 10:25:42', '2016-10-08 10:25:42')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (0.6ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Peter J. Ramadge'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36m (0.2ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (324, 120, 2, '2016-10-08 10:25:42', '2016-10-08 10:25:42')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (0.4ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Probabilistic Knowledge Graph Construction: Compositional and Incremental Approaches'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Probabilistic Knowledge Graph Construction: Compositional and Incremental Approaches', 'Knowledge graph construction consists of two tasks: extracting information from external resources (knowledge population) and inferring missing information through a statistical analysis on the extracted information (knowledge completion). In many cases, insufficient external resources in the knowledge population hinder the subsequent statistical inference. The gap between these two processes can be reduced by an incremental population approach. We propose a new probabilistic knowledge graph factorisation method that benefits from the path structure of existing knowledge (e.g. syllogism) and enables a common modelling approach to be used for both incremental population and knowledge completion tasks. More specifically, the probabilistic formulation allows us to develop an incremental population algorithm that trades off exploitation-exploration. Experiments on three benchmark datasets show that the balanced exploitation-exploration helps the incremental population, and the additional path structure helps to predict missing information in knowledge completion.', 'stat.ML', '2016-08-21T11:49:53Z', 'http://dx.doi.org/10.1145/2983323.2983677', '2016-10-08 10:25:42', '2016-10-08 10:25:42')[0m
  [1m[35m (3.0ms)[0m  COMMIT
  [1m[36mPublish Load (0.6ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 121[0m
  [1m[35mAuthor Load (0.6ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Dongwoo Kim'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Dongwoo Kim', '2016-10-08 10:25:42', '2016-10-08 10:25:42')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (326, 121, 0, '2016-10-08 10:25:42', '2016-10-08 10:25:42')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (0.5ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Lexing Xie'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.3ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Lexing Xie', '2016-10-08 10:25:42', '2016-10-08 10:25:42')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (327, 121, 1, '2016-10-08 10:25:42', '2016-10-08 10:25:42')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.4ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Cheng Soon Ong'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Cheng Soon Ong', '2016-10-08 10:25:42', '2016-10-08 10:25:42')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (328, 121, 2, '2016-10-08 10:25:42', '2016-10-08 10:25:42')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (0.4ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'A Hybrid, PDE-ODE Control Strategy for Intercepting an Intelligent, well-informed Target in a Stationary, Cluttered Environment'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('A Hybrid, PDE-ODE Control Strategy for Intercepting an Intelligent, well-informed Target in a Stationary, Cluttered Environment', 'In [1,2] a new class of intelligent controllers that can semantically embed an agent in a spatial context constraining its behavior in a goal-oriented manner was suggested. A controller of such a class can guide an agent in a stationary unknown environment to a fixed target zone along an obstacle-free trajectory. Here, an extension is suggested that would enable the interception of an intelligent target that is maneuvering to evade capture amidst stationary clutter (i.e. the target zone is moving). This is achieved by forcing the differential properties of the potential field used to induce the control action to satisfy the wave equation. Background of the problem, theoretical developments, as well as, proofs of the ability of the modified control to intercept the target along an obstacle-free trajectory are supplied. Simulation results are also provided.', 'cs.RO', '2016-08-20T19:02:19Z', 'http://arxiv.org/abs/1608.05864v1', '2016-10-08 10:25:42', '2016-10-08 10:25:42')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPublish Load (0.5ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 122[0m
  [1m[35mAuthor Load (0.5ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Ahmad A. Masoud'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Ahmad A. Masoud', '2016-10-08 10:25:42', '2016-10-08 10:25:42')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (329, 122, 0, '2016-10-08 10:25:42', '2016-10-08 10:25:42')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (0.4ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Learning Word Embeddings from Intrinsic and Extrinsic Views'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Learning Word Embeddings from Intrinsic and Extrinsic Views', 'While word embeddings are currently predominant for natural language processing, most of existing models learn them solely from their contexts. However, these context-based word embeddings are limited since not all words\' meaning can be learned based on only context. Moreover, it is also difficult to learn the representation of the rare words due to data sparsity problem. In this work, we address these issues by learning the representations of words by integrating their intrinsic (descriptive) and extrinsic (contextual) information. To prove the effectiveness of our model, we evaluate it on four tasks, including word similarity, reverse dictionaries,Wiki link prediction, and document classification. Experiment results show that our model is powerful in both word and document modeling.', 'cs.CL', '2016-08-20T17:34:38Z', 'http://arxiv.org/abs/1608.05852v1', '2016-10-08 10:25:42', '2016-10-08 10:25:42')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPublish Load (0.4ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 123[0m
  [1m[35mAuthor Load (0.4ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Jifan Chen'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Jifan Chen', '2016-10-08 10:25:42', '2016-10-08 10:25:42')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (330, 123, 0, '2016-10-08 10:25:42', '2016-10-08 10:25:42')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.6ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Kan Chen'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Kan Chen', '2016-10-08 10:25:42', '2016-10-08 10:25:42')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (331, 123, 1, '2016-10-08 10:25:42', '2016-10-08 10:25:42')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.4ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Xipeng Qiu'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Xipeng Qiu', '2016-10-08 10:25:42', '2016-10-08 10:25:42')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (332, 123, 2, '2016-10-08 10:25:42', '2016-10-08 10:25:42')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.5ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Qi Zhang'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Qi Zhang', '2016-10-08 10:25:42', '2016-10-08 10:25:42')[0m
  [1m[35m (2.9ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (333, 123, 3, '2016-10-08 10:25:42', '2016-10-08 10:25:42')
  [1m[36m (2.6ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.6ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Xuanjing Huang'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Xuanjing Huang', '2016-10-08 10:25:42', '2016-10-08 10:25:42')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (334, 123, 4, '2016-10-08 10:25:42', '2016-10-08 10:25:42')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (0.6ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Zheng Zhang'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Zheng Zhang', '2016-10-08 10:25:42', '2016-10-08 10:25:42')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (335, 123, 5, '2016-10-08 10:25:42', '2016-10-08 10:25:42')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.4ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Inference in Probabilistic Logic Programs using Lifted Explanations'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Inference in Probabilistic Logic Programs using Lifted Explanations', 'In this paper, we consider the problem of lifted inference in the context of Prism-like probabilistic logic programming languages. Traditional inference in such languages involves the construction of an explanation graph for the query and computing probabilities over this graph. When evaluating queries over probabilistic logic programs with a large number of instances of random variables, traditional methods treat each instance separately. For many programs and queries, we observe that explanations can be summarized into substantially more compact structures, which we call lifted explanation graphs. In this paper, we define lifted explanation graphs and operations over them. In contrast to existing lifted inference techniques, our method for constructing lifted explanations naturally generalizes existing methods for constructing explanation graphs. To compute probability of query answers, we solve recurrences generated from the lifted graphs. We show examples where the use of our technique reduces the asymptotic complexity of inference.', 'cs.AI', '2016-08-20T00:37:20Z', 'http://arxiv.org/abs/1608.05763v1', '2016-10-08 10:25:42', '2016-10-08 10:25:42')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (0.4ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 124
  [1m[36mAuthor Load (0.4ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Arun Nampally'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Arun Nampally', '2016-10-08 10:25:42', '2016-10-08 10:25:42')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (336, 124, 0, '2016-10-08 10:25:42', '2016-10-08 10:25:42')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.4ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'C. R. Ramakrishnan'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('C. R. Ramakrishnan', '2016-10-08 10:25:42', '2016-10-08 10:25:42')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (337, 124, 1, '2016-10-08 10:25:42', '2016-10-08 10:25:42')[0m
  [1m[35m (1.2ms)[0m  COMMIT
  [1m[36mPaper Load (0.4ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'RETAIN: Interpretable Predictive Model in Healthcare using Reverse Time Attention Mechanism'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('RETAIN: Interpretable Predictive Model in Healthcare using Reverse Time Attention Mechanism', 'Accuracy and interpretation are two goals of any successful predictive models. Most existing works have to suffer the tradeoff between the two by either picking complex black box models such as recurrent neural networks (RNN) or relying on less accurate traditional models with better interpretation such as logistic regression. To address this dilemma, we present REverse Time AttentIoN model (RETAIN) for analyzing Electronic Health Records (EHR) data that achieves high accuracy while remaining clinically interpretable. RETAIN is a two-level neural attention model that can find influential past visits and significant clinical variables within those visits (e.g,. key diagnoses). RETAIN mimics physician practice by attending the EHR data in a reverse time order so that more recent clinical visits will likely get higher attention. Experiments on a large real EHR dataset of 14 million visits from 263K patients over 8 years confirmed the comparable predictive accuracy and computational scalability to the state-of-the-art methods such as RNN. Finally, we demonstrate the clinical interpretation with concrete examples from RETAIN.', 'cs.LG', '2016-08-19T21:54:46Z', 'http://arxiv.org/abs/1608.05745v3', '2016-10-08 10:25:42', '2016-10-08 10:25:42')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPublish Load (0.5ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 125[0m
  [1m[35mAuthor Load (0.4ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Edward Choi'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Edward Choi', '2016-10-08 10:25:42', '2016-10-08 10:25:42')
  [1m[36m (3.0ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.4ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (338, 125, 0, '2016-10-08 10:25:42', '2016-10-08 10:25:42')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (0.6ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Mohammad Taha Bahadori'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Mohammad Taha Bahadori', '2016-10-08 10:25:42', '2016-10-08 10:25:42')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (339, 125, 1, '2016-10-08 10:25:42', '2016-10-08 10:25:42')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.6ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Andy Schuetz'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Andy Schuetz', '2016-10-08 10:25:42', '2016-10-08 10:25:42')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (340, 125, 2, '2016-10-08 10:25:42', '2016-10-08 10:25:42')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.5ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Walter F. Stewart'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Walter F. Stewart', '2016-10-08 10:25:42', '2016-10-08 10:25:42')[0m
  [1m[35m (0.6ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (341, 125, 3, '2016-10-08 10:25:42', '2016-10-08 10:25:42')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.6ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Jimeng Sun'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Jimeng Sun', '2016-10-08 10:25:42', '2016-10-08 10:25:42')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (342, 125, 4, '2016-10-08 10:25:42', '2016-10-08 10:25:42')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPaper Load (0.4ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Pilot Testing an Artificial Intelligence Algorithm That Selects Homeless Youth Peer Leaders Who Promote HIV Testing'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Pilot Testing an Artificial Intelligence Algorithm That Selects Homeless Youth Peer Leaders Who Promote HIV Testing', 'Objective. To pilot test an artificial intelligence (AI) algorithm that selects peer change agents (PCA) to disseminate HIV testing messaging in a population of homeless youth. Methods. We recruited and assessed 62 youth at baseline, 1 month (n = 48), and 3 months (n = 38). A Facebook app collected preliminary social network data. Eleven PCAs selected by AI attended a 1-day training and 7 weekly booster sessions. Mixed-effects models with random effects were used to assess change over time. Results. Significant change over time was observed in past 6-month HIV testing (57.9%, 82.4%, 76.3%; p < .05) but not condom use (63.9%, 65.7%, 65.8%). Most youth reported speaking to a PCA about HIV prevention (72.0% at 1 month, 61.5% at 3 months). Conclusions. AI is a promising avenue for implementing PCA models for homeless youth. Increasing rates of regular HIV testing is critical to HIV prevention and linking homeless youth to treatment.', 'cs.AI', '2016-08-19T19:28:55Z', 'http://arxiv.org/abs/1608.05701v1', '2016-10-08 10:25:42', '2016-10-08 10:25:42')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPublish Load (0.5ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 126[0m
  [1m[35mAuthor Load (0.3ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Eric Rice'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Eric Rice', '2016-10-08 10:25:42', '2016-10-08 10:25:42')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (343, 126, 0, '2016-10-08 10:25:42', '2016-10-08 10:25:42')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.4ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Robin Petering'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Robin Petering', '2016-10-08 10:25:42', '2016-10-08 10:25:42')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (344, 126, 1, '2016-10-08 10:25:42', '2016-10-08 10:25:42')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.6ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Jaih Craddock'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Jaih Craddock', '2016-10-08 10:25:42', '2016-10-08 10:25:42')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (345, 126, 2, '2016-10-08 10:25:42', '2016-10-08 10:25:42')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (0.6ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Amanda Yoshioka-Maxwell'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Amanda Yoshioka-Maxwell', '2016-10-08 10:25:42', '2016-10-08 10:25:42')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (346, 126, 3, '2016-10-08 10:25:42', '2016-10-08 10:25:42')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.6ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Amulya Yadav'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.4ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Amulya Yadav', '2016-10-08 10:25:42', '2016-10-08 10:25:42')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (347, 126, 4, '2016-10-08 10:25:42', '2016-10-08 10:25:42')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.5ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Milind Tambe'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Milind Tambe', '2016-10-08 10:25:42', '2016-10-08 10:25:42')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (348, 126, 5, '2016-10-08 10:25:42', '2016-10-08 10:25:42')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.4ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'The languages of actions, formal grammars and qualitive modeling of companies'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.4ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('The languages of actions, formal grammars and qualitive modeling of companies', 'In this paper we discuss methods of using the language of actions, formal languages, and grammars for qualitative conceptual linguistic modeling of companies as technological and human institutions. The main problem following the discussion is the problem to find and describe a language structure for external and internal flow of information of companies. We anticipate that the language structure of external and internal base flows determine the structure of companies. In the structure modeling of an abstract industrial company an internal base flow of information is constructed as certain flow of words composed on the theoretical parts-processes-actions language. The language of procedures is found for an external base flow of information for an insurance company. The formal stochastic grammar for the language of procedures is found by statistical methods and is used in understanding the tendencies of the health care industry. We present the model of human communications as a random walk on the semantic tree', 'cs.AI', '2016-08-19T18:50:21Z', 'http://arxiv.org/abs/1608.05694v1', '2016-10-08 10:25:42', '2016-10-08 10:25:42')
  [1m[36m (3.0ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (0.6ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 127
  [1m[36mAuthor Load (0.5ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Vladislav B Kovchegov'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Vladislav B Kovchegov', '2016-10-08 10:25:42', '2016-10-08 10:25:42')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (349, 127, 0, '2016-10-08 10:25:42', '2016-10-08 10:25:42')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.4ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'lpopt: A Rule Optimization Tool for Answer Set Programming'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (1.2ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('lpopt: A Rule Optimization Tool for Answer Set Programming', 'State-of-the-art answer set programming (ASP) solvers rely on a program called a grounder to convert non-ground programs containing variables into variable-free, propositional programs. The size of this grounding depends heavily on the size of the non-ground rules, and thus, reducing the size of such rules is a promising approach to improve solving performance. To this end, in this paper we announce lpopt, a tool that decomposes large logic programming rules into smaller rules that are easier to handle for current solvers. The tool is specifically tailored to handle the standard syntax of the ASP language (ASP-Core) and makes it easier for users to write efficient and intuitive ASP programs, which would otherwise often require significant hand-tuning by expert ASP engineers. It is based on an idea proposed by Morak and Woltran (2012) that we extend significantly in order to handle the full ASP syntax, including complex constructs like aggregates, weak constraints, and arithmetic expressions. We present the algorithm, the theoretical foundations on how to treat these constructs, as well as an experimental evaluation showing the viability of our approach.', 'cs.LO', '2016-08-19T17:20:03Z', 'http://arxiv.org/abs/1608.05675v2', '2016-10-08 10:25:42', '2016-10-08 10:25:42')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (0.5ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 128
  [1m[36mAuthor Load (0.5ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Manuel Bichler'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Manuel Bichler', '2016-10-08 10:25:42', '2016-10-08 10:25:42')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (350, 128, 0, '2016-10-08 10:25:42', '2016-10-08 10:25:42')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.6ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Michael Morak'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Michael Morak', '2016-10-08 10:25:42', '2016-10-08 10:25:42')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (351, 128, 1, '2016-10-08 10:25:42', '2016-10-08 10:25:42')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.6ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Stefan Woltran'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Stefan Woltran', '2016-10-08 10:25:42', '2016-10-08 10:25:42')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (352, 128, 2, '2016-10-08 10:25:42', '2016-10-08 10:25:42')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.4ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Implementing a Relevance Tracker Module'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Implementing a Relevance Tracker Module', 'PC(ID) extends propositional logic with inductive definitions: rule sets under the well-founded semantics. Recently, a notion of relevance was introduced for this language. This notion determines the set of undecided literals that can still influence the satisfiability of a PC(ID) formula in a given partial assignment. The idea is that the PC(ID) solver can make decisions only on relevant literals without losing soundness and thus safely ignore irrelevant literals. One important insight that the relevance of a literal is completely determined by the current solver state. During search, the solver state changes have an effect on the relevance of literals. In this paper, we discuss an incremental, lightweight implementation of a relevance tracker module that can be added to and interact with an out-of-the-box SAT(ID) solver.', 'cs.AI', '2016-08-19T14:19:21Z', 'http://arxiv.org/abs/1608.05609v1', '2016-10-08 10:25:42', '2016-10-08 10:25:42')
  [1m[36m (3.0ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (0.6ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 129
  [1m[36mAuthor Load (0.6ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Joachim Jansen'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Joachim Jansen', '2016-10-08 10:25:42', '2016-10-08 10:25:42')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (353, 129, 0, '2016-10-08 10:25:42', '2016-10-08 10:25:42')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.4ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Jo Devriendt'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35m (0.1ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (151, 129, 1, '2016-10-08 10:25:42', '2016-10-08 10:25:42')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.5ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Bart Bogaerts'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35m (0.1ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (226, 129, 2, '2016-10-08 10:25:42', '2016-10-08 10:25:42')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.4ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Gerda Janssens'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35m (0.1ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (192, 129, 3, '2016-10-08 10:25:42', '2016-10-08 10:25:42')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.6ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Marc Denecker'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Marc Denecker', '2016-10-08 10:25:42', '2016-10-08 10:25:42')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (354, 129, 4, '2016-10-08 10:25:42', '2016-10-08 10:25:42')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (0.4ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Data Centroid Based Multi-Level Fuzzy Min-Max Neural Network'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Data Centroid Based Multi-Level Fuzzy Min-Max Neural Network', 'Recently, a multi-level fuzzy min max neural network (MLF) was proposed, which improves the classification accuracy by handling an overlapped region (area of confusion) with the help of a tree structure. In this brief, an extension of MLF is proposed which defines a new boundary region, where the previously proposed methods mark decisions with less confidence and hence misclassification is more frequent. A methodology to classify patterns more accurately is presented. Our work enhances the testing procedure by means of data centroids. We exhibit an illustrative example, clearly highlighting the advantage of our approach. Results on standard datasets are also presented to evidentially prove a consistent improvement in the classification rate.', 'cs.AI', '2016-08-19T07:05:33Z', 'http://arxiv.org/abs/1608.05513v1', '2016-10-08 10:25:42', '2016-10-08 10:25:42')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPublish Load (0.5ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 130[0m
  [1m[35mAuthor Load (0.4ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Shraddha Deshmukh'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Shraddha Deshmukh', '2016-10-08 10:25:42', '2016-10-08 10:25:42')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (355, 130, 0, '2016-10-08 10:25:42', '2016-10-08 10:25:42')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.6ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Sagar Gandhi'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Sagar Gandhi', '2016-10-08 10:25:42', '2016-10-08 10:25:42')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (356, 130, 1, '2016-10-08 10:25:42', '2016-10-08 10:25:42')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.6ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Pratap Sanap'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Pratap Sanap', '2016-10-08 10:25:42', '2016-10-08 10:25:42')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (357, 130, 2, '2016-10-08 10:25:42', '2016-10-08 10:25:42')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.5ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Vivek Kulkarni'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Vivek Kulkarni', '2016-10-08 10:25:42', '2016-10-08 10:25:42')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (358, 130, 3, '2016-10-08 10:25:42', '2016-10-08 10:25:42')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.4ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'A heuristic scheme for the Cooperative Team Orienteering Problem with Time Windows'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('A heuristic scheme for the Cooperative Team Orienteering Problem with Time Windows', 'The Cooperative Orienteering Problem with Time Windows (COPTW)is a class of problems with some important applications and yet has received relatively little attention. In the COPTW a certain number of team members are required to collect the associated reward from each customer simultaneously and cooperatively. This requirement to have one or more team members simultaneously available at a vertex to collect the reward, poses a challenging OR task. Exact methods are not able to handle large scale instances of the COPTW and no heuristic schemes have been developed for this problem so far. In this paper, a new modification to the classical Clarke and Wright saving heuristic is proposed to handle this problem. A new benchmark set generated by adding the resource requirement attribute to the existing benchmarks. The heuristic algorithm followed by boosting operators achieves optimal solutions for 64.5% of instances for which the optimal results are known. The proposed solution approach attains an optimality gap of 2.61% for the same instances and solves benchmarks with realistic size within short computational times.', 'cs.AI', '2016-08-19T03:36:18Z', 'http://arxiv.org/abs/1608.05485v1', '2016-10-08 10:25:42', '2016-10-08 10:25:42')
  [1m[36m (3.0ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (0.6ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 131
  [1m[36mAuthor Load (0.6ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Iman Roozbeh'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Iman Roozbeh', '2016-10-08 10:25:42', '2016-10-08 10:25:42')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (359, 131, 0, '2016-10-08 10:25:42', '2016-10-08 10:25:42')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.5ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Melih Ozlen'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Melih Ozlen', '2016-10-08 10:25:42', '2016-10-08 10:25:42')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (360, 131, 1, '2016-10-08 10:25:42', '2016-10-08 10:25:42')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.4ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'John W. Hearne'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('John W. Hearne', '2016-10-08 10:25:42', '2016-10-08 10:25:42')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (361, 131, 2, '2016-10-08 10:25:42', '2016-10-08 10:25:42')
  [1m[36m (0.3ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.4ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Probabilistic Data Analysis with Probabilistic Programming'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Probabilistic Data Analysis with Probabilistic Programming', 'Probabilistic techniques are central to data analysis, but different approaches can be difficult to apply, combine, and compare. This paper introduces composable generative population models (CGPMs), a computational abstraction that extends directed graphical models and can be used to describe and compose a broad class of probabilistic data analysis techniques. Examples include hierarchical Bayesian models, multivariate kernel methods, discriminative machine learning, clustering algorithms, dimensionality reduction, and arbitrary probabilistic programs. We also demonstrate the integration of CGPMs into BayesDB, a probabilistic programming platform that can express data analysis tasks using a modeling language and a structured query language. The practical value is illustrated in two ways. First, CGPMs are used in an analysis that identifies satellite data records which probably violate Kepler\'s Third Law, by composing causal probabilistic programs with non-parametric Bayes in under 50 lines of probabilistic code. Second, for several representative data analysis tasks, we report on lines of code and accuracy measurements of various CGPMs, plus comparisons with standard baseline solutions from Python and MATLAB libraries.', 'cs.AI', '2016-08-18T17:47:53Z', 'http://arxiv.org/abs/1608.05347v1', '2016-10-08 10:25:42', '2016-10-08 10:25:42')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (0.6ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 132
  [1m[36mAuthor Load (0.5ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Feras Saad'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Feras Saad', '2016-10-08 10:25:42', '2016-10-08 10:25:42')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (362, 132, 0, '2016-10-08 10:25:42', '2016-10-08 10:25:42')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.5ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Vikash Mansinghka'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Vikash Mansinghka', '2016-10-08 10:25:42', '2016-10-08 10:25:42')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (363, 132, 1, '2016-10-08 10:25:42', '2016-10-08 10:25:42')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPaper Load (0.4ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Accelerating Exact and Approximate Inference for (Distributed) Discrete Optimization with GPUs'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Accelerating Exact and Approximate Inference for (Distributed) Discrete Optimization with GPUs', 'Discrete optimization is a central problem in artificial intelligence. The optimization of the aggregated cost of a network of cost functions arises in a variety of problems including (W)CSP, DCOP, as well as optimization in stochastic variants such as Bayesian networks. Inference-based algorithms are powerful techniques for solving discrete optimization problems, which can be used independently or in combination with other techniques. However, their applicability is often limited by their compute intensive nature and their space requirements. This paper proposes the design and implementation of a novel inference-based technique, which exploits modern massively parallel architectures, such as those found in Graphical Processing Units (GPUs), to speed up the resolution of exact and approximated inference-based algorithms for discrete optimization. The paper studies the proposed algorithm in both centralized and distributed optimization contexts. The paper demonstrates that the use of GPUs provides significant advantages in terms of runtime and scalability, achieving up to two orders of magnitude in speedups and showing a considerable reduction in execution time (up to 345 times faster) with respect to a sequential version.', 'cs.AI', '2016-08-18T15:14:37Z', 'http://arxiv.org/abs/1608.05288v1', '2016-10-08 10:25:42', '2016-10-08 10:25:42')[0m
  [1m[35m (3.1ms)[0m  COMMIT
  [1m[36mPublish Load (0.6ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 133[0m
  [1m[35mAuthor Load (0.6ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Ferdinando Fioretto'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Ferdinando Fioretto', '2016-10-08 10:25:42', '2016-10-08 10:25:42')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (364, 133, 0, '2016-10-08 10:25:42', '2016-10-08 10:25:42')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (0.7ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Enrico Pontelli'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Enrico Pontelli', '2016-10-08 10:25:42', '2016-10-08 10:25:42')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (365, 133, 1, '2016-10-08 10:25:42', '2016-10-08 10:25:42')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.6ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'William Yeoh'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('William Yeoh', '2016-10-08 10:25:42', '2016-10-08 10:25:42')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (366, 133, 2, '2016-10-08 10:25:42', '2016-10-08 10:25:42')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (0.5ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Rina Dechter'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Rina Dechter', '2016-10-08 10:25:42', '2016-10-08 10:25:42')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (367, 133, 3, '2016-10-08 10:25:42', '2016-10-08 10:25:42')
  [1m[36m (1.8ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.5ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Effective Multi-step Temporal-Difference Learning for Non-Linear Function Approximation'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.4ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Effective Multi-step Temporal-Difference Learning for Non-Linear Function Approximation', 'Multi-step temporal-difference (TD) learning, where the update targets contain information from multiple time steps ahead, is one of the most popular forms of TD learning for linear function approximation. The reason is that multi-step methods often yield substantially better performance than their single-step counter-parts, due to a lower bias of the update targets. For non-linear function approximation, however, single-step methods appear to be the norm. Part of the reason could be that on many domains the popular multi-step methods TD($\\lambda$) and Sarsa($\\lambda$) do not perform well when combined with non-linear function approximation. In particular, they are very susceptible to divergence of value estimates. In this paper, we identify the reason behind this. Furthermore, based on our analysis, we propose a new multi-step TD method for non-linear function approximation that addresses this issue. We confirm the effectiveness of our method using two benchmark tasks with neural networks as function approximation.', 'cs.AI', '2016-08-18T01:21:27Z', 'http://arxiv.org/abs/1608.05151v1', '2016-10-08 10:25:42', '2016-10-08 10:25:42')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (0.5ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 134
  [1m[36mAuthor Load (0.5ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Harm van Seijen'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Harm van Seijen', '2016-10-08 10:25:42', '2016-10-08 10:25:42')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (368, 134, 0, '2016-10-08 10:25:42', '2016-10-08 10:25:42')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.4ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Effectiveness of greedily collecting items in open world games'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Effectiveness of greedily collecting items in open world games', 'Since Pokemon Go sent millions on the quest of collecting virtual monsters, an important question has been on the minds of many people: Is going after the closest item first a time-and-cost-effective way to play? Here, we show that this is in fact a good strategy which performs on average only 7% worse than the best possible solution in terms of the total distance traveled to gather all the items. Even when accounting for errors due to the inability of people to accurately measure distances by eye, the performance only goes down to 16% of the optimal solution.', 'cs.AI', '2016-08-17T20:43:56Z', 'http://arxiv.org/abs/1608.06175v1', '2016-10-08 10:25:42', '2016-10-08 10:25:42')
  [1m[36m (3.0ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (0.6ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 135
  [1m[36mAuthor Load (0.7ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Andrej Gajduk'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Andrej Gajduk', '2016-10-08 10:25:42', '2016-10-08 10:25:42')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (369, 135, 0, '2016-10-08 10:25:42', '2016-10-08 10:25:42')
  [1m[36m (1.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.6ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Practical optimal experiment design with probabilistic programs'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.4ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Practical optimal experiment design with probabilistic programs', 'Scientists often run experiments to distinguish competing theories. This requires patience, rigor, and ingenuity - there is often a large space of possible experiments one could run. But we need not comb this space by hand - if we represent our theories as formal models and explicitly declare the space of experiments, we can automate the search for good experiments, looking for those with high expected information gain. Here, we present a general and principled approach to experiment design based on probabilistic programming languages (PPLs). PPLs offer a clean separation between declaring problems and solving them, which means that the scientist can automate experiment design by simply declaring her model and experiment spaces in the PPL without having to worry about the details of calculating information gain. We demonstrate our system in two case studies drawn from cognitive psychology, where we use it to design optimal experiments in the domains of sequence prediction and categorization. We find strong empirical validation that our automatically designed experiments were indeed optimal. We conclude by discussing a number of interesting questions for future research.', 'cs.AI', '2016-08-17T18:59:23Z', 'http://arxiv.org/abs/1608.05046v1', '2016-10-08 10:25:42', '2016-10-08 10:25:42')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (0.5ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 136
  [1m[36mAuthor Load (0.4ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Long Ouyang'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Long Ouyang', '2016-10-08 10:25:42', '2016-10-08 10:25:42')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (370, 136, 0, '2016-10-08 10:25:42', '2016-10-08 10:25:42')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.4ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Michael Henry Tessler'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Michael Henry Tessler', '2016-10-08 10:25:42', '2016-10-08 10:25:42')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (371, 136, 1, '2016-10-08 10:25:42', '2016-10-08 10:25:42')[0m
  [1m[35m (0.3ms)[0m  COMMIT
  [1m[36mAuthor Load (0.4ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Daniel Ly'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Daniel Ly', '2016-10-08 10:25:42', '2016-10-08 10:25:42')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (372, 136, 2, '2016-10-08 10:25:42', '2016-10-08 10:25:42')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.4ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Noah Goodman'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Noah Goodman', '2016-10-08 10:25:42', '2016-10-08 10:25:42')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (373, 136, 3, '2016-10-08 10:25:42', '2016-10-08 10:25:42')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (0.4ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Open Problem: Approximate Planning of POMDPs in the class of Memoryless Policies'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Open Problem: Approximate Planning of POMDPs in the class of Memoryless Policies', 'Planning plays an important role in the broad class of decision theory. Planning has drawn much attention in recent work in the robotics and sequential decision making areas. Recently, Reinforcement Learning (RL), as an agent-environment interaction problem, has brought further attention to planning methods. Generally in RL, one can assume a generative model, e.g. graphical models, for the environment, and then the task for the RL agent is to learn the model parameters and find the optimal strategy based on these learnt parameters. Based on environment behavior, the agent can assume various types of generative models, e.g. Multi Armed Bandit for a static environment, or Markov Decision Process (MDP) for a dynamic environment. The advantage of these popular models is their simplicity, which results in tractable methods of learning the parameters and finding the optimal policy. The drawback of these models is again their simplicity: these models usually underfit and underestimate the actual environment behavior. For example, in robotics, the agent usually has noisy observations of the environment inner state and MDP is not a suitable model. More complex models like Partially Observable Markov Decision Process (POMDP) can compensate for this drawback. Fitting this model to the environment, where the partial observation is given to the agent, generally gives dramatic performance improvement, sometimes unbounded improvement, compared to MDP. In general, finding the optimal policy for the POMDP model is computationally intractable and fully non convex, even for the class of memoryless policies. The open problem is to come up with a method to find an exact or an approximate optimal stochastic memoryless policy for POMDP models.', 'cs.AI', '2016-08-17T15:20:35Z', 'http://arxiv.org/abs/1608.04996v1', '2016-10-08 10:25:42', '2016-10-08 10:25:42')[0m
  [1m[35m (3.0ms)[0m  COMMIT
  [1m[36mPublish Load (0.6ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 137[0m
  [1m[35mAuthor Load (0.6ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Kamyar Azizzadenesheli'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.3ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Kamyar Azizzadenesheli', '2016-10-08 10:25:42', '2016-10-08 10:25:42')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (374, 137, 0, '2016-10-08 10:25:42', '2016-10-08 10:25:42')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.4ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Alessandro Lazaric'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Alessandro Lazaric', '2016-10-08 10:25:42', '2016-10-08 10:25:42')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (375, 137, 1, '2016-10-08 10:25:42', '2016-10-08 10:25:42')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.6ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Animashree Anandkumar'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Animashree Anandkumar', '2016-10-08 10:25:42', '2016-10-08 10:25:42')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (376, 137, 2, '2016-10-08 10:25:42', '2016-10-08 10:25:42')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (0.5ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Towards Music Captioning: Generating Music Playlist Descriptions'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Towards Music Captioning: Generating Music Playlist Descriptions', 'Descriptions are often provided along with recommendations to help users\' discovery. Recommending automatically generated music playlists (e.g. personalised playlists) introduces the problem of generating descriptions. In this paper, we propose a method for generating music playlist descriptions, which is called as music captioning. In the proposed method, audio content analysis and natural language processing are adopted to utilise the information of each track.', 'cs.MM', '2016-08-17T06:24:46Z', 'http://arxiv.org/abs/1608.04868v1', '2016-10-08 10:25:42', '2016-10-08 10:25:42')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPublish Load (0.4ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 138[0m
  [1m[35mAuthor Load (0.4ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Keunwoo Choi'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Keunwoo Choi', '2016-10-08 10:25:42', '2016-10-08 10:25:42')
  [1m[36m (0.3ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (377, 138, 0, '2016-10-08 10:25:42', '2016-10-08 10:25:42')[0m
  [1m[35m (0.3ms)[0m  COMMIT
  [1m[36mAuthor Load (0.4ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'George Fazekas'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('George Fazekas', '2016-10-08 10:25:42', '2016-10-08 10:25:42')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (378, 138, 1, '2016-10-08 10:25:42', '2016-10-08 10:25:42')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.6ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Mark Sandler'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Mark Sandler', '2016-10-08 10:25:42', '2016-10-08 10:25:42')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.4ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (379, 138, 2, '2016-10-08 10:25:42', '2016-10-08 10:25:42')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (0.4ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'A Convolutional Autoencoder for Multi-Subject fMRI Data Aggregation'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('A Convolutional Autoencoder for Multi-Subject fMRI Data Aggregation', 'Finding the most effective way to aggregate multi-subject fMRI data is a long-standing and challenging problem. It is of increasing interest in contemporary fMRI studies of human cognition due to the scarcity of data per subject and the variability of brain anatomy and functional response across subjects. Recent work on latent factor models shows promising results in this task but this approach does not preserve spatial locality in the brain. We examine two ways to combine the ideas of a factor model and a searchlight based analysis to aggregate multi-subject fMRI data while preserving spatial locality. We first do this directly by combining a recent factor method known as a shared response model with searchlight analysis. Then we design a multi-view convolutional autoencoder for the same task. Both approaches preserve spatial locality and have competitive or better performance compared with standard searchlight analysis and the shared response model applied across the whole brain. We also report a system design to handle the computational challenge of training the convolutional autoencoder.', 'stat.ML', '2016-08-17T03:49:56Z', 'http://arxiv.org/abs/1608.04846v1', '2016-10-08 10:25:42', '2016-10-08 10:25:42')[0m
  [1m[35m (3.0ms)[0m  COMMIT
  [1m[36mPublish Load (0.6ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 139[0m
  [1m[35mAuthor Load (0.6ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Po-Hsuan Chen'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Po-Hsuan Chen', '2016-10-08 10:25:42', '2016-10-08 10:25:42')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (380, 139, 0, '2016-10-08 10:25:42', '2016-10-08 10:25:42')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.5ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Xia Zhu'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Xia Zhu', '2016-10-08 10:25:42', '2016-10-08 10:25:42')[0m
  [1m[35m (0.3ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (381, 139, 1, '2016-10-08 10:25:42', '2016-10-08 10:25:42')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.5ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Hejia Zhang'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Hejia Zhang', '2016-10-08 10:25:42', '2016-10-08 10:25:42')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (382, 139, 2, '2016-10-08 10:25:42', '2016-10-08 10:25:42')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (0.5ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Javier S. Turek'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Javier S. Turek', '2016-10-08 10:25:42', '2016-10-08 10:25:42')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (383, 139, 3, '2016-10-08 10:25:42', '2016-10-08 10:25:42')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.6ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Janice Chen'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Janice Chen', '2016-10-08 10:25:42', '2016-10-08 10:25:42')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (384, 139, 4, '2016-10-08 10:25:42', '2016-10-08 10:25:42')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (0.6ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Theodore L. Willke'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Theodore L. Willke', '2016-10-08 10:25:42', '2016-10-08 10:25:42')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (385, 139, 5, '2016-10-08 10:25:42', '2016-10-08 10:25:42')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.6ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Uri Hasson'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Uri Hasson', '2016-10-08 10:25:42', '2016-10-08 10:25:42')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (386, 139, 6, '2016-10-08 10:25:42', '2016-10-08 10:25:42')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.5ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Peter J. Ramadge'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36m (0.1ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (324, 139, 7, '2016-10-08 10:25:42', '2016-10-08 10:25:42')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPaper Load (0.5ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Dynamic Collaborative Filtering with Compound Poisson Factorization'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.7ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Dynamic Collaborative Filtering with Compound Poisson Factorization', 'Model-based collaborative filtering analyzes user-item interactions to infer latent factors that represent user preferences and item characteristics in order to predict future interactions. Most collaborative filtering algorithms assume that these latent factors are static, although it has been shown that user preferences and item perceptions drift over time. In this paper, we propose a conjugate and numerically stable dynamic matrix factorization (DCPF) based on compound Poisson matrix factorization that models the smoothly drifting latent factors using Gamma-Markov chains. We propose a numerically stable Gamma chain construction, and then present a stochastic variational inference approach to estimate the parameters of our model. We apply our model to time-stamped ratings data sets: Netflix, Yelp, and Last.fm, where DCPF achieves a higher predictive accuracy than state-of-the-art static and dynamic factorization models.', 'cs.LG', '2016-08-17T02:38:44Z', 'http://arxiv.org/abs/1608.04839v1', '2016-10-08 10:25:42', '2016-10-08 10:25:42')[0m
  [1m[35m (2.8ms)[0m  COMMIT
  [1m[36mPublish Load (0.6ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 140[0m
  [1m[35mAuthor Load (0.5ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Ghassen Jerfel'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Ghassen Jerfel', '2016-10-08 10:25:42', '2016-10-08 10:25:42')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (387, 140, 0, '2016-10-08 10:25:42', '2016-10-08 10:25:42')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.6ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Mehmet E. Basbug'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Mehmet E. Basbug', '2016-10-08 10:25:42', '2016-10-08 10:25:42')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (388, 140, 1, '2016-10-08 10:25:42', '2016-10-08 10:25:42')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.4ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Barbara E. Engelhardt'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Barbara E. Engelhardt', '2016-10-08 10:25:42', '2016-10-08 10:25:42')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (389, 140, 2, '2016-10-08 10:25:42', '2016-10-08 10:25:42')[0m
  [1m[35m (0.3ms)[0m  COMMIT
  [1m[36mPaper Load (0.4ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Evaluating Causal Models by Comparing Interventional Distributions'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Evaluating Causal Models by Comparing Interventional Distributions', 'The predominant method for evaluating the quality of causal models is to measure the graphical accuracy of the learned model structure. We present an alternative method for evaluating causal models that directly measures the accuracy of estimated interventional distributions. We contrast such distributional measures with structural measures, such as structural Hamming distance and structural intervention distance, showing that structural measures often correspond poorly to the accuracy of estimated interventional distributions. We use a number of real and synthetic datasets to illustrate various scenarios in which structural measures provide misleading results with respect to algorithm selection and parameter tuning, and we recommend that distributional measures become the new standard for evaluating causal models.', 'cs.AI', '2016-08-16T18:32:24Z', 'http://arxiv.org/abs/1608.04698v1', '2016-10-08 10:25:42', '2016-10-08 10:25:42')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPublish Load (0.6ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 141[0m
  [1m[35mAuthor Load (0.4ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Dan Garant'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Dan Garant', '2016-10-08 10:25:42', '2016-10-08 10:25:42')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (390, 141, 0, '2016-10-08 10:25:42', '2016-10-08 10:25:42')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.6ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'David Jensen'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('David Jensen', '2016-10-08 10:25:42', '2016-10-08 10:25:42')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (391, 141, 1, '2016-10-08 10:25:42', '2016-10-08 10:25:42')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.4ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'A Shallow High-Order Parametric Approach to Data Visualization and Compression'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('A Shallow High-Order Parametric Approach to Data Visualization and Compression', 'Explicit high-order feature interactions efficiently capture essential structural knowledge about the data of interest and have been used for constructing generative models. We present a supervised discriminative High-Order Parametric Embedding (HOPE) approach to data visualization and compression. Compared to deep embedding models with complicated deep architectures, HOPE generates more effective high-order feature mapping through an embarrassingly simple shallow model. Furthermore, two approaches to generating a small number of exemplars conveying high-order interactions to represent large-scale data sets are proposed. These exemplars in combination with the feature mapping learned by HOPE effectively capture essential data variations. Moreover, through HOPE, these exemplars are employed to increase the computational efficiency of kNN classification for fast information retrieval by thousands of times. For classification in two-dimensional embedding space on MNIST and USPS datasets, our shallow method HOPE with simple Sigmoid transformations significantly outperforms state-of-the-art supervised deep embedding models based on deep neural networks, and even achieved historically low test error rate of 0.65% in two-dimensional space on MNIST, which demonstrates the representational efficiency and power of supervised shallow models with high-order feature interactions.', 'cs.AI', '2016-08-16T17:54:40Z', 'http://arxiv.org/abs/1608.04689v1', '2016-10-08 10:25:42', '2016-10-08 10:25:42')
  [1m[36m (2.9ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (0.6ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 142
  [1m[36mAuthor Load (0.5ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Martin Renqiang Min'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Martin Renqiang Min', '2016-10-08 10:25:43', '2016-10-08 10:25:43')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (392, 142, 0, '2016-10-08 10:25:43', '2016-10-08 10:25:43')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.5ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Hongyu Guo'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Hongyu Guo', '2016-10-08 10:25:43', '2016-10-08 10:25:43')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (393, 142, 1, '2016-10-08 10:25:43', '2016-10-08 10:25:43')[0m
  [1m[35m (0.6ms)[0m  COMMIT
  [1m[36mAuthor Load (0.5ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Dongjin Song'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Dongjin Song', '2016-10-08 10:25:43', '2016-10-08 10:25:43')[0m
  [1m[35m (0.3ms)[0m  COMMIT
  [1m[36m (0.5ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (394, 142, 2, '2016-10-08 10:25:43', '2016-10-08 10:25:43')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.5ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Free Lunch for Optimisation under the Universal Distribution'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Free Lunch for Optimisation under the Universal Distribution', 'Function optimisation is a major challenge in computer science. The No Free Lunch theorems state that if all functions with the same histogram are assumed to be equally probable then no algorithm outperforms any other in expectation. We argue against the uniform assumption and suggest a universal prior exists for which there is a free lunch, but where no particular class of functions is favoured over another. We also prove upper and lower bounds on the size of the free lunch.', 'math.OC', '2016-08-16T10:27:37Z', 'http://dx.doi.org/10.1109/CEC.2014.6900546', '2016-10-08 10:25:43', '2016-10-08 10:25:43')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (0.6ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 143
  [1m[36mAuthor Load (0.5ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Tom Everitt'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Tom Everitt', '2016-10-08 10:25:43', '2016-10-08 10:25:43')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (395, 143, 0, '2016-10-08 10:25:43', '2016-10-08 10:25:43')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.5ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Tor Lattimore'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Tor Lattimore', '2016-10-08 10:25:43', '2016-10-08 10:25:43')
  [1m[36m (0.3ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (396, 143, 1, '2016-10-08 10:25:43', '2016-10-08 10:25:43')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (0.6ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Marcus Hutter'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Marcus Hutter', '2016-10-08 10:25:43', '2016-10-08 10:25:43')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (397, 143, 2, '2016-10-08 10:25:43', '2016-10-08 10:25:43')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.4ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'TerpreT: A Probabilistic Programming Language for Program Induction'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('TerpreT: A Probabilistic Programming Language for Program Induction', 'We study machine learning formulations of inductive program synthesis; given input-output examples, we try to synthesize source code that maps inputs to corresponding outputs. Our aims are to develop new machine learning approaches based on neural networks and graphical models, and to understand the capabilities of machine learning techniques relative to traditional alternatives, such as those based on constraint solving from the programming languages community. Our key contribution is the proposal of TerpreT, a domain-specific language for expressing program synthesis problems. TerpreT is similar to a probabilistic programming language: a model is composed of a specification of a program representation (declarations of random variables) and an interpreter describing how programs map inputs to outputs (a model connecting unknowns to observations). The inference task is to observe a set of input-output examples and infer the underlying program. TerpreT has two main benefits. First, it enables rapid exploration of a range of domains, program representations, and interpreter models. Second, it separates the model specification from the inference algorithm, allowing like-to-like comparisons between different approaches to inference. From a single TerpreT specification we automatically perform inference using four different back-ends. These are based on gradient descent, linear program (LP) relaxations for graphical models, discrete satisfiability solving, and the Sketch program synthesis system. We illustrate the value of TerpreT by developing several interpreter models and performing an empirical comparison between alternative inference algorithms. Our key empirical finding is that constraint solvers dominate the gradient descent and LP-based formulations. We conclude with suggestions for the machine learning community to make progress on program synthesis.', 'cs.LG', '2016-08-15T22:34:50Z', 'http://arxiv.org/abs/1608.04428v1', '2016-10-08 10:25:43', '2016-10-08 10:25:43')
  [1m[36m (0.8ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (0.6ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 144
  [1m[36mAuthor Load (0.4ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Alexander L. Gaunt'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Alexander L. Gaunt', '2016-10-08 10:25:43', '2016-10-08 10:25:43')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (398, 144, 0, '2016-10-08 10:25:43', '2016-10-08 10:25:43')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.6ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Marc Brockschmidt'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Marc Brockschmidt', '2016-10-08 10:25:43', '2016-10-08 10:25:43')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (399, 144, 1, '2016-10-08 10:25:43', '2016-10-08 10:25:43')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.5ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Rishabh Singh'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Rishabh Singh', '2016-10-08 10:25:43', '2016-10-08 10:25:43')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (400, 144, 2, '2016-10-08 10:25:43', '2016-10-08 10:25:43')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.6ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Nate Kushman'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Nate Kushman', '2016-10-08 10:25:43', '2016-10-08 10:25:43')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (401, 144, 3, '2016-10-08 10:25:43', '2016-10-08 10:25:43')[0m
  [1m[35m (0.6ms)[0m  COMMIT
  [1m[36mAuthor Load (0.5ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Pushmeet Kohli'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Pushmeet Kohli', '2016-10-08 10:25:43', '2016-10-08 10:25:43')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (402, 144, 4, '2016-10-08 10:25:43', '2016-10-08 10:25:43')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.6ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Jonathan Taylor'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Jonathan Taylor', '2016-10-08 10:25:43', '2016-10-08 10:25:43')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (403, 144, 5, '2016-10-08 10:25:43', '2016-10-08 10:25:43')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (0.6ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Daniel Tarlow'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Daniel Tarlow', '2016-10-08 10:25:43', '2016-10-08 10:25:43')[0m
  [1m[35m (0.6ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (404, 144, 6, '2016-10-08 10:25:43', '2016-10-08 10:25:43')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.4ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'A Geometric Framework for Convolutional Neural Networks'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('A Geometric Framework for Convolutional Neural Networks', 'In this paper, a geometric framework for neural networks is proposed. This framework uses the inner product space structure underlying the parameter set to perform gradient descent not in a component-based form, but in a coordinate-free manner. Convolutional neural networks are described in this framework in a compact form, with the gradients of standard --- and higher-order --- loss functions calculated for each layer of the network. This approach can be applied to other network structures and provides a basis on which to create new networks.', 'stat.ML', '2016-08-15T19:38:35Z', 'http://arxiv.org/abs/1608.04374v1', '2016-10-08 10:25:43', '2016-10-08 10:25:43')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (0.4ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 145
  [1m[36mAuthor Load (0.4ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Anthony L. Caterini'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Anthony L. Caterini', '2016-10-08 10:25:43', '2016-10-08 10:25:43')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (405, 145, 0, '2016-10-08 10:25:43', '2016-10-08 10:25:43')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.5ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Dong Eui Chang'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Dong Eui Chang', '2016-10-08 10:25:43', '2016-10-08 10:25:43')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (406, 145, 1, '2016-10-08 10:25:43', '2016-10-08 10:25:43')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (0.4ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Multi-way Monte Carlo Method for Linear Systems'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Multi-way Monte Carlo Method for Linear Systems', 'We study the Monte Carlo method for solving a linear system of the form $x = H x + b$. A sufficient condition for the method to work is $\\| H \\| < 1$, which greatly limits the usability of this method. We improve this condition by proposing a new multi-way Markov random walk, which is a generalization of the standard Markov random walk. Under our new framework we prove that the necessary and sufficient condition for our method to work is the spectral radius $\\rho(H^{+}) < 1$, which is a weaker requirement than $\\| H \\| < 1$. In addition to solving more problems, our new method can work faster than the standard algorithm. In numerical experiments on both synthetic and real world matrices, we demonstrate the effectiveness of our new method.', 'cs.NA', '2016-08-15T18:45:08Z', 'http://arxiv.org/abs/1608.04361v1', '2016-10-08 10:25:43', '2016-10-08 10:25:43')[0m
  [1m[35m (0.8ms)[0m  COMMIT
  [1m[36mPublish Load (0.5ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 146[0m
  [1m[35mAuthor Load (0.4ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Tao Wu'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Tao Wu', '2016-10-08 10:25:43', '2016-10-08 10:25:43')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (407, 146, 0, '2016-10-08 10:25:43', '2016-10-08 10:25:43')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.5ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'David F. Gleich'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('David F. Gleich', '2016-10-08 10:25:43', '2016-10-08 10:25:43')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (408, 146, 1, '2016-10-08 10:25:43', '2016-10-08 10:25:43')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.4ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Informal Physical Reasoning Processes'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.4ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Informal Physical Reasoning Processes', 'A fundamental question is whether Turing machines can model all reasoning processes. We introduce an existence principle stating that the perception of the physical existence of any Turing program can serve as a physical causation for the application of any Turing-computable function to this Turing program. The existence principle overcomes the limitation of the outputs of Turing machines to lists, that is, recursively enumerable sets. The principle is illustrated by productive partial functions for productive sets such as the set of the Goedel numbers of the Turing-computable total functions. The existence principle and productive functions imply the existence of physical systems whose reasoning processes cannot be modeled by Turing machines. These systems are called creative. Creative systems can prove the undecidable formula in Goedel\'s theorem in another formal system which is constructed at a later point in time. A hypothesis about creative systems, which is based on computer experiments, is introduced.', 'cs.AI', '2016-08-15T16:51:38Z', 'http://arxiv.org/abs/1608.04672v1', '2016-10-08 10:25:43', '2016-10-08 10:25:43')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (0.5ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 147
  [1m[36mAuthor Load (0.4ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Kurt Ammon'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Kurt Ammon', '2016-10-08 10:25:43', '2016-10-08 10:25:43')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (409, 147, 0, '2016-10-08 10:25:43', '2016-10-08 10:25:43')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.4ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Can Peripheral Representations Improve Clutter Metrics on Complex Scenes?'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Can Peripheral Representations Improve Clutter Metrics on Complex Scenes?', 'Previous studies have proposed image-based clutter measures that correlate with human search times and/or eye movements. However, most models do not take into account the fact that the effects of clutter interact with the foveated nature of the human visual system: visual clutter further from the fovea has an increasing detrimental influence on perception. Here, we introduce a new foveated clutter model to predict the detrimental effects in target search utilizing a forced fixation search task. We use Feature Congestion (Rosenholtz et al.) as our non foveated clutter model, and we stack a peripheral architecture on top of Feature Congestion for our foveated model. We introduce the Peripheral Integration Feature Congestion (PIFC) coefficient, as a fundamental ingredient of our model that modulates clutter as a non-linear gain contingent on eccentricity. We finally show that Foveated Feature Congestion (FFC) clutter scores r(44) = -0.82 correlate better with target detection (hit rate) than regular Feature Congestion r(44) = -0.19 in forced fixation search. Thus, our model allows us to enrich clutter perception research by computing fixation specific clutter maps. A toolbox for creating peripheral architectures: Piranhas: Peripheral Architectures for Natural, Hybrid and Artificial Systems will be made available.', 'cs.CV', '2016-08-14T01:07:29Z', 'http://arxiv.org/abs/1608.04042v1', '2016-10-08 10:25:43', '2016-10-08 10:25:43')
  [1m[36m (0.9ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (0.7ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 148
  [1m[36mAuthor Load (0.4ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Arturo Deza'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Arturo Deza', '2016-10-08 10:25:43', '2016-10-08 10:25:43')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (410, 148, 0, '2016-10-08 10:25:43', '2016-10-08 10:25:43')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.7ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Miguel P. Eckstein'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Miguel P. Eckstein', '2016-10-08 10:25:43', '2016-10-08 10:25:43')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (411, 148, 1, '2016-10-08 10:25:43', '2016-10-08 10:25:43')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPaper Load (0.4ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Determining Health Utilities through Data Mining of Social Media'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Determining Health Utilities through Data Mining of Social Media', '\'Health utilities\' measure patient preferences for perfect health compared to specific unhealthy states, such as asthma, a fractured hip, or colon cancer. When integrated over time, these estimations are called quality adjusted life years (QALYs). Until now, characterizing health utilities (HUs) required detailed patient interviews or written surveys. While reliable and specific, this data remained costly due to efforts to locate, enlist and coordinate participants. Thus the scope, context and temporality of diseases examined has remained limited. Now that more than a billion people use social media, we propose a novel strategy: use natural language processing to analyze public online conversations for signals of the severity of medical conditions and correlate these to known HUs using machine learning. In this work, we filter a dataset that originally contained 2 billion tweets for relevant content on 60 diseases. Using this data, our algorithm successfully distinguished mild from severe diseases, which had previously been categorized only by traditional techniques. This represents progress towards two related applications: first, predicting HUs where such information is nonexistent; and second, (where rich HU data already exists) estimating temporal or geographic patterns of disease severity through data mining.', 'cs.CL', '2016-08-13T04:02:38Z', 'http://arxiv.org/abs/1608.03938v1', '2016-10-08 10:25:43', '2016-10-08 10:25:43')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPublish Load (0.4ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 149[0m
  [1m[35mAuthor Load (0.4ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Christopher Thompson'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Christopher Thompson', '2016-10-08 10:25:43', '2016-10-08 10:25:43')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (412, 149, 0, '2016-10-08 10:25:43', '2016-10-08 10:25:43')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.4ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Josh Introne'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Josh Introne', '2016-10-08 10:25:43', '2016-10-08 10:25:43')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.4ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (413, 149, 1, '2016-10-08 10:25:43', '2016-10-08 10:25:43')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.6ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Clint Young'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Clint Young', '2016-10-08 10:25:43', '2016-10-08 10:25:43')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (414, 149, 2, '2016-10-08 10:25:43', '2016-10-08 10:25:43')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (0.4ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Traversing Environments Using Possibility Graphs for Humanoid Robots'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Traversing Environments Using Possibility Graphs for Humanoid Robots', 'Locomotion for legged robots poses considerable challenges when confronted by obstacles and adverse environments. Footstep planners are typically only designed for one mode of locomotion, but traversing unfavorable environments may require several forms of locomotion to be sequenced together, such as walking, crawling, and jumping. Multi-modal motion planners can be used to address some of these problems, but existing implementations tend to be time-consuming and are limited to quasi-static actions. This paper presents a motion planning method to traverse complex environments using multiple categories of actions. We introduce the concept of the \"Possibility Graph\", which uses high-level approximations of constraint manifolds to rapidly explore the \"possibility\" of actions, thereby allowing lower-level single-action motion planners to be utilized more efficiently. We show that the Possibility Graph can quickly find paths through several different challenging environments which require various combinations of actions in order to traverse.', 'cs.RO', '2016-08-12T16:47:01Z', 'http://arxiv.org/abs/1608.03845v1', '2016-10-08 10:25:43', '2016-10-08 10:25:43')[0m
  [1m[35m (0.8ms)[0m  COMMIT
  [1m[36mPublish Load (0.7ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 150[0m
  [1m[35mAuthor Load (0.4ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Michael X. Grey'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Michael X. Grey', '2016-10-08 10:25:43', '2016-10-08 10:25:43')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (415, 150, 0, '2016-10-08 10:25:43', '2016-10-08 10:25:43')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.5ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Aaron D. Ames'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Aaron D. Ames', '2016-10-08 10:25:43', '2016-10-08 10:25:43')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (416, 150, 1, '2016-10-08 10:25:43', '2016-10-08 10:25:43')
  [1m[36m (0.3ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.5ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'C. Karen Liu'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('C. Karen Liu', '2016-10-08 10:25:43', '2016-10-08 10:25:43')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (417, 150, 2, '2016-10-08 10:25:43', '2016-10-08 10:25:43')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (0.4ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Perceptual Reward Functions'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Perceptual Reward Functions', 'Reinforcement learning problems are often described through rewards that indicate if an agent has completed some task. This specification can yield desirable behavior, however many problems are difficult to specify in this manner, as one often needs to know the proper configuration for the agent. When humans are learning to solve tasks, we often learn from visual instructions composed of images or videos. Such representations motivate our development of Perceptual Reward Functions, which provide a mechanism for creating visual task descriptions. We show that this approach allows an agent to learn from rewards that are based on raw pixels rather than internal parameters.', 'cs.AI', '2016-08-12T15:29:05Z', 'http://arxiv.org/abs/1608.03824v1', '2016-10-08 10:25:43', '2016-10-08 10:25:43')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPublish Load (0.6ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 151[0m
  [1m[35mAuthor Load (0.5ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Ashley Edwards'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Ashley Edwards', '2016-10-08 10:25:43', '2016-10-08 10:25:43')
  [1m[36m (1.8ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (418, 151, 0, '2016-10-08 10:25:43', '2016-10-08 10:25:43')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (0.6ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Charles Isbell'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Charles Isbell', '2016-10-08 10:25:43', '2016-10-08 10:25:43')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (419, 151, 1, '2016-10-08 10:25:43', '2016-10-08 10:25:43')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.6ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Atsuo Takanishi'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Atsuo Takanishi', '2016-10-08 10:25:43', '2016-10-08 10:25:43')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (420, 151, 2, '2016-10-08 10:25:43', '2016-10-08 10:25:43')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (0.4ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Compositional Distributional Cognition'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.7ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Compositional Distributional Cognition', 'We accommodate the Integrated Connectionist/Symbolic Architecture (ICS) of [32] within the categorical compositional semantics (CatCo) of [13], forming a model of categorical compositional cognition (CatCog). This resolves intrinsic problems with ICS such as the fact that representations inhabit an unbounded space and that sentences with differing tree structures cannot be directly compared. We do so in a way that makes the most of the grammatical structure available, in contrast to strategies like circular convolution. Using the CatCo model also allows us to make use of tools developed for CatCo such as the representation of ambiguity and logical reasoning via density matrices, structural meanings for words such as relative pronouns, and addressing over- and under-extension, all of which are present in cognitive processes. Moreover the CatCog framework is sufficiently flexible to allow for entirely different representations of meaning, such as conceptual spaces. Interestingly, since the CatCo model was largely inspired by categorical quantum mechanics, so is CatCog.', 'cs.AI', '2016-08-12T13:13:10Z', 'http://arxiv.org/abs/1608.03785v1', '2016-10-08 10:25:43', '2016-10-08 10:25:43')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPublish Load (0.5ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 152[0m
  [1m[35mAuthor Load (0.4ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Yaared Al-Mehairi'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Yaared Al-Mehairi', '2016-10-08 10:25:43', '2016-10-08 10:25:43')
  [1m[36m (3.0ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (421, 152, 0, '2016-10-08 10:25:43', '2016-10-08 10:25:43')[0m
  [1m[35m (1.6ms)[0m  COMMIT
  [1m[36mAuthor Load (0.7ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Bob Coecke'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.4ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Bob Coecke', '2016-10-08 10:25:43', '2016-10-08 10:25:43')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (422, 152, 1, '2016-10-08 10:25:43', '2016-10-08 10:25:43')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.6ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Martha Lewis'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Martha Lewis', '2016-10-08 10:25:43', '2016-10-08 10:25:43')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (423, 152, 2, '2016-10-08 10:25:43', '2016-10-08 10:25:43')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (0.4ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Inferring unknown biological function by integration of GO annotations and gene expression data'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.4ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Inferring unknown biological function by integration of GO annotations and gene expression data', 'Characterizing genes with semantic information is an important process regarding the description of gene products. In spite that complete genomes of many organisms have been already sequenced, the biological functions of all of their genes are still unknown. Since experimentally studying the functions of those genes, one by one, would be unfeasible, new computational methods for gene functions inference are needed. We present here a novel computational approach for inferring biological function for a set of genes with previously unknown function, given a set of genes with well-known information. This approach is based on the premise that genes with similar behaviour should be grouped together. This is known as the guilt-by-association principle. Thus, it is possible to take advantage of clustering techniques to obtain groups of unknown genes that are co-clustered with genes that have well-known semantic information (GO annotations). Meaningful knowledge to infer unknown semantic information can therefore be provided by these well-known genes. We provide a method to explore the potential function of new genes according to those currently annotated. The results obtained indicate that the proposed approach could be a useful and effective tool when used by biologists to guide the inference of biological functions for recently discovered genes. Our work sets an important landmark in the field of identifying unknown gene functions through clustering, using an external source of biological input. A simple web interface to this proposal can be found at http://fich.unl.edu.ar/sinc/webdemo/gamma-am/.', 'cs.AI', '2016-08-12T04:29:14Z', 'http://arxiv.org/abs/1608.03672v1', '2016-10-08 10:25:43', '2016-10-08 10:25:43')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPublish Load (0.6ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 153[0m
  [1m[35mAuthor Load (0.4ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Guillermo Leale'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Guillermo Leale', '2016-10-08 10:25:43', '2016-10-08 10:25:43')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (424, 153, 0, '2016-10-08 10:25:43', '2016-10-08 10:25:43')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.4ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Ariel Bayá'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Ariel Bayá', '2016-10-08 10:25:43', '2016-10-08 10:25:43')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (425, 153, 1, '2016-10-08 10:25:43', '2016-10-08 10:25:43')
  [1m[36m (0.8ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.5ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Diego Milone'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Diego Milone', '2016-10-08 10:25:43', '2016-10-08 10:25:43')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (426, 153, 2, '2016-10-08 10:25:43', '2016-10-08 10:25:43')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (0.6ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Pablo Granitto'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Pablo Granitto', '2016-10-08 10:25:43', '2016-10-08 10:25:43')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (427, 153, 3, '2016-10-08 10:25:43', '2016-10-08 10:25:43')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.5ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Georgina Stegmayer'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Georgina Stegmayer', '2016-10-08 10:25:43', '2016-10-08 10:25:43')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (428, 153, 4, '2016-10-08 10:25:43', '2016-10-08 10:25:43')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (0.4ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Learning Mobile App Usage Routine through Learning Automata'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Learning Mobile App Usage Routine through Learning Automata', 'Since its conception, smart app market has grown exponentially. Success in the app market depends on many factors among which the quality of the app is a significant contributor, such as energy use. Nevertheless, smartphones, as a subset of mobile computing devices. inherit the limited power resource constraint. Therefore, there is a challenge of maintaining the resource while increasing the target app quality. This paper introduces Learning Automata (LA) as an online learning method to learn and predict the app usage routines of the users. Such prediction can leverage the app cache functionality of the operating system and thus (i) decreases app launch time and (ii) preserve battery. Our algorithm, which is an online learning approach, temporally updates and improves the internal states of itself. In particular, it learns the transition probabilities between app launching. Each App launching instance updates the transition probabilities related to that App, and this will result in improving the prediction. We benefit from a real-world lifelogging dataset and our experimental results show considerable success with respect to the two baseline methods that are used currently for smartphone app prediction approaches.', 'cs.AI', '2016-08-11T15:43:55Z', 'http://arxiv.org/abs/1608.03507v2', '2016-10-08 10:25:43', '2016-10-08 10:25:43')[0m
  [1m[35m (2.9ms)[0m  COMMIT
  [1m[36mPublish Load (0.7ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 154[0m
  [1m[35mAuthor Load (0.6ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Ramin Rahnamoun'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Ramin Rahnamoun', '2016-10-08 10:25:43', '2016-10-08 10:25:43')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (429, 154, 0, '2016-10-08 10:25:43', '2016-10-08 10:25:43')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (0.5ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Reza Rawassizadeh'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Reza Rawassizadeh', '2016-10-08 10:25:43', '2016-10-08 10:25:43')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (430, 154, 1, '2016-10-08 10:25:43', '2016-10-08 10:25:43')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.6ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Arash Maskooki'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Arash Maskooki', '2016-10-08 10:25:43', '2016-10-08 10:25:43')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (431, 154, 2, '2016-10-08 10:25:43', '2016-10-08 10:25:43')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPaper Load (0.4ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Towards Visual Type Theory as a Mathematical Tool and Mathematical User Interface'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Towards Visual Type Theory as a Mathematical Tool and Mathematical User Interface', 'A visual type theory is a cognitive tool that has much in common with language, and may be regarded as an exceptional form of spatial text adjunct. A mathematical visual type theory, called NPM, has been under development that can be viewed as an early-stage project in mathematical knowledge management and mathematical user interface development. We discuss in greater detail the notion of a visual type theory, report on progress towards a usable mathematical visual type theory, and discuss the outlook for future work on this project.', 'cs.AI', '2016-08-10T02:10:40Z', 'http://arxiv.org/abs/1608.03026v1', '2016-10-08 10:25:43', '2016-10-08 10:25:43')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPublish Load (0.6ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 155[0m
  [1m[35mAuthor Load (0.5ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Lucius Schoenbaum'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Lucius Schoenbaum', '2016-10-08 10:25:43', '2016-10-08 10:25:43')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (432, 155, 0, '2016-10-08 10:25:43', '2016-10-08 10:25:43')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (0.5ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Neural Generation of Regular Expressions from Natural Language with Minimal Domain Knowledge'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Neural Generation of Regular Expressions from Natural Language with Minimal Domain Knowledge', 'This paper explores the task of translating natural language queries into regular expressions which embody their meaning. In contrast to prior work, the proposed neural model does not utilize domain-specific crafting, learning to translate directly from a parallel corpus. To fully explore the potential of neural models, we propose a methodology for collecting a large corpus of regular expression, natural language pairs. Our resulting model achieves a performance gain of 19.6% over previous state-of-the-art models.', 'cs.CL', '2016-08-09T23:05:03Z', 'http://arxiv.org/abs/1608.03000v1', '2016-10-08 10:25:43', '2016-10-08 10:25:43')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPublish Load (0.4ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 156[0m
  [1m[35mAuthor Load (0.4ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Nicholas Locascio'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Nicholas Locascio', '2016-10-08 10:25:43', '2016-10-08 10:25:43')
  [1m[36m (2.9ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (433, 156, 0, '2016-10-08 10:25:43', '2016-10-08 10:25:43')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (0.7ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Karthik Narasimhan'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.4ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Karthik Narasimhan', '2016-10-08 10:25:43', '2016-10-08 10:25:43')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (434, 156, 1, '2016-10-08 10:25:43', '2016-10-08 10:25:43')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.6ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Eduardo DeLeon'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Eduardo DeLeon', '2016-10-08 10:25:43', '2016-10-08 10:25:43')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (435, 156, 2, '2016-10-08 10:25:43', '2016-10-08 10:25:43')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.4ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Nate Kushman'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36m (0.1ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (401, 156, 3, '2016-10-08 10:25:43', '2016-10-08 10:25:43')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (0.6ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Regina Barzilay'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Regina Barzilay', '2016-10-08 10:25:43', '2016-10-08 10:25:43')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (436, 156, 4, '2016-10-08 10:25:43', '2016-10-08 10:25:43')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.4ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Neuroevolution-Based Inverse Reinforcement Learning'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Neuroevolution-Based Inverse Reinforcement Learning', 'The problem of Learning from Demonstration is targeted at learning to perform tasks based on observed examples. One approach to Learning from Demonstration is Inverse Reinforcement Learning, in which actions are observed to infer rewards. This work combines a feature based state evaluation approach to Inverse Reinforcement Learning with neuroevolution, a paradigm for modifying neural networks based on their performance on a given task. Neural networks are used to learn from a demonstrated expert policy and are evolved to generate a policy similar to the demonstration. The algorithm is discussed and evaluated against competitive feature-based Inverse Reinforcement Learning approaches. At the cost of execution time, neural networks allow for non-linear combinations of features in state evaluations. These valuations may correspond to state value or state reward. This results in better correspondence to observed examples as opposed to using linear combinations. This work also extends existing work on Bayesian Non-Parametric Feature Construction for Inverse Reinforcement Learning by using non-linear combinations of intermediate data to improve performance. The algorithm is observed to be specifically suitable for a linearly solvable non-deterministic Markov Decision Processes in which multiple rewards are sparsely scattered in state space. A conclusive performance hierarchy between evaluated algorithms is presented.', 'cs.NE', '2016-08-09T20:04:40Z', 'http://arxiv.org/abs/1608.02971v1', '2016-10-08 10:25:43', '2016-10-08 10:25:43')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (0.6ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 157
  [1m[36mAuthor Load (0.6ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Karan K. Budhraja'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Karan K. Budhraja', '2016-10-08 10:25:43', '2016-10-08 10:25:43')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (437, 157, 0, '2016-10-08 10:25:43', '2016-10-08 10:25:43')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.5ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Tim Oates'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Tim Oates', '2016-10-08 10:25:43', '2016-10-08 10:25:43')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (438, 157, 1, '2016-10-08 10:25:43', '2016-10-08 10:25:43')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPaper Load (0.4ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Liftago On-Demand Transport Dataset and Market Formation Algorithm Based on Machine Learning'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Liftago On-Demand Transport Dataset and Market Formation Algorithm Based on Machine Learning', 'This document serves as a technical report for the analysis of on-demand transport dataset. Moreover we show how the dataset can be used to develop a market formation algorithm based on machine learning. Data used in this work comes from Liftago, a Prague based company which connects taxi drivers and customers through a smartphone app. The dataset is analysed from the machine-learning perspective: we give an overview of features available as well as results of feature ranking. Later we propose the SImple Data-driven MArket Formation (SIDMAF) algorithm which aims to improve a relevance while connecting customers with relevant drivers. We compare the heuristics currently used by Liftago with SIDMAF using two key performance indicators.', 'cs.AI', '2016-08-09T16:33:03Z', 'http://arxiv.org/abs/1608.02858v1', '2016-10-08 10:25:43', '2016-10-08 10:25:43')[0m
  [1m[35m (3.0ms)[0m  COMMIT
  [1m[36mPublish Load (0.7ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 158[0m
  [1m[35mAuthor Load (0.6ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Jan Mrkos'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Jan Mrkos', '2016-10-08 10:25:43', '2016-10-08 10:25:43')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (439, 158, 0, '2016-10-08 10:25:43', '2016-10-08 10:25:43')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.6ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Jan Drchal'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Jan Drchal', '2016-10-08 10:25:43', '2016-10-08 10:25:43')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (440, 158, 1, '2016-10-08 10:25:43', '2016-10-08 10:25:43')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.4ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Malcolm Egan'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Malcolm Egan', '2016-10-08 10:25:43', '2016-10-08 10:25:43')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (441, 158, 2, '2016-10-08 10:25:43', '2016-10-08 10:25:43')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (0.7ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Michal Jakob'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Michal Jakob', '2016-10-08 10:25:43', '2016-10-08 10:25:43')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (442, 158, 3, '2016-10-08 10:25:43', '2016-10-08 10:25:43')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.5ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Facial Expression Recognition Using a Hybrid CNN-SIFT Aggregator'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.4ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Facial Expression Recognition Using a Hybrid CNN-SIFT Aggregator', 'Recognizing facial expression has remained a challenging task in computer vision. Deriving an effective facial expression recognition is an important step for successful human-computer interaction systems. This paper describes a novel approach towards facial expression recognition task. It is motivated by the success of Convolutional Neural Networks (CNN) on face recognition problems. Unlike other works, we focus on getting good accuracy results while requiring only a small sample data to train the model by merging the CNN and SIFT features. The proposed classification model is an aggregation of multiple deep convolutional neural networks and a hybrid CNN-SIFT classifiers. The goal of using SIFT features is to increase the performance on small data as SIFT does not require large training data to generate useful features. The model has been tested on FER-2013, CK+ and SFEW 2.0 datasets. The results showed how CNN-SIFT feature improve the accuracy when added as a voting member in an ensemble classifier. It generates state-of-art results on FER-2013 and CK+ datasets, where it achieved 73.58% on FER-2013 and 99.35% on CK+.', 'cs.CV', '2016-08-09T15:21:33Z', 'http://arxiv.org/abs/1608.02833v2', '2016-10-08 10:25:43', '2016-10-08 10:25:43')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (0.6ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 159
  [1m[36mAuthor Load (0.4ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Mundher Al-Shabi'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Mundher Al-Shabi', '2016-10-08 10:25:43', '2016-10-08 10:25:43')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (443, 159, 0, '2016-10-08 10:25:43', '2016-10-08 10:25:43')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.4ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Wooi Ping Cheah'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Wooi Ping Cheah', '2016-10-08 10:25:43', '2016-10-08 10:25:43')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (444, 159, 1, '2016-10-08 10:25:43', '2016-10-08 10:25:43')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (0.5ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Tee Connie'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Tee Connie', '2016-10-08 10:25:43', '2016-10-08 10:25:43')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (445, 159, 2, '2016-10-08 10:25:43', '2016-10-08 10:25:43')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.4ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Resolving Spatial-Time Conflicts In A Set Of Any-angle Or Angle-constrained Grid Paths'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Resolving Spatial-Time Conflicts In A Set Of Any-angle Or Angle-constrained Grid Paths', 'We study the multi-agent path finding problem (MAPF) for a group of agents which are allowed to move into arbitrary directions on a 2D square grid. We focus on centralized conflict resolution for independently computed plans. We propose an algorithm that eliminates conflicts by using local re-planning and introducing time offsets to the execution of paths by different agents. Experimental results show that the algorithm can find high quality conflict-free solutions at low computational cost.', 'cs.AI', '2016-08-09T11:13:46Z', 'http://arxiv.org/abs/1608.02763v1', '2016-10-08 10:25:43', '2016-10-08 10:25:43')
  [1m[36m (2.9ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (0.7ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 160
  [1m[36mAuthor Load (0.7ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Konstantin Yakovlev'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Konstantin Yakovlev', '2016-10-08 10:25:43', '2016-10-08 10:25:43')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (446, 160, 0, '2016-10-08 10:25:43', '2016-10-08 10:25:43')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.6ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Anton Andreychuk'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Anton Andreychuk', '2016-10-08 10:25:43', '2016-10-08 10:25:43')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (447, 160, 1, '2016-10-08 10:25:43', '2016-10-08 10:25:43')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPaper Load (0.4ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Mean Box Pooling: A Rich Image Representation and Output Embedding for the Visual Madlibs Task'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Mean Box Pooling: A Rich Image Representation and Output Embedding for the Visual Madlibs Task', 'We present Mean Box Pooling, a novel visual representation that pools over CNN representations of a large number, highly overlapping object proposals. We show that such representation together with nCCA, a successful multimodal embedding technique, achieves state-of-the-art performance on the Visual Madlibs task. Moreover, inspired by the nCCA\'s objective function, we extend classical CNN+LSTM approach to train the network by directly maximizing the similarity between the internal representation of the deep learning architecture and candidate answers. Again, such approach achieves a significant improvement over the prior work that also uses CNN+LSTM approach on Visual Madlibs.', 'cs.CV', '2016-08-09T08:24:02Z', 'http://arxiv.org/abs/1608.02717v1', '2016-10-08 10:25:43', '2016-10-08 10:25:43')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPublish Load (0.4ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 161[0m
  [1m[35mAuthor Load (0.4ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Ashkan Mokarian'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Ashkan Mokarian', '2016-10-08 10:25:43', '2016-10-08 10:25:43')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (448, 161, 0, '2016-10-08 10:25:43', '2016-10-08 10:25:43')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.5ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Mateusz Malinowski'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Mateusz Malinowski', '2016-10-08 10:25:43', '2016-10-08 10:25:43')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (449, 161, 1, '2016-10-08 10:25:43', '2016-10-08 10:25:43')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.5ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Mario Fritz'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Mario Fritz', '2016-10-08 10:25:43', '2016-10-08 10:25:43')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (450, 161, 2, '2016-10-08 10:25:43', '2016-10-08 10:25:43')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (0.4ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Deeply Semantic Inductive Spatio-Temporal Learning'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Deeply Semantic Inductive Spatio-Temporal Learning', 'We present an inductive spatio-temporal learning framework rooted in inductive logic programming. With an emphasis on visuo-spatial language, logic, and cognition, the framework supports learning with relational spatio-temporal features identifiable in a range of domains involving the processing and interpretation of dynamic visuo-spatial imagery. We present a prototypical system, and an example application in the domain of computing for visual arts and computational cognitive science.', 'cs.AI', '2016-08-09T05:48:51Z', 'http://arxiv.org/abs/1608.02693v1', '2016-10-08 10:25:43', '2016-10-08 10:25:43')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPublish Load (0.6ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 162[0m
  [1m[35mAuthor Load (0.4ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Jakob Suchan'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Jakob Suchan', '2016-10-08 10:25:43', '2016-10-08 10:25:43')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (451, 162, 0, '2016-10-08 10:25:43', '2016-10-08 10:25:43')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.4ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Mehul Bhatt'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Mehul Bhatt', '2016-10-08 10:25:43', '2016-10-08 10:25:43')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (452, 162, 1, '2016-10-08 10:25:43', '2016-10-08 10:25:43')
  [1m[36m (0.3ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.4ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Carl Schultz'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Carl Schultz', '2016-10-08 10:25:43', '2016-10-08 10:25:43')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (453, 162, 2, '2016-10-08 10:25:43', '2016-10-08 10:25:43')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPaper Load (0.4ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Exact Structure Learning of Bayesian Networks by Optimal Path Extension'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Exact Structure Learning of Bayesian Networks by Optimal Path Extension', 'Bayesian networks are probabilistic graphical models often used in big data analytics. The problem of exact structure learning is to find a network structure that is optimal under certain scoring criteria. The problem is known to be NP-hard and the existing methods are both computationally and memory intensive. In this paper, we introduce a new approach for exact structure learning. Our strategy is to leverage relationship between a partial network structure and the remaining variables to constraint the number of ways in which the partial network can be optimally extended. Via experimental results, we show that the method provides up to three times improvement in runtime, and orders of magnitude reduction in memory consumption over the current best algorithms.', 'cs.AI', '2016-08-09T03:07:50Z', 'http://arxiv.org/abs/1608.02682v1', '2016-10-08 10:25:43', '2016-10-08 10:25:43')[0m
  [1m[35m (2.9ms)[0m  COMMIT
  [1m[36mPublish Load (0.7ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 163[0m
  [1m[35mAuthor Load (0.6ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Subhadeep Karan'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.3ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Subhadeep Karan', '2016-10-08 10:25:43', '2016-10-08 10:25:43')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (454, 163, 0, '2016-10-08 10:25:43', '2016-10-08 10:25:43')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (0.6ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Jaroslaw Zola'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Jaroslaw Zola', '2016-10-08 10:25:43', '2016-10-08 10:25:43')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (455, 163, 1, '2016-10-08 10:25:43', '2016-10-08 10:25:43')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.4ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Mouse Movement and Probabilistic Graphical Models Based E-Learning Activity Recognition Improvement Possibilistic Model'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Mouse Movement and Probabilistic Graphical Models Based E-Learning Activity Recognition Improvement Possibilistic Model', 'Automatically recognizing the e-learning activities is an important task for improving the online learning process. Probabilistic graphical models such as hidden Markov models and conditional random fields have been successfully used in order to identify a Web users activity. For such models, the sequences of observation are crucial for training and inference processes. Despite the efficiency of these probabilistic graphical models in segmenting and labeling stochastic sequences, their performance is adversely affected by the imperfect quality of data used for the construction of sequences of observation. In this paper, a formalism of the possibilistic theory will be used in order to propose a new approach for observation sequences preparation. The eminent contribution of our approach is to evaluate the effect of possibilistic reasoning during the generation of observation sequences on the effectiveness of hidden Markov models and conditional random fields models. Using a dataset containing 51 real manipulations related to three types of learners tasks, the preliminary experiments demonstrate that the sequences of observation obtained based on possibilistic reasoning significantly improve the performance of hidden Marvov models and conditional random fields models in the automatic recognition of the e-learning activities.', 'cs.AI', '2016-08-08T23:48:19Z', 'http://arxiv.org/abs/1608.02659v1', '2016-10-08 10:25:43', '2016-10-08 10:25:43')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (0.6ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 164
  [1m[36mAuthor Load (0.4ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Anis Elbahi'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Anis Elbahi', '2016-10-08 10:25:43', '2016-10-08 10:25:43')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (456, 164, 0, '2016-10-08 10:25:43', '2016-10-08 10:25:43')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.5ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Mohamed Nazih Omri'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Mohamed Nazih Omri', '2016-10-08 10:25:43', '2016-10-08 10:25:43')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (457, 164, 1, '2016-10-08 10:25:43', '2016-10-08 10:25:43')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (0.6ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Mohamed Ali Mahjoub'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Mohamed Ali Mahjoub', '2016-10-08 10:25:43', '2016-10-08 10:25:43')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (458, 164, 2, '2016-10-08 10:25:43', '2016-10-08 10:25:43')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.4ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Kamel Garrouch'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Kamel Garrouch', '2016-10-08 10:25:43', '2016-10-08 10:25:43')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (459, 164, 3, '2016-10-08 10:25:43', '2016-10-08 10:25:43')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (0.5ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Revisiting Causality Inference In Markov Chain'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.6ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Revisiting Causality Inference In Markov Chain', 'Identifying causal relationships is a key premise of scientific research. Given the mass of observational data in many disciplines, new machine learning methods offer the possibility of using an empirical approach to identifying unappreciated causal relationships and to understanding causal behavior. Conventional methods of causality inference from observational data require a considerable length of time series data to capture cause and effect relationships. We believe that important causal relationships can be inferred from the composition of one-step transition rates (Markov Chains) to and from an event. Here we introduce \'Causality Inference using Composition of Transitions\' (CICT), a computationally efficient method that reveals causal structure with high accuracy. We characterize the differences in causes, effects, and random events in the composition of their inputs and outputs. To demonstrate our method, we have used an administrative inpatient healthcare dataset to set up a graph network of patients transition between different diagnoses. Then we apply our method to patients transition graph, revealing deep and complex causal structure between clinical conditions. Our method is highly accurate in predicting whether a transition in a Markov chain is causal or random and performs well in identifying the direction of causality in bidirectional associations. Moreover, CICT brings in new information that enables unsupervised clustering methods to discriminate causality from randomness. Comprehensive performance analysis using C-statistics, goodness-of-fit statistics and decision analysis of predictive models, as well as comparison with the medical ground truth, validates our findings.', 'stat.ML', '2016-08-08T23:46:59Z', 'http://arxiv.org/abs/1608.02658v2', '2016-10-08 10:25:43', '2016-10-08 10:25:43')[0m
  [1m[35m (2.9ms)[0m  COMMIT
  [1m[36mPublish Load (0.7ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 165[0m
  [1m[35mAuthor Load (0.6ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Abbas Shojaee'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Abbas Shojaee', '2016-10-08 10:25:43', '2016-10-08 10:25:43')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (460, 165, 0, '2016-10-08 10:25:43', '2016-10-08 10:25:43')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (0.5ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Holophrasm: a neural Automated Theorem Prover for higher-order logic'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Holophrasm: a neural Automated Theorem Prover for higher-order logic', 'I propose a system for Automated Theorem Proving in higher order logic using deep learning and eschewing hand-constructed features. Holophrasm exploits the formalism of the Metamath language and explores partial proof trees using a neural-network-augmented bandit algorithm and a sequence-to-sequence model for action enumeration. The system proves 14% of its test theorems from Metamath\'s set.mm module.', 'cs.AI', '2016-08-08T22:33:13Z', 'http://arxiv.org/abs/1608.02644v2', '2016-10-08 10:25:43', '2016-10-08 10:25:43')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPublish Load (0.4ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 166[0m
  [1m[35mAuthor Load (0.6ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Daniel Whalen'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Daniel Whalen', '2016-10-08 10:25:43', '2016-10-08 10:25:43')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (461, 166, 0, '2016-10-08 10:25:43', '2016-10-08 10:25:43')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (0.4ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'ASP for Minimal Entailment in a Rational Extension of SROEL'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('ASP for Minimal Entailment in a Rational Extension of SROEL', 'In this paper we exploit Answer Set Programming (ASP) for reasoning in a rational extension SROEL-R-T of the low complexity description logic SROEL, which underlies the OWL EL ontology language. In the extended language, a typicality operator T is allowed to define concepts T(C) (typical C\'s) under a rational semantics. It has been proven that instance checking under rational entailment has a polynomial complexity. To strengthen rational entailment, in this paper we consider a minimal model semantics. We show that, for arbitrary SROEL-R-T knowledge bases, instance checking under minimal entailment is \\Pi^P_2-complete. Relying on a Small Model result, where models correspond to answer sets of a suitable ASP encoding, we exploit Answer Set Preferences (and, in particular, the asprin framework) for reasoning under minimal entailment. The paper is under consideration for acceptance in Theory and Practice of Logic Programming.', 'cs.AI', '2016-08-08T14:26:46Z', 'http://arxiv.org/abs/1608.02450v1', '2016-10-08 10:25:43', '2016-10-08 10:25:43')[0m
  [1m[35m (3.0ms)[0m  COMMIT
  [1m[36mPublish Load (0.7ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 167[0m
  [1m[35mAuthor Load (0.6ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Laura Giordano'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Laura Giordano', '2016-10-08 10:25:43', '2016-10-08 10:25:43')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (462, 167, 0, '2016-10-08 10:25:43', '2016-10-08 10:25:43')[0m
  [1m[35m (0.6ms)[0m  COMMIT
  [1m[36mAuthor Load (0.6ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Daniele Theseider Dupré'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Daniele Theseider Dupré', '2016-10-08 10:25:43', '2016-10-08 10:25:43')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (463, 167, 1, '2016-10-08 10:25:43', '2016-10-08 10:25:43')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.4ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'QPass: a Merit-based Evaluation of Soccer Passes'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('QPass: a Merit-based Evaluation of Soccer Passes', 'Quantitative analysis of soccer players\' passing ability focuses on descriptive statistics without considering the players\' real contribution to the passing and ball possession strategy of their team. Which player is able to help the build-up of an attack, or to maintain the possession of the ball? We introduce a novel methodology called QPass to answer questions like these quantitatively. Based on the analysis of an entire season, we rank the players based on the intrinsic value of their passes using QPass. We derive an album of pass trajectories for different gaming styles. Our methodology reveals a quite counterintuitive paradigm: losing the ball possession could lead to better chances to win a game.', 'cs.AI', '2016-08-08T12:54:57Z', 'http://arxiv.org/abs/1608.03532v1', '2016-10-08 10:25:43', '2016-10-08 10:25:43')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (0.4ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 168
  [1m[36mAuthor Load (0.4ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Laszlo Gyarmati'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Laszlo Gyarmati', '2016-10-08 10:25:43', '2016-10-08 10:25:43')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (464, 168, 0, '2016-10-08 10:25:43', '2016-10-08 10:25:43')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.6ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Rade Stanojevic'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.4ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Rade Stanojevic', '2016-10-08 10:25:43', '2016-10-08 10:25:43')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (465, 168, 1, '2016-10-08 10:25:43', '2016-10-08 10:25:43')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPaper Load (0.4ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Complexity Results for Manipulation, Bribery and Control of the Kemeny Procedure in Judgment Aggregation'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Complexity Results for Manipulation, Bribery and Control of the Kemeny Procedure in Judgment Aggregation', 'We study the computational complexity of several scenarios of strategic behavior for the Kemeny procedure in the setting of judgment aggregation. In particular, we investigate (1) manipulation, where an individual aims to achieve a better group outcome by reporting an insincere individual opinion, (2) bribery, where an external agent aims to achieve an outcome with certain properties by bribing a number of individuals, and (3) control (by adding or deleting issues), where an external agent aims to achieve an outcome with certain properties by influencing the set of issues in the judgment aggregation situation. We show that determining whether these types of strategic behavior are possible (and if so, computing a policy for successful strategic behavior) is complete for the second level of the Polynomial Hierarchy. That is, we show that these problems are $\\Sigma^p_2$-complete.', 'cs.AI', '2016-08-08T12:24:05Z', 'http://arxiv.org/abs/1608.02406v1', '2016-10-08 10:25:43', '2016-10-08 10:25:43')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPublish Load (0.6ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 169[0m
  [1m[35mAuthor Load (0.4ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Ronald de Haan'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Ronald de Haan', '2016-10-08 10:25:43', '2016-10-08 10:25:43')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (466, 169, 0, '2016-10-08 10:25:43', '2016-10-08 10:25:43')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPaper Load (0.4ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Towards Representation Learning with Tractable Probabilistic Models'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Towards Representation Learning with Tractable Probabilistic Models', 'Probabilistic models learned as density estimators can be exploited in representation learning beside being toolboxes used to answer inference queries only. However, how to extract useful representations highly depends on the particular model involved. We argue that tractable inference, i.e. inference that can be computed in polynomial time, can enable general schemes to extract features from black box models. We plan to investigate how Tractable Probabilistic Models (TPMs) can be exploited to generate embeddings by random query evaluations. We devise two experimental designs to assess and compare different TPMs as feature extractors in an unsupervised representation learning framework. We show some experimental results on standard image datasets by applying such a method to Sum-Product Networks and Mixture of Trees as tractable models generating embeddings.', 'cs.LG', '2016-08-08T07:44:24Z', 'http://arxiv.org/abs/1608.02341v1', '2016-10-08 10:25:43', '2016-10-08 10:25:43')[0m
  [1m[35m (2.9ms)[0m  COMMIT
  [1m[36mPublish Load (0.7ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 170[0m
  [1m[35mAuthor Load (0.7ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Antonio Vergari'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Antonio Vergari', '2016-10-08 10:25:43', '2016-10-08 10:25:43')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (467, 170, 0, '2016-10-08 10:25:43', '2016-10-08 10:25:43')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.6ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Nicola Di Mauro'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Nicola Di Mauro', '2016-10-08 10:25:43', '2016-10-08 10:25:43')[0m
  [1m[35m (1.6ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.7ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (468, 170, 1, '2016-10-08 10:25:43', '2016-10-08 10:25:43')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.5ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Floriana Esposito'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.6ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Floriana Esposito', '2016-10-08 10:25:43', '2016-10-08 10:25:43')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (469, 170, 2, '2016-10-08 10:25:43', '2016-10-08 10:25:43')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (0.4ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Blankets Joint Posterior score for learning irregular Markov network structures'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Blankets Joint Posterior score for learning irregular Markov network structures', 'Markov networks are extensively used to model complex sequential, spatial, and relational interactions in a wide range of fields. By learning the structure of independences of a domain, more accurate joint probability distributions can be obtained for inference tasks or, more directly, for interpreting the most significant relations among the variables. However, the performance of current available methods for learning the structure is heavily dependent on the choice of two factors: the structure representation, and the approach for learning such representation. This work follows the probabilistic maximum-a-posteriori approach for learning undirected graph structures, which has gained interest recently. Thus, the Blankets Joint Posterior score is designed for computing the posterior probability of structures given data. In particular, the score proposed can improve the learning process when the solution structure is irregular (that is, when there exists an imbalance in the number of edges over the nodes), which is a property present in many real-world networks. The approximation proposed computes the joint posterior distribution from the collection of Markov blankets of the structure. Essentially, a series of conditional distributions are calculated by using, information about other Markov blankets in the network as evidence. Our experimental results demonstrate that the proposed score has better sample complexity for learning irregular structures, when compared to state-of-the-art scores. By considering optimization with greedy hill-climbing search, we prove for several study cases that our score identifies structures with fewer errors than competitors.', 'cs.AI', '2016-08-08T04:59:40Z', 'http://arxiv.org/abs/1608.02315v1', '2016-10-08 10:25:43', '2016-10-08 10:25:43')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPublish Load (0.5ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 171[0m
  [1m[35mAuthor Load (0.6ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Federico Schlüter'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Federico Schlüter', '2016-10-08 10:25:43', '2016-10-08 10:25:43')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (470, 171, 0, '2016-10-08 10:25:43', '2016-10-08 10:25:43')[0m
  [1m[35m (2.9ms)[0m  COMMIT
  [1m[36mAuthor Load (0.8ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Yanela Strappa'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Yanela Strappa', '2016-10-08 10:25:43', '2016-10-08 10:25:43')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (471, 171, 1, '2016-10-08 10:25:43', '2016-10-08 10:25:43')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.6ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Facundo Bromberg'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Facundo Bromberg', '2016-10-08 10:25:43', '2016-10-08 10:25:43')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (472, 171, 2, '2016-10-08 10:25:43', '2016-10-08 10:25:43')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.6ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Diego H. Milone'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Diego H. Milone', '2016-10-08 10:25:43', '2016-10-08 10:25:43')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (473, 171, 3, '2016-10-08 10:25:43', '2016-10-08 10:25:43')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.4ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Delta Epsilon Alpha Star: A PAC-Admissible Search Algorithm'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Delta Epsilon Alpha Star: A PAC-Admissible Search Algorithm', 'Delta Epsilon Alpha Star is a minimal coverage, real-time robotic search algorithm that yields a moderately aggressive search path with minimal backtracking. Search performance is bounded by a placing a combinatorial bound, epsilon and delta, on the maximum deviation from the theoretical shortest path and the probability at which further deviations can occur. Additionally, we formally define the notion of PAC-admissibility -- a relaxed admissibility criteria for algorithms, and show that PAC-admissible algorithms are better suited to robotic search situations than epsilon-admissible or strict algorithms.', 'cs.AI', '2016-08-08T00:14:50Z', 'http://arxiv.org/abs/1608.02287v1', '2016-10-08 10:25:43', '2016-10-08 10:25:43')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (0.4ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 172
  [1m[36mAuthor Load (0.4ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'David Cox'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('David Cox', '2016-10-08 10:25:43', '2016-10-08 10:25:43')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (474, 172, 0, '2016-10-08 10:25:43', '2016-10-08 10:25:43')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.4ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Towards the Self-constructive Brain: emergence of adaptive behavior'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Towards the Self-constructive Brain: emergence of adaptive behavior', 'Adaptive behavior is mainly the result of adaptive brains. We go a step beyond and claim that the brain does not only adapt to its surrounding reality but rather, it builds itself up to constructs its own reality. That is, rather than just trying to passively understand its environment, the brain is the architect of its own reality in an active process where its internal models of the external world frame how its new interactions with the environment are assimilated. These internal models represent relevant predictive patterns of interaction all over the different brain structures: perceptual, sensorimotor, motor, etc. The emergence of adaptive behavior arises from this self-constructive nature of the brain, based on the following principles of organization: self-experimental, self- growing, and self-repairing. Self-experimental, since to ensure survival, the self-constructive brain (SCB) is an active machine capable of performing experiments of its own interactions with the environment by mental simulation. Self-growing, since it dynamically and incrementally constructs internal structures in order to build a model of the world as it gathers statistics from its interactions with the environment. Self-repairing, since to survive the SCB must also be robust and capable of finding ways to repair parts of previously working structures and hence re-construct a previous relevant pattern of activity.', 'cs.NE', '2016-08-07T15:52:28Z', 'http://arxiv.org/abs/1608.02229v1', '2016-10-08 10:25:43', '2016-10-08 10:25:43')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (0.5ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 173
  [1m[36mAuthor Load (0.4ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Fernando Corbacho'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Fernando Corbacho', '2016-10-08 10:25:43', '2016-10-08 10:25:43')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (475, 173, 0, '2016-10-08 10:25:43', '2016-10-08 10:25:43')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.4ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Spacetimes with Semantics (III) - The Structure of Functional Knowledge Representation and Artificial Reasoning'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.4ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Spacetimes with Semantics (III) - The Structure of Functional Knowledge Representation and Artificial Reasoning', 'Using the previously developed concepts of semantic spacetime, I explore the interpretation of knowledge representations, and their structure, as a semantic system, within the framework of promise theory. By assigning interpretations to phenomena, from observers to observed, we may approach a simple description of knowledge-based functional systems, with direct practical utility. The focus is especially on the interpretation of concepts, associative knowledge, and context awareness. The inference seems to be that most if not all of these concepts emerge from purely semantic spacetime properties, which opens the possibility for a more generalized understanding of what constitutes a learning, or even `intelligent\' system. Some key principles emerge for effective knowledge representation: 1) separation of spacetime scales, 2) the recurrence of four irreducible types of association, by which intent propagates: aggregation, causation, cooperation, and similarity, 3) the need for discrimination of identities (discrete), which is assisted by distinguishing timeline simultaneity from sequential events, and 4) the ability to learn (memory). It is at least plausible that emergent knowledge abstraction capabilities have their origin in basic spacetime structures. These notes present a unified view of mostly well-known results; they allow us to see information models, knowledge representations, machine learning, and semantic networking (transport and information base) in a common framework. The notion of `smart spaces\' thus encompasses artificial systems as well as living systems, across many different scales, e.g. smart cities and organizations.', 'cs.AI', '2016-08-07T08:35:03Z', 'http://arxiv.org/abs/1608.02193v2', '2016-10-08 10:25:43', '2016-10-08 10:25:43')
  [1m[36m (3.0ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (0.7ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 174
  [1m[36mAuthor Load (0.7ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Mark Burgess'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Mark Burgess', '2016-10-08 10:25:43', '2016-10-08 10:25:43')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (476, 174, 0, '2016-10-08 10:25:43', '2016-10-08 10:25:43')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.5ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'ShapeFit and ShapeKick for Robust, Scalable Structure from Motion'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('ShapeFit and ShapeKick for Robust, Scalable Structure from Motion', 'We introduce a new method for location recovery from pair-wise directions that leverages an efficient convex program that comes with exact recovery guarantees, even in the presence of adversarial outliers. When pairwise directions represent scaled relative positions between pairs of views (estimated for instance with epipolar geometry) our method can be used for location recovery, that is the determination of relative pose up to a single unknown scale. For this task, our method yields performance comparable to the state-of-the-art with an order of magnitude speed-up. Our proposed numerical framework is flexible in that it accommodates other approaches to location recovery and can be used to speed up other methods. These properties are demonstrated by extensively testing against state-of-the-art methods for location recovery on 13 large, irregular collections of images of real scenes in addition to simulated data with ground truth.', 'cs.CV', '2016-08-07T00:29:53Z', 'http://arxiv.org/abs/1608.02165v1', '2016-10-08 10:25:43', '2016-10-08 10:25:43')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (0.6ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 175
  [1m[36mAuthor Load (0.4ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Thomas Goldstein'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Thomas Goldstein', '2016-10-08 10:25:43', '2016-10-08 10:25:43')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (477, 175, 0, '2016-10-08 10:25:43', '2016-10-08 10:25:43')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.6ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Paul Hand'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Paul Hand', '2016-10-08 10:25:43', '2016-10-08 10:25:43')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (478, 175, 1, '2016-10-08 10:25:43', '2016-10-08 10:25:43')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.5ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Choongbum Lee'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Choongbum Lee', '2016-10-08 10:25:43', '2016-10-08 10:25:43')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (479, 175, 2, '2016-10-08 10:25:43', '2016-10-08 10:25:43')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.7ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Vladislav Voroninski'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Vladislav Voroninski', '2016-10-08 10:25:43', '2016-10-08 10:25:43')
  [1m[36m (3.0ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (480, 175, 3, '2016-10-08 10:25:43', '2016-10-08 10:25:43')[0m
  [1m[35m (0.6ms)[0m  COMMIT
  [1m[36mAuthor Load (0.6ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Stefano Soatto'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Stefano Soatto', '2016-10-08 10:25:43', '2016-10-08 10:25:43')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (481, 175, 4, '2016-10-08 10:25:43', '2016-10-08 10:25:43')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.4ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Adapting Deep Network Features to Capture Psychological Representations'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Adapting Deep Network Features to Capture Psychological Representations', 'Deep neural networks have become increasingly successful at solving classic perception problems such as object recognition, semantic segmentation, and scene understanding, often reaching or surpassing human-level accuracy. This success is due in part to the ability of DNNs to learn useful representations of high-dimensional inputs, a problem that humans must also solve. We examine the relationship between the representations learned by these networks and human psychological representations recovered from similarity judgments. We find that deep features learned in service of object classification account for a significant amount of the variance in human similarity judgments for a set of animal images. However, these features do not capture some qualitative distinctions that are a key part of human representations. To remedy this, we develop a method for adapting deep features to align with human similarity judgments, resulting in image representations that can potentially be used to extend the scope of psychological experiments.', 'cs.CV', '2016-08-06T23:49:48Z', 'http://arxiv.org/abs/1608.02164v1', '2016-10-08 10:25:43', '2016-10-08 10:25:43')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (0.6ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 176
  [1m[36mAuthor Load (0.5ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Joshua C. Peterson'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Joshua C. Peterson', '2016-10-08 10:25:43', '2016-10-08 10:25:43')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (482, 176, 0, '2016-10-08 10:25:43', '2016-10-08 10:25:43')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.5ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Joshua T. Abbott'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Joshua T. Abbott', '2016-10-08 10:25:43', '2016-10-08 10:25:43')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (483, 176, 1, '2016-10-08 10:25:43', '2016-10-08 10:25:43')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (0.6ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Thomas L. Griffiths'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Thomas L. Griffiths', '2016-10-08 10:25:43', '2016-10-08 10:25:43')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (484, 176, 2, '2016-10-08 10:25:43', '2016-10-08 10:25:43')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.4ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Deep Survival Analysis'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.6ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Deep Survival Analysis', 'The electronic health record (EHR) provides an unprecedented opportunity to build actionable tools to support physicians at the point of care. In this paper, we investigate survival analysis in the context of EHR data. We introduce deep survival analysis, a hierarchical generative approach to survival analysis. It departs from previous approaches in two primary ways: (1) all observations, including covariates, are modeled jointly conditioned on a rich latent structure; and (2) the observations are aligned by their failure time, rather than by an arbitrary time zero as in traditional survival analysis. Further, it (3) scalably handles heterogeneous (continuous and discrete) data types that occur in the EHR. We validate deep survival analysis model by stratifying patients according to risk of developing coronary heart disease (CHD). Specifically, we study a dataset of 313,000 patients corresponding to 5.5 million months of observations. When compared to the clinically validated Framingham CHD risk score, deep survival analysis is significantly superior in stratifying patients according to their risk.', 'stat.ML', '2016-08-06T22:18:18Z', 'http://arxiv.org/abs/1608.02158v1', '2016-10-08 10:25:43', '2016-10-08 10:25:43')
  [1m[36m (3.0ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (0.6ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 177
  [1m[36mAuthor Load (0.6ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Rajesh Ranganath'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Rajesh Ranganath', '2016-10-08 10:25:43', '2016-10-08 10:25:43')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (485, 177, 0, '2016-10-08 10:25:43', '2016-10-08 10:25:43')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.7ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Adler Perotte'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Adler Perotte', '2016-10-08 10:25:43', '2016-10-08 10:25:43')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (486, 177, 1, '2016-10-08 10:25:43', '2016-10-08 10:25:43')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (0.5ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Noémie Elhadad'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Noémie Elhadad', '2016-10-08 10:25:43', '2016-10-08 10:25:43')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (487, 177, 2, '2016-10-08 10:25:43', '2016-10-08 10:25:43')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.7ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'David Blei'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('David Blei', '2016-10-08 10:25:43', '2016-10-08 10:25:43')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (488, 177, 3, '2016-10-08 10:25:43', '2016-10-08 10:25:43')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPaper Load (0.5ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Online Context-Dependent Clustering in Recommendations based on Exploration-Exploitation Algorithms'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Online Context-Dependent Clustering in Recommendations based on Exploration-Exploitation Algorithms', 'We investigate two context-dependent clustering techniques for content recommendation based on exploration-exploitation strategies in contextual multi-armed bandit settings. Our algorithms dynamically group users based on the items under consideration and, possibly, group items based on the similarity of the clusterings induced over the users. The resulting algorithm thus takes advantage of preference patterns in the data in a way akin to collaborative filtering methods. We provide an empirical analysis on extensive real-world datasets, showing scalability and increased prediction performance over state-of-the-art methods for clustering bandits. For one of the two algorithms we also give a regret analysis within a standard linear stochastic noise setting.', 'cs.LG', '2016-08-06T14:13:28Z', 'http://arxiv.org/abs/1608.03544v1', '2016-10-08 10:25:43', '2016-10-08 10:25:43')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPublish Load (0.4ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 178[0m
  [1m[35mAuthor Load (0.4ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Shuai Li'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Shuai Li', '2016-10-08 10:25:43', '2016-10-08 10:25:43')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (489, 178, 0, '2016-10-08 10:25:43', '2016-10-08 10:25:43')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.6ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Claudio Gentile'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Claudio Gentile', '2016-10-08 10:25:43', '2016-10-08 10:25:43')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (490, 178, 1, '2016-10-08 10:25:43', '2016-10-08 10:25:43')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.5ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Alexandros Karatzoglou'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Alexandros Karatzoglou', '2016-10-08 10:25:43', '2016-10-08 10:25:43')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (491, 178, 2, '2016-10-08 10:25:43', '2016-10-08 10:25:43')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (0.5ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Giovanni Zappella'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Giovanni Zappella', '2016-10-08 10:25:43', '2016-10-08 10:25:43')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (492, 178, 3, '2016-10-08 10:25:43', '2016-10-08 10:25:43')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.4ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'COREALMLIB: An ALM Library Translated from the Component Library'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('COREALMLIB: An ALM Library Translated from the Component Library', 'This paper presents COREALMLIB, an ALM library of commonsense knowledge about dynamic domains. The library was obtained by translating part of the COMPONENT LIBRARY (CLIB) into the modular action language ALM. CLIB consists of general reusable and composable commonsense concepts, selected based on a thorough study of ontological and lexical resources. Our translation targets CLIB states (i.e., fluents) and actions. The resulting ALM library contains the descriptions of 123 action classes grouped into 43 reusable modules that are organized into a hierarchy. It is made available online and of interest to researchers in the action language, answer-set programming, and natural language understanding communities. We believe that our translation has two main advantages over its CLIB counterpart: (i) it specifies axioms about actions in a more elaboration tolerant and readable way, and (ii) it can be seamlessly integrated with ASP reasoning algorithms (e.g., for planning and postdiction). In contrast, axioms are described in CLIB using STRIPS-like operators, and CLIB\'s inference engine cannot handle planning nor postdiction. Under consideration for publication in TPLP.', 'cs.AI', '2016-08-06T08:59:21Z', 'http://arxiv.org/abs/1608.02082v2', '2016-10-08 10:25:43', '2016-10-08 10:25:43')
  [1m[36m (3.0ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (0.7ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 179
  [1m[36mAuthor Load (0.7ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Daniela Inclezan'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Daniela Inclezan', '2016-10-08 10:25:43', '2016-10-08 10:25:43')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (493, 179, 0, '2016-10-08 10:25:43', '2016-10-08 10:25:43')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.5ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Bi-directional Attention with Agreement for Dependency Parsing'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Bi-directional Attention with Agreement for Dependency Parsing', 'We develop a novel bi-directional attention model for dependency parsing, which learns to agree on headword predictions from the forward and backward parsing directions. The parsing procedure for each direction is formulated as sequentially querying the memory component that stores continuous headword embeddings. The proposed parser makes use of soft headword embeddings, allowing the model to implicitly capture high-order parsing history without dramatically increasing the computational complexity. We conduct experiments on English, Chinese, and 12 other languages from the CoNLL 2006 shared task, showing that the proposed model achieves state-of-the-art unlabeled attachment scores on 7 languages.', 'cs.CL', '2016-08-06T07:16:31Z', 'http://arxiv.org/abs/1608.02076v1', '2016-10-08 10:25:43', '2016-10-08 10:25:43')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (0.6ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 180
  [1m[36mAuthor Load (0.4ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Hao Cheng'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Hao Cheng', '2016-10-08 10:25:43', '2016-10-08 10:25:43')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (494, 180, 0, '2016-10-08 10:25:43', '2016-10-08 10:25:43')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.5ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Hao Fang'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Hao Fang', '2016-10-08 10:25:43', '2016-10-08 10:25:43')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (495, 180, 1, '2016-10-08 10:25:43', '2016-10-08 10:25:43')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.5ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Xiaodong He'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Xiaodong He', '2016-10-08 10:25:43', '2016-10-08 10:25:43')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (496, 180, 2, '2016-10-08 10:25:43', '2016-10-08 10:25:43')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.3ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Jianfeng Gao'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35m (0.1ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (69, 180, 3, '2016-10-08 10:25:43', '2016-10-08 10:25:43')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.3ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Li Deng'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35m (0.2ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (70, 180, 4, '2016-10-08 10:25:43', '2016-10-08 10:25:43')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.5ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Human collective intelligence as distributed Bayesian inference'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Human collective intelligence as distributed Bayesian inference', 'Collective intelligence is believed to underly the remarkable success of human society. The formation of accurate shared beliefs is one of the key components of human collective intelligence. How are accurate shared beliefs formed in groups of fallible individuals? Answering this question requires a multiscale analysis. We must understand both the individual decision mechanisms people use, and the properties and dynamics of those mechanisms in the aggregate. As of yet, mathematical tools for such an approach have been lacking. To address this gap, we introduce a new analytical framework: We propose that groups arrive at accurate shared beliefs via distributed Bayesian inference. Distributed inference occurs through information processing at the individual level, and yields rational belief formation at the group level. We instantiate this framework in a new model of human social decision-making, which we validate using a dataset we collected of over 50,000 users of an online social trading platform where investors mimic each others\' trades using real money in foreign exchange and other asset markets. We find that in this setting people use a decision mechanism in which popularity is treated as a prior distribution for which decisions are best to make. This mechanism is boundedly rational at the individual level, but we prove that in the aggregate implements a type of approximate \"Thompson sampling\"---a well-known and highly effective single-agent Bayesian machine learning algorithm for sequential decision-making. The perspective of distributed Bayesian inference therefore reveals how collective rationality emerges from the boundedly rational decision mechanisms people use.', 'cs.CY', '2016-08-05T19:55:57Z', 'http://arxiv.org/abs/1608.01987v1', '2016-10-08 10:25:43', '2016-10-08 10:25:43')
  [1m[36m (3.0ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (0.7ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 181
  [1m[36mAuthor Load (0.6ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Peter M. Krafft'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Peter M. Krafft', '2016-10-08 10:25:44', '2016-10-08 10:25:44')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (497, 181, 0, '2016-10-08 10:25:44', '2016-10-08 10:25:44')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.6ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Julia Zheng'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Julia Zheng', '2016-10-08 10:25:44', '2016-10-08 10:25:44')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (498, 181, 1, '2016-10-08 10:25:44', '2016-10-08 10:25:44')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (0.7ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Wei Pan'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Wei Pan', '2016-10-08 10:25:44', '2016-10-08 10:25:44')[0m
  [1m[35m (2.3ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (499, 181, 2, '2016-10-08 10:25:44', '2016-10-08 10:25:44')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.7ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Nicolás Della Penna'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Nicolás Della Penna', '2016-10-08 10:25:44', '2016-10-08 10:25:44')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (500, 181, 3, '2016-10-08 10:25:44', '2016-10-08 10:25:44')[0m
  [1m[35m (0.6ms)[0m  COMMIT
  [1m[36mAuthor Load (0.7ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Yaniv Altshuler'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Yaniv Altshuler', '2016-10-08 10:25:44', '2016-10-08 10:25:44')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (501, 181, 4, '2016-10-08 10:25:44', '2016-10-08 10:25:44')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.7ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Erez Shmueli'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Erez Shmueli', '2016-10-08 10:25:44', '2016-10-08 10:25:44')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (502, 181, 5, '2016-10-08 10:25:44', '2016-10-08 10:25:44')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (0.6ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Joshua B. Tenenbaum'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Joshua B. Tenenbaum', '2016-10-08 10:25:44', '2016-10-08 10:25:44')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (503, 181, 6, '2016-10-08 10:25:44', '2016-10-08 10:25:44')
  [1m[36m (1.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.6ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Alex Pentland'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Alex Pentland', '2016-10-08 10:25:44', '2016-10-08 10:25:44')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (504, 181, 7, '2016-10-08 10:25:44', '2016-10-08 10:25:44')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPaper Load (0.5ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'De-Conflated Semantic Representations'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('De-Conflated Semantic Representations', 'One major deficiency of most semantic representation techniques is that they usually model a word type as a single point in the semantic space, hence conflating all the meanings that the word can have. Addressing this issue by learning distinct representations for individual meanings of words has been the subject of several research studies in the past few years. However, the generated sense representations are either not linked to any sense inventory or are unreliable for infrequent word senses. We propose a technique that tackles these problems by de-conflating the representations of words based on the deep knowledge it derives from a semantic network. Our approach provides multiple advantages in comparison to the past work, including its high coverage and the ability to generate accurate representations even for infrequent word senses. We carry out evaluations on six datasets across two semantic similarity tasks and report state-of-the-art results on most of them.', 'cs.CL', '2016-08-05T18:14:19Z', 'http://arxiv.org/abs/1608.01961v1', '2016-10-08 10:25:44', '2016-10-08 10:25:44')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPublish Load (0.6ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 182[0m
  [1m[35mAuthor Load (0.4ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Mohammad Taher Pilehvar'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Mohammad Taher Pilehvar', '2016-10-08 10:25:44', '2016-10-08 10:25:44')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (505, 182, 0, '2016-10-08 10:25:44', '2016-10-08 10:25:44')[0m
  [1m[35m (2.9ms)[0m  COMMIT
  [1m[36mAuthor Load (0.6ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Nigel Collier'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Nigel Collier', '2016-10-08 10:25:44', '2016-10-08 10:25:44')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (506, 182, 1, '2016-10-08 10:25:44', '2016-10-08 10:25:44')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.5ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Iterative Learning of Answer Set Programs from Context Dependent Examples'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Iterative Learning of Answer Set Programs from Context Dependent Examples', 'In recent years, several frameworks and systems have been proposed that extend Inductive Logic Programming (ILP) to the Answer Set Programming (ASP) paradigm. In ILP, examples must all be explained by a hypothesis together with a given background knowledge. In existing systems, the background knowledge is the same for all examples; however, examples may be context-dependent. This means that some examples should be explained in the context of some information, whereas others should be explained in different contexts. In this paper, we capture this notion and present a context-dependent extension of the Learning from Ordered Answer Sets framework. In this extension, contexts can be used to further structure the background knowledge. We then propose a new iterative algorithm, ILASP2i, which exploits this feature to scale up the existing ILASP2 system to learning tasks with large numbers of examples. We demonstrate the gain in scalability by applying both algorithms to various learning tasks. Our results show that, compared to ILASP2, the newly proposed ILASP2i system can be two orders of magnitude faster and use two orders of magnitude less memory, whilst preserving the same average accuracy. This paper is under consideration for acceptance in TPLP.', 'cs.AI', '2016-08-05T17:33:23Z', 'http://arxiv.org/abs/1608.01946v1', '2016-10-08 10:25:44', '2016-10-08 10:25:44')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (0.6ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 183
  [1m[36mAuthor Load (0.5ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Mark Law'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Mark Law', '2016-10-08 10:25:44', '2016-10-08 10:25:44')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (507, 183, 0, '2016-10-08 10:25:44', '2016-10-08 10:25:44')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.5ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Alessandra Russo'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Alessandra Russo', '2016-10-08 10:25:44', '2016-10-08 10:25:44')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (508, 183, 1, '2016-10-08 10:25:44', '2016-10-08 10:25:44')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.6ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Krysia Broda'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Krysia Broda', '2016-10-08 10:25:44', '2016-10-08 10:25:44')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (509, 183, 2, '2016-10-08 10:25:44', '2016-10-08 10:25:44')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.5ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Winograd Schemas and Machine Translation'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Winograd Schemas and Machine Translation', 'A Winograd schema is a pair of sentences that differ in a single word and that contain an ambiguous pronoun whose referent is different in the two sentences and requires the use of commonsense knowledge or world knowledge to disambiguate. This paper discusses how Winograd schemas and other sentence pairs could be used as challenges for machine translation using distinctions between pronouns, such as gender, that appear in the target language but not in the source.', 'cs.AI', '2016-08-05T13:39:08Z', 'http://arxiv.org/abs/1608.01884v1', '2016-10-08 10:25:44', '2016-10-08 10:25:44')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (0.7ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 184
  [1m[36mAuthor Load (0.5ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Ernest Davis'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Ernest Davis', '2016-10-08 10:25:44', '2016-10-08 10:25:44')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (510, 184, 0, '2016-10-08 10:25:44', '2016-10-08 10:25:44')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.4ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'The Power of Non-Ground Rules in Answer Set Programming'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('The Power of Non-Ground Rules in Answer Set Programming', 'Answer set programming (ASP) is a well-established logic programming language that offers an intuitive, declarative syntax for problem solving. In its traditional application, a fixed ASP program for a given problem is designed and the actual instance of the problem is fed into the program as a set of facts. This approach typically results in programs with comparably short and simple rules. However, as is known from complexity analysis, such an approach limits the expressive power of ASP; in fact, an entire NP-check can be encoded into a single large rule body of bounded arity that performs both a guess and a check within the same rule. Here, we propose a novel paradigm for encoding hard problems in ASP by making explicit use of large rules which depend on the actual instance of the problem. We illustrate how this new encoding paradigm can be used, providing examples of problems from the first, second, and even third level of the polynomial hierarchy. As state-of-the-art solvers are tuned towards short rules, rule decomposition is a key technique in the practical realization of our approach. We also provide some preliminary benchmarks which indicate that giving up the convenient way of specifying a fixed program can lead to a significant speed-up. This paper is under consideration for acceptance into TPLP.', 'cs.AI', '2016-08-05T12:26:22Z', 'http://arxiv.org/abs/1608.01856v1', '2016-10-08 10:25:44', '2016-10-08 10:25:44')
  [1m[36m (2.9ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (0.7ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 185
  [1m[36mAuthor Load (0.6ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Manuel Bichler'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36m (0.2ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (350, 185, 0, '2016-10-08 10:25:44', '2016-10-08 10:25:44')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (0.5ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Michael Morak'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36m (0.2ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (351, 185, 1, '2016-10-08 10:25:44', '2016-10-08 10:25:44')[0m
  [1m[35m (0.6ms)[0m  COMMIT
  [1m[36mAuthor Load (0.5ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Stefan Woltran'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36m (0.1ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (352, 185, 2, '2016-10-08 10:25:44', '2016-10-08 10:25:44')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPaper Load (0.4ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Stable-Unstable Semantics: Beyond NP with Normal Logic Programs'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Stable-Unstable Semantics: Beyond NP with Normal Logic Programs', 'Standard answer set programming (ASP) targets at solving search problems from the first level of the polynomial time hierarchy (PH). Tackling search problems beyond NP using ASP is less straightforward. The class of disjunctive logic programs offers the most prominent way of reaching the second level of the PH, but encoding respective hard problems as disjunctive programs typically requires sophisticated techniques such as saturation or meta-interpretation. The application of such techniques easily leads to encodings that are inaccessible to non-experts. Furthermore, while disjunctive ASP solvers often rely on calls to a (co-)NP oracle, it may be difficult to detect from the input program where the oracle is being accessed. In other formalisms, such as Quantified Boolean Formulas (QBFs), the interface to the underlying oracle is more transparent as it is explicitly recorded in the quantifier prefix of a formula. On the other hand, ASP has advantages over QBFs from the modeling perspective. The rich high-level languages such as ASP-Core-2 offer a wide variety of primitives that enable concise and natural encodings of search problems. In this paper, we present a novel logic programming--based modeling paradigm that combines the best features of ASP and QBFs. We develop so-called combined logic programs in which oracles are directly cast as (normal) logic programs themselves. Recursive incarnations of this construction enable logic programming on arbitrarily high levels of the PH. We develop a proof-of-concept implementation for our new paradigm. This paper is under consideration for acceptance in TPLP.', 'cs.AI', '2016-08-05T11:18:12Z', 'http://arxiv.org/abs/1608.01835v3', '2016-10-08 10:25:44', '2016-10-08 10:25:44')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPublish Load (0.7ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 186[0m
  [1m[35mAuthor Load (0.3ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Bart Bogaerts'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35m (0.1ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (226, 186, 0, '2016-10-08 10:25:44', '2016-10-08 10:25:44')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.6ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Tomi Janhunen'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.3ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Tomi Janhunen', '2016-10-08 10:25:44', '2016-10-08 10:25:44')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (511, 186, 1, '2016-10-08 10:25:44', '2016-10-08 10:25:44')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (0.7ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Shahab Tasharrofi'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Shahab Tasharrofi', '2016-10-08 10:25:44', '2016-10-08 10:25:44')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (512, 186, 2, '2016-10-08 10:25:44', '2016-10-08 10:25:44')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.5ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Self-Organising Maps in Computer Security'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Self-Organising Maps in Computer Security', 'Some argue that biologically inspired algorithms are the future of solving difficult problems in computer science. Others strongly believe that the future lies in the exploration of mathematical foundations of problems at hand. The field of computer security tends to accept the latter view as a more appropriate approach due to its more workable validation and verification possibilities. The lack of rigorous scientific practices prevalent in biologically inspired security research does not aid in presenting bio-inspired security approaches as a viable way of dealing with complex security problems. This chapter introduces a biologically inspired algorithm, called the Self Organising Map (SOM), that was developed by Teuvo Kohonen in 1981. Since the algorithm\'s inception it has been scrutinised by the scientific community and analysed in more than 4000 research papers, many of which dealt with various computer security issues, from anomaly detection, analysis of executables all the way to wireless network monitoring. In this chapter a review of security related SOM research undertaken in the past is presented and analysed. The algorithm\'s biological analogies are detailed and the author\'s view on the future possibilities of this successful bio-inspired approach are given. The SOM algorithm\'s close relation to a number of vital functions of the human brain and the emergence of multi-core computer architectures are the two main reasons behind our assumption that the future of the SOM algorithm and its variations is promising, notably in the field of computer security.', 'cs.AI', '2016-08-05T05:51:24Z', 'http://arxiv.org/abs/1608.01668v1', '2016-10-08 10:25:44', '2016-10-08 10:25:44')
  [1m[36m (2.9ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (0.7ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 187
  [1m[36mAuthor Load (0.7ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Jan Feyereisl'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Jan Feyereisl', '2016-10-08 10:25:44', '2016-10-08 10:25:44')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (513, 187, 0, '2016-10-08 10:25:44', '2016-10-08 10:25:44')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.4ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Uwe Aickelin'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35m (0.2ms)[0m  COMMIT
  [1m[36m (0.3ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (97, 187, 1, '2016-10-08 10:25:44', '2016-10-08 10:25:44')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.4ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'A Polynomial-Time Deterministic Approach to the Traveling Salesperson Problem'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.6ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('A Polynomial-Time Deterministic Approach to the Traveling Salesperson Problem', 'We propose a new polynomial-time deterministic algorithm that produces an approximated solution for the traveling salesperson problem. The proposed algorithm ranks cities based on their priorities calculated using a power function of means and standard deviations of their distances from other cities and then connects the cities to their neighbors in the order of their priorities. When connecting a city, a neighbor is selected based on their neighbors\' priorities calculated as another power function that additionally includes their distance from the focal city to be connected. This repeats until all the cities are connected into a single loop. The time complexity of the proposed algorithm is $O(n^2)$, where $n$ is the number of cities. Numerical evaluation shows that the proposed algorithm produces shorter tours with less time complexity than other conventional tour construction heuristics.', 'cs.DS', '2016-08-04T23:18:47Z', 'http://arxiv.org/abs/1608.01716v1', '2016-10-08 10:25:44', '2016-10-08 10:25:44')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (0.5ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 188
  [1m[36mAuthor Load (0.4ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Ali Jazayeri'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Ali Jazayeri', '2016-10-08 10:25:44', '2016-10-08 10:25:44')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (514, 188, 0, '2016-10-08 10:25:44', '2016-10-08 10:25:44')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.6ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Hiroki Sayama'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Hiroki Sayama', '2016-10-08 10:25:44', '2016-10-08 10:25:44')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (515, 188, 1, '2016-10-08 10:25:44', '2016-10-08 10:25:44')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (0.4ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Deploying learning materials to game content for serious education game development: A case study'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Deploying learning materials to game content for serious education game development: A case study', 'The ultimate goals of serious education games (SEG) are to facilitate learning and maximizing enjoyment during playing SEGs. In SEG development, there are normally two spaces to be taken into account: knowledge space regarding learning materials and content space regarding games to be used to convey learning materials. How to deploy the learning materials seamlessly and effectively into game content becomes one of the most challenging problems in SEG development. Unlike previous work where experts in education have to be used heavily, we proposed a novel approach that works toward minimizing the efforts of education experts in mapping learning materials to content space. For a proof-of-concept, we apply the proposed approach in developing an SEG game, named \\emph{Chem Dungeon}, as a case study in order to demonstrate the effectiveness of our proposed approach. This SEG game has been tested with a number of users, and the user survey suggests our method works reasonably well.', 'cs.AI', '2016-08-04T16:56:31Z', 'http://arxiv.org/abs/1608.01611v1', '2016-10-08 10:25:44', '2016-10-08 10:25:44')[0m
  [1m[35m (3.0ms)[0m  COMMIT
  [1m[36mPublish Load (0.7ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 189[0m
  [1m[35mAuthor Load (0.7ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Harits Ar Rosyid'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Harits Ar Rosyid', '2016-10-08 10:25:44', '2016-10-08 10:25:44')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (516, 189, 0, '2016-10-08 10:25:44', '2016-10-08 10:25:44')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.7ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Matt Palmerlee'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Matt Palmerlee', '2016-10-08 10:25:44', '2016-10-08 10:25:44')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (517, 189, 1, '2016-10-08 10:25:44', '2016-10-08 10:25:44')
  [1m[36m (0.3ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.5ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Ke Chen'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Ke Chen', '2016-10-08 10:25:44', '2016-10-08 10:25:44')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (518, 189, 2, '2016-10-08 10:25:44', '2016-10-08 10:25:44')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (0.5ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Query Answering in Resource-Based Answer Set Semantics'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Query Answering in Resource-Based Answer Set Semantics', 'In recent work we defined resource-based answer set semantics, which is an extension to answer set semantics stemming from the study of its relationship with linear logic. In fact, the name of the new semantics comes from the fact that in the linear-logic formulation every literal (including negative ones) were considered as a resource. In this paper, we propose a query-answering procedure reminiscent of Prolog for answer set programs under this extended semantics as an extension of XSB-resolution for logic programs with negation. We prove formal properties of the proposed procedure. Under consideration for acceptance in TPLP.', 'cs.AI', '2016-08-04T16:38:52Z', 'http://arxiv.org/abs/1608.01604v1', '2016-10-08 10:25:44', '2016-10-08 10:25:44')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPublish Load (0.4ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 190[0m
  [1m[35mAuthor Load (0.4ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Stefania Costantini'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Stefania Costantini', '2016-10-08 10:25:44', '2016-10-08 10:25:44')
  [1m[36m (1.6ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (519, 190, 0, '2016-10-08 10:25:44', '2016-10-08 10:25:44')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.6ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Andrea Formisano'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Andrea Formisano', '2016-10-08 10:25:44', '2016-10-08 10:25:44')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (520, 190, 1, '2016-10-08 10:25:44', '2016-10-08 10:25:44')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.4ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Stable Models for Infinitary Formulas with Extensional Atoms'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Stable Models for Infinitary Formulas with Extensional Atoms', 'The definition of stable models for propositional formulas with infinite conjunctions and disjunctions can be used to describe the semantics of answer set programming languages. In this note, we enhance that definition by introducing a distinction between intensional and extensional atoms. The symmetric splitting theorem for first-order formulas is then extended to infinitary formulas and used to reason about infinitary definitions. This note is under consideration for publication in Theory and Practice of Logic Programming.', 'cs.LO', '2016-08-04T16:32:57Z', 'http://arxiv.org/abs/1608.01603v1', '2016-10-08 10:25:44', '2016-10-08 10:25:44')
  [1m[36m (2.9ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (0.7ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 191
  [1m[36mAuthor Load (0.7ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Amelia Harrison'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Amelia Harrison', '2016-10-08 10:25:44', '2016-10-08 10:25:44')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (521, 191, 0, '2016-10-08 10:25:44', '2016-10-08 10:25:44')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.4ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Vladimir Lifschitz'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35m (0.1ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (241, 191, 1, '2016-10-08 10:25:44', '2016-10-08 10:25:44')
  [1m[36m (0.6ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.4ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Quantifier Scope in Categorical Compositional Distributional Semantics'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Quantifier Scope in Categorical Compositional Distributional Semantics', 'In previous work with J. Hedges, we formalised a generalised quantifiers theory of natural language in categorical compositional distributional semantics with the help of bialgebras. In this paper, we show how quantifier scope ambiguity can be represented in that setting and how this representation can be generalised to branching quantifiers.', 'cs.CL', '2016-08-04T00:36:57Z', 'http://dx.doi.org/10.4204/EPTCS.221.6', '2016-10-08 10:25:44', '2016-10-08 10:25:44')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (0.6ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 192
  [1m[36mAuthor Load (0.4ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Mehrnoosh Sadrzadeh'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Mehrnoosh Sadrzadeh', '2016-10-08 10:25:44', '2016-10-08 10:25:44')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (522, 192, 0, '2016-10-08 10:25:44', '2016-10-08 10:25:44')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.4ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Interacting Conceptual Spaces'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Interacting Conceptual Spaces', 'We propose applying the categorical compositional scheme of [6] to conceptual space models of cognition. In order to do this we introduce the category of convex relations as a new setting for categorical compositional semantics, emphasizing the convex structure important to conceptual space applications. We show how conceptual spaces for composite types such as adjectives and verbs can be constructed. We illustrate this new model on detailed examples.', 'cs.AI', '2016-08-04T00:36:21Z', 'http://dx.doi.org/10.4204/EPTCS.221.2', '2016-10-08 10:25:44', '2016-10-08 10:25:44')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (0.6ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 193
  [1m[36mAuthor Load (0.4ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Josef Bolt'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Josef Bolt', '2016-10-08 10:25:44', '2016-10-08 10:25:44')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (523, 193, 0, '2016-10-08 10:25:44', '2016-10-08 10:25:44')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.5ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Bob Coecke'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35m (0.1ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (422, 193, 1, '2016-10-08 10:25:44', '2016-10-08 10:25:44')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.6ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Fabrizio Genovese'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Fabrizio Genovese', '2016-10-08 10:25:44', '2016-10-08 10:25:44')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (524, 193, 2, '2016-10-08 10:25:44', '2016-10-08 10:25:44')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.6ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Martha Lewis'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36m (0.1ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (423, 193, 3, '2016-10-08 10:25:44', '2016-10-08 10:25:44')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.5ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Daniel Marsden'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Daniel Marsden', '2016-10-08 10:25:44', '2016-10-08 10:25:44')[0m
  [1m[35m (0.3ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (525, 193, 4, '2016-10-08 10:25:44', '2016-10-08 10:25:44')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.6ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Robin Piedeleu'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Robin Piedeleu', '2016-10-08 10:25:44', '2016-10-08 10:25:44')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (526, 193, 5, '2016-10-08 10:25:44', '2016-10-08 10:25:44')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (0.4ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Paraconsistency and Word Puzzles'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Paraconsistency and Word Puzzles', 'Word puzzles and the problem of their representations in logic languages have received considerable attention in the last decade (Ponnuru et al. 2004; Shapiro 2011; Baral and Dzifcak 2012; Schwitter 2013). Of special interest is the problem of generating such representations directly from natural language (NL) or controlled natural language (CNL). An interesting variation of this problem, and to the best of our knowledge, scarcely explored variation in this context, is when the input information is inconsistent. In such situations, the existing encodings of word puzzles produce inconsistent representations and break down. In this paper, we bring the well-known type of paraconsistent logics, called Annotated Predicate Calculus (APC) (Kifer and Lozinskii 1992), to bear on the problem. We introduce a new kind of non-monotonic semantics for APC, called consistency preferred stable models and argue that it makes APC into a suitable platform for dealing with inconsistency in word puzzles and, more generally, in NL sentences. We also devise a number of general principles to help the user choose among the different representations of NL sentences, which might seem equivalent but, in fact, behave differently when inconsistent information is taken into account. These principles can be incorporated into existing CNL translators, such as Attempto Controlled English (ACE) (Fuchs et al. 2008) and PENG Light (White and Schwitter 2009). Finally, we show that APC with the consistency preferred stable model semantics can be equivalently embedded in ASP with preferences over stable models, and we use this embedding to implement this version of APC in Clingo (Gebser et al. 2011) and its Asprin add-on (Brewka et al. 2015).', 'cs.AI', '2016-08-03T20:26:20Z', 'http://arxiv.org/abs/1608.01338v2', '2016-10-08 10:25:44', '2016-10-08 10:25:44')[0m
  [1m[35m (3.1ms)[0m  COMMIT
  [1m[36mPublish Load (0.7ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 194[0m
  [1m[35mAuthor Load (0.7ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Tiantian Gao'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Tiantian Gao', '2016-10-08 10:25:44', '2016-10-08 10:25:44')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (527, 194, 0, '2016-10-08 10:25:44', '2016-10-08 10:25:44')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.5ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Paul Fodor'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Paul Fodor', '2016-10-08 10:25:44', '2016-10-08 10:25:44')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (528, 194, 1, '2016-10-08 10:25:44', '2016-10-08 10:25:44')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.6ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Michael Kifer'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Michael Kifer', '2016-10-08 10:25:44', '2016-10-08 10:25:44')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (529, 194, 2, '2016-10-08 10:25:44', '2016-10-08 10:25:44')[0m
  [1m[35m (0.3ms)[0m  COMMIT
  [1m[36mPaper Load (0.4ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Learning to Rank for Synthesizing Planning Heuristics'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Learning to Rank for Synthesizing Planning Heuristics', 'We investigate learning heuristics for domain-specific planning. Prior work framed learning a heuristic as an ordinary regression problem. However, in a greedy best-first search, the ordering of states induced by a heuristic is more indicative of the resulting planner\'s performance than mean squared error. Thus, we instead frame learning a heuristic as a learning to rank problem which we solve using a RankSVM formulation. Additionally, we introduce new methods for computing features that capture temporal interactions in an approximate plan. Our experiments on recent International Planning Competition problems show that the RankSVM learned heuristics outperform both the original heuristics and heuristics learned through ordinary regression.', 'cs.AI', '2016-08-03T19:50:39Z', 'http://arxiv.org/abs/1608.01302v1', '2016-10-08 10:25:44', '2016-10-08 10:25:44')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPublish Load (0.6ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 195[0m
  [1m[35mAuthor Load (0.5ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Caelan Reed Garrett'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Caelan Reed Garrett', '2016-10-08 10:25:44', '2016-10-08 10:25:44')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (530, 195, 0, '2016-10-08 10:25:44', '2016-10-08 10:25:44')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.7ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Leslie Pack Kaelbling'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Leslie Pack Kaelbling', '2016-10-08 10:25:44', '2016-10-08 10:25:44')[0m
  [1m[35m (1.9ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (531, 195, 1, '2016-10-08 10:25:44', '2016-10-08 10:25:44')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.6ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Tomas Lozano-Perez'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Tomas Lozano-Perez', '2016-10-08 10:25:44', '2016-10-08 10:25:44')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (532, 195, 2, '2016-10-08 10:25:44', '2016-10-08 10:25:44')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPaper Load (0.5ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'A Novel Approach for Data-Driven Automatic Site Recommendation and Selection'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('A Novel Approach for Data-Driven Automatic Site Recommendation and Selection', 'This paper presents a novel, generic, and automatic method for data-driven site selection. Site selection is one of the most crucial and important decisions made by any company. Such a decision depends on various factors of sites, including socio-economic, geographical, ecological, as well as specific requirements of companies. The existing approaches for site selection (commonly used by economists) are manual, subjective, and not scalable, especially to Big Data. The presented method for site selection is robust, efficient, scalable, and is capable of handling challenges emerging in Big Data. To assess the effectiveness of the presented method, it is evaluated on real data (collected from Federal Statistical Office of Germany) of around 200 influencing factors which are considered by economists for site selection of Supermarkets in Germany (Lidl, EDEKA, and NP). Evaluation results show that there is a big overlap (86.4 \\%) between the sites of existing supermarkets and the sites recommended by the presented method. In addition, the method also recommends many sites (328) for supermarket where a store should be opened.', 'cs.AI', '2016-08-03T14:58:53Z', 'http://arxiv.org/abs/1608.01212v1', '2016-10-08 10:25:44', '2016-10-08 10:25:44')[0m
  [1m[35m (3.0ms)[0m  COMMIT
  [1m[36mPublish Load (0.8ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 196[0m
  [1m[35mAuthor Load (0.7ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Sebastian Baumbach'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Sebastian Baumbach', '2016-10-08 10:25:44', '2016-10-08 10:25:44')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (533, 196, 0, '2016-10-08 10:25:44', '2016-10-08 10:25:44')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.7ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Frank Wittich'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Frank Wittich', '2016-10-08 10:25:44', '2016-10-08 10:25:44')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (534, 196, 1, '2016-10-08 10:25:44', '2016-10-08 10:25:44')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.5ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Florian Sachs'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Florian Sachs', '2016-10-08 10:25:44', '2016-10-08 10:25:44')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (535, 196, 2, '2016-10-08 10:25:44', '2016-10-08 10:25:44')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (0.7ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Sheraz Ahmed'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Sheraz Ahmed', '2016-10-08 10:25:44', '2016-10-08 10:25:44')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (536, 196, 3, '2016-10-08 10:25:44', '2016-10-08 10:25:44')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.7ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Andreas Dengel'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Andreas Dengel', '2016-10-08 10:25:44', '2016-10-08 10:25:44')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (537, 196, 4, '2016-10-08 10:25:44', '2016-10-08 10:25:44')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (0.4ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Autonomous Grounding of Visual Field Experience through Sensorimotor Prediction'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Autonomous Grounding of Visual Field Experience through Sensorimotor Prediction', 'In a developmental framework, autonomous robots need to explore the world and learn how to interact with it. Without an a priori model of the system, this opens the challenging problem of having robots master their interface with the world: how to perceive their environment using their sensors, and how to act in it using their motors. The sensorimotor approach of perception claims that a naive agent can learn to master this interface by capturing regularities in the way its actions transform its sensory inputs. In this paper, we apply such an approach to the discovery and mastery of the visual field associated with a visual sensor. A computational model is formalized and applied to a simulated system to illustrate the approach.', 'cs.RO', '2016-08-03T09:25:35Z', 'http://arxiv.org/abs/1608.01127v1', '2016-10-08 10:25:44', '2016-10-08 10:25:44')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPublish Load (0.6ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 197[0m
  [1m[35mAuthor Load (0.5ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Alban Laflaquière'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Alban Laflaquière', '2016-10-08 10:25:44', '2016-10-08 10:25:44')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (538, 197, 0, '2016-10-08 10:25:44', '2016-10-08 10:25:44')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (0.4ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Proceedings of the Second Summer School on Argumentation: Computational and Linguistic Perspectives (SSA\'16)'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Proceedings of the Second Summer School on Argumentation: Computational and Linguistic Perspectives (SSA\'16)', 'This volume contains the thesis abstracts presented at the Second Summer School on Argumentation: Computational and Linguistic Perspectives (SSA\'2016) held on September 8-12 in Potsdam, Germany.', 'cs.AI', '2016-08-03T09:05:32Z', 'http://arxiv.org/abs/1608.02441v1', '2016-10-08 10:25:44', '2016-10-08 10:25:44')[0m
  [1m[35m (3.0ms)[0m  COMMIT
  [1m[36mPublish Load (0.7ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 198[0m
  [1m[35mAuthor Load (0.7ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Sarah A. Gaggl'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Sarah A. Gaggl', '2016-10-08 10:25:44', '2016-10-08 10:25:44')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (539, 198, 0, '2016-10-08 10:25:44', '2016-10-08 10:25:44')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (0.7ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Matthias Thimm'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Matthias Thimm', '2016-10-08 10:25:44', '2016-10-08 10:25:44')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (540, 198, 1, '2016-10-08 10:25:44', '2016-10-08 10:25:44')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.4ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Generation of Near-Optimal Solutions Using ILP-Guided Sampling'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Generation of Near-Optimal Solutions Using ILP-Guided Sampling', 'Our interest in this paper is in optimisation problems that are intractable to solve by direct numerical optimisation, but nevertheless have significant amounts of relevant domain-specific knowledge. The category of heuristic search techniques known as estimation of distribution algorithms (EDAs) seek to incrementally sample from probability distributions in which optimal (or near-optimal) solutions have increasingly higher probabilities. Can we use domain knowledge to assist the estimation of these distributions? To answer this in the affirmative, we need: (a) a general-purpose technique for the incorporation of domain knowledge when constructing models for optimal values; and (b) a way of using these models to generate new data samples. Here we investigate a combination of the use of Inductive Logic Programming (ILP) for (a), and standard logic-programming machinery to generate new samples for (b). Specifically, on each iteration of distribution estimation, an ILP engine is used to construct a model for good solutions. The resulting theory is then used to guide the generation of new data instances, which are now restricted to those derivable using the ILP model in conjunction with the background knowledge). We demonstrate the approach on two optimisation problems (predicting optimal depth-of-win for the KRK endgame, and job-shop scheduling). Our results are promising: (a) On each iteration of distribution estimation, samples obtained with an ILP theory have a substantially greater proportion of good solutions than samples without a theory; and (b) On termination of distribution estimation, samples obtained with an ILP theory contain more near-optimal samples than samples without a theory. Taken together, these results suggest that the use of ILP-constructed theories could be a useful technique for incorporating complex domain-knowledge into estimation distribution procedures.', 'cs.AI', '2016-08-03T07:23:48Z', 'http://arxiv.org/abs/1608.01093v1', '2016-10-08 10:25:44', '2016-10-08 10:25:44')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (0.5ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 199
  [1m[36mAuthor Load (0.6ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Ashwin Srinivasan'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Ashwin Srinivasan', '2016-10-08 10:25:44', '2016-10-08 10:25:44')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (541, 199, 0, '2016-10-08 10:25:44', '2016-10-08 10:25:44')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.4ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Gautam Shroff'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35m (0.1ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (322, 199, 1, '2016-10-08 10:25:44', '2016-10-08 10:25:44')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.6ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Lovekesh Vig'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35m (0.2ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (320, 199, 2, '2016-10-08 10:25:44', '2016-10-08 10:25:44')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.6ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Sarmimala Saikia'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Sarmimala Saikia', '2016-10-08 10:25:44', '2016-10-08 10:25:44')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (542, 199, 3, '2016-10-08 10:25:44', '2016-10-08 10:25:44')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (0.5ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Puneet Agarwal'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36m (0.2ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (321, 199, 4, '2016-10-08 10:25:44', '2016-10-08 10:25:44')[0m
  [1m[35m (0.7ms)[0m  COMMIT
  [1m[36mPaper Load (0.5ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Empirical Evaluation of Real World Tournaments'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Empirical Evaluation of Real World Tournaments', 'Computational Social Choice (ComSoc) is a rapidly developing field at the intersection of computer science, economics, social choice, and political science. The study of tournaments is fundamental to ComSoc and many results have been published about tournament solution sets and reasoning in tournaments. Theoretical results in ComSoc tend to be worst case and tell us little about performance in practice. To this end we detail some experiments on tournaments using real wold data from soccer and tennis. We make three main contributions to the understanding of tournaments using real world data from English Premier League, the German Bundesliga, and the ATP World Tour: (1) we find that the NP-hard question of finding a seeding for which a given team can win a tournament is easily solvable in real world instances, (2) using detailed and principled methodology from statistical physics we show that our real world data obeys a log-normal distribution; and (3) leveraging our log-normal distribution result and using robust statistical methods, we show that the popular Condorcet Random (CR) tournament model does not generate realistic tournament data.', 'cs.GT', '2016-08-03T01:13:54Z', 'http://arxiv.org/abs/1608.01039v1', '2016-10-08 10:25:44', '2016-10-08 10:25:44')[0m
  [1m[35m (3.0ms)[0m  COMMIT
  [1m[36mPublish Load (0.8ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 200[0m
  [1m[35mAuthor Load (0.7ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Nicholas Mattei'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Nicholas Mattei', '2016-10-08 10:25:44', '2016-10-08 10:25:44')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (543, 200, 0, '2016-10-08 10:25:44', '2016-10-08 10:25:44')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (0.7ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Toby Walsh'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Toby Walsh', '2016-10-08 10:25:44', '2016-10-08 10:25:44')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (544, 200, 1, '2016-10-08 10:25:44', '2016-10-08 10:25:44')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.4ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Proceedings of the 2016 Workshop on Semantic Spaces at the Intersection of NLP, Physics and Cognitive Science'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Proceedings of the 2016 Workshop on Semantic Spaces at the Intersection of NLP, Physics and Cognitive Science', 'This volume contains the Proceedings of the 2016 Workshop on Semantic Spaces at the Intersection of NLP, Physics and Cognitive Science (SLPCS 2016), which was held on the 11th of June at the University of Strathclyde, Glasgow, and was co-located with Quantum Physics and Logic (QPL 2016). Exploiting the common ground provided by the concept of a vector space, the workshop brought together researchers working at the intersection of Natural Language Processing (NLP), cognitive science, and physics, offering them an appropriate forum for presenting their uniquely motivated work and ideas. The interplay between these three disciplines inspired theoretically motivated approaches to the understanding of how word meanings interact with each other in sentences and discourse, how diagrammatic reasoning depicts and simplifies this interaction, how language models are determined by input from the world, and how word and sentence meanings interact logically. This first edition of the workshop consisted of three invited talks from distinguished speakers (Hans Briegel, Peter G\\\"ardenfors, Dominic Widdows) and eight presentations of selected contributed papers. Each submission was refereed by at least three members of the Programme Committee, who delivered detailed and insightful comments and suggestions.', 'cs.CL', '2016-08-02T22:28:45Z', 'http://dx.doi.org/10.4204/EPTCS.221', '2016-10-08 10:25:44', '2016-10-08 10:25:44')
  [1m[36m (1.7ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (0.7ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 201
  [1m[36mAuthor Load (0.5ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Dimitrios Kartsaklis'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Dimitrios Kartsaklis', '2016-10-08 10:25:44', '2016-10-08 10:25:44')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (545, 201, 0, '2016-10-08 10:25:44', '2016-10-08 10:25:44')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.5ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Martha Lewis'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35m (0.1ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (423, 201, 1, '2016-10-08 10:25:44', '2016-10-08 10:25:44')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.6ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Laura Rimell'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Laura Rimell', '2016-10-08 10:25:44', '2016-10-08 10:25:44')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (546, 201, 2, '2016-10-08 10:25:44', '2016-10-08 10:25:44')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (0.4ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Relational Similarity Machines'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.6ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Relational Similarity Machines', 'This paper proposes Relational Similarity Machines (RSM): a fast, accurate, and flexible relational learning framework for supervised and semi-supervised learning tasks. Despite the importance of relational learning, most existing methods are hard to adapt to different settings, due to issues with efficiency, scalability, accuracy, and flexibility for handling a wide variety of classification problems, data, constraints, and tasks. For instance, many existing methods perform poorly for multi-class classification problems, graphs that are sparsely labeled or network data with low relational autocorrelation. In contrast, the proposed relational learning framework is designed to be (i) fast for learning and inference at real-time interactive rates, and (ii) flexible for a variety of learning settings (multi-class problems), constraints (few labeled instances), and application domains. The experiments demonstrate the effectiveness of RSM for a variety of tasks and data.', 'stat.ML', '2016-08-02T15:48:58Z', 'http://arxiv.org/abs/1608.00876v1', '2016-10-08 10:25:44', '2016-10-08 10:25:44')[0m
  [1m[35m (3.0ms)[0m  COMMIT
  [1m[36mPublish Load (0.8ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 202[0m
  [1m[35mAuthor Load (0.7ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Ryan A. Rossi'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Ryan A. Rossi', '2016-10-08 10:25:44', '2016-10-08 10:25:44')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (547, 202, 0, '2016-10-08 10:25:44', '2016-10-08 10:25:44')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (0.7ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Rong Zhou'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Rong Zhou', '2016-10-08 10:25:44', '2016-10-08 10:25:44')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.4ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (548, 202, 1, '2016-10-08 10:25:44', '2016-10-08 10:25:44')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.6ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Nesreen K. Ahmed'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Nesreen K. Ahmed', '2016-10-08 10:25:44', '2016-10-08 10:25:44')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (549, 202, 2, '2016-10-08 10:25:44', '2016-10-08 10:25:44')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (0.4ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Directed expected utility networks'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Directed expected utility networks', 'A variety of statistical graphical models have been defined to represent the conditional independences underlying a random vector of interest. Similarly, many different graphs embedding various types of preferential independences, as for example conditional utility independence and generalized additive independence, have more recently started to appear. In this paper we define a new graphical model, called a directed expected utility network, whose edges depict both probabilistic and utility conditional independences. These embed a very flexible and general class of utility models, much larger than those usually conceived in standard influence diagrams. Our graphical representation, and various transformations of the original graph into a tree structure, are then used to guide fast routines for the computation of a decision problem\'s expected utilities. We show that our routines generalize those usually utilized in standard influence diagrams\' evaluations under much more restrictive conditions. Our algorithms are illustrated using a class of linear regression models and a family of linear polynomial utility functions.', 'cs.AI', '2016-08-02T13:22:49Z', 'http://arxiv.org/abs/1608.00810v1', '2016-10-08 10:25:44', '2016-10-08 10:25:44')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPublish Load (0.7ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 203[0m
  [1m[35mAuthor Load (0.4ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Manuele Leonelli'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Manuele Leonelli', '2016-10-08 10:25:44', '2016-10-08 10:25:44')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (550, 203, 0, '2016-10-08 10:25:44', '2016-10-08 10:25:44')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.5ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Jim Q. Smith'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Jim Q. Smith', '2016-10-08 10:25:44', '2016-10-08 10:25:44')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (551, 203, 1, '2016-10-08 10:25:44', '2016-10-08 10:25:44')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.4ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Context Discovery for Model Learning in Partially Observable Environments'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Context Discovery for Model Learning in Partially Observable Environments', 'The ability to learn a model is essential for the success of autonomous agents. Unfortunately, learning a model is difficult in partially observable environments, where latent environmental factors influence what the agent observes. In the absence of a supervisory training signal, autonomous agents therefore require a mechanism to autonomously discover these environmental factors, or sensorimotor contexts. This paper presents a method to discover sensorimotor contexts in partially observable environments, by constructing a hierarchical transition model. The method is evaluated in a simulation experiment, in which a robot learns that different rooms are characterized by different objects that are found in them.', 'cs.RO', '2016-08-02T08:57:14Z', 'http://arxiv.org/abs/1608.00737v1', '2016-10-08 10:25:44', '2016-10-08 10:25:44')
  [1m[36m (2.9ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (0.7ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 204
  [1m[36mAuthor Load (0.5ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Nikolas J. Hemion'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Nikolas J. Hemion', '2016-10-08 10:25:44', '2016-10-08 10:25:44')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (552, 204, 0, '2016-10-08 10:25:44', '2016-10-08 10:25:44')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.4ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Combining Answer Set Programming and Domain Heuristics for Solving Hard Industrial Problems (Application Paper)'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Combining Answer Set Programming and Domain Heuristics for Solving Hard Industrial Problems (Application Paper)', 'Answer Set Programming (ASP) is a popular logic programming paradigm that has been applied for solving a variety of complex problems. Among the most challenging real-world applications of ASP are two industrial problems defined by Siemens: the Partner Units Problem (PUP) and the Combined Configuration Problem (CCP). The hardest instances of PUP and CCP are out of reach for state-of-the-art ASP solvers. Experiments show that the performance of ASP solvers could be significantly improved by embedding domain-specific heuristics, but a proper effective integration of such criteria in off-the-shelf ASP implementations is not obvious. In this paper the combination of ASP and domain-specific heuristics is studied with the goal of effectively solving real-world problem instances of PUP and CCP. As a byproduct of this activity, the ASP solver WASP was extended with an interface that eases embedding new external heuristics in the solver. The evaluation shows that our domain-heuristic-driven ASP solver finds solutions for all the real-world instances of PUP and CCP ever provided by Siemens. This paper is under consideration for acceptance in TPLP.', 'cs.AI', '2016-08-02T08:36:08Z', 'http://arxiv.org/abs/1608.00730v1', '2016-10-08 10:25:44', '2016-10-08 10:25:44')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (0.6ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 205
  [1m[36mAuthor Load (0.5ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Carmine Dodaro'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Carmine Dodaro', '2016-10-08 10:25:44', '2016-10-08 10:25:44')[0m
  [1m[35m (1.7ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (553, 205, 0, '2016-10-08 10:25:44', '2016-10-08 10:25:44')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.6ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Philip Gasteiger'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Philip Gasteiger', '2016-10-08 10:25:44', '2016-10-08 10:25:44')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (554, 205, 1, '2016-10-08 10:25:44', '2016-10-08 10:25:44')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.6ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Nicola Leone'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Nicola Leone', '2016-10-08 10:25:44', '2016-10-08 10:25:44')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (555, 205, 2, '2016-10-08 10:25:44', '2016-10-08 10:25:44')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.7ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Benjamin Musitsch'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Benjamin Musitsch', '2016-10-08 10:25:44', '2016-10-08 10:25:44')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (556, 205, 3, '2016-10-08 10:25:44', '2016-10-08 10:25:44')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.5ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Francesco Ricca'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Francesco Ricca', '2016-10-08 10:25:44', '2016-10-08 10:25:44')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (557, 205, 4, '2016-10-08 10:25:44', '2016-10-08 10:25:44')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.8ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Kostyantyn Shchekotykhin'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Kostyantyn Shchekotykhin', '2016-10-08 10:25:44', '2016-10-08 10:25:44')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (558, 205, 5, '2016-10-08 10:25:44', '2016-10-08 10:25:44')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (0.4ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'A Survey of Visual Analysis of Human Motion and Its Applications'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('A Survey of Visual Analysis of Human Motion and Its Applications', 'This paper summarizes the recent progress in human motion analysis and its applications. In the beginning, we reviewed the motion capture systems and the representation model of human\'s motion data. Next, we sketched the advanced human motion data processing technologies, including motion data filtering, temporal alignment, and segmentation. The following parts overview the state-of-the-art approaches of action recognition and dynamics measuring since these two are the most active research areas in human motion analysis. The last part discusses some emerging applications of the human motion analysis in healthcare, human robot interaction, security surveillance, virtual reality and animation. The promising research topics of human motion analysis in the future is also summarized in the last part.', 'cs.CV', '2016-08-02T05:50:11Z', 'http://arxiv.org/abs/1608.00700v2', '2016-10-08 10:25:44', '2016-10-08 10:25:44')[0m
  [1m[35m (2.9ms)[0m  COMMIT
  [1m[36mPublish Load (0.7ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 206[0m
  [1m[35mAuthor Load (0.7ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Qifei Wang'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Qifei Wang', '2016-10-08 10:25:44', '2016-10-08 10:25:44')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (559, 206, 0, '2016-10-08 10:25:44', '2016-10-08 10:25:44')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPaper Load (0.4ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Can Active Learning Experience Be Transferred?'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Can Active Learning Experience Be Transferred?', 'Active learning is an important machine learning problem in reducing the human labeling effort. Current active learning strategies are designed from human knowledge, and are applied on each dataset in an immutable manner. In other words, experience about the usefulness of strategies cannot be updated and transferred to improve active learning on other datasets. This paper initiates a pioneering study on whether active learning experience can be transferred. We first propose a novel active learning model that linearly aggregates existing strategies. The linear weights can then be used to represent the active learning experience. We equip the model with the popular linear upper- confidence-bound (LinUCB) algorithm for contextual bandit to update the weights. Finally, we extend our model to transfer the experience across datasets with the technique of biased regularization. Empirical studies demonstrate that the learned experience not only is competitive with existing strategies on most single datasets, but also can be transferred across datasets to improve the performance on future learning tasks.', 'cs.LG', '2016-08-02T01:30:25Z', 'http://arxiv.org/abs/1608.00667v1', '2016-10-08 10:25:44', '2016-10-08 10:25:44')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPublish Load (0.6ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 207[0m
  [1m[35mAuthor Load (0.5ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Hong-Min Chu'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Hong-Min Chu', '2016-10-08 10:25:44', '2016-10-08 10:25:44')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (560, 207, 0, '2016-10-08 10:25:44', '2016-10-08 10:25:44')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.7ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Hsuan-Tien Lin'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Hsuan-Tien Lin', '2016-10-08 10:25:44', '2016-10-08 10:25:44')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (561, 207, 1, '2016-10-08 10:25:44', '2016-10-08 10:25:44')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.4ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'A Web-based Tool for Identifying Strategic Intervention Points in Complex Systems'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('A Web-based Tool for Identifying Strategic Intervention Points in Complex Systems', 'Steering a complex system towards a desired outcome is a challenging task. The lack of clarity on the system\'s exact architecture and the often scarce scientific data upon which to base the operationalisation of the dynamic rules that underpin the interactions between participant entities are two contributing factors. We describe an analytical approach that builds on Fuzzy Cognitive Mapping (FCM) to address the latter and represent the system as a complex network. We apply results from network controllability to address the former and determine minimal control configurations - subsets of factors, or system levers, which comprise points for strategic intervention in steering the system. We have implemented the combination of these techniques in an analytical tool that runs in the browser, and generates all minimal control configurations of a complex network. We demonstrate our approach by reporting on our experience of working alongside industrial, local-government, and NGO stakeholders in the Humber region, UK. Our results are applied to the decision-making process involved in the transition of the region to a bio-based economy.', 'cs.SY', '2016-08-02T00:36:49Z', 'http://dx.doi.org/10.4204/EPTCS.220.4', '2016-10-08 10:25:44', '2016-10-08 10:25:44')
  [1m[36m (2.9ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (0.8ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 208
  [1m[36mAuthor Load (0.7ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Sotiris Moschoyiannis'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Sotiris Moschoyiannis', '2016-10-08 10:25:44', '2016-10-08 10:25:44')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (562, 208, 0, '2016-10-08 10:25:44', '2016-10-08 10:25:44')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.7ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Nicholas Elia'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Nicholas Elia', '2016-10-08 10:25:44', '2016-10-08 10:25:44')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (563, 208, 1, '2016-10-08 10:25:44', '2016-10-08 10:25:44')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (0.7ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Alexandra S. Penn'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Alexandra S. Penn', '2016-10-08 10:25:44', '2016-10-08 10:25:44')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (564, 208, 2, '2016-10-08 10:25:44', '2016-10-08 10:25:44')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.6ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'David J. B. Lloyd'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('David J. B. Lloyd', '2016-10-08 10:25:44', '2016-10-08 10:25:44')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (565, 208, 3, '2016-10-08 10:25:44', '2016-10-08 10:25:44')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.7ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Chris Knight'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Chris Knight', '2016-10-08 10:25:44', '2016-10-08 10:25:44')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (566, 208, 4, '2016-10-08 10:25:44', '2016-10-08 10:25:44')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.4ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Learning Transferable Policies for Monocular Reactive MAV Control'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Learning Transferable Policies for Monocular Reactive MAV Control', 'The ability to transfer knowledge gained in previous tasks into new contexts is one of the most important mechanisms of human learning. Despite this, adapting autonomous behavior to be reused in partially similar settings is still an open problem in current robotics research. In this paper, we take a small step in this direction and propose a generic framework for learning transferable motion policies. Our goal is to solve a learning problem in a target domain by utilizing the training data in a different but related source domain. We present this in the context of an autonomous MAV flight using monocular reactive control, and demonstrate the efficacy of our proposed approach through extensive real-world flight experiments in outdoor cluttered environments.', 'cs.RO', '2016-08-01T21:53:04Z', 'http://arxiv.org/abs/1608.00627v1', '2016-10-08 10:25:44', '2016-10-08 10:25:44')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (0.7ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 209
  [1m[36mAuthor Load (0.4ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Shreyansh Daftry'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Shreyansh Daftry', '2016-10-08 10:25:44', '2016-10-08 10:25:44')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (567, 209, 0, '2016-10-08 10:25:44', '2016-10-08 10:25:44')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.6ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'J. Andrew Bagnell'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('J. Andrew Bagnell', '2016-10-08 10:25:44', '2016-10-08 10:25:44')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (568, 209, 1, '2016-10-08 10:25:44', '2016-10-08 10:25:44')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (0.7ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Martial Hebert'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Martial Hebert', '2016-10-08 10:25:44', '2016-10-08 10:25:44')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (569, 209, 2, '2016-10-08 10:25:44', '2016-10-08 10:25:44')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.5ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Discovering Latent States for Model Learning: Applying Sensorimotor Contingencies Theory and Predictive Processing to Model Context'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Discovering Latent States for Model Learning: Applying Sensorimotor Contingencies Theory and Predictive Processing to Model Context', 'Autonomous robots need to be able to adapt to unforeseen situations and to acquire new skills through trial and error. Reinforcement learning in principle offers a suitable methodological framework for this kind of autonomous learning. However current computational reinforcement learning agents mostly learn each individual skill entirely from scratch. How can we enable artificial agents, such as robots, to acquire some form of generic knowledge, which they could leverage for the learning of new skills? This paper argues that, like the brain, the cognitive system of artificial agents has to develop a world model to support adaptive behavior and learning. Inspiration is taken from two recent developments in the cognitive science literature: predictive processing theories of cognition, and the sensorimotor contingencies theory of perception. Based on these, a hypothesis is formulated about what the content of information might be that is encoded in an internal world model, and how an agent could autonomously acquire it. A computational model is described to formalize this hypothesis, and is evaluated in a series of simulation experiments.', 'cs.RO', '2016-08-01T09:09:04Z', 'http://arxiv.org/abs/1608.00359v1', '2016-10-08 10:25:44', '2016-10-08 10:25:44')
  [1m[36m (5.0ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (0.8ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 210
  [1m[36mAuthor Load (0.7ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Nikolas J. Hemion'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36m (0.2ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (552, 210, 0, '2016-10-08 10:25:44', '2016-10-08 10:25:44')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPaper Load (0.6ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Keyphrase Extraction using Sequential Labeling'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Keyphrase Extraction using Sequential Labeling', 'Keyphrases efficiently summarize a document\'s content and are used in various document processing and retrieval tasks. Several unsupervised techniques and classifiers exist for extracting keyphrases from text documents. Most of these methods operate at a phrase-level and rely on part-of-speech (POS) filters for candidate phrase generation. In addition, they do not directly handle keyphrases of varying lengths. We overcome these modeling shortcomings by addressing keyphrase extraction as a sequential labeling task in this paper. We explore a basic set of features commonly used in NLP tasks as well as predictions from various unsupervised methods to train our taggers. In addition to a more natural modeling for the keyphrase extraction problem, we show that tagging models yield significant performance benefits over existing state-of-the-art extraction methods.', 'cs.CL', '2016-08-01T06:00:22Z', 'http://arxiv.org/abs/1608.00329v2', '2016-10-08 10:25:44', '2016-10-08 10:25:44')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPublish Load (0.5ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 211[0m
  [1m[35mAuthor Load (0.4ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Sujatha Das Gollapalli'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Sujatha Das Gollapalli', '2016-10-08 10:25:44', '2016-10-08 10:25:44')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (570, 211, 0, '2016-10-08 10:25:44', '2016-10-08 10:25:44')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.5ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Xiao-li Li'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Xiao-li Li', '2016-10-08 10:25:44', '2016-10-08 10:25:44')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (571, 211, 1, '2016-10-08 10:25:44', '2016-10-08 10:25:44')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.4ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Formulating Semantics of Probabilistic Argumentation by Characterizing Subgraphs: Theory and Empirical Results'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Formulating Semantics of Probabilistic Argumentation by Characterizing Subgraphs: Theory and Empirical Results', 'In existing literature, while approximate approaches based on Monte-Carlo simulation technique have been proposed to compute the semantics of probabilistic argumentation, how to improve the efficiency of computation without using simulation technique is still an open problem. In this paper, we address this problem from the following two perspectives. First, conceptually, we define specific properties to characterize the subgraphs of a PrAG with respect to a given extension, such that the probability of a set of arguments E being an extension can be defined in terms of these properties, without (or with less) construction of subgraphs. Second, computationally, we take preferred semantics as an example, and develop algorithms to evaluate the efficiency of our approach. The results show that our approach not only dramatically decreases the time for computing p(E^\\sigma), but also has an attractive property, which is contrary to that of existing approaches: the denser the edges of a PrAG are or the bigger the size of a given extension E is, the more efficient our approach computes p(E^\\sigma). Meanwhile, it is shown that under complete and preferred semantics, the problems of determining p(E^\\sigma) are fixed-parameter tractable.', 'cs.AI', '2016-08-01T02:34:07Z', 'http://arxiv.org/abs/1608.00302v1', '2016-10-08 10:25:44', '2016-10-08 10:25:44')
  [1m[36m (3.0ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (0.8ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 212
  [1m[36mAuthor Load (0.7ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Beishui Liao'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Beishui Liao', '2016-10-08 10:25:44', '2016-10-08 10:25:44')[0m
  [1m[35m (0.6ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (572, 212, 0, '2016-10-08 10:25:44', '2016-10-08 10:25:44')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.7ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Kang Xu'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Kang Xu', '2016-10-08 10:25:44', '2016-10-08 10:25:44')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (573, 212, 1, '2016-10-08 10:25:44', '2016-10-08 10:25:44')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.7ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Huaxin Huang'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Huaxin Huang', '2016-10-08 10:25:44', '2016-10-08 10:25:44')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (574, 212, 2, '2016-10-08 10:25:44', '2016-10-08 10:25:44')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.5ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'A Linear Algebraic Approach to Datalog Evaluation'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.4ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('A Linear Algebraic Approach to Datalog Evaluation', 'In this paper, we propose a fundamentally new approach to Datalog evaluation. Given a linear Datalog program DB written using N constants and binary predicates, we first translate if-and-only-if completions of clauses in DB into a set Eq(DB) of matrix equations with a non-linear operation where relations in M_DB, the least Herbrand model of DB, are encoded as adjacency matrices. We then translate Eq(DB) into another, but purely linear matrix equations tilde_Eq(DB). It is proved that the least solution of tilde_Eq(DB) in the sense of matrix ordering is converted to the least solution of Eq(DB) and the latter gives M_DB as a set of adjacency matrices. Hence computing the least solution of tilde_Eq(DB) is equivalent to computing M_DB specified by DB. For a class of tail recursive programs and for some other types of programs, our approach achieves O(N^3) time complexity irrespective of the number of variables in a clause since only matrix operations costing O(N^3) or less are used. We conducted two experiments that compute the least Herbrand models of linear Datalog programs. The first experiment computes transitive closure of artificial data and real network data taken from the Koblenz Network Collection. The second one compared the proposed approach with the state-of-the-art symbolic systems including two Prolog systems and two ASP systems, in terms of computation time for a transitive closure program and the same generation program. In the experiment, it is observed that our linear algebraic approach runs 10^1 ~ 10^4 times faster than the symbolic systems when data is not sparse.', 'cs.AI', '2016-07-30T16:14:16Z', 'http://arxiv.org/abs/1608.00139v1', '2016-10-08 10:25:44', '2016-10-08 10:25:44')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (0.6ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 213
  [1m[36mAuthor Load (0.5ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Taisuke Sato'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Taisuke Sato', '2016-10-08 10:25:44', '2016-10-08 10:25:44')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (575, 213, 0, '2016-10-08 10:25:44', '2016-10-08 10:25:44')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.5ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Online Learning of Event Definitions'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.7ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Online Learning of Event Definitions', 'Systems for symbolic event recognition infer occurrences of events in time using a set of event definitions in the form of first-order rules. The Event Calculus is a temporal logic that has been used as a basis in event recognition applications, providing among others, direct connections to machine learning, via Inductive Logic Programming (ILP). We present an ILP system for online learning of Event Calculus theories. To allow for a single-pass learning strategy, we use the Hoeffding bound for evaluating clauses on a subset of the input stream. We employ a decoupling scheme of the Event Calculus axioms during the learning process, that allows to learn each clause in isolation. Moreover, we use abductive-inductive logic programming techniques to handle unobserved target predicates. We evaluate our approach on an activity recognition application and compare it to a number of batch learning techniques. We obtain results of comparable predicative accuracy with significant speed-ups in training time. We also outperform hand-crafted rules and match the performance of a sound incremental learner that can only operate on noise-free datasets. This paper is under consideration for acceptance in TPLP.', 'cs.LG', '2016-07-30T10:44:58Z', 'http://arxiv.org/abs/1608.00100v1', '2016-10-08 10:25:44', '2016-10-08 10:25:44')
  [1m[36m (2.9ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (0.8ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 214
  [1m[36mAuthor Load (0.7ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Nikos Katzouris'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Nikos Katzouris', '2016-10-08 10:25:44', '2016-10-08 10:25:44')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (576, 214, 0, '2016-10-08 10:25:44', '2016-10-08 10:25:44')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.7ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Alexander Artikis'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Alexander Artikis', '2016-10-08 10:25:44', '2016-10-08 10:25:44')
  [1m[36m (1.2ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (577, 214, 1, '2016-10-08 10:25:44', '2016-10-08 10:25:44')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (0.6ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Georgios Paliouras'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Georgios Paliouras', '2016-10-08 10:25:44', '2016-10-08 10:25:44')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (578, 214, 2, '2016-10-08 10:25:44', '2016-10-08 10:25:44')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.4ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Personalized Emphasis Framing for Persuasive Message Generation'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Personalized Emphasis Framing for Persuasive Message Generation', 'In this paper, we present a study on personalized emphasis framing which can be used to tailor the content of a message to enhance its appeal to different individuals. With this framework, we directly model content selection decisions based on a set of psychologically-motivated domain-independent personal traits including personality (e.g., extraversion and conscientiousness) and basic human values (e.g., self-transcendence and hedonism). We also demonstrate how the analysis results can be used in automated personalized content selection for persuasive message generation.', 'cs.AI', '2016-07-29T19:16:08Z', 'http://arxiv.org/abs/1607.08898v1', '2016-10-08 10:25:44', '2016-10-08 10:25:44')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (0.5ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 215
  [1m[36mAuthor Load (0.4ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Tao Ding'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Tao Ding', '2016-10-08 10:25:44', '2016-10-08 10:25:44')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (579, 215, 0, '2016-10-08 10:25:44', '2016-10-08 10:25:44')
  [1m[36m (0.3ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.6ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Shimei Pan'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Shimei Pan', '2016-10-08 10:25:44', '2016-10-08 10:25:44')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (580, 215, 1, '2016-10-08 10:25:44', '2016-10-08 10:25:44')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (0.5ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Identifying and Harnessing the Building Blocks of Machine Learning Pipelines for Sensible Initialization of a Data Science Automation Tool'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Identifying and Harnessing the Building Blocks of Machine Learning Pipelines for Sensible Initialization of a Data Science Automation Tool', 'As data science continues to grow in popularity, there will be an increasing need to make data science tools more scalable, flexible, and accessible. In particular, automated machine learning (AutoML) systems seek to automate the process of designing and optimizing machine learning pipelines. In this chapter, we present a genetic programming-based AutoML system called TPOT that optimizes a series of feature preprocessors and machine learning models with the goal of maximizing classification accuracy on a supervised classification problem. Further, we analyze a large database of pipelines that were previously used to solve various supervised classification problems and identify 100 short series of machine learning operations that appear the most frequently, which we call the building blocks of machine learning pipelines. We harness these building blocks to initialize TPOT with promising solutions, and find that this sensible initialization method significantly improves TPOT\'s performance on one benchmark at no cost of significantly degrading performance on the others. Thus, sensible initialization with machine learning pipeline building blocks shows promise for GP-based AutoML systems, and should be further refined in future work.', 'cs.NE', '2016-07-29T18:06:39Z', 'http://arxiv.org/abs/1607.08878v1', '2016-10-08 10:25:44', '2016-10-08 10:25:44')[0m
  [1m[35m (2.9ms)[0m  COMMIT
  [1m[36mPublish Load (0.8ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 216[0m
  [1m[35mAuthor Load (0.8ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Randal S. Olson'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Randal S. Olson', '2016-10-08 10:25:44', '2016-10-08 10:25:44')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (581, 216, 0, '2016-10-08 10:25:44', '2016-10-08 10:25:44')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (0.6ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Jason H. Moore'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Jason H. Moore', '2016-10-08 10:25:44', '2016-10-08 10:25:44')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (582, 216, 1, '2016-10-08 10:25:44', '2016-10-08 10:25:44')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.4ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'The DLVHEX System for Knowledge Representation: Recent Advances (System Description)'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('The DLVHEX System for Knowledge Representation: Recent Advances (System Description)', 'The DLVHEX system implements the HEX-semantics, which integrates answer set programming (ASP) with arbitrary external sources. Since its first release ten years ago, significant advancements were achieved. Most importantly, the exploitation of properties of external sources led to efficiency improvements and flexibility enhancements of the language, and technical improvements on the system side increased user\'s convenience. In this paper, we present the current status of the system and point out the most important recent enhancements over early versions. While existing literature focuses on theoretical aspects and specific components, a bird\'s eye view of the overall system is missing. In order to promote the system for real-world applications, we further present applications which were already successfully realized on top of DLVHEX. This paper is under consideration for acceptance in Theory and Practice of Logic Programming.', 'cs.CL', '2016-07-29T16:26:54Z', 'http://arxiv.org/abs/1607.08864v2', '2016-10-08 10:25:44', '2016-10-08 10:25:44')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (0.5ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 217
  [1m[36mAuthor Load (0.5ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Christoph Redl'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Christoph Redl', '2016-10-08 10:25:44', '2016-10-08 10:25:44')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (583, 217, 0, '2016-10-08 10:25:44', '2016-10-08 10:25:44')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.4ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Cognitive Science in the era of Artificial Intelligence: A roadmap for reverse-engineering the infant language-learner'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Cognitive Science in the era of Artificial Intelligence: A roadmap for reverse-engineering the infant language-learner', 'During their first years of life, infants learn the language(s) of their environment at an amazing speed despite large cross cultural variations in amount and complexity of the available language input. Understanding this simple fact still escapes current cognitive and linguistic theories. Recently, spectacular progress in the engineering science, notably, machine learning and wearable technology, offer the promise of revolutionizing the study of cognitive development. Machine learning offers powerful learning algorithms that can achieve human-like performance on many linguistic tasks. Wearable sensors can capture vast amounts of data, which enable the reconstruction of the sensory experience of infants in their natural environment. The project of \'reverse engineering\' language development, i.e., of building an effective system that mimics infant\'s achievements appears therefore to be within reach. Here, we analyze the conditions under which such a project can contribute to our scientific understanding of early language development. We argue that instead of defining a sub-problem or simplifying the data, computational models should address the full complexity of the learning situation, and take as input the raw sensory signals available to infants. This implies that (1) accessible but privacy-preserving repositories of home data be setup and widely shared, and (2) models be evaluated at different linguistic levels through a benchmark of psycholinguist tests that can be passed by machines and humans alike, (3) linguistically and psychologically plausible learning architectures be scaled up to real data using probabilistic/optimization principles from machine learning. We discuss the feasibility of this approach and present preliminary results.', 'cs.CL', '2016-07-29T08:33:10Z', 'http://arxiv.org/abs/1607.08723v2', '2016-10-08 10:25:44', '2016-10-08 10:25:44')
  [1m[36m (2.9ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (0.8ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 218
  [1m[36mAuthor Load (0.8ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Emmanuel Dupoux'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Emmanuel Dupoux', '2016-10-08 10:25:44', '2016-10-08 10:25:44')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (584, 218, 0, '2016-10-08 10:25:44', '2016-10-08 10:25:44')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.5ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Semi-supervised evidential label propagation algorithm for graph data'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Semi-supervised evidential label propagation algorithm for graph data', 'In the task of community detection, there often exists some useful prior information. In this paper, a Semi-supervised clustering approach using a new Evidential Label Propagation strategy (SELP) is proposed to incorporate the domain knowledge into the community detection model. The main advantage of SELP is that it can take limited supervised knowledge to guide the detection process. The prior information of community labels is expressed in the form of mass functions initially. Then a new evidential label propagation rule is adopted to propagate the labels from labeled data to unlabeled ones. The outliers can be identified to be in a special class. The experimental results demonstrate the effectiveness of SELP.', 'cs.SI', '2016-07-29T06:35:14Z', 'http://arxiv.org/abs/1607.08695v1', '2016-10-08 10:25:44', '2016-10-08 10:25:44')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (0.7ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 219
  [1m[36mAuthor Load (0.4ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Kuang Zhou'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Kuang Zhou', '2016-10-08 10:25:44', '2016-10-08 10:25:44')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (585, 219, 0, '2016-10-08 10:25:44', '2016-10-08 10:25:44')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.6ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Arnaud Martin'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Arnaud Martin', '2016-10-08 10:25:44', '2016-10-08 10:25:44')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (586, 219, 1, '2016-10-08 10:25:44', '2016-10-08 10:25:44')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.5ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Quan Pan'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Quan Pan', '2016-10-08 10:25:44', '2016-10-08 10:25:44')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (587, 219, 2, '2016-10-08 10:25:44', '2016-10-08 10:25:44')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.5ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Introspective Perception: Learning to Predict Failures in Vision Systems'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Introspective Perception: Learning to Predict Failures in Vision Systems', 'As robots aspire for long-term autonomous operations in complex dynamic environments, the ability to reliably take mission-critical decisions in ambiguous situations becomes critical. This motivates the need to build systems that have situational awareness to assess how qualified they are at that moment to make a decision. We call this self-evaluating capability as introspection. In this paper, we take a small step in this direction and propose a generic framework for introspective behavior in perception systems. Our goal is to learn a model to reliably predict failures in a given system, with respect to a task, directly from input sensor data. We present this in the context of vision-based autonomous MAV flight in outdoor natural environments, and show that it effectively handles uncertain situations.', 'cs.RO', '2016-07-28T23:27:13Z', 'http://arxiv.org/abs/1607.08665v1', '2016-10-08 10:25:44', '2016-10-08 10:25:44')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (0.5ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 220
  [1m[36mAuthor Load (0.6ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Shreyansh Daftry'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36m (0.1ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (567, 220, 0, '2016-10-08 10:25:45', '2016-10-08 10:25:45')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (0.7ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Sam Zeng'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Sam Zeng', '2016-10-08 10:25:45', '2016-10-08 10:25:45')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (588, 220, 1, '2016-10-08 10:25:45', '2016-10-08 10:25:45')
  [1m[36m (0.6ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.6ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'J. Andrew Bagnell'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35m (0.2ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (568, 220, 2, '2016-10-08 10:25:45', '2016-10-08 10:25:45')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.8ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Martial Hebert'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35m (0.2ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (569, 220, 3, '2016-10-08 10:25:45', '2016-10-08 10:25:45')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.5ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Modeling selectional restrictions in a relational type system'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Modeling selectional restrictions in a relational type system', 'Selectional restrictions are semantic constraints on forming certain complex types in natural language. The paper gives an overview of modeling selectional restrictions in a relational type system with morphological and syntactic types. We discuss some foundations of the system and ways of formalizing selectional restrictions. Keywords: type theory, selectional restrictions, syntax, morphology', 'cs.CL', '2016-07-28T19:47:25Z', 'http://arxiv.org/abs/1607.08592v1', '2016-10-08 10:25:45', '2016-10-08 10:25:45')
  [1m[36m (3.0ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (0.8ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 221
  [1m[36mAuthor Load (0.7ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Erkki Luuk'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Erkki Luuk', '2016-10-08 10:25:45', '2016-10-08 10:25:45')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (589, 221, 0, '2016-10-08 10:25:45', '2016-10-08 10:25:45')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.4ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Darknet and Deepnet Mining for Proactive Cybersecurity Threat Intelligence'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Darknet and Deepnet Mining for Proactive Cybersecurity Threat Intelligence', 'In this paper, we present an operational system for cyber threat intelligence gathering from various social platforms on the Internet particularly sites on the darknet and deepnet. We focus our attention to collecting information from hacker forum discussions and marketplaces offering products and services focusing on malicious hacking. We have developed an operational system for obtaining information from these sites for the purposes of identifying emerging cyber threats. Currently, this system collects on average 305 high-quality cyber threat warnings each week. These threat warnings include information on newly developed malware and exploits that have not yet been deployed in a cyber-attack. This provides a significant service to cyber-defenders. The system is significantly augmented through the use of various data mining and machine learning techniques. With the use of machine learning models, we are able to recall 92% of products in marketplaces and 80% of discussions on forums relating to malicious hacking with high precision. We perform preliminary analysis on the data collected, demonstrating its application to aid a security expert for better threat analysis.', 'cs.CR', '2016-07-28T19:30:04Z', 'http://arxiv.org/abs/1607.08583v1', '2016-10-08 10:25:45', '2016-10-08 10:25:45')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (0.6ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 222
  [1m[36mAuthor Load (0.5ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Eric Nunes'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Eric Nunes', '2016-10-08 10:25:45', '2016-10-08 10:25:45')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (590, 222, 0, '2016-10-08 10:25:45', '2016-10-08 10:25:45')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.7ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Ahmad Diab'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Ahmad Diab', '2016-10-08 10:25:45', '2016-10-08 10:25:45')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (591, 222, 1, '2016-10-08 10:25:45', '2016-10-08 10:25:45')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (0.8ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Andrew Gunn'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Andrew Gunn', '2016-10-08 10:25:45', '2016-10-08 10:25:45')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (592, 222, 2, '2016-10-08 10:25:45', '2016-10-08 10:25:45')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.6ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Ericsson Marin'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Ericsson Marin', '2016-10-08 10:25:45', '2016-10-08 10:25:45')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (593, 222, 3, '2016-10-08 10:25:45', '2016-10-08 10:25:45')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.7ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Vineet Mishra'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Vineet Mishra', '2016-10-08 10:25:45', '2016-10-08 10:25:45')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (594, 222, 4, '2016-10-08 10:25:45', '2016-10-08 10:25:45')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.7ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Vivin Paliath'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Vivin Paliath', '2016-10-08 10:25:45', '2016-10-08 10:25:45')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (595, 222, 5, '2016-10-08 10:25:45', '2016-10-08 10:25:45')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.6ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'John Robertson'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('John Robertson', '2016-10-08 10:25:45', '2016-10-08 10:25:45')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (596, 222, 6, '2016-10-08 10:25:45', '2016-10-08 10:25:45')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.5ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Jana Shakarian'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Jana Shakarian', '2016-10-08 10:25:45', '2016-10-08 10:25:45')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (597, 222, 7, '2016-10-08 10:25:45', '2016-10-08 10:25:45')[0m
  [1m[35m (3.0ms)[0m  COMMIT
  [1m[36mAuthor Load (0.8ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Amanda Thart'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Amanda Thart', '2016-10-08 10:25:45', '2016-10-08 10:25:45')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (598, 222, 8, '2016-10-08 10:25:45', '2016-10-08 10:25:45')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.6ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Paulo Shakarian'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Paulo Shakarian', '2016-10-08 10:25:45', '2016-10-08 10:25:45')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (599, 222, 9, '2016-10-08 10:25:45', '2016-10-08 10:25:45')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPaper Load (0.5ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'MIST: Missing Person Intelligence Synthesis Toolkit'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('MIST: Missing Person Intelligence Synthesis Toolkit', 'Each day, approximately 500 missing persons cases occur that go unsolved/unresolved in the United States. The non-profit organization known as the Find Me Group (FMG), led by former law enforcement professionals, is dedicated to solving or resolving these cases. This paper introduces the Missing Person Intelligence Synthesis Toolkit (MIST) which leverages a data-driven variant of geospatial abductive inference. This system takes search locations provided by a group of experts and rank-orders them based on the probability assigned to areas based on the prior performance of the experts taken as a group. We evaluate our approach compared to the current practices employed by the Find Me Group and found it significantly reduces the search area - leading to a reduction of 31 square miles over 24 cases we examined in our experiments. Currently, we are using MIST to aid the Find Me Group in an active missing person case.', 'cs.AI', '2016-07-28T19:13:20Z', 'http://arxiv.org/abs/1607.08580v2', '2016-10-08 10:25:45', '2016-10-08 10:25:45')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPublish Load (0.6ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 223[0m
  [1m[35mAuthor Load (0.4ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Elham Shaabani'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Elham Shaabani', '2016-10-08 10:25:45', '2016-10-08 10:25:45')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (600, 223, 0, '2016-10-08 10:25:45', '2016-10-08 10:25:45')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.6ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Hamidreza Alvari'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Hamidreza Alvari', '2016-10-08 10:25:45', '2016-10-08 10:25:45')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (601, 223, 1, '2016-10-08 10:25:45', '2016-10-08 10:25:45')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.5ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Paulo Shakarian'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35m (0.1ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (599, 223, 2, '2016-10-08 10:25:45', '2016-10-08 10:25:45')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.7ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'J. E. Kelly Snyder'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.3ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('J. E. Kelly Snyder', '2016-10-08 10:25:45', '2016-10-08 10:25:45')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (602, 223, 3, '2016-10-08 10:25:45', '2016-10-08 10:25:45')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPaper Load (0.5ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'A symbolic algebra for the computation of expected utilities in multiplicative influence diagrams'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('A symbolic algebra for the computation of expected utilities in multiplicative influence diagrams', 'Influence diagrams provide a compact graphical representation of decision problems. Several algorithms for the quick computation of their associated expected utilities are available in the literature. However, often they rely on a full quantification of both probabilistic uncertainties and utility values. For problems where all random variables and decision spaces are finite and discrete, here we develop a symbolic way to calculate the expected utilities of influence diagrams that does not require a full numerical representation. Within this approach expected utilities correspond to families of polynomials. After characterizing their polynomial structure, we develop an efficient symbolic algorithm for the propagation of expected utilities through the diagram and provide an implementation of this algorithm using a computer algebra system. We then characterize many of the standard manipulations of influence diagrams as transformations of polynomials. We also generalize the decision analytic framework of these diagrams by defining asymmetries as operations over the expected utility polynomials.', 'cs.AI', '2016-07-28T14:47:52Z', 'http://arxiv.org/abs/1607.08485v1', '2016-10-08 10:25:45', '2016-10-08 10:25:45')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPublish Load (0.7ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 224[0m
  [1m[35mAuthor Load (0.7ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Manuele Leonelli'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35m (0.2ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (550, 224, 0, '2016-10-08 10:25:45', '2016-10-08 10:25:45')
  [1m[36m (3.0ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.8ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Eva Riccomagno'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Eva Riccomagno', '2016-10-08 10:25:45', '2016-10-08 10:25:45')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (603, 224, 1, '2016-10-08 10:25:45', '2016-10-08 10:25:45')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (0.7ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Jim Q. Smith'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36m (0.2ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (551, 224, 2, '2016-10-08 10:25:45', '2016-10-08 10:25:45')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (0.5ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Faceless Person Recognition; Privacy Implications in Social Media'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Faceless Person Recognition; Privacy Implications in Social Media', 'As we shift more of our lives into the virtual domain, the volume of data shared on the web keeps increasing and presents a threat to our privacy. This works contributes to the understanding of privacy implications of such data sharing by analysing how well people are recognisable in social media data. To facilitate a systematic study we define a number of scenarios considering factors such as how many heads of a person are tagged and if those heads are obfuscated or not. We propose a robust person recognition system that can handle large variations in pose and clothing, and can be trained with few training samples. Our results indicate that a handful of images is enough to threaten users\' privacy, even in the presence of obfuscation. We show detailed experimental results, and discuss their implications.', 'cs.CV', '2016-07-28T13:10:27Z', 'http://arxiv.org/abs/1607.08438v1', '2016-10-08 10:25:45', '2016-10-08 10:25:45')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPublish Load (0.5ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 225[0m
  [1m[35mAuthor Load (0.5ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Seong Joon Oh'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Seong Joon Oh', '2016-10-08 10:25:45', '2016-10-08 10:25:45')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (604, 225, 0, '2016-10-08 10:25:45', '2016-10-08 10:25:45')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.7ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Rodrigo Benenson'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Rodrigo Benenson', '2016-10-08 10:25:45', '2016-10-08 10:25:45')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (605, 225, 1, '2016-10-08 10:25:45', '2016-10-08 10:25:45')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.7ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Mario Fritz'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35m (0.2ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (450, 225, 2, '2016-10-08 10:25:45', '2016-10-08 10:25:45')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.5ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Bernt Schiele'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Bernt Schiele', '2016-10-08 10:25:45', '2016-10-08 10:25:45')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (606, 225, 3, '2016-10-08 10:25:45', '2016-10-08 10:25:45')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (0.4ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Robust Contextual Outlier Detection: Where Context Meets Sparsity'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.6ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Robust Contextual Outlier Detection: Where Context Meets Sparsity', 'Outlier detection is a fundamental data science task with applications ranging from data cleaning to network security. Given the fundamental nature of the task, this has been the subject of much research. Recently, a new class of outlier detection algorithms has emerged, called {\\it contextual outlier detection}, and has shown improved performance when studying anomalous behavior in a specific context. However, as we point out in this article, such approaches have limited applicability in situations where the context is sparse (i.e. lacking a suitable frame of reference). Moreover, approaches developed to date do not scale to large datasets. To address these problems, here we propose a novel and robust approach alternative to the state-of-the-art called RObust Contextual Outlier Detection (ROCOD). We utilize a local and global behavioral model based on the relevant contexts, which is then integrated in a natural and robust fashion. We also present several optimizations to improve the scalability of the approach. We run ROCOD on both synthetic and real-world datasets and demonstrate that it outperforms other competitive baselines on the axes of efficacy and efficiency (40X speedup compared to modern contextual outlier detection methods). We also drill down and perform a fine-grained analysis to shed light on the rationale for the performance gains of ROCOD and reveal its effectiveness when handling objects with sparse contexts.', 'cs.DB', '2016-07-28T06:40:30Z', 'http://arxiv.org/abs/1607.08329v2', '2016-10-08 10:25:45', '2016-10-08 10:25:45')[0m
  [1m[35m (3.1ms)[0m  COMMIT
  [1m[36mPublish Load (0.8ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 226[0m
  [1m[35mAuthor Load (0.7ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Jiongqian Liang'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.4ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Jiongqian Liang', '2016-10-08 10:25:45', '2016-10-08 10:25:45')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (607, 226, 0, '2016-10-08 10:25:45', '2016-10-08 10:25:45')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (0.7ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Srinivasan Parthasarathy'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Srinivasan Parthasarathy', '2016-10-08 10:25:45', '2016-10-08 10:25:45')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (608, 226, 1, '2016-10-08 10:25:45', '2016-10-08 10:25:45')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.5ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'VHT: Vertical Hoeffding Tree'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('VHT: Vertical Hoeffding Tree', 'IoT Big Data requires new machine learning methods able to scale to large size of data arriving at high speed. Decision trees are popular machine learning models since they are very effective, yet easy to interpret and visualize. In the literature, we can find distributed algorithms for learning decision trees, and also streaming algorithms, but not algorithms that combine both features. In this paper we present the Vertical Hoeffding Tree (VHT), the first distributed streaming algorithm for learning decision trees. It features a novel way of distributing decision trees via vertical parallelism. The algorithm is implemented on top of Apache SAMOA, a platform for mining distributed data streams, and thus able to run on real-world clusters. We run several experiments to study the accuracy and throughput performance of our new VHT algorithm, as well as its ability to scale while keeping its superior performance with respect to non-distributed decision trees.', 'cs.DC', '2016-07-28T06:15:24Z', 'http://arxiv.org/abs/1607.08325v1', '2016-10-08 10:25:45', '2016-10-08 10:25:45')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (0.7ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 227
  [1m[36mAuthor Load (0.5ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Nicolas Kourtellis'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Nicolas Kourtellis', '2016-10-08 10:25:45', '2016-10-08 10:25:45')[0m
  [1m[35m (1.2ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (609, 227, 0, '2016-10-08 10:25:45', '2016-10-08 10:25:45')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.8ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Gianmarco De Francisci Morales'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Gianmarco De Francisci Morales', '2016-10-08 10:25:45', '2016-10-08 10:25:45')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (610, 227, 1, '2016-10-08 10:25:45', '2016-10-08 10:25:45')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.7ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Albert Bifet'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Albert Bifet', '2016-10-08 10:25:45', '2016-10-08 10:25:45')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (611, 227, 2, '2016-10-08 10:25:45', '2016-10-08 10:25:45')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.7ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Arinto Murdopo'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Arinto Murdopo', '2016-10-08 10:25:45', '2016-10-08 10:25:45')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (612, 227, 3, '2016-10-08 10:25:45', '2016-10-08 10:25:45')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (0.5ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Hyperparameter Optimization of Deep Neural Networks Using Non-Probabilistic RBF Surrogate Model'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Hyperparameter Optimization of Deep Neural Networks Using Non-Probabilistic RBF Surrogate Model', 'Recently, Bayesian optimization has been successfully applied for optimizing hyperparameters of deep neural networks, significantly outperforming the expert-set hyperparameter values. The methods approximate and minimize the validation error as a function of hyperparameter values through probabilistic models like Gaussian processes. However, probabilistic models that require a prior distribution of the errors may be not adequate for approximating very complex error functions of deep neural networks. In this work, we propose to employ radial basis function as the surrogate of the error functions for optimizing both continuous and integer hyperparameters. The proposed non-probabilistic algorithm, called Hyperparameter Optimization using RBF and DYCORS (HORD), searches the surrogate for the most promising hyperparameter values while providing a good balance between exploration and exploitation. Extensive evaluations demonstrate HORD significantly outperforms the well-established Bayesian optimization methods such as Spearmint and TPE, both in terms of finding a near optimal solution with fewer expensive function evaluations, and in terms of a final validation error. Further, HORD performs equally well in low- and high-dimensional hyperparameter spaces, and by avoiding expensive covariance computation can also scale to a high number of observations.', 'cs.AI', '2016-07-28T05:03:32Z', 'http://arxiv.org/abs/1607.08316v1', '2016-10-08 10:25:45', '2016-10-08 10:25:45')[0m
  [1m[35m (4.0ms)[0m  COMMIT
  [1m[36mPublish Load (0.8ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 228[0m
  [1m[35mAuthor Load (0.7ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Ilija Ilievski'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Ilija Ilievski', '2016-10-08 10:25:45', '2016-10-08 10:25:45')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (613, 228, 0, '2016-10-08 10:25:45', '2016-10-08 10:25:45')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (0.7ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Taimoor Akhtar'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Taimoor Akhtar', '2016-10-08 10:25:45', '2016-10-08 10:25:45')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (614, 228, 1, '2016-10-08 10:25:45', '2016-10-08 10:25:45')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.5ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Jiashi Feng'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Jiashi Feng', '2016-10-08 10:25:45', '2016-10-08 10:25:45')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (615, 228, 2, '2016-10-08 10:25:45', '2016-10-08 10:25:45')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.6ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Christine Annette Shoemaker'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Christine Annette Shoemaker', '2016-10-08 10:25:45', '2016-10-08 10:25:45')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (616, 228, 3, '2016-10-08 10:25:45', '2016-10-08 10:25:45')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.5ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Mammalian Value Systems'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Mammalian Value Systems', 'Characterizing human values is a topic deeply interwoven with the sciences, humanities, art, and many other human endeavors. In recent years, a number of thinkers have argued that accelerating trends in computer science, cognitive science, and related disciplines foreshadow the creation of intelligent machines which meet and ultimately surpass the cognitive abilities of human beings, thereby entangling an understanding of human values with future technological development. Contemporary research accomplishments suggest sophisticated AI systems becoming widespread and responsible for managing many aspects of the modern world, from preemptively planning users\' travel schedules and logistics, to fully autonomous vehicles, to domestic robots assisting in daily living. The extrapolation of these trends has been most forcefully described in the context of a hypothetical \"intelligence explosion,\" in which the capabilities of an intelligent software agent would rapidly increase due to the presence of feedback loops unavailable to biological organisms. The possibility of superintelligent agents, or simply the widespread deployment of sophisticated, autonomous AI systems, highlights an important theoretical problem: the need to separate the cognitive and rational capacities of an agent from the fundamental goal structure, or value system, which constrains and guides the agent\'s actions. The \"value alignment problem\" is to specify a goal structure for autonomous agents compatible with human values. In this brief article, we suggest that recent ideas from affective neuroscience and related disciplines aimed at characterizing neurological and behavioral universals in the mammalian kingdom provide important conceptual foundations relevant to describing human values. We argue that the notion of \"mammalian value systems\" points to a potential avenue for fundamental research in AI safety and AI ethics.', 'cs.AI', '2016-07-28T01:22:26Z', 'http://arxiv.org/abs/1607.08289v1', '2016-10-08 10:25:45', '2016-10-08 10:25:45')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (0.6ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 229
  [1m[36mAuthor Load (0.5ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Gopal P. Sarma'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Gopal P. Sarma', '2016-10-08 10:25:45', '2016-10-08 10:25:45')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (617, 229, 0, '2016-10-08 10:25:45', '2016-10-08 10:25:45')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.5ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Nick J. Hay'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Nick J. Hay', '2016-10-08 10:25:45', '2016-10-08 10:25:45')
  [1m[36m (2.9ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (618, 229, 1, '2016-10-08 10:25:45', '2016-10-08 10:25:45')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPaper Load (0.5ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Android Malware Detection Using Parallel Machine Learning Classifiers'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Android Malware Detection Using Parallel Machine Learning Classifiers', 'Mobile malware has continued to grow at an alarming rate despite on-going efforts towards mitigating the problem. This has been particularly noticeable on Android due to its being an open platform that has subsequently overtaken other platforms in the share of the mobile smart devices market. Hence, incentivizing a new wave of emerging Android malware sophisticated enough to evade most common detection methods. This paper proposes and investigates a parallel machine learning based classification approach for early detection of Android malware. Using real malware samples and benign applications, a composite classification model is developed from parallel combination of heterogeneous classifiers. The empirical evaluation of the model under different combination schemes demonstrates its efficacy and potential to improve detection accuracy. More importantly, by utilizing several classifiers with diverse characteristics, their strengths can be harnessed not only for enhanced Android malware detection but also quicker white box analysis by means of the more interpretable constituent classifiers.', 'cs.CR', '2016-07-27T17:22:00Z', 'http://dx.doi.org/10.1109/NGMAST.2014.23', '2016-10-08 10:25:45', '2016-10-08 10:25:45')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPublish Load (0.7ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 230[0m
  [1m[35mAuthor Load (0.5ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Suleiman Y. Yerima'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Suleiman Y. Yerima', '2016-10-08 10:25:45', '2016-10-08 10:25:45')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (619, 230, 0, '2016-10-08 10:25:45', '2016-10-08 10:25:45')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (0.5ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Sakir Sezer'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Sakir Sezer', '2016-10-08 10:25:45', '2016-10-08 10:25:45')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (620, 230, 1, '2016-10-08 10:25:45', '2016-10-08 10:25:45')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.7ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Igor Muttik'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Igor Muttik', '2016-10-08 10:25:45', '2016-10-08 10:25:45')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (621, 230, 2, '2016-10-08 10:25:45', '2016-10-08 10:25:45')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPaper Load (0.6ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Psychologically inspired planning method for smart relocation task'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Psychologically inspired planning method for smart relocation task', 'Behavior planning is known to be one of the basic cognitive functions, which is essential for any cognitive architecture of any control system used in robotics. At the same time most of the widespread planning algorithms employed in those systems are developed using only approaches and models of Artificial Intelligence and don\'t take into account numerous results of cognitive experiments. As a result, there is a strong need for novel methods of behavior planning suitable for modern cognitive architectures aimed at robot control. One such method is presented in this work and is studied within a special class of navigation task called smart relocation task. The method is based on the hierarchical two-level model of abstraction and knowledge representation, e.g. symbolic and subsymbolic. On the symbolic level sign world model is used for knowledge representation and hierarchical planning algorithm, PMA, is utilized for planning. On the subsymbolic level the task of path planning is considered and solved as a graph search problem. Interaction between both planners is examined and inter-level interfaces and feedback loops are described. Preliminary experimental results are presented.', 'cs.AI', '2016-07-27T17:08:05Z', 'http://arxiv.org/abs/1607.08181v1', '2016-10-08 10:25:45', '2016-10-08 10:25:45')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPublish Load (0.5ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 231[0m
  [1m[35mAuthor Load (0.6ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Aleksandr I. Panov'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Aleksandr I. Panov', '2016-10-08 10:25:45', '2016-10-08 10:25:45')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (622, 231, 0, '2016-10-08 10:25:45', '2016-10-08 10:25:45')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.6ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Konstantin Yakovlev'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36m (0.1ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (446, 231, 1, '2016-10-08 10:25:45', '2016-10-08 10:25:45')[0m
  [1m[35m (5.3ms)[0m  COMMIT
  [1m[36mPaper Load (0.8ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'N-opcode Analysis for Android Malware Classification and Categorization'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('N-opcode Analysis for Android Malware Classification and Categorization', 'Malware detection is a growing problem particularly on the Android mobile platform due to its increasing popularity and accessibility to numerous third party app markets. This has also been made worse by the increasingly sophisticated detection avoidance techniques employed by emerging malware families. This calls for more effective techniques for detection and classification of Android malware. Hence, in this paper we present an n-opcode analysis based approach that utilizes machine learning to classify and categorize Android malware. This approach enables automated feature discovery that eliminates the need for applying expert or domain knowledge to define the needed features. Our experiments on 2520 samples that were performed using up to 10-gram opcode features showed that an f-measure of 98% is achievable using this approach.', 'cs.CR', '2016-07-27T15:32:18Z', 'http://dx.doi.org/10.1109/CyberSecPODS.2016.7502343', '2016-10-08 10:25:45', '2016-10-08 10:25:45')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPublish Load (0.7ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 232[0m
  [1m[35mAuthor Load (0.6ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'BooJoong Kang'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('BooJoong Kang', '2016-10-08 10:25:45', '2016-10-08 10:25:45')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (623, 232, 0, '2016-10-08 10:25:45', '2016-10-08 10:25:45')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (0.8ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Suleiman Y. Yerima'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36m (0.1ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (619, 232, 1, '2016-10-08 10:25:45', '2016-10-08 10:25:45')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (0.7ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Kieran McLaughlin'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Kieran McLaughlin', '2016-10-08 10:25:45', '2016-10-08 10:25:45')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.3ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (624, 232, 2, '2016-10-08 10:25:45', '2016-10-08 10:25:45')
  [1m[36m (1.8ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.8ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Sakir Sezer'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35m (0.2ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (620, 232, 3, '2016-10-08 10:25:45', '2016-10-08 10:25:45')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.5ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Neuromorphic Robot Dream'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Neuromorphic Robot Dream', 'In this paper we present the next step in our approach to neurobiologically plausible implementation of emotional reactions and behaviors for real-time autonomous robotic systems. The working metaphor we use is the \"day\" and the \"night\" phases of mammalian life. During the \"day phase\" a robotic system stores the inbound information and is controlled by a light-weight rule-based system in real time. In contrast to that, during the \"night phase\" information that has been stored is transferred to a supercomputing system to update the realistic neural network: emotional and behavioral strategies.', 'cs.AI', '2016-07-27T14:54:47Z', 'http://arxiv.org/abs/1607.08131v1', '2016-10-08 10:25:45', '2016-10-08 10:25:45')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (0.8ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 233
  [1m[36mAuthor Load (0.6ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Alexander Tchitchigin'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Alexander Tchitchigin', '2016-10-08 10:25:45', '2016-10-08 10:25:45')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.3ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (625, 233, 0, '2016-10-08 10:25:45', '2016-10-08 10:25:45')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.6ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Max Talanov'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Max Talanov', '2016-10-08 10:25:45', '2016-10-08 10:25:45')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (626, 233, 1, '2016-10-08 10:25:45', '2016-10-08 10:25:45')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.5ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Larisa Safina'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Larisa Safina', '2016-10-08 10:25:45', '2016-10-08 10:25:45')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (627, 233, 2, '2016-10-08 10:25:45', '2016-10-08 10:25:45')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.5ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Manuel Mazzara'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Manuel Mazzara', '2016-10-08 10:25:45', '2016-10-08 10:25:45')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (628, 233, 3, '2016-10-08 10:25:45', '2016-10-08 10:25:45')[0m
  [1m[35m (0.3ms)[0m  COMMIT
  [1m[36mPaper Load (0.5ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Automatically Reinforcing a Game AI'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Automatically Reinforcing a Game AI', 'A recent research trend in Artificial Intelligence (AI) is the combination of several programs into one single, stronger, program; this is termed portfolio methods. We here investigate the application of such methods to Game Playing Programs (GPPs). In addition, we consider the case in which only one GPP is available - by decomposing this single GPP into several ones through the use of parameters or even simply random seeds. These portfolio methods are trained in a learning phase. We propose two different offline approaches. The simplest one, BestArm, is a straightforward optimization of seeds or parame- ters; it performs quite well against the original GPP, but performs poorly against an opponent which repeats games and learns. The second one, namely Nash-portfolio, performs similarly in a \"one game\" test, and is much more robust against an opponent who learns. We also propose an online learning portfolio, which tests several of the GPP repeatedly and progressively switches to the best one - using a bandit algorithm.', 'cs.AI', '2016-07-27T14:10:28Z', 'http://arxiv.org/abs/1607.08100v1', '2016-10-08 10:25:45', '2016-10-08 10:25:45')[0m
  [1m[35m (3.0ms)[0m  COMMIT
  [1m[36mPublish Load (0.8ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 234[0m
  [1m[35mAuthor Load (0.7ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'David L. St-Pierre'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('David L. St-Pierre', '2016-10-08 10:25:45', '2016-10-08 10:25:45')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (629, 234, 0, '2016-10-08 10:25:45', '2016-10-08 10:25:45')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.6ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Jean-Baptiste Hoock'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Jean-Baptiste Hoock', '2016-10-08 10:25:45', '2016-10-08 10:25:45')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (630, 234, 1, '2016-10-08 10:25:45', '2016-10-08 10:25:45')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.8ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Jialin Liu'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Jialin Liu', '2016-10-08 10:25:45', '2016-10-08 10:25:45')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (631, 234, 2, '2016-10-08 10:25:45', '2016-10-08 10:25:45')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.6ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Fabien Teytaud'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Fabien Teytaud', '2016-10-08 10:25:45', '2016-10-08 10:25:45')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (632, 234, 3, '2016-10-08 10:25:45', '2016-10-08 10:25:45')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.6ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Olivier Teytaud'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Olivier Teytaud', '2016-10-08 10:25:45', '2016-10-08 10:25:45')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (633, 234, 4, '2016-10-08 10:25:45', '2016-10-08 10:25:45')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPaper Load (0.5ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Improving Semantic Embedding Consistency by Metric Learning for Zero-Shot Classification'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Improving Semantic Embedding Consistency by Metric Learning for Zero-Shot Classification', 'This paper addresses the task of zero-shot image classification. The key contribution of the proposed approach is to control the semantic embedding of images -- one of the main ingredients of zero-shot learning -- by formulating it as a metric learning problem. The optimized empirical criterion associates two types of sub-task constraints: metric discriminating capacity and accurate attribute prediction. This results in a novel expression of zero-shot learning not requiring the notion of class in the training phase: only pairs of image/attributes, augmented with a consistency indicator, are given as ground truth. At test time, the learned model can predict the consistency of a test image with a given set of attributes , allowing flexible ways to produce recognition inferences. Despite its simplicity, the proposed approach gives state-of-the-art results on four challenging datasets used for zero-shot recognition evaluation.', 'cs.CV', '2016-07-27T13:35:16Z', 'http://arxiv.org/abs/1607.08085v1', '2016-10-08 10:25:45', '2016-10-08 10:25:45')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPublish Load (0.6ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 235[0m
  [1m[35mAuthor Load (0.5ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Maxime Bucher'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35m (0.2ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (270, 235, 0, '2016-10-08 10:25:45', '2016-10-08 10:25:45')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.5ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Stéphane Herbin'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35m (0.2ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (271, 235, 1, '2016-10-08 10:25:45', '2016-10-08 10:25:45')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.5ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Frédéric Jurie'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35m (0.1ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (272, 235, 2, '2016-10-08 10:25:45', '2016-10-08 10:25:45')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.4ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Harmonization of conflicting medical opinions using argumentation protocols and textual entailment - a case study on Parkinson disease'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Harmonization of conflicting medical opinions using argumentation protocols and textual entailment - a case study on Parkinson disease', 'Parkinson\'s disease is the second most common neurodegenerative disease, affecting more than 1.2 million people in Europe. Medications are available for the management of its symptoms, but the exact cause of the disease is unknown and there is currently no cure on the market. To better understand the relations between new findings and current medical knowledge, we need tools able to analyse published medical papers based on natural language processing and tools capable to identify various relationships of new findings with the current medical knowledge. Our work aims to fill the above technological gap. To identify conflicting information in medical documents, we enact textual entailment technology. To encapsulate existing medical knowledge, we rely on ontologies. To connect the formal axioms in ontologies with natural text in medical articles, we exploit ontology verbalisation techniques. To assess the level of disagreement between human agents with respect to a medical issue, we rely on fuzzy aggregation. To harmonize this disagreement, we design mediation protocols within a multi-agent framework.', 'cs.AI', '2016-07-27T13:13:41Z', 'http://arxiv.org/abs/1607.08075v1', '2016-10-08 10:25:45', '2016-10-08 10:25:45')
  [1m[36m (3.0ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (0.9ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 236
  [1m[36mAuthor Load (0.8ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Adrian Groza'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Adrian Groza', '2016-10-08 10:25:45', '2016-10-08 10:25:45')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (634, 236, 0, '2016-10-08 10:25:45', '2016-10-08 10:25:45')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.7ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Madalina Mand Nagy'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Madalina Mand Nagy', '2016-10-08 10:25:45', '2016-10-08 10:25:45')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (635, 236, 1, '2016-10-08 10:25:45', '2016-10-08 10:25:45')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (0.5ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Mining Arguments from Cancer Documents Using Natural Language Processing and Ontologies'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.7ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Mining Arguments from Cancer Documents Using Natural Language Processing and Ontologies', 'In the medical domain, the continuous stream of scientific research contains contradictory results supported by arguments and counter-arguments. As medical expertise occurs at different levels, part of the human agents have difficulties to face the huge amount of studies, but also to understand the reasons and pieces of evidences claimed by the proponents and the opponents of the debated topic. To better understand the supporting arguments for new findings related to current state of the art in the medical domain we need tools able to identify arguments in scientific papers. Our work here aims to fill the above technological gap. Quite aware of the difficulty of this task, we embark to this road by relying on the well-known interleaving of domain knowledge with natural language processing. To formalise the existing medical knowledge, we rely on ontologies. To structure the argumentation model we use also the expressivity and reasoning capabilities of Description Logics. To perform argumentation mining we formalise various linguistic patterns in a rule-based language. We tested our solution against a corpus of scientific papers related to breast cancer. The run experiments show a F-measure between 0.71 and 0.86 for identifying conclusions of an argument and between 0.65 and 0.86 for identifying premises of an argument.', 'cs.AI', '2016-07-27T13:08:41Z', 'http://arxiv.org/abs/1607.08074v1', '2016-10-08 10:25:45', '2016-10-08 10:25:45')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPublish Load (0.6ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 237[0m
  [1m[35mAuthor Load (0.5ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Adrian Groza'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35m (0.1ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (634, 237, 0, '2016-10-08 10:25:45', '2016-10-08 10:25:45')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.7ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Oana Popa'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Oana Popa', '2016-10-08 10:25:45', '2016-10-08 10:25:45')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (636, 237, 1, '2016-10-08 10:25:45', '2016-10-08 10:25:45')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (0.5ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Assisting Drivers During Overtaking Using Car-2-Car Communication and Multi-Agent Systems'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Assisting Drivers During Overtaking Using Car-2-Car Communication and Multi-Agent Systems', 'A warning system for assisting drivers during overtaking maneuvers is proposed. The system relies on Car-2-Car communication technologies and multi-agent systems. A protocol for safety overtaking is proposed based on ACL communicative acts. The mathematical model for safety overtaking used Kalman filter to minimize localization error.', 'cs.AI', '2016-07-27T13:08:13Z', 'http://arxiv.org/abs/1607.08073v1', '2016-10-08 10:25:45', '2016-10-08 10:25:45')[0m
  [1m[35m (4.3ms)[0m  COMMIT
  [1m[36mPublish Load (0.8ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 238[0m
  [1m[35mAuthor Load (0.8ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Adrian Groza'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35m (0.2ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.4ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (634, 238, 0, '2016-10-08 10:25:45', '2016-10-08 10:25:45')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.7ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Calin Cara'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Calin Cara', '2016-10-08 10:25:45', '2016-10-08 10:25:45')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (637, 238, 1, '2016-10-08 10:25:45', '2016-10-08 10:25:45')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.7ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Sergiu Zaporojan'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Sergiu Zaporojan', '2016-10-08 10:25:45', '2016-10-08 10:25:45')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (638, 238, 2, '2016-10-08 10:25:45', '2016-10-08 10:25:45')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.7ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Igor Calmicov'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Igor Calmicov', '2016-10-08 10:25:45', '2016-10-08 10:25:45')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (639, 238, 3, '2016-10-08 10:25:45', '2016-10-08 10:25:45')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPaper Load (0.5ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Behavior and path planning for the coalition of cognitive robots in smart relocation tasks'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Behavior and path planning for the coalition of cognitive robots in smart relocation tasks', 'In this paper we outline the approach of solving special type of navigation tasks for robotic systems, when a coalition of robots (agents) acts in the 2D environment, which can be modified by the actions, and share the same goal location. The latter is originally unreachable for some members of the coalition, but the common task still can be accomplished as the agents can assist each other (e.g. by modifying the environment). We call such tasks smart relocation tasks (as the can not be solved by pure path planning methods) and study spatial and behavior interaction of robots while solving them. We use cognitive approach and introduce semiotic knowledge representation - sign world model which underlines behavioral planning methodology. Planning is viewed as a recursive search process in the hierarchical state-space induced by sings with path planning signs reside on the lowest level. Reaching this level triggers path planning which is accomplished by state of the art grid-based planners focused on producing smooth paths (e.g. LIAN) and thus indirectly guarantying feasibility of that paths against agent\'s dynamic constraints.', 'cs.AI', '2016-07-27T11:12:02Z', 'http://dx.doi.org/10.1007/978-3-319-31293-4_1', '2016-10-08 10:25:45', '2016-10-08 10:25:45')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPublish Load (0.7ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 239[0m
  [1m[35mAuthor Load (0.6ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Aleksandr I. Panov'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35m (0.1ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (622, 239, 0, '2016-10-08 10:25:45', '2016-10-08 10:25:45')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.4ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Konstantin Yakovlev'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35m (0.1ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (446, 239, 1, '2016-10-08 10:25:45', '2016-10-08 10:25:45')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.5ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Joint Embedding of Hierarchical Categories and Entities for Concept Categorization and Dataless Classification'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Joint Embedding of Hierarchical Categories and Entities for Concept Categorization and Dataless Classification', 'Due to the lack of structured knowledge applied in learning distributed representation of cate- gories, existing work cannot incorporate category hierarchies into entity information. We propose a framework that embeds entities and categories into a semantic space by integrating structured knowledge and taxonomy hierarchy from large knowledge bases. The framework allows to com- pute meaningful semantic relatedness between entities and categories. Our framework can han- dle both single-word concepts and multiple-word concepts with superior performance on concept categorization and yield state of the art results on dataless hierarchical classification.', 'cs.CL', '2016-07-27T04:51:17Z', 'http://arxiv.org/abs/1607.07956v1', '2016-10-08 10:25:45', '2016-10-08 10:25:45')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (0.8ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 240
  [1m[36mAuthor Load (0.6ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Yuezhang Li'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Yuezhang Li', '2016-10-08 10:25:45', '2016-10-08 10:25:45')[0m
  [1m[35m (3.9ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (640, 240, 0, '2016-10-08 10:25:45', '2016-10-08 10:25:45')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.9ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Ronghuo Zheng'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Ronghuo Zheng', '2016-10-08 10:25:45', '2016-10-08 10:25:45')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (641, 240, 1, '2016-10-08 10:25:45', '2016-10-08 10:25:45')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.7ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Tian Tian'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Tian Tian', '2016-10-08 10:25:45', '2016-10-08 10:25:45')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (642, 240, 2, '2016-10-08 10:25:45', '2016-10-08 10:25:45')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.7ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Zhiting Hu'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Zhiting Hu', '2016-10-08 10:25:45', '2016-10-08 10:25:45')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (643, 240, 3, '2016-10-08 10:25:45', '2016-10-08 10:25:45')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (0.7ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Rahul Iyer'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Rahul Iyer', '2016-10-08 10:25:45', '2016-10-08 10:25:45')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (644, 240, 4, '2016-10-08 10:25:45', '2016-10-08 10:25:45')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.5ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Katia Sycara'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Katia Sycara', '2016-10-08 10:25:45', '2016-10-08 10:25:45')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (645, 240, 5, '2016-10-08 10:25:45', '2016-10-08 10:25:45')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (0.5ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Multiple scan data association by convex variational inference'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Multiple scan data association by convex variational inference', 'Data association, the reasoning over correspondence between targets and measurements, is a problem of fundamental importance in target tracking. Recently, belief propagation (BP) has emerged as a promising method for estimating the marginal probabilities of target/measurement association, providing fast, accurate estimates. The excellent performance of BP in the particular formulation used may be attributed to the convexity of the underlying free energy which it implicitly optimises. This paper studies multiple scan data association problems, i.e., problems that reason over correspondence between targets and several sets of measurements, which may correspond to different sensors or different time steps. We find that the multiple scan extension of the single scan BP formulation is non-convex and demonstrate the undesirable behaviour that can result. A convex free energy is constructed using the recently proposed fractional free energy, and optimised using a primal-dual coordinate ascent. Finally, based on a variational interpretation of joint probabilistic data association (JPDA), we develop a sequential variant of the algorithm that is similar to JPDA, but retains consistency constraints from prior scans. The performance of the proposed methods is demonstrated on a bearings only target localisation problem.', 'cs.AI', '2016-07-27T02:53:24Z', 'http://arxiv.org/abs/1607.07942v1', '2016-10-08 10:25:45', '2016-10-08 10:25:45')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPublish Load (0.8ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 241[0m
  [1m[35mAuthor Load (0.6ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Jason L. Williams'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Jason L. Williams', '2016-10-08 10:25:45', '2016-10-08 10:25:45')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (646, 241, 0, '2016-10-08 10:25:45', '2016-10-08 10:25:45')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (0.8ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Roslyn A. Lau'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Roslyn A. Lau', '2016-10-08 10:25:45', '2016-10-08 10:25:45')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (647, 241, 1, '2016-10-08 10:25:45', '2016-10-08 10:25:45')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.5ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Approximation and Parameterized Complexity of Minimax Approval Voting'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Approximation and Parameterized Complexity of Minimax Approval Voting', 'We present three results on the complexity of Minimax Approval Voting. First, we study Minimax Approval Voting parameterized by the Hamming distance $d$ from the solution to the votes. We show Minimax Approval Voting admits no algorithm running in time $\\mathcal{O}^\\star(2^{o(d\\log d)})$, unless the Exponential Time Hypothesis (ETH) fails. This means that the $\\mathcal{O}^\\star(d^{2d})$ algorithm of Misra et al. [AAMAS 2015] is essentially optimal. Motivated by this, we then show a parameterized approximation scheme, running in time $\\mathcal{O}^\\star(\\left({3}/{\\epsilon}\\right)^{2d})$, which is essentially tight assuming ETH. Finally, we get a new polynomial-time randomized approximation scheme for Minimax Approval Voting, which runs in time $n^{\\mathcal{O}(1/\\epsilon^2 \\cdot \\log(1/\\epsilon))} \\cdot \\mathrm{poly}(m)$, almost matching the running time of the fastest known PTAS for Closest String due to Ma and Sun [SIAM J. Comp. 2009].', 'cs.DS', '2016-07-26T22:06:51Z', 'http://arxiv.org/abs/1607.07906v1', '2016-10-08 10:25:45', '2016-10-08 10:25:45')
  [1m[36m (3.0ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (0.7ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 242
  [1m[36mAuthor Load (0.6ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Marek Cygan'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Marek Cygan', '2016-10-08 10:25:45', '2016-10-08 10:25:45')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (648, 242, 0, '2016-10-08 10:25:45', '2016-10-08 10:25:45')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.6ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Łukasz Kowalik'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Łukasz Kowalik', '2016-10-08 10:25:45', '2016-10-08 10:25:45')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (649, 242, 1, '2016-10-08 10:25:45', '2016-10-08 10:25:45')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (0.6ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Arkadiusz Socała'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Arkadiusz Socała', '2016-10-08 10:25:45', '2016-10-08 10:25:45')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (650, 242, 2, '2016-10-08 10:25:45', '2016-10-08 10:25:45')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.8ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Krzysztof Sornat'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Krzysztof Sornat', '2016-10-08 10:25:45', '2016-10-08 10:25:45')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (651, 242, 3, '2016-10-08 10:25:45', '2016-10-08 10:25:45')[0m
  [1m[35m (1.8ms)[0m  COMMIT
  [1m[36mPaper Load (0.6ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Polling-systems-based Autonomous Vehicle Coordination in Traffic Intersections with No Traffic Signals'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Polling-systems-based Autonomous Vehicle Coordination in Traffic Intersections with No Traffic Signals', 'The rapid development of autonomous vehicles spurred a careful investigation of the potential benefits of all-autonomous transportation networks. Most studies conclude that autonomous systems can enable drastic improvements in performance. A widely studied concept is all-autonomous, collision-free intersections, where vehicles arriving in a traffic intersection with no traffic light adjust their speeds to cross safely through the intersection as quickly as possible. In this paper, we propose a coordination control algorithm for this problem, assuming stochastic models for the arrival times of the vehicles. The proposed algorithm provides provable guarantees on safety and performance. More precisely, it is shown that no collisions occur surely, and moreover a rigorous upper bound is provided for the expected wait time. The algorithm is also demonstrated in simulations. The proposed algorithms are inspired by polling systems. In fact, the problem studied in this paper leads to a new polling system where customers are subject to differential constraints, which may be interesting in its own right.', 'cs.SY', '2016-07-26T20:43:02Z', 'http://arxiv.org/abs/1607.07896v1', '2016-10-08 10:25:45', '2016-10-08 10:25:45')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPublish Load (0.6ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 243[0m
  [1m[35mAuthor Load (0.6ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'David Miculescu'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('David Miculescu', '2016-10-08 10:25:45', '2016-10-08 10:25:45')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (652, 243, 0, '2016-10-08 10:25:45', '2016-10-08 10:25:45')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.6ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Sertac Karaman'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Sertac Karaman', '2016-10-08 10:25:45', '2016-10-08 10:25:45')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (653, 243, 1, '2016-10-08 10:25:45', '2016-10-08 10:25:45')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.5ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Technical Report: Giving Hints for Logic Programming Examples without Revealing Solutions'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Technical Report: Giving Hints for Logic Programming Examples without Revealing Solutions', 'We introduce a framework for supporting learning to program in the paradigm of Answer Set Programming (ASP), which is a declarative logic programming formalism. Based on the idea of teaching by asking the student to complete small example ASP programs, we introduce a three-stage method for giving hints to the student without revealing the correct solution of an example. We categorize mistakes into (i) syntactic mistakes, (ii) unexpected but syntactically correct input, and (iii) semantic mistakes, describe mathematical definitions of these mistakes, and show how to compute hints from these definitions.', 'cs.AI', '2016-07-26T19:17:11Z', 'http://arxiv.org/abs/1607.07847v1', '2016-10-08 10:25:45', '2016-10-08 10:25:45')
  [1m[36m (3.0ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (0.8ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 244
  [1m[36mAuthor Load (0.8ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Gokhan Avci'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.4ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Gokhan Avci', '2016-10-08 10:25:45', '2016-10-08 10:25:45')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (654, 244, 0, '2016-10-08 10:25:45', '2016-10-08 10:25:45')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.7ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Mustafa Mehuljic'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Mustafa Mehuljic', '2016-10-08 10:25:45', '2016-10-08 10:25:45')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (655, 244, 1, '2016-10-08 10:25:45', '2016-10-08 10:25:45')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.7ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Peter Schüller'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Peter Schüller', '2016-10-08 10:25:45', '2016-10-08 10:25:45')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (656, 244, 2, '2016-10-08 10:25:45', '2016-10-08 10:25:45')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.5ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Focused Model-Learning and Planning for Non-Gaussian Continuous State-Action Systems'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Focused Model-Learning and Planning for Non-Gaussian Continuous State-Action Systems', 'We introduce a joint framework for model leaning and planning in stochastic domains with continuous state and action spaces with non-Gaussian transition noise. It is efficient in large spaces with large amounts of data because (1) local models are estimated only when the planner requires them; (2) the planner focuses on the most relevant states to the current planning problem; and (3) the planner focuses on the most informative and/or high-value actions. Our theoretical analysis shows that the expected difference between the optimal value function of the original problem and the value of the policy we compute vanishes sub-linearly in the number of actions we test, under mild assumptions. We show empirically that multi-modal transition models are necessary if the underlying dynamics is not single-mode, and our algorithm is able to complete both learning and planning within minutes for a stochastic pushing problem in simulation given more than a million data points, as a result of focused planning.', 'cs.AI', '2016-07-26T15:48:03Z', 'http://arxiv.org/abs/1607.07762v1', '2016-10-08 10:25:45', '2016-10-08 10:25:45')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (0.7ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 245
  [1m[36mAuthor Load (0.5ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Zi Wang'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Zi Wang', '2016-10-08 10:25:45', '2016-10-08 10:25:45')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (657, 245, 0, '2016-10-08 10:25:45', '2016-10-08 10:25:45')
  [1m[36m (0.3ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.5ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Stefanie Jegelka'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Stefanie Jegelka', '2016-10-08 10:25:45', '2016-10-08 10:25:45')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (658, 245, 1, '2016-10-08 10:25:45', '2016-10-08 10:25:45')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.5ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Leslie Pack Kaelbling'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36m (0.1ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (531, 245, 2, '2016-10-08 10:25:45', '2016-10-08 10:25:45')[0m
  [1m[35m (0.3ms)[0m  COMMIT
  [1m[36mAuthor Load (0.4ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Tomás Lozano-Pérez'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36m (0.1ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (532, 245, 3, '2016-10-08 10:25:45', '2016-10-08 10:25:45')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPaper Load (0.5ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Symbols of a cosmic order'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Symbols of a cosmic order', 'The world runs on communicated sequences of symbols, e.g. numerals. Examining both engineered and natural communications networks reveals an unsuspected order that depends on contact with an unpredictable entity. This order has three roots. The first is a proof within quantum theory that no evidence can ever determine its explanation, so that an agent choosing an explanation must do so unpredictably. The second root is the showing that clocks that step computers do not \"tell time\" but serve as self-adjusting symbol-handling agents that regulate \"logically synchronized\" motion in response to unpredictable disturbances. Such a clock-agent has a certain independence as well as the capacity to communicate via unpredictable symbols with other clock-agents and to adjust its own tick rate in response to that communication. The third root is the noticing of unpredictable symbol exchange in natural systems, including the transmission of symbols found in molecular biology. We introduce a symbol-handling agent as a role played in some cases by a person, for example a physicist who chooses an explanation of given experimental outcomes, and in other cases by some other biological entity, and in still other cases by an inanimate device, such as a computer-based detector used in physical measurements. While we forbear to try to explain the propensity of agents at all levels from cells to civilizations to form and operate networks of logically synchronized symbol-handling agents, we point to this propensity as an overlooked cosmic order, an order structured by the unpredictability ensuing from the proof. Appreciating the cosmic order leads to a conception of agency that replaces volition by unpredictability and re-conceives the notion of objectivity in a way that makes a place for agency in the world as described by physics. Some specific implications for physics are outlined.', 'physics.hist-ph', '2016-07-26T15:27:33Z', 'http://dx.doi.org/10.1016/j.aop.2016.07.022', '2016-10-08 10:25:45', '2016-10-08 10:25:45')[0m
  [1m[35m (2.9ms)[0m  COMMIT
  [1m[36mPublish Load (0.8ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 246[0m
  [1m[35mAuthor Load (0.8ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'F. Hadi Madjid'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('F. Hadi Madjid', '2016-10-08 10:25:45', '2016-10-08 10:25:45')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (659, 246, 0, '2016-10-08 10:25:45', '2016-10-08 10:25:45')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.6ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'John M. Myers'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('John M. Myers', '2016-10-08 10:25:45', '2016-10-08 10:25:45')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (660, 246, 1, '2016-10-08 10:25:45', '2016-10-08 10:25:45')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.5ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Leveraging Unstructured Data to Detect Emerging Reliability Issues'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Leveraging Unstructured Data to Detect Emerging Reliability Issues', 'Unstructured data refers to information that does not have a predefined data model or is not organized in a pre-defined manner. Loosely speaking, unstructured data refers to text data that is generated by humans. In after-sales service businesses, there are two main sources of unstructured data: customer complaints, which generally describe symptoms, and technician comments, which outline diagnostics and treatment information. A legitimate customer complaint can eventually be tracked to a failure or a claim. However, there is a delay between the time of a customer complaint and the time of a failure or a claim. A proactive strategy aimed at analyzing customer complaints for symptoms can help service providers detect reliability problems in advance and initiate corrective actions such as recalls. This paper introduces essential text mining concepts in the context of reliability analysis and a method to detect emerging reliability issues. The application of the method is illustrated using a case study.', 'cs.AI', '2016-07-26T15:19:12Z', 'http://dx.doi.org/10.1109/RAMS.2015.7105093', '2016-10-08 10:25:45', '2016-10-08 10:25:45')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (0.6ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 247
  [1m[36mAuthor Load (0.5ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Deovrat Kakde'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Deovrat Kakde', '2016-10-08 10:25:45', '2016-10-08 10:25:45')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (661, 247, 0, '2016-10-08 10:25:45', '2016-10-08 10:25:45')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.5ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Arin Chaudhuri'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Arin Chaudhuri', '2016-10-08 10:25:45', '2016-10-08 10:25:45')
  [1m[36m (0.3ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (662, 247, 1, '2016-10-08 10:25:45', '2016-10-08 10:25:45')[0m
  [1m[35m (0.3ms)[0m  COMMIT
  [1m[36mPaper Load (0.5ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'The Price of Anarchy in Auctions'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('The Price of Anarchy in Auctions', 'This survey outlines a general and modular theory for proving approximation guarantees for equilibria of auctions in complex settings. This theory complements traditional economic techniques, which generally focus on exact and optimal solutions and are accordingly limited to relatively stylized settings. We highlight three user-friendly analytical tools: smoothness-type inequalities, which immediately yield approximation guarantees for many auction formats of interest in the special case of complete information and deterministic strategies; extension theorems, which extend such guarantees to randomized strategies, no-regret learning outcomes, and incomplete-information settings; and composition theorems, which extend such guarantees from simpler to more complex auctions. Combining these tools yields tight worst-case approximation guarantees for the equilibria of many widely-used auction formats.', 'cs.GT', '2016-07-26T13:23:20Z', 'http://arxiv.org/abs/1607.07684v1', '2016-10-08 10:25:45', '2016-10-08 10:25:45')[0m
  [1m[35m (3.0ms)[0m  COMMIT
  [1m[36mPublish Load (0.8ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 248[0m
  [1m[35mAuthor Load (0.7ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Tim Roughgarden'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Tim Roughgarden', '2016-10-08 10:25:45', '2016-10-08 10:25:45')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (663, 248, 0, '2016-10-08 10:25:45', '2016-10-08 10:25:45')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (0.9ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Vasilis Syrgkanis'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Vasilis Syrgkanis', '2016-10-08 10:25:45', '2016-10-08 10:25:45')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (664, 248, 1, '2016-10-08 10:25:45', '2016-10-08 10:25:45')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.8ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Eva Tardos'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Eva Tardos', '2016-10-08 10:25:45', '2016-10-08 10:25:45')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (665, 248, 2, '2016-10-08 10:25:45', '2016-10-08 10:25:45')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPaper Load (0.5ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'OntoCat: Automatically categorizing knowledge in API Documentation'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.6ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('OntoCat: Automatically categorizing knowledge in API Documentation', 'Most application development happens in the context of complex APIs; reference documentation for APIs has grown tremendously in variety, complexity, and volume, and can be difficult to navigate. There is a growing need to develop well-organized ways to access the knowledge latent in the documentation; several research efforts deal with the organization (ontology) of API-related knowledge. Extensive knowledge-engineering work, supported by a rigorous qualitative analysis, by Maalej & Robillard [3] has identified a useful taxonomy of API knowledge. Based on this taxonomy, we introduce a domain independent technique to extract the knowledge types from the given API reference documentation. Our system, OntoCat, introduces total nine different features and their semantic and statistical combinations to classify the different knowledge types. We tested OntoCat on python API reference documentation. Our experimental results show the effectiveness of the system and opens the scope of probably related research areas (i.e., user behavior, documentation quality, etc.).', 'cs.SE', '2016-07-26T09:19:46Z', 'http://arxiv.org/abs/1607.07602v1', '2016-10-08 10:25:45', '2016-10-08 10:25:45')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPublish Load (0.5ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 249[0m
  [1m[35mAuthor Load (0.5ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Niraj Kumar'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Niraj Kumar', '2016-10-08 10:25:45', '2016-10-08 10:25:45')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (666, 249, 0, '2016-10-08 10:25:45', '2016-10-08 10:25:45')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.6ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Premkumar Devanbu'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Premkumar Devanbu', '2016-10-08 10:25:45', '2016-10-08 10:25:45')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (667, 249, 1, '2016-10-08 10:25:45', '2016-10-08 10:25:45')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.5ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Tweet2Vec: Learning Tweet Embeddings Using Character-level CNN-LSTM Encoder-Decoder'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Tweet2Vec: Learning Tweet Embeddings Using Character-level CNN-LSTM Encoder-Decoder', 'We present Tweet2Vec, a novel method for generating general-purpose vector representation of tweets. The model learns tweet embeddings using character-level CNN-LSTM encoder-decoder. We trained our model on 3 million, randomly selected English-language tweets. The model was evaluated using two methods: tweet semantic similarity and tweet sentiment categorization, outperforming the previous state-of-the-art in both tasks. The evaluations demonstrate the power of the tweet embeddings generated by our model for various tweet categorization tasks. The vector representations generated by our model are generic, and hence can be applied to a variety of tasks. Though the model presented in this paper is trained on English-language tweets, the method presented can be used to learn tweet embeddings for different languages.', 'cs.CL', '2016-07-26T00:58:14Z', 'http://dx.doi.org/10.1145/2911451.2914762', '2016-10-08 10:25:45', '2016-10-08 10:25:45')
  [1m[36m (2.9ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (0.8ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 250
  [1m[36mAuthor Load (0.7ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Soroush Vosoughi'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Soroush Vosoughi', '2016-10-08 10:25:45', '2016-10-08 10:25:45')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (668, 250, 0, '2016-10-08 10:25:45', '2016-10-08 10:25:45')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.8ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Prashanth Vijayaraghavan'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Prashanth Vijayaraghavan', '2016-10-08 10:25:45', '2016-10-08 10:25:45')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (669, 250, 1, '2016-10-08 10:25:45', '2016-10-08 10:25:45')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.6ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Deb Roy'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Deb Roy', '2016-10-08 10:25:45', '2016-10-08 10:25:45')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (670, 250, 2, '2016-10-08 10:25:45', '2016-10-08 10:25:45')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.5ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Meta-Prod2Vec - Product Embeddings Using Side-Information for Recommendation'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Meta-Prod2Vec - Product Embeddings Using Side-Information for Recommendation', 'We propose Meta-Prod2vec, a novel method to compute item similarities for recommendation that leverages existing item metadata. Such scenarios are frequently encountered in applications such as content recommendation, ad targeting and web search. Our method leverages past user interactions with items and their attributes to compute low-dimensional embeddings of items. Specifically, the item metadata is in- jected into the model as side information to regularize the item embeddings. We show that the new item representa- tions lead to better performance on recommendation tasks on an open music dataset.', 'cs.IR', '2016-07-25T15:54:07Z', 'http://dx.doi.org/10.1145/2959100.2959160', '2016-10-08 10:25:45', '2016-10-08 10:25:45')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (0.5ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 251
  [1m[36mAuthor Load (0.6ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Flavian Vasile'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Flavian Vasile', '2016-10-08 10:25:45', '2016-10-08 10:25:45')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (671, 251, 0, '2016-10-08 10:25:45', '2016-10-08 10:25:45')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.5ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Elena Smirnova'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Elena Smirnova', '2016-10-08 10:25:45', '2016-10-08 10:25:45')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (672, 251, 1, '2016-10-08 10:25:45', '2016-10-08 10:25:45')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (0.8ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Alexis Conneau'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Alexis Conneau', '2016-10-08 10:25:45', '2016-10-08 10:25:45')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (673, 251, 2, '2016-10-08 10:25:45', '2016-10-08 10:25:45')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.5ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Estimating Activity at Multiple Scales using Spatial Abstractions'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Estimating Activity at Multiple Scales using Spatial Abstractions', 'Autonomous robots operating in dynamic environments must maintain beliefs over a hypothesis space that is rich enough to represent the activities of interest at different scales. This is important both in order to accommodate the availability of evidence at varying degrees of coarseness, such as when interpreting and assimilating natural instructions, but also in order to make subsequent reactive planning more efficient. We present an algorithm that combines a topology-based trajectory clustering procedure that generates hierarchically-structured spatial abstractions with a bank of particle filters at each of these abstraction levels so as to produce probability estimates over an agent\'s navigation activity that is kept consistent across the hierarchy. We study the performance of the proposed method using a synthetic trajectory dataset in 2D, as well as a dataset taken from AIS-based tracking of ships in an extended harbour area. We show that, in comparison to a baseline which is a particle filter that estimates activity without exploiting such structure, our method achieves a better normalised error in predicting the trajectory as well as better time to convergence to a true class when compared against ground truth.', 'cs.AI', '2016-07-25T15:17:06Z', 'http://arxiv.org/abs/1607.07311v1', '2016-10-08 10:25:45', '2016-10-08 10:25:45')
  [1m[36m (2.9ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (0.8ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 252
  [1m[36mAuthor Load (0.8ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Majd Hawasly'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Majd Hawasly', '2016-10-08 10:25:45', '2016-10-08 10:25:45')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (674, 252, 0, '2016-10-08 10:25:45', '2016-10-08 10:25:45')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.7ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Florian T. Pokorny'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Florian T. Pokorny', '2016-10-08 10:25:45', '2016-10-08 10:25:45')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (675, 252, 1, '2016-10-08 10:25:45', '2016-10-08 10:25:45')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.6ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Subramanian Ramamoorthy'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Subramanian Ramamoorthy', '2016-10-08 10:25:45', '2016-10-08 10:25:45')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (676, 252, 2, '2016-10-08 10:25:45', '2016-10-08 10:25:45')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.5ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'A Model of Pathways to Artificial Superintelligence Catastrophe for Risk and Decision Analysis'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('A Model of Pathways to Artificial Superintelligence Catastrophe for Risk and Decision Analysis', 'An artificial superintelligence (ASI) is artificial intelligence that is significantly more intelligent than humans in all respects. While ASI does not currently exist, some scholars propose that it could be created sometime in the future, and furthermore that its creation could cause a severe global catastrophe, possibly even resulting in human extinction. Given the high stakes, it is important to analyze ASI risk and factor the risk into decisions related to ASI research and development. This paper presents a graphical model of major pathways to ASI catastrophe, focusing on ASI created via recursive self-improvement. The model uses the established risk and decision analysis modeling paradigms of fault trees and influence diagrams in order to depict combinations of events and conditions that could lead to AI catastrophe, as well as intervention options that could decrease risks. The events and conditions include select aspects of the ASI itself as well as the human process of ASI research, development, and management. Model structure is derived from published literature on ASI risk. The model offers a foundation for rigorous quantitative evaluation and decision making on the long-term risk of ASI catastrophe.', 'cs.AI', '2016-07-25T13:04:22Z', 'http://dx.doi.org/10.1080/0952813X.2016.1186228', '2016-10-08 10:25:45', '2016-10-08 10:25:45')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (0.5ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 253
  [1m[36mAuthor Load (0.5ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Anthony M. Barrett'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Anthony M. Barrett', '2016-10-08 10:25:45', '2016-10-08 10:25:45')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (677, 253, 0, '2016-10-08 10:25:45', '2016-10-08 10:25:45')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.8ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Seth D. Baum'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Seth D. Baum', '2016-10-08 10:25:45', '2016-10-08 10:25:45')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (678, 253, 1, '2016-10-08 10:25:45', '2016-10-08 10:25:45')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (0.5ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'An Evolutionary Algorithm to Learn SPARQL Queries for Source-Target-Pairs: Finding Patterns for Human Associations in DBpedia'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('An Evolutionary Algorithm to Learn SPARQL Queries for Source-Target-Pairs: Finding Patterns for Human Associations in DBpedia', 'Efficient usage of the knowledge provided by the Linked Data community is often hindered by the need for domain experts to formulate the right SPARQL queries to answer questions. For new questions they have to decide which datasets are suitable and in which terminology and modelling style to phrase the SPARQL query. In this work we present an evolutionary algorithm to help with this challenging task. Given a training list of source-target node-pair examples our algorithm can learn patterns (SPARQL queries) from a SPARQL endpoint. The learned patterns can be visualised to form the basis for further investigation, or they can be used to predict target nodes for new source nodes. Amongst others, we apply our algorithm to a dataset of several hundred human associations (such as \"circle - square\") to find patterns for them in DBpedia. We show the scalability of the algorithm by running it against a SPARQL endpoint loaded with > 7.9 billion triples. Further, we use the resulting SPARQL queries to mimic human associations with a Mean Average Precision (MAP) of 39.9 % and a Recall@10 of 63.9 %.', 'cs.AI', '2016-07-25T12:47:38Z', 'http://arxiv.org/abs/1607.07249v3', '2016-10-08 10:25:45', '2016-10-08 10:25:45')[0m
  [1m[35m (3.0ms)[0m  COMMIT
  [1m[36mPublish Load (0.8ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 254[0m
  [1m[35mAuthor Load (0.7ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Jörn Hees'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Jörn Hees', '2016-10-08 10:25:45', '2016-10-08 10:25:45')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (679, 254, 0, '2016-10-08 10:25:45', '2016-10-08 10:25:45')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.6ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Rouven Bauer'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Rouven Bauer', '2016-10-08 10:25:46', '2016-10-08 10:25:46')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (680, 254, 1, '2016-10-08 10:25:46', '2016-10-08 10:25:46')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.7ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Joachim Folz'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Joachim Folz', '2016-10-08 10:25:46', '2016-10-08 10:25:46')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (681, 254, 2, '2016-10-08 10:25:46', '2016-10-08 10:25:46')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (0.7ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Damian Borth'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Damian Borth', '2016-10-08 10:25:46', '2016-10-08 10:25:46')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (682, 254, 3, '2016-10-08 10:25:46', '2016-10-08 10:25:46')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.7ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Andreas Dengel'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35m (0.2ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (537, 254, 4, '2016-10-08 10:25:46', '2016-10-08 10:25:46')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.5ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Spatio-Temporal LSTM with Trust Gates for 3D Human Action Recognition'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Spatio-Temporal LSTM with Trust Gates for 3D Human Action Recognition', '3D action recognition - analysis of human actions based on 3D skeleton data - becomes popular recently due to its succinctness, robustness, and view-invariant representation. Recent attempts on this problem suggested to develop RNN-based learning methods to model the contextual dependency in the temporal domain. In this paper, we extend this idea to spatio-temporal domains to analyze the hidden sources of action-related information within the input data over both domains concurrently. Inspired by the graphical structure of the human skeleton, we further propose a more powerful tree-structure based traversal method. To handle the noise and occlusion in 3D skeleton data, we introduce new gating mechanism within LSTM to learn the reliability of the sequential input data and accordingly adjust its effect on updating the long-term context information stored in the memory cell. Our method achieves state-of-the-art performance on 4 challenging benchmark datasets for 3D human action analysis.', 'cs.CV', '2016-07-24T13:39:11Z', 'http://arxiv.org/abs/1607.07043v1', '2016-10-08 10:25:46', '2016-10-08 10:25:46')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (0.5ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 255
  [1m[36mAuthor Load (0.6ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Jun Liu'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Jun Liu', '2016-10-08 10:25:46', '2016-10-08 10:25:46')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (683, 255, 0, '2016-10-08 10:25:46', '2016-10-08 10:25:46')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.6ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Amir Shahroudy'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Amir Shahroudy', '2016-10-08 10:25:46', '2016-10-08 10:25:46')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (684, 255, 1, '2016-10-08 10:25:46', '2016-10-08 10:25:46')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.5ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Dong Xu'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Dong Xu', '2016-10-08 10:25:46', '2016-10-08 10:25:46')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (685, 255, 2, '2016-10-08 10:25:46', '2016-10-08 10:25:46')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.8ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Gang Wang'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Gang Wang', '2016-10-08 10:25:46', '2016-10-08 10:25:46')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (686, 255, 3, '2016-10-08 10:25:46', '2016-10-08 10:25:46')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (0.4ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Redundancy-free Verbalization of Individuals for Ontology Validation'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Redundancy-free Verbalization of Individuals for Ontology Validation', 'We investigate the problem of verbalizing Web Ontology Language (OWL) axioms of domain ontologies in this paper. The existing approaches address the problem of fidelity of verbalized OWL texts to OWL semantics by exploring different ways of expressing the same OWL axiom in various linguistic forms. They also perform grouping and aggregating of the natural language (NL) sentences that are generated corresponding to each OWL statement into a comprehensible structure. However, no efforts have been taken to try out a semantic reduction at logical level to remove redundancies and repetitions, so that the reduced set of axioms can be used for generating a more meaningful and human-understandable (what we call redundancy-free) text. Our experiments show that, formal semantic reduction at logical level is very helpful to generate redundancy-free descriptions of ontology entities. In this paper, we particularly focus on generating descriptions of individuals of SHIQ based ontologies. The details of a case study are provided to support the usefulness of the redundancy-free NL descriptions of individuals, in knowledge validation application.', 'cs.AI', '2016-07-24T11:22:00Z', 'http://arxiv.org/abs/1607.07027v1', '2016-10-08 10:25:46', '2016-10-08 10:25:46')[0m
  [1m[35m (2.8ms)[0m  COMMIT
  [1m[36mPublish Load (0.8ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 256[0m
  [1m[35mAuthor Load (0.7ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'E. V. Vinu'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('E. V. Vinu', '2016-10-08 10:25:46', '2016-10-08 10:25:46')
  [1m[36m (0.6ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (687, 256, 0, '2016-10-08 10:25:46', '2016-10-08 10:25:46')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.8ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'P Sreenivasa Kumar'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('P Sreenivasa Kumar', '2016-10-08 10:25:46', '2016-10-08 10:25:46')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (688, 256, 1, '2016-10-08 10:25:46', '2016-10-08 10:25:46')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.5ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'A DEMATEL-Based Completion Method for Incomplete Pairwise Comparison Matrix in AHP'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('A DEMATEL-Based Completion Method for Incomplete Pairwise Comparison Matrix in AHP', 'Pairwise comparison matrix as a crucial component of AHP, presents the prefer- ence relations among alternatives. However, in many cases, the pairwise comparison matrix is difficult to complete, which obstructs the subsequent operations of the clas- sical AHP. In this paper, based on DEMATEL which has ability to derive the total relation matrix from direct relation matrix, a new completion method for incomplete pairwise comparison matrix is proposed. The proposed method provides a new per- spective to estimate the missing values with explicit physical meaning. Besides, the proposed method has low computational cost. This promising method has a wide application in multi-criteria decision-making.', 'math.OC', '2016-07-23T08:43:12Z', 'http://arxiv.org/abs/1607.08116v1', '2016-10-08 10:25:46', '2016-10-08 10:25:46')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (0.5ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 257
  [1m[36mAuthor Load (0.5ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Xinyi Zhou'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Xinyi Zhou', '2016-10-08 10:25:46', '2016-10-08 10:25:46')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (689, 257, 0, '2016-10-08 10:25:46', '2016-10-08 10:25:46')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.7ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Yong Hu'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Yong Hu', '2016-10-08 10:25:46', '2016-10-08 10:25:46')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (690, 257, 1, '2016-10-08 10:25:46', '2016-10-08 10:25:46')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (0.7ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Yong Deng'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Yong Deng', '2016-10-08 10:25:46', '2016-10-08 10:25:46')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (691, 257, 2, '2016-10-08 10:25:46', '2016-10-08 10:25:46')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.5ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Felix T. S. Chan'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Felix T. S. Chan', '2016-10-08 10:25:46', '2016-10-08 10:25:46')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (692, 257, 3, '2016-10-08 10:25:46', '2016-10-08 10:25:46')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (0.7ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Alessio Ishizak'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Alessio Ishizak', '2016-10-08 10:25:46', '2016-10-08 10:25:46')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (693, 257, 4, '2016-10-08 10:25:46', '2016-10-08 10:25:46')
  [1m[36m (3.0ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.8ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Processing Natural Language About Ongoing Actions'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Processing Natural Language About Ongoing Actions', 'Actions may not proceed as planned; they may be interrupted, resumed or overridden. This is a challenge to handle in a natural language understanding system. We describe extensions to an existing implementation for the control of autonomous systems by natural language, to enable such systems to handle incoming language requests regarding actions. Language Communication with Autonomous Systems (LCAS) has been extended with support for X-nets, parameterized executable schemas representing actions. X-nets enable the system to control actions at a desired level of granularity, while providing a mechanism for language requests to be processed asynchronously. Standard semantics supported include requests to stop, continue, or override the existing action. The specific domain demonstrated is the control of motion of a simulated robot, but the approach is general, and could be applied to other domains.', 'cs.AI', '2016-07-23T01:46:09Z', 'http://arxiv.org/abs/1607.06875v2', '2016-10-08 10:25:46', '2016-10-08 10:25:46')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (0.8ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 258
  [1m[36mAuthor Load (0.7ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Steve Doubleday'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Steve Doubleday', '2016-10-08 10:25:46', '2016-10-08 10:25:46')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (694, 258, 0, '2016-10-08 10:25:46', '2016-10-08 10:25:46')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.8ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Sean Trott'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Sean Trott', '2016-10-08 10:25:46', '2016-10-08 10:25:46')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (695, 258, 1, '2016-10-08 10:25:46', '2016-10-08 10:25:46')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (0.8ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Jerome Feldman'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Jerome Feldman', '2016-10-08 10:25:46', '2016-10-08 10:25:46')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (696, 258, 2, '2016-10-08 10:25:46', '2016-10-08 10:25:46')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.5ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Predicting Enemy\'s Actions Improves Commander Decision-Making'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Predicting Enemy\'s Actions Improves Commander Decision-Making', 'The Defense Advanced Research Projects Agency (DARPA) Real-time Adversarial Intelligence and Decision-making (RAID) program is investigating the feasibility of \"reading the mind of the enemy\" - to estimate and anticipate, in real-time, the enemy\'s likely goals, deceptions, actions, movements and positions. This program focuses specifically on urban battles at echelons of battalion and below. The RAID program leverages approximate game-theoretic and deception-sensitive algorithms to provide real-time enemy estimates to a tactical commander. A key hypothesis of the program is that these predictions and recommendations will make the commander more effective, i.e. he should be able to achieve his operational goals safer, faster, and more efficiently. Realistic experimentation and evaluation drive the development process using human-in-the-loop wargames to compare humans and the RAID system. Two experiments were conducted in 2005 as part of Phase I to determine if the RAID software could make predictions and recommendations as effectively and accurately as a 4-person experienced staff. This report discusses the intriguing and encouraging results of these first two experiments conducted by the RAID program. It also provides details about the experiment environment and methodology that were used to demonstrate and prove the research goals.', 'cs.AI', '2016-07-22T17:37:24Z', 'http://arxiv.org/abs/1607.06759v1', '2016-10-08 10:25:46', '2016-10-08 10:25:46')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (0.6ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 259
  [1m[36mAuthor Load (0.5ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Michael Ownby'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Michael Ownby', '2016-10-08 10:25:46', '2016-10-08 10:25:46')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (697, 259, 0, '2016-10-08 10:25:46', '2016-10-08 10:25:46')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.5ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Alexander Kott'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Alexander Kott', '2016-10-08 10:25:46', '2016-10-08 10:25:46')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (698, 259, 1, '2016-10-08 10:25:46', '2016-10-08 10:25:46')[0m
  [1m[35m (3.0ms)[0m  COMMIT
  [1m[36mPaper Load (0.8ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Validation of Information Fusion'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Validation of Information Fusion', 'We motivate and offer a formal definition of validation as it applies to information fusion systems. Common definitions of validation compare the actual state of the world with that derived by the fusion process. This definition conflates properties of the fusion system with properties of systems that intervene between the world and the fusion system. We propose an alternative definition where validation of an information fusion system references a standard fusion device, such as recognized human experts. We illustrate the approach by describing the validation process implemented in RAID, a program conducted by DARPA and focused on information fusion in adversarial, deceptive environments.', 'cs.AI', '2016-07-22T17:18:05Z', 'http://arxiv.org/abs/1607.07288v1', '2016-10-08 10:25:46', '2016-10-08 10:25:46')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPublish Load (0.7ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 260[0m
  [1m[35mAuthor Load (0.7ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Alexander Kott'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35m (0.2ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (698, 260, 0, '2016-10-08 10:25:46', '2016-10-08 10:25:46')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.8ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Wes Milks'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Wes Milks', '2016-10-08 10:25:46', '2016-10-08 10:25:46')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (699, 260, 1, '2016-10-08 10:25:46', '2016-10-08 10:25:46')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (0.5ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Audio inpainting with similarity graphs'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Audio inpainting with similarity graphs', 'In this contribution, we present a method to compensate for long duration data gaps in audio signals, in particular music. To achieve this task, a similarity graph is constructed, based on a short-time Fourier analysis of reliable signal segments, e.g. the uncorrupted remainder of the music piece, and the temporal regions adjacent to the unreliable section of the signal. A suitable candidate segment is then selected through an optimization scheme and smoothly inserted into the gap.', 'cs.SD', '2016-07-22T13:12:33Z', 'http://arxiv.org/abs/1607.06667v1', '2016-10-08 10:25:46', '2016-10-08 10:25:46')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPublish Load (0.5ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 261[0m
  [1m[35mAuthor Load (0.7ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Nathanael Perraudin'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Nathanael Perraudin', '2016-10-08 10:25:46', '2016-10-08 10:25:46')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (700, 261, 0, '2016-10-08 10:25:46', '2016-10-08 10:25:46')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.6ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Nicki Holighaus'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Nicki Holighaus', '2016-10-08 10:25:46', '2016-10-08 10:25:46')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (701, 261, 1, '2016-10-08 10:25:46', '2016-10-08 10:25:46')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.6ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Piotr Majdak'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Piotr Majdak', '2016-10-08 10:25:46', '2016-10-08 10:25:46')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (702, 261, 2, '2016-10-08 10:25:46', '2016-10-08 10:25:46')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (0.7ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Peter Balazs'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Peter Balazs', '2016-10-08 10:25:46', '2016-10-08 10:25:46')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (703, 261, 3, '2016-10-08 10:25:46', '2016-10-08 10:25:46')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.5ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Optimal resampling for the noisy OneMax problem'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.7ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Optimal resampling for the noisy OneMax problem', 'The OneMax problem is a standard benchmark optimisation problem for a binary search space. Recent work on applying a Bandit-Based Random Mutation Hill-Climbing algorithm to the noisy OneMax Problem showed that it is important to choose a good value for the resampling number to make a careful trade off between taking more samples in order to reduce noise, and taking fewer samples to reduce the total computational cost. This paper extends that observation, by deriving an analytical expression for the running time of the RMHC algorithm with resampling applied to the noisy OneMax problem, and showing both theoretically and empirically that the optimal resampling number increases with the number of dimensions in the search space.', 'cs.NE', '2016-07-22T11:51:49Z', 'http://arxiv.org/abs/1607.06641v1', '2016-10-08 10:25:46', '2016-10-08 10:25:46')
  [1m[36m (3.0ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (0.9ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 262
  [1m[36mAuthor Load (0.8ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Jialin Liu'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36m (0.2ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (631, 262, 0, '2016-10-08 10:25:46', '2016-10-08 10:25:46')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (0.7ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Michael Fairbank'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Michael Fairbank', '2016-10-08 10:25:46', '2016-10-08 10:25:46')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (704, 262, 1, '2016-10-08 10:25:46', '2016-10-08 10:25:46')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.5ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Diego Pérez-Liébana'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35m (0.2ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (108, 262, 2, '2016-10-08 10:25:46', '2016-10-08 10:25:46')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.3ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Simon M. Lucas'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35m (0.1ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (109, 262, 3, '2016-10-08 10:25:46', '2016-10-08 10:25:46')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.5ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Latent Variable Discovery Using Dependency Patterns'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Latent Variable Discovery Using Dependency Patterns', 'The causal discovery of Bayesian networks is an active and important research area, and it is based upon searching the space of causal models for those which can best explain a pattern of probabilistic dependencies shown in the data. However, some of those dependencies are generated by causal structures involving variables which have not been measured, i.e., latent variables. Some such patterns of dependency \"reveal\" themselves, in that no model based solely upon the observed variables can explain them as well as a model using a latent variable. That is what latent variable discovery is based upon. Here we did a search for finding them systematically, so that they may be applied in latent variable discovery in a more rigorous fashion.', 'cs.AI', '2016-07-22T09:48:25Z', 'http://arxiv.org/abs/1607.06617v1', '2016-10-08 10:25:46', '2016-10-08 10:25:46')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (0.5ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 263
  [1m[36mAuthor Load (0.5ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Xuhui Zhang'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Xuhui Zhang', '2016-10-08 10:25:46', '2016-10-08 10:25:46')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (705, 263, 0, '2016-10-08 10:25:46', '2016-10-08 10:25:46')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.6ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Kevin B. Korb'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Kevin B. Korb', '2016-10-08 10:25:46', '2016-10-08 10:25:46')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (706, 263, 1, '2016-10-08 10:25:46', '2016-10-08 10:25:46')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (0.7ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Ann E. Nicholson'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Ann E. Nicholson', '2016-10-08 10:25:46', '2016-10-08 10:25:46')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (707, 263, 2, '2016-10-08 10:25:46', '2016-10-08 10:25:46')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.5ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Steven Mascaro'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Steven Mascaro', '2016-10-08 10:25:46', '2016-10-08 10:25:46')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (708, 263, 3, '2016-10-08 10:25:46', '2016-10-08 10:25:46')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPaper Load (0.5ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Classification of Alzheimer\'s Disease Structural MRI Data by Deep Learning Convolutional Neural Networks'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Classification of Alzheimer\'s Disease Structural MRI Data by Deep Learning Convolutional Neural Networks', 'Recently, machine learning techniques especially predictive modeling and pattern recognition in biomedical sciences from drug delivery system to medical imaging has become one of the important methods which are assisting researchers to have deeper understanding of entire issue and to solve complex medical problems. Deep learning is a powerful machine learning algorithm in classification while extracting low to high-level features. In this paper, we used convolutional neural network to classify Alzheimer\'s brain from normal healthy brain. The importance of classifying this kind of medical data is to potentially develop a predict model or system in order to recognize the type disease from normal subjects or to estimate the stage of the disease. Classification of clinical data such as Alzheimer\'s disease has been always challenging and most problematic part has been always selecting the most discriminative features. Using Convolutional Neural Network (CNN) and the famous architecture LeNet-5, we successfully classified structural MRI data of Alzheimer\'s subjects from normal controls where the accuracy of test data on trained data reached 98.84%. This experiment suggests us the shift and scale invariant features extracted by CNN followed by deep learning classification is most powerful method to distinguish clinical data from healthy data in fMRI. This approach also enables us to expand our methodology to predict more complicated systems.', 'cs.CV', '2016-07-22T07:48:18Z', 'http://arxiv.org/abs/1607.06583v1', '2016-10-08 10:25:46', '2016-10-08 10:25:46')[0m
  [1m[35m (2.9ms)[0m  COMMIT
  [1m[36mPublish Load (0.8ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 264[0m
  [1m[35mAuthor Load (0.7ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Saman Sarraf'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Saman Sarraf', '2016-10-08 10:25:46', '2016-10-08 10:25:46')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (709, 264, 0, '2016-10-08 10:25:46', '2016-10-08 10:25:46')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (0.7ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Ghassem Tofighi'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Ghassem Tofighi', '2016-10-08 10:25:46', '2016-10-08 10:25:46')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (710, 264, 1, '2016-10-08 10:25:46', '2016-10-08 10:25:46')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.5ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Automated Prediction of Temporal Relations'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Automated Prediction of Temporal Relations', 'Background: There has been growing research interest in automated answering of questions or generation of summary of free form text such as news article. In order to implement this task, the computer should be able to identify the sequence of events, duration of events, time at which event occurred and the relationship type between event pairs, time pairs or event-time pairs. Specific Problem: It is important to accurately identify the relationship type between combinations of event and time before the temporal ordering of events can be defined. The machine learning approach taken in Mani et. al (2006) provides an accuracy of only 62.5 on the baseline data from TimeBank. The researchers used maximum entropy classifier in their methodology. TimeML uses the TLINK annotation to tag a relationship type between events and time. The time complexity is quadratic when it comes to tagging documents with TLINK using human annotation. This research proposes using decision tree and parsing to improve the relationship type tagging. This research attempts to solve the gaps in human annotation by automating the task of relationship type tagging in an attempt to improve the accuracy of event and time relationship in annotated documents. Scope information: The documents from the domain of news will be used. The tagging will be performed within the same document and not across documents. The relationship types will be identified only for a pair of event and time and not a chain of events. The research focuses on documents tagged using the TimeML specification which contains tags such as EVENT, TLINK, and TIMEX. Each tag has attributes such as identifier, relation, POS, time etc.', 'cs.CL', '2016-07-22T05:38:37Z', 'http://arxiv.org/abs/1607.06560v1', '2016-10-08 10:25:46', '2016-10-08 10:25:46')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (0.7ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 265
  [1m[36mAuthor Load (0.5ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Amol S Patwardhan'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Amol S Patwardhan', '2016-10-08 10:25:46', '2016-10-08 10:25:46')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (711, 265, 0, '2016-10-08 10:25:46', '2016-10-08 10:25:46')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.8ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Jacob Badeaux'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Jacob Badeaux', '2016-10-08 10:25:46', '2016-10-08 10:25:46')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (712, 265, 1, '2016-10-08 10:25:46', '2016-10-08 10:25:46')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (0.7ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = ' Siavash'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES (' Siavash', '2016-10-08 10:25:46', '2016-10-08 10:25:46')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (713, 265, 2, '2016-10-08 10:25:46', '2016-10-08 10:25:46')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.6ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Gerald M Knapp'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Gerald M Knapp', '2016-10-08 10:25:46', '2016-10-08 10:25:46')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (714, 265, 3, '2016-10-08 10:25:46', '2016-10-08 10:25:46')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (0.5ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Novel Word Embedding and Translation-based Language Modeling for Extractive Speech Summarization'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.4ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Novel Word Embedding and Translation-based Language Modeling for Extractive Speech Summarization', 'Word embedding methods revolve around learning continuous distributed vector representations of words with neural networks, which can capture semantic and/or syntactic cues, and in turn be used to induce similarity measures among words, sentences and documents in context. Celebrated methods can be categorized as prediction-based and count-based methods according to the training objectives and model architectures. Their pros and cons have been extensively analyzed and evaluated in recent studies, but there is relatively less work continuing the line of research to develop an enhanced learning method that brings together the advantages of the two model families. In addition, the interpretation of the learned word representations still remains somewhat opaque. Motivated by the observations and considering the pressing need, this paper presents a novel method for learning the word representations, which not only inherits the advantages of classic word embedding methods but also offers a clearer and more rigorous interpretation of the learned word representations. Built upon the proposed word embedding method, we further formulate a translation-based language modeling framework for the extractive speech summarization task. A series of empirical evaluations demonstrate the effectiveness of the proposed word representation learning and language modeling techniques in extractive speech summarization.', 'cs.CL', '2016-07-22T00:20:09Z', 'http://arxiv.org/abs/1607.06532v1', '2016-10-08 10:25:46', '2016-10-08 10:25:46')[0m
  [1m[35m (3.0ms)[0m  COMMIT
  [1m[36mPublish Load (0.9ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 266[0m
  [1m[35mAuthor Load (0.8ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Kuan-Yu Chen'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Kuan-Yu Chen', '2016-10-08 10:25:46', '2016-10-08 10:25:46')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (715, 266, 0, '2016-10-08 10:25:46', '2016-10-08 10:25:46')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (0.6ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Shih-Hung Liu'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Shih-Hung Liu', '2016-10-08 10:25:46', '2016-10-08 10:25:46')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (716, 266, 1, '2016-10-08 10:25:46', '2016-10-08 10:25:46')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.6ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Berlin Chen'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Berlin Chen', '2016-10-08 10:25:46', '2016-10-08 10:25:46')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (717, 266, 2, '2016-10-08 10:25:46', '2016-10-08 10:25:46')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.6ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Hsin-Min Wang'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Hsin-Min Wang', '2016-10-08 10:25:46', '2016-10-08 10:25:46')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (718, 266, 3, '2016-10-08 10:25:46', '2016-10-08 10:25:46')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.8ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Hsin-Hsi Chen'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Hsin-Hsi Chen', '2016-10-08 10:25:46', '2016-10-08 10:25:46')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (719, 266, 4, '2016-10-08 10:25:46', '2016-10-08 10:25:46')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (0.5ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Man is to Computer Programmer as Woman is to Homemaker? Debiasing Word Embeddings'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Man is to Computer Programmer as Woman is to Homemaker? Debiasing Word Embeddings', 'The blind application of machine learning runs the risk of amplifying biases present in data. Such a danger is facing us with word embedding, a popular framework to represent text data as vectors which has been used in many machine learning and natural language processing tasks. We show that even word embeddings trained on Google News articles exhibit female/male gender stereotypes to a disturbing extent. This raises concerns because their widespread use, as we describe, often tends to amplify these biases. Geometrically, gender bias is first shown to be captured by a direction in the word embedding. Second, gender neutral words are shown to be linearly separable from gender definition words in the word embedding. Using these properties, we provide a methodology for modifying an embedding to remove gender stereotypes, such as the association between between the words receptionist and female, while maintaining desired associations such as between the words queen and female. We define metrics to quantify both direct and indirect gender biases in embeddings, and develop algorithms to \"debias\" the embedding. Using crowd-worker evaluation as well as standard benchmarks, we empirically demonstrate that our algorithms significantly reduce gender bias in embeddings while preserving the its useful properties such as the ability to cluster related concepts and to solve analogy tasks. The resulting embeddings can be used in applications without amplifying gender bias.', 'cs.CL', '2016-07-21T22:26:20Z', 'http://arxiv.org/abs/1607.06520v1', '2016-10-08 10:25:46', '2016-10-08 10:25:46')[0m
  [1m[35m (2.9ms)[0m  COMMIT
  [1m[36mPublish Load (0.9ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 267[0m
  [1m[35mAuthor Load (0.8ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Tolga Bolukbasi'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Tolga Bolukbasi', '2016-10-08 10:25:46', '2016-10-08 10:25:46')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (720, 267, 0, '2016-10-08 10:25:46', '2016-10-08 10:25:46')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (0.7ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Kai-Wei Chang'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Kai-Wei Chang', '2016-10-08 10:25:46', '2016-10-08 10:25:46')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (721, 267, 1, '2016-10-08 10:25:46', '2016-10-08 10:25:46')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.7ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'James Zou'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('James Zou', '2016-10-08 10:25:46', '2016-10-08 10:25:46')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (722, 267, 2, '2016-10-08 10:25:46', '2016-10-08 10:25:46')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (0.7ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Venkatesh Saligrama'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Venkatesh Saligrama', '2016-10-08 10:25:46', '2016-10-08 10:25:46')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (723, 267, 3, '2016-10-08 10:25:46', '2016-10-08 10:25:46')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.8ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Adam Kalai'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Adam Kalai', '2016-10-08 10:25:46', '2016-10-08 10:25:46')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (724, 267, 4, '2016-10-08 10:25:46', '2016-10-08 10:25:46')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPaper Load (0.5ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Dataset and Neural Recurrent Sequence Labeling Model for Open-Domain Factoid Question Answering'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Dataset and Neural Recurrent Sequence Labeling Model for Open-Domain Factoid Question Answering', 'While question answering (QA) with neural network, i.e. neural QA, has achieved promising results in recent years, lacking of large scale real-word QA dataset is still a challenge for developing and evaluating neural QA system. To alleviate this problem, we propose a large scale human annotated real-world QA dataset WebQA with more than 42k questions and 556k evidences. As existing neural QA methods resolve QA either as sequence generation or classification/ranking problem, they face challenges of expensive softmax computation, unseen answers handling or separate candidate answer generation component. In this work, we cast neural QA as a sequence labeling problem and propose an end-to-end sequence labeling model, which overcomes all the above challenges. Experimental results on WebQA show that our model outperforms the baselines significantly with an F1 score of 74.69% with word-based input, and the performance drops only 3.72 F1 points with more challenging character-based input.', 'cs.CL', '2016-07-21T11:40:50Z', 'http://arxiv.org/abs/1607.06275v2', '2016-10-08 10:25:46', '2016-10-08 10:25:46')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPublish Load (0.8ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 268[0m
  [1m[35mAuthor Load (0.6ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Peng Li'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Peng Li', '2016-10-08 10:25:46', '2016-10-08 10:25:46')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (725, 268, 0, '2016-10-08 10:25:46', '2016-10-08 10:25:46')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (0.7ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Wei Li'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Wei Li', '2016-10-08 10:25:46', '2016-10-08 10:25:46')[0m
  [1m[35m (1.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.4ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (726, 268, 1, '2016-10-08 10:25:46', '2016-10-08 10:25:46')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.7ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Zhengyan He'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Zhengyan He', '2016-10-08 10:25:46', '2016-10-08 10:25:46')
  [1m[36m (0.6ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (727, 268, 2, '2016-10-08 10:25:46', '2016-10-08 10:25:46')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (0.8ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Xuguang Wang'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Xuguang Wang', '2016-10-08 10:25:46', '2016-10-08 10:25:46')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (728, 268, 3, '2016-10-08 10:25:46', '2016-10-08 10:25:46')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.7ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Ying Cao'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Ying Cao', '2016-10-08 10:25:46', '2016-10-08 10:25:46')
  [1m[36m (3.0ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (729, 268, 4, '2016-10-08 10:25:46', '2016-10-08 10:25:46')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (0.7ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Jie Zhou'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Jie Zhou', '2016-10-08 10:25:46', '2016-10-08 10:25:46')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (730, 268, 5, '2016-10-08 10:25:46', '2016-10-08 10:25:46')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.7ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Wei Xu'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Wei Xu', '2016-10-08 10:25:46', '2016-10-08 10:25:46')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (731, 268, 6, '2016-10-08 10:25:46', '2016-10-08 10:25:46')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (0.5ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Left/Right Hand Segmentation in Egocentric Videos'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Left/Right Hand Segmentation in Egocentric Videos', 'Wearable cameras allow people to record their daily activities from a user-centered (First Person Vision) perspective. Due to their favorable location, wearable cameras frequently capture the hands of the user, and may thus represent a promising user-machine interaction tool for different applications. Existent First Person Vision methods handle hand segmentation as a background-foreground problem, ignoring two important facts: i) hands are not a single \"skin-like\" moving element, but a pair of interacting cooperative entities, ii) close hand interactions may lead to hand-to-hand occlusions and, as a consequence, create a single hand-like segment. These facts complicate a proper understanding of hand movements and interactions. Our approach extends traditional background-foreground strategies, by including a hand-identification step (left-right) based on a Maxwell distribution of angle and position. Hand-to-hand occlusions are addressed by exploiting temporal superpixels. The experimental results show that, in addition to a reliable left/right hand-segmentation, our approach considerably improves the traditional background-foreground hand-segmentation.', 'cs.HC', '2016-07-21T11:06:05Z', 'http://dx.doi.org/10.1016/j.cviu.2016.09.005', '2016-10-08 10:25:46', '2016-10-08 10:25:46')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPublish Load (0.7ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 269[0m
  [1m[35mAuthor Load (0.6ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Alejandro Betancourt'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Alejandro Betancourt', '2016-10-08 10:25:46', '2016-10-08 10:25:46')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (732, 269, 0, '2016-10-08 10:25:46', '2016-10-08 10:25:46')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.7ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Pietro Morerio'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Pietro Morerio', '2016-10-08 10:25:46', '2016-10-08 10:25:46')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (733, 269, 1, '2016-10-08 10:25:46', '2016-10-08 10:25:46')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.5ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Emilia Barakova'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Emilia Barakova', '2016-10-08 10:25:46', '2016-10-08 10:25:46')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (734, 269, 2, '2016-10-08 10:25:46', '2016-10-08 10:25:46')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.7ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Lucio Marcenaro'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Lucio Marcenaro', '2016-10-08 10:25:46', '2016-10-08 10:25:46')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (735, 269, 3, '2016-10-08 10:25:46', '2016-10-08 10:25:46')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.6ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Matthias Rauterberg'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Matthias Rauterberg', '2016-10-08 10:25:46', '2016-10-08 10:25:46')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (736, 269, 4, '2016-10-08 10:25:46', '2016-10-08 10:25:46')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.5ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Carlo Regazzoni'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Carlo Regazzoni', '2016-10-08 10:25:46', '2016-10-08 10:25:46')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (737, 269, 5, '2016-10-08 10:25:46', '2016-10-08 10:25:46')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.5ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Supervised Adverse Drug Reaction Signalling Framework Imitating Bradford Hill\'s Causality Considerations'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Supervised Adverse Drug Reaction Signalling Framework Imitating Bradford Hill\'s Causality Considerations', 'Big longitudinal observational medical data potentially hold a wealth of information and have been recognised as potential sources for gaining new drug safety knowledge. Unfortunately there are many complexities and underlying issues when analysing longitudinal observational data. Due to these complexities, existing methods for large-scale detection of negative side effects using observational data all tend to have issues distinguishing between association and causality. New methods that can better discriminate causal and non-causal relationships need to be developed to fully utilise the data. In this paper we propose using a set of causality considerations developed by the epidemiologist Bradford Hill as a basis for engineering features that enable the application of supervised learning for the problem of detecting negative side effects. The Bradford Hill considerations look at various perspectives of a drug and outcome relationship to determine whether it shows causal traits. We taught a classifier to find patterns within these perspectives and it learned to discriminate between association and causality. The novelty of this research is the combination of supervised learning and Bradford Hill\'s causality considerations to automate the Bradford Hill\'s causality assessment. We evaluated the framework on a drug safety gold standard know as the observational medical outcomes partnership\'s nonspecified association reference set. The methodology obtained excellent discriminate ability with area under the curves ranging between 0.792-0.940 (existing method optimal: 0.73) and a mean average precision of 0.640 (existing method optimal: 0.141). The proposed features can be calculated efficiently and be readily updated, making the framework suitable for big observational data.', 'cs.AI', '2016-07-21T05:31:04Z', 'http://arxiv.org/abs/1607.06198v1', '2016-10-08 10:25:46', '2016-10-08 10:25:46')
  [1m[36m (2.9ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (0.9ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 270
  [1m[36mAuthor Load (0.8ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Jenna Marie Reps'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Jenna Marie Reps', '2016-10-08 10:25:46', '2016-10-08 10:25:46')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (738, 270, 0, '2016-10-08 10:25:46', '2016-10-08 10:25:46')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.4ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Jonathan M. Garibaldi'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35m (0.2ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (224, 270, 1, '2016-10-08 10:25:46', '2016-10-08 10:25:46')
  [1m[36m (0.3ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.4ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Uwe Aickelin'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35m (0.2ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (97, 270, 2, '2016-10-08 10:25:46', '2016-10-08 10:25:46')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.7ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Jack E. Gibson'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Jack E. Gibson', '2016-10-08 10:25:46', '2016-10-08 10:25:46')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (739, 270, 3, '2016-10-08 10:25:46', '2016-10-08 10:25:46')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.7ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Richard B. Hubbard'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Richard B. Hubbard', '2016-10-08 10:25:46', '2016-10-08 10:25:46')[0m
  [1m[35m (0.6ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (740, 270, 4, '2016-10-08 10:25:46', '2016-10-08 10:25:46')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.5ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Exploring Differences in Interpretation of Words Essential in Medical Expert-Patient Communication'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Exploring Differences in Interpretation of Words Essential in Medical Expert-Patient Communication', 'In the context of cancer treatment and surgery, quality of life assessment is a crucial part of determining treatment success and viability. In order to assess it, patients completed questionnaires which employ words to capture aspects of patients well-being are the norm. As the results of these questionnaires are often used to assess patient progress and to determine future treatment options, it is important to establish that the words used are interpreted in the same way by both patients and medical professionals. In this paper, we capture and model patients perceptions and associated uncertainty about the words used to describe the level of their physical function used in the highly common (in Sarcoma Services) Toronto Extremity Salvage Score (TESS) questionnaire. The paper provides detail about the interval-valued data capture as well as the subsequent modelling of the data using fuzzy sets. Based on an initial sample of participants, we use Jaccard similarity on the resulting words models to show that there may be considerable differences in the interpretation of commonly used questionnaire terms, thus presenting a very real risk of miscommunication between patients and medical professionals as well as within the group of medical professionals.', 'cs.AI', '2016-07-21T04:40:14Z', 'http://arxiv.org/abs/1607.06187v1', '2016-10-08 10:25:46', '2016-10-08 10:25:46')
  [1m[36m (3.0ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (0.9ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 271
  [1m[36mAuthor Load (0.8ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Javier Navarro'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Javier Navarro', '2016-10-08 10:25:46', '2016-10-08 10:25:46')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (741, 271, 0, '2016-10-08 10:25:46', '2016-10-08 10:25:46')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.4ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Christian Wagner'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35m (0.2ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (98, 271, 1, '2016-10-08 10:25:46', '2016-10-08 10:25:46')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.3ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Uwe Aickelin'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35m (0.1ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (97, 271, 2, '2016-10-08 10:25:46', '2016-10-08 10:25:46')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.8ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Lynsey Green'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Lynsey Green', '2016-10-08 10:25:46', '2016-10-08 10:25:46')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (742, 271, 3, '2016-10-08 10:25:46', '2016-10-08 10:25:46')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (0.7ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Robert Ashford'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Robert Ashford', '2016-10-08 10:25:46', '2016-10-08 10:25:46')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (743, 271, 4, '2016-10-08 10:25:46', '2016-10-08 10:25:46')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.5ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Applying Interval Type-2 Fuzzy Rule Based Classifiers Through a Cluster-Based Class Representation'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.6ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Applying Interval Type-2 Fuzzy Rule Based Classifiers Through a Cluster-Based Class Representation', 'Fuzzy Rule-Based Classification Systems (FRBCSs) have the potential to provide so-called interpretable classifiers, i.e. classifiers which can be introspective, understood, validated and augmented by human experts by relying on fuzzy-set based rules. This paper builds on prior work for interval type-2 fuzzy set based FRBCs where the fuzzy sets and rules of the classifier are generated using an initial clustering stage. By introducing Subtractive Clustering in order to identify multiple cluster prototypes, the proposed approach has the potential to deliver improved classification performance while maintaining good interpretability, i.e. without resulting in an excessive number of rules. The paper provides a detailed overview of the proposed FRBC framework, followed by a series of exploratory experiments on both linearly and non-linearly separable datasets, comparing results to existing rule-based and SVM approaches. Overall, initial results indicate that the approach enables comparable classification performance to non rule-based classifiers such as SVM, while often achieving this with a very small number of rules.', 'cs.AI', '2016-07-21T04:36:23Z', 'http://arxiv.org/abs/1607.06186v1', '2016-10-08 10:25:46', '2016-10-08 10:25:46')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (0.5ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 272
  [1m[36mAuthor Load (0.5ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Javier Navarro'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36m (0.1ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (741, 272, 0, '2016-10-08 10:25:46', '2016-10-08 10:25:46')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.3ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Christian Wagner'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36m (0.1ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (98, 272, 1, '2016-10-08 10:25:46', '2016-10-08 10:25:46')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (0.4ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Uwe Aickelin'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36m (0.2ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (97, 272, 2, '2016-10-08 10:25:46', '2016-10-08 10:25:46')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (0.5ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Constructing a Natural Language Inference Dataset using Generative Neural Networks'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Constructing a Natural Language Inference Dataset using Generative Neural Networks', 'Natural Language Inference is an important task for Natural Language Understanding. It is concerned with classifying the logical relation between two sentences. In this paper, we propose several text generative neural networks for constructing Natural Language Inference datasets suitable for training classifiers. To evaluate the models, we propose a new metric - the accuracy of the classifier trained on the generated dataset. The accuracy obtained with our best generative model is only 2.7% lower than the accuracy of the classifier trained on the original, manually constructed dataset. The model learns a mapping embedding for each training example. By comparing various metrics we show that datasets that obtain higher ROUGE or METEOR scores do not necessarily yield higher classification accuracies. We also provide analysis of what are the characteristics of a good dataset including the distinguishability of the generated datasets from the original one.', 'cs.AI', '2016-07-20T16:59:21Z', 'http://arxiv.org/abs/1607.06025v1', '2016-10-08 10:25:46', '2016-10-08 10:25:46')[0m
  [1m[35m (3.0ms)[0m  COMMIT
  [1m[36mPublish Load (0.9ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 273[0m
  [1m[35mAuthor Load (0.8ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Janez Starc'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Janez Starc', '2016-10-08 10:25:46', '2016-10-08 10:25:46')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (744, 273, 0, '2016-10-08 10:25:46', '2016-10-08 10:25:46')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (0.9ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Dunja Mladenić'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Dunja Mladenić', '2016-10-08 10:25:46', '2016-10-08 10:25:46')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (745, 273, 1, '2016-10-08 10:25:46', '2016-10-08 10:25:46')
  [1m[36m (1.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.6ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Robust Natural Language Processing - Combining Reasoning, Cognitive Semantics and Construction Grammar for Spatial Language'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Robust Natural Language Processing - Combining Reasoning, Cognitive Semantics and Construction Grammar for Spatial Language', 'We present a system for generating and understanding of dynamic and static spatial relations in robotic interaction setups. Robots describe an environment of moving blocks using English phrases that include spatial relations such as \"across\" and \"in front of\". We evaluate the system in robot-robot interactions and show that the system can robustly deal with visual perception errors, language omissions and ungrammatical utterances.', 'cs.AI', '2016-07-20T14:15:24Z', 'http://arxiv.org/abs/1607.05968v1', '2016-10-08 10:25:46', '2016-10-08 10:25:46')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (0.6ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 274
  [1m[36mAuthor Load (0.6ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Michael Spranger'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Michael Spranger', '2016-10-08 10:25:46', '2016-10-08 10:25:46')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (746, 274, 0, '2016-10-08 10:25:46', '2016-10-08 10:25:46')
  [1m[36m (0.3ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.4ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Jakob Suchan'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35m (0.1ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (451, 274, 1, '2016-10-08 10:25:46', '2016-10-08 10:25:46')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.7ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Mehul Bhatt'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35m (0.1ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (452, 274, 2, '2016-10-08 10:25:46', '2016-10-08 10:25:46')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.5ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Optimising Rule-Based Classification in Temporal Data'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.4ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Optimising Rule-Based Classification in Temporal Data', 'This study optimises manually derived rule-based expert system classification of objects according to changes in their properties over time. One of the key challenges that this study tries to address is how to classify objects that exhibit changes in their behaviour over time, for example how to classify companies\' share price stability over a period of time or how to classify students\' preferences for subjects while they are progressing through school. A specific case the paper considers is the strategy of players in public goods games (as common in economics) across multiple consecutive games. Initial classification starts from expert definitions specifying class allocation for players based on aggregated attributes of the temporal data. Based on these initial classifications, the optimisation process tries to find an improved classifier which produces the best possible compact classes of objects (players) for every time point in the temporal data. The compactness of the classes is measured by a cost function based on internal cluster indices like the Dunn Index, distance measures like Euclidean distance or statistically derived measures like standard deviation. The paper discusses the approach in the context of incorporating changing player strategies in the aforementioned public good games, where common classification approaches so far do not consider such changes in behaviour resulting from learning or in-game experience. By using the proposed process for classifying temporal data and the actual players\' contribution during the games, we aim to produce a more refined classification which in turn may inform the interpretation of public goods game data.', 'cs.AI', '2016-07-20T11:02:16Z', 'http://arxiv.org/abs/1607.05913v1', '2016-10-08 10:25:46', '2016-10-08 10:25:46')
  [1m[36m (6.0ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (0.9ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 275
  [1m[36mAuthor Load (0.4ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Polla Fattah'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36m (0.2ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (96, 275, 0, '2016-10-08 10:25:46', '2016-10-08 10:25:46')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (0.4ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Uwe Aickelin'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36m (0.2ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (97, 275, 1, '2016-10-08 10:25:46', '2016-10-08 10:25:46')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (0.5ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Christian Wagner'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36m (0.2ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (98, 275, 2, '2016-10-08 10:25:46', '2016-10-08 10:25:46')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (0.5ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Simulating user learning in authoritative technology adoption: An agent based model for council-led smart meter deployment planning in the UK'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Simulating user learning in authoritative technology adoption: An agent based model for council-led smart meter deployment planning in the UK', 'How do technology users effectively transit from having zero knowledge about a technology to making the best use of it after an authoritative technology adoption? This post-adoption user learning has received little research attention in technology management literature. In this paper we investigate user learning in authoritative technology adoption by developing an agent-based model using the case of council-led smart meter deployment in the UK City of Leeds. Energy consumers gain experience of using smart meters based on the learning curve in behavioural learning. With the agent-based model we carry out experiments to validate the model and test different energy interventions that local authorities can use to facilitate energy consumers\' learning and maintain their continuous use of the technology. Our results show that the easier energy consumers become experienced, the more energy-efficient they are and the more energy saving they can achieve; encouraging energy consumers\' contacts via various informational means can facilitate their learning; and developing and maintaining their positive attitude toward smart metering can enable them to use the technology continuously. Contributions and energy policy/intervention implications are discussed in this paper.', 'cs.AI', '2016-07-20T10:57:14Z', 'http://arxiv.org/abs/1607.05912v1', '2016-10-08 10:25:46', '2016-10-08 10:25:46')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPublish Load (0.8ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 276[0m
  [1m[35mAuthor Load (0.7ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Tao Zhang'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Tao Zhang', '2016-10-08 10:25:46', '2016-10-08 10:25:46')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (747, 276, 0, '2016-10-08 10:25:46', '2016-10-08 10:25:46')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.5ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Peer-Olaf Siebers'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Peer-Olaf Siebers', '2016-10-08 10:25:46', '2016-10-08 10:25:46')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (748, 276, 1, '2016-10-08 10:25:46', '2016-10-08 10:25:46')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.3ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Uwe Aickelin'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35m (0.1ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (97, 276, 2, '2016-10-08 10:25:46', '2016-10-08 10:25:46')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.5ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Supervised Anomaly Detection in Uncertain Pseudoperiodic Data Streams'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Supervised Anomaly Detection in Uncertain Pseudoperiodic Data Streams', 'Uncertain data streams have been widely generated in many Web applications. The uncertainty in data streams makes anomaly detection from sensor data streams far more challenging. In this paper, we present a novel framework that supports anomaly detection in uncertain data streams. The proposed framework adopts an efficient uncertainty pre-processing procedure to identify and eliminate uncertainties in data streams. Based on the corrected data streams, we develop effective period pattern recognition and feature extraction techniques to improve the computational efficiency. We use classification methods for anomaly detection in the corrected data stream. We also empirically show that the proposed approach shows a high accuracy of anomaly detection on a number of real datasets.', 'cs.AI', '2016-07-20T10:52:17Z', 'http://arxiv.org/abs/1607.05909v1', '2016-10-08 10:25:46', '2016-10-08 10:25:46')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (0.5ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 277
  [1m[36mAuthor Load (0.5ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Jiangang Ma'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Jiangang Ma', '2016-10-08 10:25:46', '2016-10-08 10:25:46')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (749, 277, 0, '2016-10-08 10:25:46', '2016-10-08 10:25:46')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.7ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Le Sun'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Le Sun', '2016-10-08 10:25:46', '2016-10-08 10:25:46')
  [1m[36m (4.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.8ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (750, 277, 1, '2016-10-08 10:25:46', '2016-10-08 10:25:46')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (0.9ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Hua Wang'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Hua Wang', '2016-10-08 10:25:46', '2016-10-08 10:25:46')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (751, 277, 2, '2016-10-08 10:25:46', '2016-10-08 10:25:46')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.8ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Yanchun Zhang'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Yanchun Zhang', '2016-10-08 10:25:46', '2016-10-08 10:25:46')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (752, 277, 3, '2016-10-08 10:25:46', '2016-10-08 10:25:46')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.3ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Uwe Aickelin'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36m (0.1ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (97, 277, 4, '2016-10-08 10:25:46', '2016-10-08 10:25:46')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPaper Load (0.5ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Refining adverse drug reaction signals by incorporating interaction variables identified using emergent pattern mining'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Refining adverse drug reaction signals by incorporating interaction variables identified using emergent pattern mining', 'Purpose: To develop a framework for identifying and incorporating candidate confounding interaction terms into a regularised cox regression analysis to refine adverse drug reaction signals obtained via longitudinal observational data. Methods: We considered six drug families that are commonly associated with myocardial infarction in observational healthcare data, but where the causal relationship ground truth is known (adverse drug reaction or not). We applied emergent pattern mining to find itemsets of drugs and medical events that are associated with the development of myocardial infarction. These are the candidate confounding interaction terms. We then implemented a cohort study design using regularised cox regression that incorporated and accounted for the candidate confounding interaction terms. Results The methodology was able to account for signals generated due to confounding and a cox regression with elastic net regularisation correctly ranked the drug families known to be true adverse drug reactions above those.', 'cs.AI', '2016-07-20T10:45:57Z', 'http://arxiv.org/abs/1607.05906v1', '2016-10-08 10:25:46', '2016-10-08 10:25:46')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPublish Load (0.7ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 278[0m
  [1m[35mAuthor Load (0.5ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Jenna M. Reps'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Jenna M. Reps', '2016-10-08 10:25:46', '2016-10-08 10:25:46')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (753, 278, 0, '2016-10-08 10:25:46', '2016-10-08 10:25:46')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.3ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Uwe Aickelin'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36m (0.1ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (97, 278, 1, '2016-10-08 10:25:46', '2016-10-08 10:25:46')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (0.8ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Richard B. Hubbard'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36m (0.1ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (740, 278, 2, '2016-10-08 10:25:46', '2016-10-08 10:25:46')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (0.5ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Juxtaposition of System Dynamics and Agent-based Simulation for a Case Study in Immunosenescence'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Juxtaposition of System Dynamics and Agent-based Simulation for a Case Study in Immunosenescence', 'Advances in healthcare and in the quality of life significantly increase human life expectancy. With the ageing of populations, new un-faced challenges are brought to science. The human body is naturally selected to be well-functioning until the age of reproduction to keep the species alive. However, as the lifespan extends, unseen problems due to the body deterioration emerge. There are several age-related diseases with no appropriate treatment; therefore, the complex ageing phenomena needs further understanding. Immunosenescence, the ageing of the immune system, is highly correlated to the negative effects of ageing, such as the increase of auto-inflammatory diseases and decrease in responsiveness to new diseases. Besides clinical and mathematical tools, we believe there is opportunity to further exploit simulation tools to understand immunosenescence. Compared to real-world experimentation, benefits include time and cost effectiveness due to the laborious, resource-intensiveness of the biological environment and the possibility of conducting experiments without ethic restrictions. Contrasted with mathematical models, simulation modelling is more suitable for representing complex systems and emergence. In addition, there is the belief that simulation models are easier to communicate in interdisciplinary contexts. Our work investigates the usefulness of simulations to understand immunosenescence by employing two different simulation methods, agent-based and system dynamics simulation, to a case study of immune cells depletion with age.', 'cs.AI', '2016-07-20T09:47:31Z', 'http://arxiv.org/abs/1607.05888v1', '2016-10-08 10:25:46', '2016-10-08 10:25:46')[0m
  [1m[35m (2.9ms)[0m  COMMIT
  [1m[36mPublish Load (0.8ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 279[0m
  [1m[35mAuthor Load (0.6ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Grazziela P. Figueredo'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Grazziela P. Figueredo', '2016-10-08 10:25:46', '2016-10-08 10:25:46')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (754, 279, 0, '2016-10-08 10:25:46', '2016-10-08 10:25:46')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.6ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Peer-Olaf Siebers'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36m (0.1ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (748, 279, 1, '2016-10-08 10:25:46', '2016-10-08 10:25:46')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (0.5ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Uwe Aickelin'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36m (0.1ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (97, 279, 2, '2016-10-08 10:25:46', '2016-10-08 10:25:46')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.6ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Amanda Whitbrook'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Amanda Whitbrook', '2016-10-08 10:25:46', '2016-10-08 10:25:46')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (755, 279, 3, '2016-10-08 10:25:46', '2016-10-08 10:25:46')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.5ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Jonathan M. Garibaldi'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35m (0.2ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.4ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (224, 279, 4, '2016-10-08 10:25:46', '2016-10-08 10:25:46')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.6ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Indebted households profiling: a knowledge discovery from database approach'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Indebted households profiling: a knowledge discovery from database approach', 'A major challenge in consumer credit risk portfolio management is to classify households according to their risk profile. In order to build such risk profiles it is necessary to employ an approach that analyses data systematically in order to detect important relationships, interactions, dependencies and associations amongst the available continuous and categorical variables altogether and accurately generate profiles of most interesting household segments according to their credit risk. The objective of this work is to employ a knowledge discovery from database process to identify groups of indebted households and describe their profiles using a database collected by the Consumer Credit Counselling Service (CCCS) in the UK. Employing a framework that allows the usage of both categorical and continuous data altogether to find hidden structures in unlabelled data it was established the ideal number of clusters and such clusters were described in order to identify the households who exhibit a high propensity of excessive debt levels.', 'cs.AI', '2016-07-20T09:03:17Z', 'http://arxiv.org/abs/1607.05869v1', '2016-10-08 10:25:46', '2016-10-08 10:25:46')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (0.7ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 280
  [1m[36mAuthor Load (0.6ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Rodrigo Scarpel'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Rodrigo Scarpel', '2016-10-08 10:25:46', '2016-10-08 10:25:46')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (756, 280, 0, '2016-10-08 10:25:46', '2016-10-08 10:25:46')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.6ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Alexandros Ladas'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Alexandros Ladas', '2016-10-08 10:25:46', '2016-10-08 10:25:46')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (757, 280, 1, '2016-10-08 10:25:46', '2016-10-08 10:25:46')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.5ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Uwe Aickelin'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36m (0.1ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (97, 280, 2, '2016-10-08 10:25:46', '2016-10-08 10:25:46')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPaper Load (0.5ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Identifying Candidate Risk Factors for Prescription Drug Side Effects using Causal Contrast Set Mining'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Identifying Candidate Risk Factors for Prescription Drug Side Effects using Causal Contrast Set Mining', 'Big longitudinal observational databases present the opportunity to extract new knowledge in a cost effective manner. Unfortunately, the ability of these databases to be used for causal inference is limited due to the passive way in which the data are collected resulting in various forms of bias. In this paper we investigate a method that can overcome these limitations and determine causal contrast set rules efficiently from big data. In particular, we present a new methodology for the purpose of identifying risk factors that increase a patients likelihood of experiencing the known rare side effect of renal failure after ingesting aminosalicylates. The results show that the methodology was able to identify previously researched risk factors such as being prescribed diuretics and highlighted that patients with a higher than average risk of renal failure may be even more susceptible to experiencing it as a side effect after ingesting aminosalicylates.', 'cs.AI', '2016-07-20T07:42:52Z', 'http://arxiv.org/abs/1607.05845v1', '2016-10-08 10:25:46', '2016-10-08 10:25:46')[0m
  [1m[35m (2.9ms)[0m  COMMIT
  [1m[36mPublish Load (0.9ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 281[0m
  [1m[35mAuthor Load (0.8ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Jenna Reps'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Jenna Reps', '2016-10-08 10:25:46', '2016-10-08 10:25:46')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (758, 281, 0, '2016-10-08 10:25:46', '2016-10-08 10:25:46')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.7ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Zhaoyang Guo'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Zhaoyang Guo', '2016-10-08 10:25:46', '2016-10-08 10:25:46')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (759, 281, 1, '2016-10-08 10:25:46', '2016-10-08 10:25:46')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.6ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Haoyue Zhu'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Haoyue Zhu', '2016-10-08 10:25:46', '2016-10-08 10:25:46')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (760, 281, 2, '2016-10-08 10:25:46', '2016-10-08 10:25:46')[0m
  [1m[35m (0.3ms)[0m  COMMIT
  [1m[36mAuthor Load (0.4ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Uwe Aickelin'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36m (0.1ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (97, 281, 3, '2016-10-08 10:25:46', '2016-10-08 10:25:46')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPaper Load (0.5ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Modelling Office Energy Consumption: An Agent Based Approach'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Modelling Office Energy Consumption: An Agent Based Approach', 'In this paper, we develop an agent-based model which integrates four important elements, i.e. organisational energy management policies/regulations, energy management technologies, electric appliances and equipment, and human behaviour, based on a case study, to simulate the energy consumption in office buildings. With the model, we test the effectiveness of different energy management strategies, and solve practical office energy consumption problems. This paper theoretically contributes to an integration of four elements involved in the complex organisational issue of office energy consumption, and practically contributes to an application of agent-based approach for office building energy consumption study.', 'cs.AI', '2016-07-20T07:30:43Z', 'http://arxiv.org/abs/1607.06332v1', '2016-10-08 10:25:46', '2016-10-08 10:25:46')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPublish Load (0.8ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 282[0m
  [1m[35mAuthor Load (0.7ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Tao Zhang'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35m (0.2ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (747, 282, 0, '2016-10-08 10:25:46', '2016-10-08 10:25:46')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.6ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Peer-Olaf Siebers'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35m (0.1ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (748, 282, 1, '2016-10-08 10:25:46', '2016-10-08 10:25:46')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.3ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Uwe Aickelin'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35m (0.2ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (97, 282, 2, '2016-10-08 10:25:46', '2016-10-08 10:25:46')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.5ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'You want to survive the data deluge: Be careful, Computational Intelligence will not serve you as a rescue boat'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('You want to survive the data deluge: Be careful, Computational Intelligence will not serve you as a rescue boat', 'We are at the dawn of a new era, where advances in computer power, broadband communication and digital sensor technologies have led to an unprecedented flood of data inundating our surrounding. It is generally believed that means such as Computational Intelligence will help to outlive these tough times. However, these hopes are improperly high. Computational Intelligence is a surprising composition of two mutually exclusive and contradicting constituents that could be coupled only if you disregard and neglect their controversies: \"Computational\" implies reliance on data processing and \"Intelligence\" implies reliance on information processing. Only those who are indifferent to data-information discrepancy can believe that such a combination can be viable. We do not believe in miracles, so we will try to share with you our reservations.', 'cs.AI', '2016-07-20T03:47:19Z', 'http://arxiv.org/abs/1607.05810v1', '2016-10-08 10:25:46', '2016-10-08 10:25:46')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (0.9ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 283
  [1m[36mAuthor Load (0.8ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Emanuel Diamant'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Emanuel Diamant', '2016-10-08 10:25:46', '2016-10-08 10:25:46')[0m
  [1m[35m (3.0ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (761, 283, 0, '2016-10-08 10:25:46', '2016-10-08 10:25:46')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.6ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Neural Contextual Conversation Learning with Labeled Question-Answering Pairs'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.7ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Neural Contextual Conversation Learning with Labeled Question-Answering Pairs', 'Neural conversational models tend to produce generic or safe responses in different contexts, e.g., reply \\textit{\"Of course\"} to narrative statements or \\textit{\"I don\'t know\"} to questions. In this paper, we propose an end-to-end approach to avoid such problem in neural generative models. Additional memory mechanisms have been introduced to standard sequence-to-sequence (seq2seq) models, so that context can be considered while generating sentences. Three seq2seq models, which memorize a fix-sized contextual vector from hidden input, hidden input/output and a gated contextual attention structure respectively, have been trained and tested on a dataset of labeled question-answering pairs in Chinese. The model with contextual attention outperforms others including the state-of-the-art seq2seq models on perplexity test. The novel contextual model generates diverse and robust responses, and is able to carry out conversations on a wide range of topics appropriately.', 'cs.CL', '2016-07-20T03:25:31Z', 'http://arxiv.org/abs/1607.05809v1', '2016-10-08 10:25:46', '2016-10-08 10:25:46')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (0.7ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 284
  [1m[36mAuthor Load (0.5ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Kun Xiong'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Kun Xiong', '2016-10-08 10:25:46', '2016-10-08 10:25:46')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (762, 284, 0, '2016-10-08 10:25:46', '2016-10-08 10:25:46')
  [1m[36m (0.3ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.7ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Anqi Cui'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Anqi Cui', '2016-10-08 10:25:46', '2016-10-08 10:25:46')
  [1m[36m (2.3ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (763, 284, 1, '2016-10-08 10:25:46', '2016-10-08 10:25:46')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (0.8ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Zefeng Zhang'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Zefeng Zhang', '2016-10-08 10:25:46', '2016-10-08 10:25:46')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (764, 284, 2, '2016-10-08 10:25:46', '2016-10-08 10:25:46')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.8ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Ming Li'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Ming Li', '2016-10-08 10:25:46', '2016-10-08 10:25:46')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (765, 284, 3, '2016-10-08 10:25:46', '2016-10-08 10:25:46')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (0.5ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'On the estimation of stellar parameters with uncertainty prediction from Generative Artificial Neural Networks: application to Gaia RVS simulated spectra'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('On the estimation of stellar parameters with uncertainty prediction from Generative Artificial Neural Networks: application to Gaia RVS simulated spectra', 'Aims. We present an innovative artificial neural network (ANN) architecture, called Generative ANN (GANN), that computes the forward model, that is it learns the function that relates the unknown outputs (stellar atmospheric parameters, in this case) to the given inputs (spectra). Such a model can be integrated in a Bayesian framework to estimate the posterior distribution of the outputs. Methods. The architecture of the GANN follows the same scheme as a normal ANN, but with the inputs and outputs inverted. We train the network with the set of atmospheric parameters (Teff, logg, [Fe/H] and [alpha/Fe]), obtaining the stellar spectra for such inputs. The residuals between the spectra in the grid and the estimated spectra are minimized using a validation dataset to keep solutions as general as possible. Results. The performance of both conventional ANNs and GANNs to estimate the stellar parameters as a function of the star brightness is presented and compared for different Galactic populations. GANNs provide significantly improved parameterizations for early and intermediate spectral types with rich and intermediate metallicities. The behaviour of both algorithms is very similar for our sample of late-type stars, obtaining residuals in the derivation of [Fe/H] and [alpha/Fe] below 0.1dex for stars with Gaia magnitude Grvs<12, which accounts for a number in the order of four million stars to be observed by the Radial Velocity Spectrograph of the Gaia satellite. Conclusions. Uncertainty estimation of computed astrophysical parameters is crucial for the validation of the parameterization itself and for the subsequent exploitation by the astronomical community. GANNs produce not only the parameters for a given spectrum, but a goodness-of-fit between the observed spectrum and the predicted one for a given set of parameters. Moreover, they allow us to obtain the full posterior distribution...', 'astro-ph.IM', '2016-07-19T15:16:56Z', 'http://arxiv.org/abs/1607.05954v1', '2016-10-08 10:25:46', '2016-10-08 10:25:46')[0m
  [1m[35m (2.9ms)[0m  COMMIT
  [1m[36mPublish Load (0.9ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 285[0m
  [1m[35mAuthor Load (0.8ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'C. Dafonte'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('C. Dafonte', '2016-10-08 10:25:46', '2016-10-08 10:25:46')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (766, 285, 0, '2016-10-08 10:25:46', '2016-10-08 10:25:46')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (0.7ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'D. Fustes'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('D. Fustes', '2016-10-08 10:25:46', '2016-10-08 10:25:46')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (767, 285, 1, '2016-10-08 10:25:46', '2016-10-08 10:25:46')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.8ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'M. Manteiga'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('M. Manteiga', '2016-10-08 10:25:47', '2016-10-08 10:25:47')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (768, 285, 2, '2016-10-08 10:25:47', '2016-10-08 10:25:47')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.8ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'D. Garabato'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('D. Garabato', '2016-10-08 10:25:47', '2016-10-08 10:25:47')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (769, 285, 3, '2016-10-08 10:25:47', '2016-10-08 10:25:47')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.8ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'M. A. Alvarez'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('M. A. Alvarez', '2016-10-08 10:25:47', '2016-10-08 10:25:47')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (770, 285, 4, '2016-10-08 10:25:47', '2016-10-08 10:25:47')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (0.8ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'A. Ulla'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('A. Ulla', '2016-10-08 10:25:47', '2016-10-08 10:25:47')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (771, 285, 5, '2016-10-08 10:25:47', '2016-10-08 10:25:47')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.8ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'C. Allende Prieto'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('C. Allende Prieto', '2016-10-08 10:25:47', '2016-10-08 10:25:47')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (772, 285, 6, '2016-10-08 10:25:47', '2016-10-08 10:25:47')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPaper Load (0.5ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Exploiting Vagueness for Multi-Agent Consensus'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Exploiting Vagueness for Multi-Agent Consensus', 'A framework for consensus modelling is introduced using Kleene\'s three valued logic as a means to express vagueness in agents\' beliefs. Explicitly borderline cases are inherent to propositions involving vague concepts where sentences of a propositional language may be absolutely true, absolutely false or borderline. By exploiting these intermediate truth values, we can allow agents to adopt a more vague interpretation of underlying concepts in order to weaken their beliefs and reduce the levels of inconsistency, so as to achieve consensus. We consider a consensus combination operation which results in agents adopting the borderline truth value as a shared viewpoint if they are in direct conflict. Simulation experiments are presented which show that applying this operator to agents chosen at random (subject to a consistency threshold) from a population, with initially diverse opinions, results in convergence to a smaller set of more precise shared beliefs. Furthermore, if the choice of agents for combination is dependent on the payoff of their beliefs, this acting as a proxy for performance or usefulness, then the system converges to beliefs which, on average, have higher payoff.', 'cs.MA', '2016-07-19T12:19:35Z', 'http://arxiv.org/abs/1607.05540v1', '2016-10-08 10:25:47', '2016-10-08 10:25:47')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPublish Load (0.7ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 286[0m
  [1m[35mAuthor Load (0.6ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Michael Crosscombe'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Michael Crosscombe', '2016-10-08 10:25:47', '2016-10-08 10:25:47')
  [1m[36m (3.0ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.4ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (773, 286, 0, '2016-10-08 10:25:47', '2016-10-08 10:25:47')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (0.7ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Jonathan Lawry'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.4ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Jonathan Lawry', '2016-10-08 10:25:47', '2016-10-08 10:25:47')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (774, 286, 1, '2016-10-08 10:25:47', '2016-10-08 10:25:47')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.5ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Generating Images Part by Part with Composite Generative Adversarial Networks'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Generating Images Part by Part with Composite Generative Adversarial Networks', 'Image generation remains a fundamental problem in artificial intelligence in general and deep learning in specific. The generative adversarial network (GAN) was successful in generating high quality samples of natural images. We propose a model called composite generative adversarial network, that reveals the complex structure of images with multiple generators in which each generator generates some part of the image. Those parts are combined by alpha blending process to create a new single image. It can generate, for example, background and face sequentially with two generators, after training on face dataset. Training was done in an unsupervised way without any labels about what each generator should generate. We found possibilities of learning the structure by using this generative model empirically.', 'cs.AI', '2016-07-19T03:09:31Z', 'http://arxiv.org/abs/1607.05387v1', '2016-10-08 10:25:47', '2016-10-08 10:25:47')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (0.7ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 287
  [1m[36mAuthor Load (0.6ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Hanock Kwak'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Hanock Kwak', '2016-10-08 10:25:47', '2016-10-08 10:25:47')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (775, 287, 0, '2016-10-08 10:25:47', '2016-10-08 10:25:47')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.5ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Byoung-Tak Zhang'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Byoung-Tak Zhang', '2016-10-08 10:25:47', '2016-10-08 10:25:47')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (776, 287, 1, '2016-10-08 10:25:47', '2016-10-08 10:25:47')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (0.5ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Towards Analytics Aware Ontology Based Access to Static and Streaming Data (Extended Version)'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Towards Analytics Aware Ontology Based Access to Static and Streaming Data (Extended Version)', 'Real-time analytics that requires integration and aggregation of heterogeneous and distributed streaming and static data is a typical task in many industrial scenarios such as diagnostics of turbines in Siemens. OBDA approach has a great potential to facilitate such tasks; however, it has a number of limitations in dealing with analytics that restrict its use in important industrial applications. Based on our experience with Siemens, we argue that in order to overcome those limitations OBDA should be extended and become analytics, source, and cost aware. In this work we propose such an extension. In particular, we propose an ontology, mapping, and query language for OBDA, where aggregate and other analytical functions are first class citizens. Moreover, we develop query optimisation techniques that allow to efficiently process analytical tasks over static and streaming data. We implement our approach in a system and evaluate our system with Siemens turbine data.', 'cs.AI', '2016-07-18T23:23:21Z', 'http://arxiv.org/abs/1607.05351v2', '2016-10-08 10:25:47', '2016-10-08 10:25:47')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPublish Load (0.7ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 288[0m
  [1m[35mAuthor Load (0.6ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Evgeny Kharlamov'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Evgeny Kharlamov', '2016-10-08 10:25:47', '2016-10-08 10:25:47')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (777, 288, 0, '2016-10-08 10:25:47', '2016-10-08 10:25:47')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.8ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Yannis Kotidis'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Yannis Kotidis', '2016-10-08 10:25:47', '2016-10-08 10:25:47')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (778, 288, 1, '2016-10-08 10:25:47', '2016-10-08 10:25:47')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.8ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Theofilos Mailis'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Theofilos Mailis', '2016-10-08 10:25:47', '2016-10-08 10:25:47')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (779, 288, 2, '2016-10-08 10:25:47', '2016-10-08 10:25:47')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.8ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Christian Neuenstadt'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Christian Neuenstadt', '2016-10-08 10:25:47', '2016-10-08 10:25:47')[0m
  [1m[35m (3.0ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (780, 288, 3, '2016-10-08 10:25:47', '2016-10-08 10:25:47')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.7ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Charalampos Nikolaou'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Charalampos Nikolaou', '2016-10-08 10:25:47', '2016-10-08 10:25:47')
  [1m[36m (0.9ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.4ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (781, 288, 4, '2016-10-08 10:25:47', '2016-10-08 10:25:47')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (0.7ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Özgür Özcep'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Özgür Özcep', '2016-10-08 10:25:47', '2016-10-08 10:25:47')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (782, 288, 5, '2016-10-08 10:25:47', '2016-10-08 10:25:47')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.7ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Christoforos Svingos'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Christoforos Svingos', '2016-10-08 10:25:47', '2016-10-08 10:25:47')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (783, 288, 6, '2016-10-08 10:25:47', '2016-10-08 10:25:47')[0m
  [1m[35m (0.3ms)[0m  COMMIT
  [1m[36mAuthor Load (0.5ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Dmitriy Zheleznyakov'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.6ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Dmitriy Zheleznyakov', '2016-10-08 10:25:47', '2016-10-08 10:25:47')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (784, 288, 7, '2016-10-08 10:25:47', '2016-10-08 10:25:47')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.7ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Sebastian Brandt'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Sebastian Brandt', '2016-10-08 10:25:47', '2016-10-08 10:25:47')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (785, 288, 8, '2016-10-08 10:25:47', '2016-10-08 10:25:47')[0m
  [1m[35m (0.3ms)[0m  COMMIT
  [1m[36mAuthor Load (0.5ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Ian Horrocks'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Ian Horrocks', '2016-10-08 10:25:47', '2016-10-08 10:25:47')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (786, 288, 9, '2016-10-08 10:25:47', '2016-10-08 10:25:47')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.6ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Yannis Ioannidis'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Yannis Ioannidis', '2016-10-08 10:25:47', '2016-10-08 10:25:47')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (787, 288, 10, '2016-10-08 10:25:47', '2016-10-08 10:25:47')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (0.7ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Steffen Lamparter'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Steffen Lamparter', '2016-10-08 10:25:47', '2016-10-08 10:25:47')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (788, 288, 11, '2016-10-08 10:25:47', '2016-10-08 10:25:47')
  [1m[36m (0.3ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.7ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Ralf Möller'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Ralf Möller', '2016-10-08 10:25:47', '2016-10-08 10:25:47')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (789, 288, 12, '2016-10-08 10:25:47', '2016-10-08 10:25:47')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (0.6ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'An Event Grouping Based Algorithm for University Course Timetabling Problem'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('An Event Grouping Based Algorithm for University Course Timetabling Problem', 'This paper presents the study of an event grouping based algorithm for a university course timetabling problem. Several publications which discuss the problem and some approaches for its solution are analyzed. The grouping of events in groups with an equal number of events in each group is not applicable to all input data sets. For this reason, a universal approach to all possible groupings of events in commensurate in size groups is proposed here. Also, an implementation of an algorithm based on this approach is presented. The methodology, conditions and the objectives of the experiment are described. The experimental results are analyzed and the ensuing conclusions are stated. The future guidelines for further research are formulated.', 'cs.AI', '2016-07-18T16:53:14Z', 'http://arxiv.org/abs/1607.05601v1', '2016-10-08 10:25:47', '2016-10-08 10:25:47')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPublish Load (0.9ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 289[0m
  [1m[35mAuthor Load (0.7ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Velin Kralev'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Velin Kralev', '2016-10-08 10:25:47', '2016-10-08 10:25:47')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (790, 289, 0, '2016-10-08 10:25:47', '2016-10-08 10:25:47')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.6ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Radoslava Kraleva'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Radoslava Kraleva', '2016-10-08 10:25:47', '2016-10-08 10:25:47')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (791, 289, 1, '2016-10-08 10:25:47', '2016-10-08 10:25:47')
  [1m[36m (2.9ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.9ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Borislav Yurukov'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Borislav Yurukov', '2016-10-08 10:25:47', '2016-10-08 10:25:47')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (792, 289, 2, '2016-10-08 10:25:47', '2016-10-08 10:25:47')[0m
  [1m[35m (0.6ms)[0m  COMMIT
  [1m[36mPaper Load (0.6ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Is spoken language all-or-nothing? Implications for future speech-based human-machine interaction'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Is spoken language all-or-nothing? Implications for future speech-based human-machine interaction', 'Recent years have seen significant market penetration for voice-based personal assistants such as Apple\'s Siri. However, despite this success, user take-up is frustratingly low. This position paper argues that there is a habitability gap caused by the inevitable mismatch between the capabilities and expectations of human users and the features and benefits provided by contemporary technology. Suggestions are made as to how such problems might be mitigated, but a more worrisome question emerges: \"is spoken language all-or-nothing\"? The answer, based on contemporary views on the special nature of (spoken) language, is that there may indeed be a fundamental limit to the interaction that can take place between mismatched interlocutors (such as humans and machines). However, it is concluded that interactions between native and non-native speakers, or between adults and children, or even between humans and dogs, might provide critical inspiration for the design of future speech-based human-machine interaction.', 'cs.HC', '2016-07-18T16:44:34Z', 'http://arxiv.org/abs/1607.05174v1', '2016-10-08 10:25:47', '2016-10-08 10:25:47')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPublish Load (0.8ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 290[0m
  [1m[35mAuthor Load (0.5ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Roger K. Moore'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Roger K. Moore', '2016-10-08 10:25:47', '2016-10-08 10:25:47')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (793, 290, 0, '2016-10-08 10:25:47', '2016-10-08 10:25:47')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (0.5ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Playing Atari Games with Deep Reinforcement Learning and Human Checkpoint Replay'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Playing Atari Games with Deep Reinforcement Learning and Human Checkpoint Replay', 'This paper introduces a novel method for learning how to play the most difficult Atari 2600 games from the Arcade Learning Environment using deep reinforcement learning. The proposed method, human checkpoint replay, consists in using checkpoints sampled from human gameplay as starting points for the learning process. This is meant to compensate for the difficulties of current exploration strategies, such as epsilon-greedy, to find successful control policies in games with sparse rewards. Like other deep reinforcement learning architectures, our model uses a convolutional neural network that receives only raw pixel inputs to estimate the state value function. We tested our method on Montezuma\'s Revenge and Private Eye, two of the most challenging games from the Atari platform. The results we obtained show a substantial improvement compared to previous learning approaches, as well as over a random player. We also propose a method for training deep reinforcement learning agents using human gameplay experience, which we call human experience replay.', 'cs.AI', '2016-07-18T13:55:54Z', 'http://arxiv.org/abs/1607.05077v1', '2016-10-08 10:25:47', '2016-10-08 10:25:47')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPublish Load (0.6ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 291[0m
  [1m[35mAuthor Load (0.6ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Ionel-Alexandru Hosu'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Ionel-Alexandru Hosu', '2016-10-08 10:25:47', '2016-10-08 10:25:47')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (794, 291, 0, '2016-10-08 10:25:47', '2016-10-08 10:25:47')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.6ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Traian Rebedea'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Traian Rebedea', '2016-10-08 10:25:47', '2016-10-08 10:25:47')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (795, 291, 1, '2016-10-08 10:25:47', '2016-10-08 10:25:47')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.5ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Intelligent Biohybrid Neurotechnologies: Are They Really What They Claim?'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Intelligent Biohybrid Neurotechnologies: Are They Really What They Claim?', 'In the era of intelligent biohybrid neurotechnologies for brain repair, new fanciful terms are appearing in the scientific dictionary to define what has so far been unimaginable. As the emerging neurotechnologies are becoming increasingly polyhedral and sophisticated, should we talk about evolution and rank the intelligence of these devices?', 'cs.AI', '2016-07-18T11:28:11Z', 'http://arxiv.org/abs/1607.05023v1', '2016-10-08 10:25:47', '2016-10-08 10:25:47')
  [1m[36m (3.0ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (0.9ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 292
  [1m[36mAuthor Load (0.8ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Gabriella Panuccio'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Gabriella Panuccio', '2016-10-08 10:25:47', '2016-10-08 10:25:47')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (796, 292, 0, '2016-10-08 10:25:47', '2016-10-08 10:25:47')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.6ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Marianna Semprini'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Marianna Semprini', '2016-10-08 10:25:47', '2016-10-08 10:25:47')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (797, 292, 1, '2016-10-08 10:25:47', '2016-10-08 10:25:47')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.6ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Lorenzo Natale'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Lorenzo Natale', '2016-10-08 10:25:47', '2016-10-08 10:25:47')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (798, 292, 2, '2016-10-08 10:25:47', '2016-10-08 10:25:47')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.7ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Michela Chiappalone'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Michela Chiappalone', '2016-10-08 10:25:47', '2016-10-08 10:25:47')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (799, 292, 3, '2016-10-08 10:25:47', '2016-10-08 10:25:47')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (0.5ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Piecewise convexity of artificial neural networks'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Piecewise convexity of artificial neural networks', 'Although artificial neural networks have shown great promise in applications ranging from computer vision to speech recognition, there remains considerable practical and theoretical difficulty in optimizing their parameters. The seemingly unreasonable success of gradient descent methods in minimizing these non-convex functions remains poorly understood. In this work we offer some theoretical guarantees concerning networks with continuous piecewise affine activation functions, which have in recent years become the norm. We prove three main results. Firstly, that the network is piecewise convex as a function of the input data. Secondly, that the network, considered as a function of the parameters in a single layer, all others held constant, is again piecewise convex. Finally, that the network as a function of all its parameters is piecewise multi-convex, a generalization of biconvexity. Accordingly, we show that any point to which gradient descent converges is a local minimum of some piece. Thus gradient descent converges to non-minima only at the boundaries of pieces. These results might offer some insights into the effectiveness of gradient descent methods in optimizing this class of networks.', 'cs.LG', '2016-07-17T21:49:00Z', 'http://arxiv.org/abs/1607.04917v1', '2016-10-08 10:25:47', '2016-10-08 10:25:47')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPublish Load (0.9ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 293[0m
  [1m[35mAuthor Load (0.5ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Blaine Rister'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Blaine Rister', '2016-10-08 10:25:47', '2016-10-08 10:25:47')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (800, 293, 0, '2016-10-08 10:25:47', '2016-10-08 10:25:47')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (0.6ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Global Continuous Optimization with Error Bound and Fast Convergence'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Global Continuous Optimization with Error Bound and Fast Convergence', 'This paper considers global optimization with a black-box unknown objective function that can be non-convex and non-differentiable. Such a difficult optimization problem arises in many real-world applications, such as parameter tuning in machine learning, engineering design problem, and planning with a complex physics simulator. This paper proposes a new global optimization algorithm, called Locally Oriented Global Optimization (LOGO), to aim for both fast convergence in practice and finite-time error bound in theory. The advantage and usage of the new algorithm are illustrated via theoretical analysis and an experiment conducted with 11 benchmark test functions. Further, we modify the LOGO algorithm to specifically solve a planning problem via policy search with continuous state/action space and long time horizon while maintaining its finite-time error bound. We apply the proposed planning method to accident management of a nuclear power plant. The result of the application study demonstrates the practical utility of our method.', 'math.OC', '2016-07-17T01:41:16Z', 'http://dx.doi.org/10.1613/jair.4742', '2016-10-08 10:25:47', '2016-10-08 10:25:47')[0m
  [1m[35m (3.0ms)[0m  COMMIT
  [1m[36mPublish Load (0.9ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 294[0m
  [1m[35mAuthor Load (0.9ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Kenji Kawaguchi'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Kenji Kawaguchi', '2016-10-08 10:25:47', '2016-10-08 10:25:47')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (801, 294, 0, '2016-10-08 10:25:47', '2016-10-08 10:25:47')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.8ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Yu Maruyama'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Yu Maruyama', '2016-10-08 10:25:47', '2016-10-08 10:25:47')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (802, 294, 1, '2016-10-08 10:25:47', '2016-10-08 10:25:47')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.6ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Xiaoyu Zheng'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Xiaoyu Zheng', '2016-10-08 10:25:47', '2016-10-08 10:25:47')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (803, 294, 2, '2016-10-08 10:25:47', '2016-10-08 10:25:47')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPaper Load (0.5ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Knowledge Representation on the Web revisited: Tools for Prototype Based Ontologies'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Knowledge Representation on the Web revisited: Tools for Prototype Based Ontologies', 'In recent years RDF and OWL have become the most common knowledge representation languages in use on the Web, propelled by the recommendation of the W3C. In this paper we present a practical implementation of a different kind of knowledge representation based on Prototypes. In detail, we present a concrete syntax easily and effectively parsable by applications. We also present extensible implementations of a prototype knowledge base, specifically designed for storage of Prototypes. These implementations are written in Java and can be extended by using the implementation as a library. Alternatively, the software can be deployed as such. Further, results of benchmarks for both local and web deployment are presented. This paper augments a research paper, in which we describe the more theoretical aspects of our Prototype system.', 'cs.AI', '2016-07-16T23:42:44Z', 'http://arxiv.org/abs/1607.04809v1', '2016-10-08 10:25:47', '2016-10-08 10:25:47')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPublish Load (0.7ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 295[0m
  [1m[35mAuthor Load (0.5ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Michael Cochez'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Michael Cochez', '2016-10-08 10:25:47', '2016-10-08 10:25:47')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (804, 295, 0, '2016-10-08 10:25:47', '2016-10-08 10:25:47')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.7ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Stefan Decker'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Stefan Decker', '2016-10-08 10:25:47', '2016-10-08 10:25:47')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (805, 295, 1, '2016-10-08 10:25:47', '2016-10-08 10:25:47')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.7ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Eric Prud\'hommeaux'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.4ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Eric Prud\'hommeaux', '2016-10-08 10:25:47', '2016-10-08 10:25:47')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (806, 295, 2, '2016-10-08 10:25:47', '2016-10-08 10:25:47')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (0.5ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'DeepQA: Improving the estimation of single protein model quality with deep belief networks'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.7ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('DeepQA: Improving the estimation of single protein model quality with deep belief networks', 'Protein quality assessment (QA) by ranking and selecting protein models has long been viewed as one of the major challenges for protein tertiary structure prediction. Especially, estimating the quality of a single protein model, which is important for selecting a few good models out of a large model pool consisting of mostly low-quality models, is still a largely unsolved problem. We introduce a novel single-model quality assessment method DeepQA based on deep belief network that utilizes a number of selected features describing the quality of a model from different perspectives, such as energy, physio-chemical characteristics, and structural information. The deep belief network is trained on several large datasets consisting of models from the Critical Assessment of Protein Structure Prediction (CASP) experiments, several publicly available datasets, and models generated by our in-house ab initio method. Our experiment demonstrate that deep belief network has better performance compared to Support Vector Machines and Neural Networks on the protein model quality assessment problem, and our method DeepQA achieves the state-of-the-art performance on CASP11 dataset. It also outperformed two well-established methods in selecting good outlier models from a large set of models of mostly low quality generated by ab initio modeling methods. DeepQA is a useful tool for protein single model quality assessment and protein structure prediction. The source code, executable, document and training/test datasets of DeepQA for Linux is freely available to non-commercial users at http://cactus.rnet.missouri.edu/DeepQA/.', 'cs.AI', '2016-07-15T04:28:55Z', 'http://arxiv.org/abs/1607.04379v1', '2016-10-08 10:25:47', '2016-10-08 10:25:47')[0m
  [1m[35m (8.2ms)[0m  COMMIT
  [1m[36mPublish Load (0.8ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 296[0m
  [1m[35mAuthor Load (0.6ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Renzhi Cao'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Renzhi Cao', '2016-10-08 10:25:47', '2016-10-08 10:25:47')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.4ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (807, 296, 0, '2016-10-08 10:25:47', '2016-10-08 10:25:47')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (0.8ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Debswapna Bhattacharya'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Debswapna Bhattacharya', '2016-10-08 10:25:47', '2016-10-08 10:25:47')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (808, 296, 1, '2016-10-08 10:25:47', '2016-10-08 10:25:47')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.9ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Jie Hou'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Jie Hou', '2016-10-08 10:25:47', '2016-10-08 10:25:47')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (809, 296, 2, '2016-10-08 10:25:47', '2016-10-08 10:25:47')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.6ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Jianlin Cheng'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Jianlin Cheng', '2016-10-08 10:25:47', '2016-10-08 10:25:47')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (810, 296, 3, '2016-10-08 10:25:47', '2016-10-08 10:25:47')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.5ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Intrinsically Motivated Multimodal Structure Learning'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Intrinsically Motivated Multimodal Structure Learning', 'We present a long-term intrinsically motivated structure learning method for modeling transition dynamics during controlled interactions between a robot and semi-permanent structures in the world. In particular, we discuss how partially-observable state is represented using distributions over a Markovian state and build models of objects that predict how state distributions change in response to interactions with such objects. These structures serve as the basis for a number of possible future tasks defined as Markov Decision Processes (MDPs). The approach is an example of a structure learning technique applied to a multimodal affordance representation that yields a population of forward models for use in planning. We evaluate the approach using experiments on a bimanual mobile manipulator (uBot-6) that show the performance of model acquisition as the number of transition actions increases.', 'cs.RO', '2016-07-15T04:19:31Z', 'http://arxiv.org/abs/1607.04376v1', '2016-10-08 10:25:47', '2016-10-08 10:25:47')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (0.7ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 297
  [1m[36mAuthor Load (0.6ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Jay Ming Wong'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Jay Ming Wong', '2016-10-08 10:25:47', '2016-10-08 10:25:47')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (811, 297, 0, '2016-10-08 10:25:47', '2016-10-08 10:25:47')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.6ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Roderic A. Grupen'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Roderic A. Grupen', '2016-10-08 10:25:47', '2016-10-08 10:25:47')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (812, 297, 1, '2016-10-08 10:25:47', '2016-10-08 10:25:47')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (0.5ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Vista: A Visually, Socially, and Temporally-aware Model for Artistic Recommendation'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Vista: A Visually, Socially, and Temporally-aware Model for Artistic Recommendation', 'Understanding users\' interactions with highly subjective content---like artistic images---is challenging due to the complex semantics that guide our preferences. On the one hand one has to overcome `standard\' recommender systems challenges, such as dealing with large, sparse, and long-tailed datasets. On the other, several new challenges present themselves, such as the need to model content in terms of its visual appearance, or even social dynamics, such as a preference toward a particular artist that is independent of the art they create. In this paper we build large-scale recommender systems to model the dynamics of a vibrant digital art community, Behance, consisting of tens of millions of interactions (clicks and `appreciates\') of users toward digital art. Methodologically, our main contributions are to model (a) rich content, especially in terms of its visual appearance; (b) temporal dynamics, in terms of how users prefer `visually consistent\' content within and across sessions; and (c) social dynamics, in terms of how users exhibit preferences both towards certain art styles, as well as the artists themselves.', 'cs.IR', '2016-07-15T03:35:56Z', 'http://dx.doi.org/10.1145/2959100.2959152', '2016-10-08 10:25:47', '2016-10-08 10:25:47')[0m
  [1m[35m (0.6ms)[0m  COMMIT
  [1m[36mPublish Load (0.6ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 298[0m
  [1m[35mAuthor Load (0.5ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Ruining He'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Ruining He', '2016-10-08 10:25:47', '2016-10-08 10:25:47')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (813, 298, 0, '2016-10-08 10:25:47', '2016-10-08 10:25:47')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.6ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Chen Fang'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Chen Fang', '2016-10-08 10:25:47', '2016-10-08 10:25:47')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (814, 298, 1, '2016-10-08 10:25:47', '2016-10-08 10:25:47')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.8ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Zhaowen Wang'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.4ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Zhaowen Wang', '2016-10-08 10:25:47', '2016-10-08 10:25:47')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (815, 298, 2, '2016-10-08 10:25:47', '2016-10-08 10:25:47')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.8ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Julian McAuley'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Julian McAuley', '2016-10-08 10:25:47', '2016-10-08 10:25:47')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (816, 298, 3, '2016-10-08 10:25:47', '2016-10-08 10:25:47')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.5ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Using Recurrent Neural Network for Learning Expressive Ontologies'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Using Recurrent Neural Network for Learning Expressive Ontologies', 'Recently, Neural Networks have been proven extremely effective in many natural language processing tasks such as sentiment analysis, question answering, or machine translation. Aiming to exploit such advantages in the Ontology Learning process, in this technical report we present a detailed description of a Recurrent Neural Network based system to be used to pursue such goal.', 'cs.CL', '2016-07-14T12:45:07Z', 'http://arxiv.org/abs/1607.04110v1', '2016-10-08 10:25:47', '2016-10-08 10:25:47')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (0.7ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 299
  [1m[36mAuthor Load (0.6ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Giulio Petrucci'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Giulio Petrucci', '2016-10-08 10:25:47', '2016-10-08 10:25:47')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (817, 299, 0, '2016-10-08 10:25:47', '2016-10-08 10:25:47')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.6ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Chiara Ghidini'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Chiara Ghidini', '2016-10-08 10:25:47', '2016-10-08 10:25:47')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (818, 299, 1, '2016-10-08 10:25:47', '2016-10-08 10:25:47')[0m
  [1m[35m (0.3ms)[0m  COMMIT
  [1m[36mAuthor Load (0.8ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Marco Rospocher'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Marco Rospocher', '2016-10-08 10:25:47', '2016-10-08 10:25:47')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (819, 299, 2, '2016-10-08 10:25:47', '2016-10-08 10:25:47')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.5ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Resource Planning For Rescue Operations'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Resource Planning For Rescue Operations', 'After an earthquake, disaster sites pose a multitude of health and safety concerns. A rescue operation of people trapped in the ruins after an earthquake disaster requires a series of intelligent behavior, including planning. For a successful rescue operation, given a limited number of available actions and regulations, the role of planning in rescue operations is crucial. Fortunately, recent developments in automated planning by artificial intelligence community can help different organization in this crucial task. Due to the number of rules and regulations, we believe that a rule based system for planning can be helpful for this specific planning problem. In this research work, we use logic rules to represent rescue and related regular regulations, together with a logic based planner to solve this complicated problem. Although this research is still in the prototyping and modeling stage, it clearly shows that rule based languages can be a good infrastructure for this computational task. The results of this research can be used by different organizations, such as Iranian Red Crescent Society and International Institute of Seismology and Earthquake Engineering (IISEE).', 'cs.AI', '2016-07-14T02:21:14Z', 'http://arxiv.org/abs/1607.03979v1', '2016-10-08 10:25:47', '2016-10-08 10:25:47')
  [1m[36m (0.8ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (0.7ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 300
  [1m[36mAuthor Load (0.5ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Mona Khaffaf'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Mona Khaffaf', '2016-10-08 10:25:47', '2016-10-08 10:25:47')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (820, 300, 0, '2016-10-08 10:25:47', '2016-10-08 10:25:47')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.8ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Arshia Khaffaf'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Arshia Khaffaf', '2016-10-08 10:25:47', '2016-10-08 10:25:47')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (821, 300, 1, '2016-10-08 10:25:47', '2016-10-08 10:25:47')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (0.5ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Possibilistic Networks: Parameters Learning from Imprecise Data and Evaluation strategy'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.4ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Possibilistic Networks: Parameters Learning from Imprecise Data and Evaluation strategy', 'There has been an ever-increasing interest in multidisciplinary research on representing and reasoning with imperfect data. Possibilistic networks present one of the powerful frameworks of interest for representing uncertain and imprecise information. This paper covers the problem of their parameters learning from imprecise datasets, i.e., containing multi-valued data. We propose in the rst part of this paper a possibilistic networks sampling process. In the second part, we propose a likelihood function which explores the link between random sets theory and possibility theory. This function is then deployed to parametrize possibilistic networks.', 'cs.AI', '2016-07-13T12:45:53Z', 'http://arxiv.org/abs/1607.03705v1', '2016-10-08 10:25:47', '2016-10-08 10:25:47')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPublish Load (0.9ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 301[0m
  [1m[35mAuthor Load (0.5ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Maroua Haddad'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Maroua Haddad', '2016-10-08 10:25:47', '2016-10-08 10:25:47')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (822, 301, 0, '2016-10-08 10:25:47', '2016-10-08 10:25:47')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.6ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Philippe Leray'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Philippe Leray', '2016-10-08 10:25:47', '2016-10-08 10:25:47')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (823, 301, 1, '2016-10-08 10:25:47', '2016-10-08 10:25:47')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.6ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Nahla Ben Amor'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Nahla Ben Amor', '2016-10-08 10:25:47', '2016-10-08 10:25:47')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (824, 301, 2, '2016-10-08 10:25:47', '2016-10-08 10:25:47')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (0.6ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Characterizing Driving Styles with Deep Learning'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Characterizing Driving Styles with Deep Learning', 'Characterizing driving styles of human drivers using vehicle sensor data, e.g., GPS, is an interesting research problem and an important real-world requirement from automotive industries. A good representation of driving features can be highly valuable for autonomous driving, auto insurance, and many other application scenarios. However, traditional methods mainly rely on handcrafted features, which limit machine learning algorithms to achieve a better performance. In this paper, we propose a novel deep learning solution to this problem, which could be the first attempt of studying deep learning for driving behavior analysis. The proposed approach can effectively extract high level and interpretable features describing complex driving patterns from GPS data. It also requires significantly less human experience and work. The power of the learned driving style representations are validated through the driver identification problem using a large real dataset.', 'cs.AI', '2016-07-13T07:15:30Z', 'http://arxiv.org/abs/1607.03611v1', '2016-10-08 10:25:47', '2016-10-08 10:25:47')[0m
  [1m[35m (0.9ms)[0m  COMMIT
  [1m[36mPublish Load (0.7ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 302[0m
  [1m[35mAuthor Load (0.5ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Weishan Dong'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Weishan Dong', '2016-10-08 10:25:47', '2016-10-08 10:25:47')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (825, 302, 0, '2016-10-08 10:25:47', '2016-10-08 10:25:47')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.6ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Jian Li'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Jian Li', '2016-10-08 10:25:47', '2016-10-08 10:25:47')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (826, 302, 1, '2016-10-08 10:25:47', '2016-10-08 10:25:47')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.6ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Renjie Yao'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Renjie Yao', '2016-10-08 10:25:47', '2016-10-08 10:25:47')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (827, 302, 2, '2016-10-08 10:25:47', '2016-10-08 10:25:47')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.5ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Changsheng Li'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Changsheng Li', '2016-10-08 10:25:47', '2016-10-08 10:25:47')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (828, 302, 3, '2016-10-08 10:25:47', '2016-10-08 10:25:47')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.6ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Ting Yuan'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Ting Yuan', '2016-10-08 10:25:47', '2016-10-08 10:25:47')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (829, 302, 4, '2016-10-08 10:25:47', '2016-10-08 10:25:47')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (0.8ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Lanjun Wang'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Lanjun Wang', '2016-10-08 10:25:47', '2016-10-08 10:25:47')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (830, 302, 5, '2016-10-08 10:25:47', '2016-10-08 10:25:47')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.5ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Deep Reconstruction-Classification Networks for Unsupervised Domain Adaptation'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Deep Reconstruction-Classification Networks for Unsupervised Domain Adaptation', 'In this paper, we propose a novel unsupervised domain adaptation algorithm based on deep learning for visual object recognition. Specifically, we design a new model called Deep Reconstruction-Classification Network (DRCN), which jointly learns a shared encoding representation for two tasks: i) supervised classification of labeled source data, and ii) unsupervised reconstruction of unlabeled target data.In this way, the learnt representation not only preserves discriminability, but also encodes useful information from the target domain. Our new DRCN model can be optimized by using backpropagation similarly as the standard neural networks. We evaluate the performance of DRCN on a series of cross-domain object recognition tasks, where DRCN provides a considerable improvement (up to ~8% in accuracy) over the prior state-of-the-art algorithms. Interestingly, we also observe that the reconstruction pipeline of DRCN transforms images from the source domain into images whose appearance resembles the target dataset. This suggests that DRCN\'s performance is due to constructing a single composite representation that encodes information about both the structure of target images and the classification of source images. Finally, we provide a formal analysis to justify the algorithm\'s objective in domain adaptation context.', 'cs.CV', '2016-07-12T20:48:58Z', 'http://arxiv.org/abs/1607.03516v2', '2016-10-08 10:25:47', '2016-10-08 10:25:47')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (0.9ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 303
  [1m[36mAuthor Load (0.7ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Muhammad Ghifary'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Muhammad Ghifary', '2016-10-08 10:25:47', '2016-10-08 10:25:47')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (831, 303, 0, '2016-10-08 10:25:47', '2016-10-08 10:25:47')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.6ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'W. Bastiaan Kleijn'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('W. Bastiaan Kleijn', '2016-10-08 10:25:47', '2016-10-08 10:25:47')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (832, 303, 1, '2016-10-08 10:25:47', '2016-10-08 10:25:47')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.6ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Mengjie Zhang'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Mengjie Zhang', '2016-10-08 10:25:47', '2016-10-08 10:25:47')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (833, 303, 2, '2016-10-08 10:25:47', '2016-10-08 10:25:47')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.8ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'David Balduzzi'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('David Balduzzi', '2016-10-08 10:25:47', '2016-10-08 10:25:47')
  [1m[36m (3.0ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (834, 303, 3, '2016-10-08 10:25:47', '2016-10-08 10:25:47')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (0.9ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Wen Li'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Wen Li', '2016-10-08 10:25:47', '2016-10-08 10:25:47')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (835, 303, 4, '2016-10-08 10:25:47', '2016-10-08 10:25:47')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.6ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Extended Graded Modalities in Strategy Logic'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.4ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Extended Graded Modalities in Strategy Logic', 'Strategy Logic (SL) is a logical formalism for strategic reasoning in multi-agent systems. Its main feature is that it has variables for strategies that are associated to specific agents with a binding operator. We introduce Graded Strategy Logic (GradedSL), an extension of SL by graded quantifiers over tuples of strategy variables, i.e., \"there exist at least g different tuples (x_1,...,x_n) of strategies\" where g is a cardinal from the set N union {aleph_0, aleph_1, 2^aleph_0}. We prove that the model-checking problem of GradedSL is decidable. We then turn to the complexity of fragments of GradedSL. When the g\'s are restricted to finite cardinals, written GradedNSL, the complexity of model-checking is no harder than for SL, i.e., it is non-elementary in the quantifier rank. We illustrate our formalism by showing how to count the number of different strategy profiles that are Nash equilibria (NE), or subgame-perfect equilibria (SPE). By analyzing the structure of the specific formulas involved, we conclude that the important problems of checking for the existence of a unique NE or SPE can both be solved in 2ExpTime, which is not harder than merely checking for the existence of such equilibria.', 'cs.GT', '2016-07-12T13:46:52Z', 'http://dx.doi.org/10.4204/EPTCS.218.1', '2016-10-08 10:25:47', '2016-10-08 10:25:47')
  [1m[36m (0.6ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (0.8ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 304
  [1m[36mAuthor Load (0.5ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Benjamin Aminof'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Benjamin Aminof', '2016-10-08 10:25:47', '2016-10-08 10:25:47')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (836, 304, 0, '2016-10-08 10:25:47', '2016-10-08 10:25:47')
  [1m[36m (0.3ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.6ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Vadim Malvone'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Vadim Malvone', '2016-10-08 10:25:47', '2016-10-08 10:25:47')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.4ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (837, 304, 1, '2016-10-08 10:25:47', '2016-10-08 10:25:47')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.6ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Aniello Murano'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Aniello Murano', '2016-10-08 10:25:47', '2016-10-08 10:25:47')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (838, 304, 2, '2016-10-08 10:25:47', '2016-10-08 10:25:47')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.6ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Sasha Rubin'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Sasha Rubin', '2016-10-08 10:25:47', '2016-10-08 10:25:47')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (839, 304, 3, '2016-10-08 10:25:47', '2016-10-08 10:25:47')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPaper Load (0.6ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Populations can be essential in tracking dynamic optima'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Populations can be essential in tracking dynamic optima', 'Real-world optimisation problems are often dynamic. Previously good solutions must be updated or replaced due to changes in objectives and constraints. It is often claimed that evolutionary algorithms are particularly suitable for dynamic optimisation because a large population can contain different solutions that may be useful in the future. However, rigorous theoretical demonstrations for how populations in dynamic optimisation can be essential are sparse and restricted to special cases. This paper provides theoretical explanations of how populations can be essential in evolutionary dynamic optimisation in a general and natural setting. We describe a natural class of dynamic optimisation problems where a sufficiently large population is necessary to keep track of moving optima reliably. We establish a relationship between the population-size and the probability that the algorithm loses track of the optimum.', 'cs.NE', '2016-07-12T11:52:48Z', 'http://arxiv.org/abs/1607.03317v1', '2016-10-08 10:25:47', '2016-10-08 10:25:47')[0m
  [1m[35m (3.0ms)[0m  COMMIT
  [1m[36mPublish Load (0.9ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 305[0m
  [1m[35mAuthor Load (0.8ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Duc-Cuong Dang'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Duc-Cuong Dang', '2016-10-08 10:25:47', '2016-10-08 10:25:47')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.3ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (840, 305, 0, '2016-10-08 10:25:47', '2016-10-08 10:25:47')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (0.8ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Thomas Jansen'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Thomas Jansen', '2016-10-08 10:25:47', '2016-10-08 10:25:47')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (841, 305, 1, '2016-10-08 10:25:47', '2016-10-08 10:25:47')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.7ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Per Kristian Lehre'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Per Kristian Lehre', '2016-10-08 10:25:47', '2016-10-08 10:25:47')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (842, 305, 2, '2016-10-08 10:25:47', '2016-10-08 10:25:47')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (0.5ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Automatic Bridge Bidding Using Deep Reinforcement Learning'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Automatic Bridge Bidding Using Deep Reinforcement Learning', 'Bridge is among the zero-sum games for which artificial intelligence has not yet outperformed expert human players. The main difficulty lies in the bidding phase of bridge, which requires cooperative decision making under partial information. Existing artificial intelligence systems for bridge bidding rely on and are thus restricted by human-designed bidding systems or features. In this work, we propose a pioneering bridge bidding system without the aid of human domain knowledge. The system is based on a novel deep reinforcement learning model, which extracts sophisticated features and learns to bid automatically based on raw card data. The model includes an upper-confidence-bound algorithm and additional techniques to achieve a balance between exploration and exploitation. Our experiments validate the promising performance of our proposed model. In particular, the model advances from having no knowledge about bidding to achieving superior performance when compared with a champion-winning computer bridge program that implements a human-designed bidding system.', 'cs.AI', '2016-07-12T09:58:24Z', 'http://arxiv.org/abs/1607.03290v1', '2016-10-08 10:25:47', '2016-10-08 10:25:47')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPublish Load (0.9ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 306[0m
  [1m[35mAuthor Load (0.6ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Chih-Kuan Yeh'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Chih-Kuan Yeh', '2016-10-08 10:25:47', '2016-10-08 10:25:47')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (843, 306, 0, '2016-10-08 10:25:47', '2016-10-08 10:25:47')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (0.6ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Hsuan-Tien Lin'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36m (0.1ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (561, 306, 1, '2016-10-08 10:25:47', '2016-10-08 10:25:47')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPaper Load (0.5ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'A Framework for Estimating Long Term Driver Behavior'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('A Framework for Estimating Long Term Driver Behavior', 'The authors present a cyber-physical systems study on the estimation of driver behavior in autonomous vehicles and vehicle safety systems. Extending upon previous work, the approach described is suitable for the long term estimation and tracking of autonomous vehicle behavior. The proposed system makes use of a previously defined Hybrid State System and Hidden Markov Model (HSS+HMM) system which has provided good results for driver behavior estimation. The HSS+HMM system utilizes the hybrid characteristics of decision-behavior coupling of many systems such as the driver and the vehicle, uses Kalman Filter estimates of observable parameters to track the instantaneous continuous state, and estimates the most likely driver state. The HSS+HMM system is encompassed in a HSS structure and inter-system connectivity is determined by using Signal Processing and Pattern Recognition techniques. The proposed method is suitable for scenarios that involve unknown decisions of other individuals, such as lane changes or intersection precedence/access. The long term driver behavior estimation system involves an extended HSS+HMM structure that is capable of including external information in the estimation process. Through the grafting and pruning of metastates, the HSS+HMM system can be dynamically updated to best represent driver choices given external information. Three application examples are also provided to elucidate the theoretical system.', 'cs.RO', '2016-07-11T22:37:36Z', 'http://arxiv.org/abs/1607.03189v1', '2016-10-08 10:25:47', '2016-10-08 10:25:47')[0m
  [1m[35m (3.0ms)[0m  COMMIT
  [1m[36mPublish Load (1.0ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 307[0m
  [1m[35mAuthor Load (0.8ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Vijay Gadepally'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Vijay Gadepally', '2016-10-08 10:25:47', '2016-10-08 10:25:47')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (844, 307, 0, '2016-10-08 10:25:47', '2016-10-08 10:25:47')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (0.8ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Ashok Krishnamurthy'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Ashok Krishnamurthy', '2016-10-08 10:25:47', '2016-10-08 10:25:47')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (845, 307, 1, '2016-10-08 10:25:47', '2016-10-08 10:25:47')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.5ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'sk_p: a neural program corrector for MOOCs'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.7ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('sk_p: a neural program corrector for MOOCs', 'We present a novel technique for automatic program correction in MOOCs, capable of fixing both syntactic and semantic errors without manual, problem specific correction strategies. Given an incorrect student program, it generates candidate programs from a distribution of likely corrections, and checks each candidate for correctness against a test suite. The key observation is that in MOOCs many programs share similar code fragments, and the seq2seq neural network model, used in the natural-language processing task of machine translation, can be modified and trained to recover these fragments. Experiment shows our scheme can correct 29% of all incorrect submissions and out-performs state of the art approach which requires manual, problem specific correction strategies.', 'cs.PL', '2016-07-11T11:08:00Z', 'http://arxiv.org/abs/1607.02902v1', '2016-10-08 10:25:47', '2016-10-08 10:25:47')
  [1m[36m (0.3ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (0.7ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 308
  [1m[36mAuthor Load (0.7ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Yewen Pu'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Yewen Pu', '2016-10-08 10:25:47', '2016-10-08 10:25:47')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (846, 308, 0, '2016-10-08 10:25:47', '2016-10-08 10:25:47')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.4ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Karthik Narasimhan'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35m (0.1ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (434, 308, 1, '2016-10-08 10:25:47', '2016-10-08 10:25:47')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.6ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Armando Solar-Lezama'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Armando Solar-Lezama', '2016-10-08 10:25:47', '2016-10-08 10:25:47')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (847, 308, 2, '2016-10-08 10:25:47', '2016-10-08 10:25:47')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (0.6ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Regina Barzilay'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36m (0.1ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (436, 308, 3, '2016-10-08 10:25:47', '2016-10-08 10:25:47')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPaper Load (0.6ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Mapping distributional to model-theoretic semantic spaces: a baseline'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Mapping distributional to model-theoretic semantic spaces: a baseline', 'Word embeddings have been shown to be useful across state-of-the-art systems in many natural language processing tasks, ranging from question answering systems to dependency parsing. (Herbelot and Vecchi, 2015) explored word embeddings and their utility for modeling language semantics. In particular, they presented an approach to automatically map a standard distributional semantic space onto a set-theoretic model using partial least squares regression. We show in this paper that a simple baseline achieves a +51% relative improvement compared to their model on one of the two datasets they used, and yields competitive results on the second dataset.', 'cs.CL', '2016-07-11T01:20:57Z', 'http://arxiv.org/abs/1607.02802v1', '2016-10-08 10:25:47', '2016-10-08 10:25:47')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPublish Load (0.8ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 309[0m
  [1m[35mAuthor Load (0.7ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Franck Dernoncourt'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Franck Dernoncourt', '2016-10-08 10:25:47', '2016-10-08 10:25:47')
  [1m[36m (2.2ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (848, 309, 0, '2016-10-08 10:25:47', '2016-10-08 10:25:47')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (0.7ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Open Information Extraction'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Open Information Extraction', 'Open Information Extraction (Open IE) systems aim to obtain relation tuples with highly scalable extraction in portable across domain by identifying a variety of relation phrases and their arguments in arbitrary sentences. The first generation of Open IE learns linear chain models based on unlexicalized features such as Part-of-Speech (POS) or shallow tags to label the intermediate words between pair of potential arguments for identifying extractable relations. Open IE currently is developed in the second generation that is able to extract instances of the most frequently observed relation types such as Verb, Noun and Prep, Verb and Prep, and Infinitive with deep linguistic analysis. They expose simple yet principled ways in which verbs express relationships in linguistics such as verb phrase-based extraction or clause-based extraction. They obtain a significantly higher performance over previous systems in the first generation. In this paper, we describe an overview of two Open IE generations including strengths, weaknesses and application areas.', 'cs.CL', '2016-07-10T20:39:24Z', 'http://arxiv.org/abs/1607.02784v1', '2016-10-08 10:25:47', '2016-10-08 10:25:47')[0m
  [1m[35m (2.9ms)[0m  COMMIT
  [1m[36mPublish Load (1.0ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 310[0m
  [1m[35mAuthor Load (0.8ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Duc-Thuan Vo'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Duc-Thuan Vo', '2016-10-08 10:25:47', '2016-10-08 10:25:47')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (849, 310, 0, '2016-10-08 10:25:47', '2016-10-08 10:25:47')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (0.9ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Ebrahim Bagheri'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Ebrahim Bagheri', '2016-10-08 10:25:47', '2016-10-08 10:25:47')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (850, 310, 1, '2016-10-08 10:25:47', '2016-10-08 10:25:47')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.5ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'How to Allocate Resources For Features Acquisition?'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('How to Allocate Resources For Features Acquisition?', 'We study classification problems where features are corrupted by noise and where the magnitude of the noise in each feature is influenced by the resources allocated to its acquisition. This is the case, for example, when multiple sensors share a common resource (power, bandwidth, attention, etc.). We develop a method for computing the optimal resource allocation for a variety of scenarios and derive theoretical bounds concerning the benefit that may arise by non-uniform allocation. We further demonstrate the effectiveness of the developed method in simulations.', 'cs.AI', '2016-07-10T16:19:00Z', 'http://arxiv.org/abs/1607.02763v1', '2016-10-08 10:25:47', '2016-10-08 10:25:47')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (0.7ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 311
  [1m[36mAuthor Load (0.6ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Oran Richman'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Oran Richman', '2016-10-08 10:25:47', '2016-10-08 10:25:47')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (851, 311, 0, '2016-10-08 10:25:47', '2016-10-08 10:25:47')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.3ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Shie Mannor'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35m (0.1ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (12, 311, 1, '2016-10-08 10:25:47', '2016-10-08 10:25:47')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.5ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Extending Weakly-Sticky Datalog+/-: Query-Answering Tractability and Optimizations'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Extending Weakly-Sticky Datalog+/-: Query-Answering Tractability and Optimizations', 'Weakly-sticky (WS) Datalog+/- is an expressive member of the family of Datalog+/- programs that is based on the syntactic notions of stickiness and weak-acyclicity. Query answering over the WS programs has been investigated, but there is still much work to do on the design and implementation of practical query answering (QA) algorithms and their optimizations. Here, we study sticky and WS programs from the point of view of the behavior of the chase procedure, extending the stickiness property of the chase to that of generalized stickiness of the chase (gsch-property). With this property we specify the semantic class of GSCh programs, which includes sticky and WS programs, and other syntactic subclasses that we identify. In particular, we introduce joint-weakly-sticky (JWS) programs, that include WS programs. We also propose a bottom-up QA algorithm for a range of subclasses of GSCh. The algorithm runs in polynomial time (in data) for JWS programs. Unlike the WS class, JWS is closed under a general magic-sets rewriting procedure for the optimization of programs with existential rules. We apply the magic-sets rewriting in combination with the proposed QA algorithm for the optimization of QA over JWS programs.', 'cs.DB', '2016-07-10T02:56:33Z', 'http://arxiv.org/abs/1607.02682v1', '2016-10-08 10:25:47', '2016-10-08 10:25:47')
  [1m[36m (2.9ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (1.0ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 312
  [1m[36mAuthor Load (0.8ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Mostafa Milani'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Mostafa Milani', '2016-10-08 10:25:47', '2016-10-08 10:25:47')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (852, 312, 0, '2016-10-08 10:25:47', '2016-10-08 10:25:47')
  [1m[36m (2.7ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.0ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Leopoldo Bertossi'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Leopoldo Bertossi', '2016-10-08 10:25:47', '2016-10-08 10:25:47')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (853, 312, 1, '2016-10-08 10:25:47', '2016-10-08 10:25:47')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (0.7ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Augmenting Supervised Emotion Recognition with Rule-Based Decision Model'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.4ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Augmenting Supervised Emotion Recognition with Rule-Based Decision Model', 'The aim of this research is development of rule based decision model for emotion recognition. This research also proposes using the rules for augmenting inter-corporal recognition accuracy in multimodal systems that use supervised learning techniques. The classifiers for such learning based recognition systems are susceptible to over fitting and only perform well on intra-corporal data. To overcome the limitation this research proposes using rule based model as an additional modality. The rules were developed using raw feature data from visual channel, based on human annotator agreement and existing studies that have attributed movement and postures to emotions. The outcome of the rule evaluations was combined during the decision phase of emotion recognition system. The results indicate rule based emotion recognition augment recognition accuracy of learning based systems and also provide better recognition rate across inter corpus emotion test data.', 'cs.HC', '2016-07-09T20:34:48Z', 'http://arxiv.org/abs/1607.02660v1', '2016-10-08 10:25:47', '2016-10-08 10:25:47')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPublish Load (0.8ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 313[0m
  [1m[35mAuthor Load (0.6ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Amol Patwardhan'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Amol Patwardhan', '2016-10-08 10:25:47', '2016-10-08 10:25:47')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (854, 313, 0, '2016-10-08 10:25:47', '2016-10-08 10:25:47')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (1.0ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Gerald Knapp'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Gerald Knapp', '2016-10-08 10:25:47', '2016-10-08 10:25:47')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (855, 313, 1, '2016-10-08 10:25:47', '2016-10-08 10:25:47')
  [1m[36m (1.8ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.7ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Analysis of opinionated text for opinion mining'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Analysis of opinionated text for opinion mining', 'In sentiment analysis, the polarities of the opinions expressed on an object/feature are determined to assess the sentiment of a sentence or document whether it is positive/negative/neutral. Naturally, the object/feature is a noun representation which refers to a product or a component of a product, let us say, the \"lens\" in a camera and opinions emanating on it are captured in adjectives, verbs, adverbs and noun words themselves. Apart from such words, other meta-information and diverse effective features are also going to play an important role in influencing the sentiment polarity and contribute significantly to the performance of the system. In this paper, some of the associated information/meta-data are explored and investigated in the sentiment text. Based on the analysis results presented here, there is scope for further assessment and utilization of the meta-information as features in text categorization, ranking text document, identification of spam documents and polarity classification problems.', 'cs.CL', '2016-07-09T07:11:43Z', 'http://dx.doi.org/10.5121/mlaij.2016.3204', '2016-10-08 10:25:47', '2016-10-08 10:25:47')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (0.9ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 314
  [1m[36mAuthor Load (0.6ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'K Paramesha'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('K Paramesha', '2016-10-08 10:25:47', '2016-10-08 10:25:47')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (856, 314, 0, '2016-10-08 10:25:47', '2016-10-08 10:25:47')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.6ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'K C Ravishankar'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('K C Ravishankar', '2016-10-08 10:25:47', '2016-10-08 10:25:47')
  [1m[36m (3.0ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (857, 314, 1, '2016-10-08 10:25:47', '2016-10-08 10:25:47')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPaper Load (0.7ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Real-Time Anomaly Detection for Streaming Analytics'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Real-Time Anomaly Detection for Streaming Analytics', 'Much of the worlds data is streaming, time-series data, where anomalies give significant information in critical situations. Yet detecting anomalies in streaming data is a difficult task, requiring detectors to process data in real-time, and learn while simultaneously making predictions. We present a novel anomaly detection technique based on an on-line sequence memory algorithm called Hierarchical Temporal Memory (HTM). We show results from a live application that detects anomalies in financial metrics in real-time. We also test the algorithm on NAB, a published benchmark for real-time anomaly detection, where our algorithm achieves best-in-class results.', 'cs.AI', '2016-07-08T18:20:32Z', 'http://arxiv.org/abs/1607.02480v1', '2016-10-08 10:25:47', '2016-10-08 10:25:47')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPublish Load (0.7ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 315[0m
  [1m[35mAuthor Load (0.5ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Subutai Ahmad'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Subutai Ahmad', '2016-10-08 10:25:47', '2016-10-08 10:25:47')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (858, 315, 0, '2016-10-08 10:25:47', '2016-10-08 10:25:47')[0m
  [1m[35m (0.3ms)[0m  COMMIT
  [1m[36mAuthor Load (0.6ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Scott Purdy'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Scott Purdy', '2016-10-08 10:25:47', '2016-10-08 10:25:47')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (859, 315, 1, '2016-10-08 10:25:47', '2016-10-08 10:25:47')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.5ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Log-Linear RNNs: Towards Recurrent Neural Networks with Flexible Prior Knowledge'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Log-Linear RNNs: Towards Recurrent Neural Networks with Flexible Prior Knowledge', 'We introduce \\emph{LL-RNNs} (Log-Linear RNNs), an extension of Recurrent Neural Networks that replaces the softmax output layer by a log-linear output layer, of which the softmax is a special case. This conceptually simple move has two main advantages. First, it allows the learner to combat training data sparsity by allowing it to model words (or more generally, output symbols) as complex combinations of attributes without requiring that each combination is directly observed in the training data (as the softmax does). Second, it permits the inclusion of flexible prior knowledge in the form of \\emph{a priori} specified modular features, where the neural network component learns to dynamically control the weights of a log-linear distribution exploiting these features. We provide some motivating illustrations, and argue that the log-linear and the neural-network components contribute complementary strengths to the LL-RNN: the LL aspect allows the model to incorporate rich prior knowledge, while the NN aspect, according to the \"representation learning\" paradigm, allows the model to discover novel combination of characteristics.', 'cs.AI', '2016-07-08T17:35:51Z', 'http://arxiv.org/abs/1607.02467v1', '2016-10-08 10:25:47', '2016-10-08 10:25:47')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (0.8ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 316
  [1m[36mAuthor Load (0.6ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Marc Dymetman'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Marc Dymetman', '2016-10-08 10:25:47', '2016-10-08 10:25:47')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (860, 316, 0, '2016-10-08 10:25:47', '2016-10-08 10:25:47')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.6ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Chunyang Xiao'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Chunyang Xiao', '2016-10-08 10:25:47', '2016-10-08 10:25:47')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (861, 316, 1, '2016-10-08 10:25:47', '2016-10-08 10:25:47')[0m
  [1m[35m (1.1ms)[0m  COMMIT
  [1m[36mPaper Load (0.6ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Solving finite-domain linear constraints in presence of the $\\texttt{alldifferent}$'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Solving finite-domain linear constraints in presence of the $\\texttt{alldifferent}$', 'In this paper, we investigate the possibility of improvement of the widely-used filtering algorithm for the linear constraints in constraint satisfaction problems in the presence of the alldifferent constraints. In many cases, the fact that the variables in a linear constraint are also constrained by some alldifferent constraints may help us to calculate stronger bounds of the variables, leading to a stronger constraint propagation. We propose an improved filtering algorithm that targets such cases. We provide a detailed description of the proposed algorithm and prove its correctness. We evaluate the approach on five different problems that involve combinations of the linear and the alldifferent constraints. We also compare our algorithm to other relevant approaches. The experimental results show a great potential of the proposed improvement.', 'cs.LO', '2016-07-08T17:32:58Z', 'http://arxiv.org/abs/1607.02466v2', '2016-10-08 10:25:47', '2016-10-08 10:25:47')[0m
  [1m[35m (2.9ms)[0m  COMMIT
  [1m[36mPublish Load (1.0ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 317[0m
  [1m[35mAuthor Load (0.9ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Milan Banković'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Milan Banković', '2016-10-08 10:25:47', '2016-10-08 10:25:47')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (862, 317, 0, '2016-10-08 10:25:47', '2016-10-08 10:25:47')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPaper Load (0.6ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Explaining Deep Convolutional Neural Networks on Music Classification'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Explaining Deep Convolutional Neural Networks on Music Classification', 'Deep convolutional neural networks (CNNs) have been actively adopted in the field of music information retrieval, e.g. genre classification, mood detection, and chord recognition. However, the process of learning and prediction is little understood, particularly when it is applied to spectrograms. We introduce auralisation of a CNN to understand its underlying mechanism, which is based on a deconvolution procedure introduced in [2]. Auralisation of a CNN is converting the learned convolutional features that are obtained from deconvolution into audio signals. In the experiments and discussions, we explain trained features of a 5-layer CNN based on the deconvolved spectrograms and auralised signals. The pairwise correlations per layers with varying different musical attributes are also investigated to understand the evolution of the learnt features. It is shown that in the deep layers, the features are learnt to capture textures, the patterns of continuous distributions, rather than shapes of lines.', 'cs.LG', '2016-07-08T16:40:30Z', 'http://arxiv.org/abs/1607.02444v1', '2016-10-08 10:25:47', '2016-10-08 10:25:47')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPublish Load (0.6ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 318[0m
  [1m[35mAuthor Load (0.4ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Keunwoo Choi'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35m (0.1ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (377, 318, 0, '2016-10-08 10:25:47', '2016-10-08 10:25:47')
  [1m[36m (0.6ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.5ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'George Fazekas'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35m (0.1ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (378, 318, 1, '2016-10-08 10:25:47', '2016-10-08 10:25:47')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.6ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Mark Sandler'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35m (0.2ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (379, 318, 2, '2016-10-08 10:25:47', '2016-10-08 10:25:47')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.5ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Document Clustering Games in Static and Dynamic Scenarios'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Document Clustering Games in Static and Dynamic Scenarios', 'In this work we propose a game theoretic model for document clustering. Each document to be clustered is represented as a player and each cluster as a strategy. The players receive a reward interacting with other players that they try to maximize choosing their best strategies. The geometry of the data is modeled with a weighted graph that encodes the pairwise similarity among documents, so that similar players are constrained to choose similar strategies, updating their strategy preferences at each iteration of the games. We used different approaches to find the prototypical elements of the clusters and with this information we divided the players into two disjoint sets, one collecting players with a definite strategy and the other one collecting players that try to learn from others the correct strategy to play. The latter set of players can be considered as new data points that have to be clustered according to previous information. This representation is useful in scenarios in which the data are streamed continuously. The evaluation of the system was conducted on 13 document datasets using different settings. It shows that the proposed method performs well compared to different document clustering algorithms.', 'cs.AI', '2016-07-08T16:17:12Z', 'http://arxiv.org/abs/1607.02436v1', '2016-10-08 10:25:47', '2016-10-08 10:25:47')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (0.7ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 319
  [1m[36mAuthor Load (0.3ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Rocco Tripodi'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36m (0.2ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (4, 319, 0, '2016-10-08 10:25:47', '2016-10-08 10:25:47')[0m
  [1m[35m (3.0ms)[0m  COMMIT
  [1m[36mAuthor Load (0.4ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Marcello Pelillo'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36m (0.2ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (6, 319, 1, '2016-10-08 10:25:47', '2016-10-08 10:25:47')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPaper Load (0.7ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Learning opening books in partially observable games: using random seeds in Phantom Go'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.4ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Learning opening books in partially observable games: using random seeds in Phantom Go', 'Many artificial intelligences (AIs) are randomized. One can be lucky or unlucky with the random seed; we quantify this effect and show that, maybe contrarily to intuition, this is far from being negligible. Then, we apply two different existing algorithms for selecting good seeds and good probability distributions over seeds. This mainly leads to learning an opening book. We apply this to Phantom Go, which, as all phantom games, is hard for opening book learning. We improve the winning rate from 50% to 70% in 5x5 against the same AI, and from approximately 0% to 40% in 5x5, 7x7 and 9x9 against a stronger (learning) opponent.', 'cs.AI', '2016-07-08T15:58:28Z', 'http://arxiv.org/abs/1607.02431v1', '2016-10-08 10:25:47', '2016-10-08 10:25:47')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPublish Load (0.8ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 320[0m
  [1m[35mAuthor Load (0.7ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Tristan Cazenave'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Tristan Cazenave', '2016-10-08 10:25:47', '2016-10-08 10:25:47')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (863, 320, 0, '2016-10-08 10:25:47', '2016-10-08 10:25:47')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (0.7ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Jialin Liu'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36m (0.1ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (631, 320, 1, '2016-10-08 10:25:47', '2016-10-08 10:25:47')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.5ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Fabien Teytaud'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36m (0.1ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (632, 320, 2, '2016-10-08 10:25:47', '2016-10-08 10:25:47')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (0.7ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Olivier Teytaud'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36m (0.1ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (633, 320, 3, '2016-10-08 10:25:47', '2016-10-08 10:25:47')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPaper Load (0.5ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Translating Bayesian Networks into Entity Relationship Models, Extended Version'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Translating Bayesian Networks into Entity Relationship Models, Extended Version', 'Big data analytics applications drive the convergence of data management and machine learning. But there is no conceptual language available that is spoken in both worlds. The main contribution of the paper is a method to translate Bayesian networks, a main conceptual language for probabilistic graphical models, into usable entity relationship models. The transformed representation of a Bayesian network leaves out mathematical details about probabilistic relationships but unfolds all information relevant for data management tasks. As a real world example, we present the TopicExplorer system that uses Bayesian topic models as a core component in an interactive, database-supported web application. Last, we sketch a conceptual framework that eases machine learning specific development tasks while building big data analytics applications.', 'cs.DB', '2016-07-08T15:06:46Z', 'http://arxiv.org/abs/1607.02399v1', '2016-10-08 10:25:47', '2016-10-08 10:25:47')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPublish Load (0.6ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 321[0m
  [1m[35mAuthor Load (0.5ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Frank Rosner'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Frank Rosner', '2016-10-08 10:25:47', '2016-10-08 10:25:47')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (864, 321, 0, '2016-10-08 10:25:47', '2016-10-08 10:25:47')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.9ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Alexander Hinneburg'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Alexander Hinneburg', '2016-10-08 10:25:47', '2016-10-08 10:25:47')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (865, 321, 1, '2016-10-08 10:25:47', '2016-10-08 10:25:47')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.6ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'CaR-FOREST: Joint Classification-Regression Decision Forests for Overlapping Audio Event Detection'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('CaR-FOREST: Joint Classification-Regression Decision Forests for Overlapping Audio Event Detection', 'This report describes our submissions to Task2 and Task3 of the DCASE 2016 challenge. The systems aim at dealing with the detection of overlapping audio events in continuous streams, where the detectors are based on random decision forests. The proposed forests are jointly trained for classification and regression simultaneously. Initially, the training is classification-oriented to encourage the trees to select discriminative features from overlapping mixtures to separate positive audio segments from the negative ones. The regression phase is then carried out to let the positive audio segments vote for the event onsets and offsets, and therefore model the temporal structure of audio events. One random decision forest is specifically trained for each event category of interest. Experimental results on the development data show that our systems significantly outperform the baseline on the Task2 evaluation while they are inferior to the baseline in the Task3 evaluation.', 'cs.SD', '2016-07-08T10:42:43Z', 'http://arxiv.org/abs/1607.02306v2', '2016-10-08 10:25:48', '2016-10-08 10:25:48')
  [1m[36m (3.0ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (1.0ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 322
  [1m[36mAuthor Load (0.8ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Huy Phan'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Huy Phan', '2016-10-08 10:25:48', '2016-10-08 10:25:48')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (866, 322, 0, '2016-10-08 10:25:48', '2016-10-08 10:25:48')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.8ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Lars Hertel'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Lars Hertel', '2016-10-08 10:25:48', '2016-10-08 10:25:48')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (867, 322, 1, '2016-10-08 10:25:48', '2016-10-08 10:25:48')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.9ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Marco Maass'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Marco Maass', '2016-10-08 10:25:48', '2016-10-08 10:25:48')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (868, 322, 2, '2016-10-08 10:25:48', '2016-10-08 10:25:48')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.7ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Philipp Koch'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Philipp Koch', '2016-10-08 10:25:48', '2016-10-08 10:25:48')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (869, 322, 3, '2016-10-08 10:25:48', '2016-10-08 10:25:48')[0m
  [1m[35m (2.5ms)[0m  COMMIT
  [1m[36mAuthor Load (1.0ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Alfred Mertins'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Alfred Mertins', '2016-10-08 10:25:48', '2016-10-08 10:25:48')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (870, 322, 4, '2016-10-08 10:25:48', '2016-10-08 10:25:48')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.6ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Argumentation Models for Cyber Attribution'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Argumentation Models for Cyber Attribution', 'A major challenge in cyber-threat analysis is combining information from different sources to find the person or the group responsible for the cyber-attack. It is one of the most important technical and policy challenges in cyber-security. The lack of ground truth for an individual responsible for an attack has limited previous studies. In this paper, we take a first step towards overcoming this limitation by building a dataset from the capture-the-flag event held at DEFCON, and propose an argumentation model based on a formal reasoning framework called DeLP (Defeasible Logic Programming) designed to aid an analyst in attributing a cyber-attack. We build models from latent variables to reduce the search space of culprits (attackers), and show that this reduction significantly improves the performance of classification-based approaches from 37% to 62% in identifying the attacker.', 'cs.AI', '2016-07-07T21:01:06Z', 'http://arxiv.org/abs/1607.02171v1', '2016-10-08 10:25:48', '2016-10-08 10:25:48')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (0.9ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 323
  [1m[36mAuthor Load (0.5ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Eric Nunes'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36m (0.1ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (590, 323, 0, '2016-10-08 10:25:48', '2016-10-08 10:25:48')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.5ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Paulo Shakarian'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36m (0.1ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (599, 323, 1, '2016-10-08 10:25:48', '2016-10-08 10:25:48')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.6ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Gerardo I. Simari'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Gerardo I. Simari', '2016-10-08 10:25:48', '2016-10-08 10:25:48')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (871, 323, 2, '2016-10-08 10:25:48', '2016-10-08 10:25:48')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.8ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Andrew Ruef'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Andrew Ruef', '2016-10-08 10:25:48', '2016-10-08 10:25:48')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (872, 323, 3, '2016-10-08 10:25:48', '2016-10-08 10:25:48')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPaper Load (0.6ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Representing Verbs with Rich Contexts: an Evaluation on Verb Similarity'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Representing Verbs with Rich Contexts: an Evaluation on Verb Similarity', 'Several studies on sentence processing suggest that the mental lexicon keeps track of the mutual expectations between words. Current DSMs, however, represent context words as separate features, which causes the loss of important information for word expectations, such as word order and interrelations. In this paper, we present a DSM which addresses the issue by defining verb contexts as joint dependencies. We test our representation in a verb similarity task on two datasets, showing that joint contexts are more efficient than single dependencies, even with a relatively small amount of training data.', 'cs.CL', '2016-07-07T16:00:33Z', 'http://arxiv.org/abs/1607.02061v1', '2016-10-08 10:25:48', '2016-10-08 10:25:48')[0m
  [1m[35m (3.0ms)[0m  COMMIT
  [1m[36mPublish Load (1.0ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 324[0m
  [1m[35mAuthor Load (0.9ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Emmanuele Chersoni'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.4ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Emmanuele Chersoni', '2016-10-08 10:25:48', '2016-10-08 10:25:48')
  [1m[36m (0.6ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (873, 324, 0, '2016-10-08 10:25:48', '2016-10-08 10:25:48')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (1.0ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Enrico Santus'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Enrico Santus', '2016-10-08 10:25:48', '2016-10-08 10:25:48')[0m
  [1m[35m (0.7ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (874, 324, 1, '2016-10-08 10:25:48', '2016-10-08 10:25:48')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.7ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Alessandro Lenci'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Alessandro Lenci', '2016-10-08 10:25:48', '2016-10-08 10:25:48')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (875, 324, 2, '2016-10-08 10:25:48', '2016-10-08 10:25:48')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.6ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Philippe Blache'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Philippe Blache', '2016-10-08 10:25:48', '2016-10-08 10:25:48')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (876, 324, 3, '2016-10-08 10:25:48', '2016-10-08 10:25:48')
  [1m[36m (0.3ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.6ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Chu-Ren Huang'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Chu-Ren Huang', '2016-10-08 10:25:48', '2016-10-08 10:25:48')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (877, 324, 4, '2016-10-08 10:25:48', '2016-10-08 10:25:48')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (0.5ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Mapping Data to Ontologies with Exceptions Using Answer Set Programming'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.4ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Mapping Data to Ontologies with Exceptions Using Answer Set Programming', 'In ontology-based data access, databases are connected to an ontology via mappings from queries over the database to queries over the ontology. In this paper, we consider mappings from relational databases to first-order ontologies, and define an ASP-based framework for GLAV mappings with queries over the ontology in the mapping rule bodies. We show that this type of mappings can be used to express constraints and exceptions, as well as being a powerful mechanism for succinctly representing OBDA mappings. We give an algorithm for brave reasoning in this setting, and show that this problem has either the same data complexity as ASP (NP- complete), or it is at least as hard as the complexity of checking entailment for the ontology queries. Furthermore, we show that for ontologies with UCQ-rewritable queries there exists a natural reduction from mapping programs to \\exists-ASP, an extension of ASP with existential variables that itself admits a natural reduction to ASP.', 'cs.AI', '2016-07-07T14:00:06Z', 'http://arxiv.org/abs/1607.02018v1', '2016-10-08 10:25:48', '2016-10-08 10:25:48')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPublish Load (0.9ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 325[0m
  [1m[35mAuthor Load (0.5ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Daniel P. Lupp'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Daniel P. Lupp', '2016-10-08 10:25:48', '2016-10-08 10:25:48')
  [1m[36m (0.3ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (878, 325, 0, '2016-10-08 10:25:48', '2016-10-08 10:25:48')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.7ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Evgenij Thorstensen'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Evgenij Thorstensen', '2016-10-08 10:25:48', '2016-10-08 10:25:48')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (879, 325, 1, '2016-10-08 10:25:48', '2016-10-08 10:25:48')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.5ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Scalable Semantic Matching of Queries to Ads in Sponsored Search Advertising'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Scalable Semantic Matching of Queries to Ads in Sponsored Search Advertising', 'Sponsored search represents a major source of revenue for web search engines. This popular advertising model brings a unique possibility for advertisers to target users\' immediate intent communicated through a search query, usually by displaying their ads alongside organic search results for queries deemed relevant to their products or services. However, due to a large number of unique queries it is challenging for advertisers to identify all such relevant queries. For this reason search engines often provide a service of advanced matching, which automatically finds additional relevant queries for advertisers to bid on. We present a novel advanced matching approach based on the idea of semantic embeddings of queries and ads. The embeddings were learned using a large data set of user search sessions, consisting of search queries, clicked ads and search links, while utilizing contextual information such as dwell time and skipped ads. To address the large-scale nature of our problem, both in terms of data and vocabulary size, we propose a novel distributed algorithm for training of the embeddings. Finally, we present an approach for overcoming a cold-start problem associated with new ads and queries. We report results of editorial evaluation and online tests on actual search traffic. The results show that our approach significantly outperforms baselines in terms of relevance, coverage, and incremental revenue. Lastly, we open-source learned query embeddings to be used by researchers in computational advertising and related fields.', 'cs.IR', '2016-07-07T03:43:12Z', 'http://dx.doi.org/10.1145/2911451.2911538.', '2016-10-08 10:25:48', '2016-10-08 10:25:48')
  [1m[36m (3.0ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (1.0ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 326
  [1m[36mAuthor Load (0.9ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Mihajlo Grbovic'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Mihajlo Grbovic', '2016-10-08 10:25:48', '2016-10-08 10:25:48')[0m
  [1m[35m (0.6ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (880, 326, 0, '2016-10-08 10:25:48', '2016-10-08 10:25:48')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.9ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Nemanja Djuric'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Nemanja Djuric', '2016-10-08 10:25:48', '2016-10-08 10:25:48')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (881, 326, 1, '2016-10-08 10:25:48', '2016-10-08 10:25:48')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (0.8ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Vladan Radosavljevic'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Vladan Radosavljevic', '2016-10-08 10:25:48', '2016-10-08 10:25:48')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (882, 326, 2, '2016-10-08 10:25:48', '2016-10-08 10:25:48')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.7ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Fabrizio Silvestri'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Fabrizio Silvestri', '2016-10-08 10:25:48', '2016-10-08 10:25:48')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (883, 326, 3, '2016-10-08 10:25:48', '2016-10-08 10:25:48')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.9ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Ricardo Baeza-Yates'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Ricardo Baeza-Yates', '2016-10-08 10:25:48', '2016-10-08 10:25:48')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (884, 326, 4, '2016-10-08 10:25:48', '2016-10-08 10:25:48')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.8ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Andrew Feng'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Andrew Feng', '2016-10-08 10:25:48', '2016-10-08 10:25:48')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (885, 326, 5, '2016-10-08 10:25:48', '2016-10-08 10:25:48')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.8ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Erik Ordentlich'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Erik Ordentlich', '2016-10-08 10:25:48', '2016-10-08 10:25:48')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (886, 326, 6, '2016-10-08 10:25:48', '2016-10-08 10:25:48')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.7ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Lee Yang'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Lee Yang', '2016-10-08 10:25:48', '2016-10-08 10:25:48')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (887, 326, 7, '2016-10-08 10:25:48', '2016-10-08 10:25:48')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (0.7ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Gavin Owens'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Gavin Owens', '2016-10-08 10:25:48', '2016-10-08 10:25:48')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (888, 326, 8, '2016-10-08 10:25:48', '2016-10-08 10:25:48')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.6ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Rolling Horizon Coevolutionary Planning for Two-Player Video Games'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Rolling Horizon Coevolutionary Planning for Two-Player Video Games', 'This paper describes a new algorithm for decision making in two-player real-time video games. As with Monte Carlo Tree Search, the algorithm can be used without heuristics and has been developed for use in general video game AI. The approach is to extend recent work on rolling horizon evolutionary planning, which has been shown to work well for single-player games, to two (or in principle many) player games. To select an action the algorithm co-evolves two (or in the general case N) populations, one for each player, where each individual is a sequence of actions for the respective player. The fitness of each individual is evaluated by playing it against a selection of action-sequences from the opposing population. When choosing an action to take in the game, the first action is chosen from the fittest member of the population for that player. The new algorithm is compared with a number of general video game AI algorithms on three variations of a two-player space battle game, with promising results.', 'cs.AI', '2016-07-06T18:03:18Z', 'http://arxiv.org/abs/1607.01730v1', '2016-10-08 10:25:48', '2016-10-08 10:25:48')
  [1m[36m (3.0ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (0.8ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 327
  [1m[36mAuthor Load (0.6ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Jialin Liu'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36m (0.2ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (631, 327, 0, '2016-10-08 10:25:48', '2016-10-08 10:25:48')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.4ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Diego Pérez-Liébana'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36m (0.2ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (108, 327, 1, '2016-10-08 10:25:48', '2016-10-08 10:25:48')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (0.5ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Simon M. Lucas'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36m (0.1ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (109, 327, 2, '2016-10-08 10:25:48', '2016-10-08 10:25:48')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (0.5ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Cost-Optimal Algorithms for Planning with Procedural Control Knowledge'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Cost-Optimal Algorithms for Planning with Procedural Control Knowledge', 'There is an impressive body of work on developing heuristics and other reasoning algorithms to guide search in optimal and anytime planning algorithms for classical planning. However, very little effort has been directed towards developing analogous techniques to guide search towards high-quality solutions in hierarchical planning formalisms like HTN planning, which allows using additional domain-specific procedural control knowledge. In lieu of such techniques, this control knowledge often needs to provide the necessary search guidance to the planning algorithm, which imposes a substantial burden on the domain author and can yield brittle or error-prone domain models. We address this gap by extending recent work on a new hierarchical goal-based planning formalism called Hierarchical Goal Network (HGN) Planning to develop the Hierarchically-Optimal Goal Decomposition Planner (HOpGDP), an HGN planning algorithm that computes hierarchically-optimal plans. HOpGDP is guided by $h_{HL}$, a new HGN planning heuristic that extends existing admissible landmark-based heuristics from classical planning to compute admissible cost estimates for HGN planning problems. Our experimental evaluation across three benchmark planning domains shows that HOpGDP compares favorably to both optimal classical planners due to its ability to use domain-specific procedural knowledge, and a blind-search version of HOpGDP due to the search guidance provided by $h_{HL}$.', 'cs.AI', '2016-07-06T18:02:33Z', 'http://arxiv.org/abs/1607.01729v2', '2016-10-08 10:25:48', '2016-10-08 10:25:48')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPublish Load (0.7ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 328[0m
  [1m[35mAuthor Load (0.5ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Vikas Shivashankar'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Vikas Shivashankar', '2016-10-08 10:25:48', '2016-10-08 10:25:48')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (889, 328, 0, '2016-10-08 10:25:48', '2016-10-08 10:25:48')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.6ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Ron Alford'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Ron Alford', '2016-10-08 10:25:48', '2016-10-08 10:25:48')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (890, 328, 1, '2016-10-08 10:25:48', '2016-10-08 10:25:48')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.8ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Mark Roberts'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Mark Roberts', '2016-10-08 10:25:48', '2016-10-08 10:25:48')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (891, 328, 2, '2016-10-08 10:25:48', '2016-10-08 10:25:48')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (0.8ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'David W. Aha'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('David W. Aha', '2016-10-08 10:25:48', '2016-10-08 10:25:48')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (892, 328, 3, '2016-10-08 10:25:48', '2016-10-08 10:25:48')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.5ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Deep CORAL: Correlation Alignment for Deep Domain Adaptation'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.4ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Deep CORAL: Correlation Alignment for Deep Domain Adaptation', 'Deep neural networks are able to learn powerful representations from large quantities of labeled input data, however they cannot always generalize well across changes in input distributions. Domain adaptation algorithms have been proposed to compensate for the degradation in performance due to domain shift. In this paper, we address the case when the target domain is unlabeled, requiring unsupervised adaptation. CORAL is a \"frustratingly easy\" unsupervised domain adaptation method that aligns the second-order statistics of the source and target distributions with a linear transformation. Here, we extend CORAL to learn a nonlinear transformation that aligns correlations of layer activations in deep neural networks (Deep CORAL). Experiments on standard benchmark datasets show state-of-the-art performance.', 'cs.CV', '2016-07-06T17:35:55Z', 'http://arxiv.org/abs/1607.01719v1', '2016-10-08 10:25:48', '2016-10-08 10:25:48')
  [1m[36m (3.0ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (1.0ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 329
  [1m[36mAuthor Load (0.9ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Baochen Sun'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Baochen Sun', '2016-10-08 10:25:48', '2016-10-08 10:25:48')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (893, 329, 0, '2016-10-08 10:25:48', '2016-10-08 10:25:48')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.7ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Kate Saenko'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Kate Saenko', '2016-10-08 10:25:48', '2016-10-08 10:25:48')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (894, 329, 1, '2016-10-08 10:25:48', '2016-10-08 10:25:48')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPaper Load (0.6ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Lattice Structure of Variable Precision Rough Sets'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Lattice Structure of Variable Precision Rough Sets', 'The main purpose of this paper is to study the lattice structure of variable precision rough sets. The notion of variation in precision of rough sets have been further extended to variable precision rough set with variable classification error and its algebraic properties are also studied.', 'cs.AI', '2016-07-06T16:27:42Z', 'http://arxiv.org/abs/1607.01634v1', '2016-10-08 10:25:48', '2016-10-08 10:25:48')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPublish Load (0.9ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 330[0m
  [1m[35mAuthor Load (0.6ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Sumita Basu'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Sumita Basu', '2016-10-08 10:25:48', '2016-10-08 10:25:48')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (895, 330, 0, '2016-10-08 10:25:48', '2016-10-08 10:25:48')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (0.6ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'A New Hierarchical Redundancy Eliminated Tree Augmented Naive Bayes Classifier for Coping with Gene Ontology-based Features'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('A New Hierarchical Redundancy Eliminated Tree Augmented Naive Bayes Classifier for Coping with Gene Ontology-based Features', 'The Tree Augmented Naive Bayes classifier is a type of probabilistic graphical model that can represent some feature dependencies. In this work, we propose a Hierarchical Redundancy Eliminated Tree Augmented Naive Bayes (HRE-TAN) algorithm, which considers removing the hierarchical redundancy during the classifier learning process, when coping with data containing hierarchically structured features. The experiments showed that HRE-TAN obtains significantly better predictive performance than the conventional Tree Augmented Naive Bayes classifier, and enhanced the robustness against imbalanced class distributions, in aging-related gene datasets with Gene Ontology terms used as features.', 'cs.LG', '2016-07-06T16:00:43Z', 'http://arxiv.org/abs/1607.01690v1', '2016-10-08 10:25:48', '2016-10-08 10:25:48')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPublish Load (0.8ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 331[0m
  [1m[35mAuthor Load (0.5ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Cen Wan'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Cen Wan', '2016-10-08 10:25:48', '2016-10-08 10:25:48')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (896, 331, 0, '2016-10-08 10:25:48', '2016-10-08 10:25:48')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.7ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Alex A. Freitas'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Alex A. Freitas', '2016-10-08 10:25:48', '2016-10-08 10:25:48')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (897, 331, 1, '2016-10-08 10:25:48', '2016-10-08 10:25:48')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.6ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Towards Self-explanatory Ontology Visualization with Contextual Verbalization'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Towards Self-explanatory Ontology Visualization with Contextual Verbalization', 'Ontologies are one of the core foundations of the Semantic Web. To participate in Semantic Web projects, domain experts need to be able to understand the ontologies involved. Visual notations can provide an overview of the ontology and help users to understand the connections among entities. However, the users first need to learn the visual notation before they can interpret it correctly. Controlled natural language representation would be readable right away and might be preferred in case of complex axioms, however, the structure of the ontology would remain less apparent. We propose to combine ontology visualizations with contextual ontology verbalizations of selected ontology (diagram) elements, displaying controlled natural language (CNL) explanations of OWL axioms corresponding to the selected visual notation elements. Thus, the domain experts will benefit from both the high-level overview provided by the graphical notation and the detailed textual explanations of particular elements in the diagram.', 'cs.AI', '2016-07-06T06:58:31Z', 'http://dx.doi.org/10.1007/978-3-319-40180-5_1', '2016-10-08 10:25:48', '2016-10-08 10:25:48')
  [1m[36m (3.0ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (1.0ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 332
  [1m[36mAuthor Load (0.8ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Renārs Liepiņš'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Renārs Liepiņš', '2016-10-08 10:25:48', '2016-10-08 10:25:48')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (898, 332, 0, '2016-10-08 10:25:48', '2016-10-08 10:25:48')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.8ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Uldis Bojārs'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Uldis Bojārs', '2016-10-08 10:25:48', '2016-10-08 10:25:48')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (899, 332, 1, '2016-10-08 10:25:48', '2016-10-08 10:25:48')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.7ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Normunds Grūzītis'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Normunds Grūzītis', '2016-10-08 10:25:48', '2016-10-08 10:25:48')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (900, 332, 2, '2016-10-08 10:25:48', '2016-10-08 10:25:48')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.8ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Kārlis Čerāns'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Kārlis Čerāns', '2016-10-08 10:25:48', '2016-10-08 10:25:48')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (901, 332, 3, '2016-10-08 10:25:48', '2016-10-08 10:25:48')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.6ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Edgars Celms'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Edgars Celms', '2016-10-08 10:25:48', '2016-10-08 10:25:48')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (902, 332, 4, '2016-10-08 10:25:48', '2016-10-08 10:25:48')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.5ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Mixed Strategy for Constrained Stochastic Optimal Control'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Mixed Strategy for Constrained Stochastic Optimal Control', 'Choosing control inputs randomly can result in a reduced expected cost in optimal control problems with stochastic constraints, such as stochastic model predictive control (SMPC). We consider a controller with initial randomization, meaning that the controller randomly chooses from K+1 control sequences at the beginning (called K-randimization).It is known that, for a finite-state, finite-action Markov Decision Process (MDP) with K constraints, K-randimization is sufficient to achieve the minimum cost. We found that the same result holds for stochastic optimal control problems with continuous state and action spaces.Furthermore, we show the randomization of control input can result in reduced cost when the optimization problem is nonconvex, and the cost reduction is equal to the duality gap. We then provide the necessary and sufficient conditions for the optimality of a randomized solution, and develop an efficient solution method based on dual optimization. Furthermore, in a special case with K=1 such as a joint chance-constrained problem, the dual optimization can be solved even more efficiently by root finding. Finally, we test the theories and demonstrate the solution method on multiple practical problems ranging from path planning to the planning of entry, descent, and landing (EDL) for future Mars missions.', 'cs.RO', '2016-07-06T04:23:36Z', 'http://arxiv.org/abs/1607.01478v1', '2016-10-08 10:25:48', '2016-10-08 10:25:48')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (0.7ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 333
  [1m[36mAuthor Load (0.6ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Masahiro Ono'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Masahiro Ono', '2016-10-08 10:25:48', '2016-10-08 10:25:48')[0m
  [1m[35m (2.9ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (903, 333, 0, '2016-10-08 10:25:48', '2016-10-08 10:25:48')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.9ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Mahmoud El Chamie'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Mahmoud El Chamie', '2016-10-08 10:25:48', '2016-10-08 10:25:48')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (904, 333, 1, '2016-10-08 10:25:48', '2016-10-08 10:25:48')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (0.8ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Marco Pavone'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Marco Pavone', '2016-10-08 10:25:48', '2016-10-08 10:25:48')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (905, 333, 2, '2016-10-08 10:25:48', '2016-10-08 10:25:48')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.8ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Behcet Acikmese'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Behcet Acikmese', '2016-10-08 10:25:48', '2016-10-08 10:25:48')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (906, 333, 3, '2016-10-08 10:25:48', '2016-10-08 10:25:48')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPaper Load (0.6ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'One-Shot Session Recommendation Systems with Combinatorial Items'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.7ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('One-Shot Session Recommendation Systems with Combinatorial Items', 'In recent years, content recommendation systems in large websites (or \\emph{content providers}) capture an increased focus. While the type of content varies, e.g.\\ movies, articles, music, advertisements, etc., the high level problem remains the same. Based on knowledge obtained so far on the user, recommend the most desired content. In this paper we present a method to handle the well known user-cold-start problem in recommendation systems. In this scenario, a recommendation system encounters a new user and the objective is to present items as relevant as possible with the hope of keeping the user\'s session as long as possible. We formulate an optimization problem aimed to maximize the length of this initial session, as this is believed to be the key to have the user come back and perhaps register to the system. In particular, our model captures the fact that a single round with low quality recommendation is likely to terminate the session. In such a case, we do not proceed to the next round as the user leaves the system, possibly never to seen again. We denote this phenomenon a \\emph{One-Shot Session}. Our optimization problem is formulated as an MDP where the action space is of a combinatorial nature as we recommend in each round, multiple items. This huge action space presents a computational challenge making the straightforward solution intractable. We analyze the structure of the MDP to prove monotone and submodular like properties that allow a computationally efficient solution via a method denoted by \\emph{Greedy Value Iteration} (G-VI).', 'stat.ML', '2016-07-05T19:40:56Z', 'http://arxiv.org/abs/1607.01381v1', '2016-10-08 10:25:48', '2016-10-08 10:25:48')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPublish Load (0.6ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 334[0m
  [1m[35mAuthor Load (0.5ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Yahel David'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Yahel David', '2016-10-08 10:25:48', '2016-10-08 10:25:48')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (907, 334, 0, '2016-10-08 10:25:48', '2016-10-08 10:25:48')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.6ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Dotan Di Castro'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Dotan Di Castro', '2016-10-08 10:25:48', '2016-10-08 10:25:48')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (908, 334, 1, '2016-10-08 10:25:48', '2016-10-08 10:25:48')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.8ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Zohar Karnin'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Zohar Karnin', '2016-10-08 10:25:48', '2016-10-08 10:25:48')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (909, 334, 2, '2016-10-08 10:25:48', '2016-10-08 10:25:48')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (0.6ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Divisive-agglomerative algorithm and complexity of automatic classification problems'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Divisive-agglomerative algorithm and complexity of automatic classification problems', 'An algorithm of solution of the Automatic Classification (AC for brevity) problem is set forth in the paper. In the AC problem, it is required to find one or several artitions, starting with the given pattern matrix or dissimilarity, similarity matrix.', 'q-fin.EC', '2016-07-05T19:25:02Z', 'http://arxiv.org/abs/1607.02419v1', '2016-10-08 10:25:48', '2016-10-08 10:25:48')[0m
  [1m[35m (3.0ms)[0m  COMMIT
  [1m[36mPublish Load (1.0ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 335[0m
  [1m[35mAuthor Load (0.9ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Alexander Rubchinsky'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Alexander Rubchinsky', '2016-10-08 10:25:48', '2016-10-08 10:25:48')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (910, 335, 0, '2016-10-08 10:25:48', '2016-10-08 10:25:48')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (0.7ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Can mobile usage predict illiteracy in a developing country?'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.4ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Can mobile usage predict illiteracy in a developing country?', 'The present study provides the first evidence that illiteracy can be reliably predicted from standard mobile phone logs. By deriving a broad set of mobile phone indicators reflecting users financial, social and mobility patterns we show how supervised machine learning can be used to predict individual illiteracy in an Asian developing country, externally validated against a large-scale survey. On average the model performs 10 times better than random guessing with a 70% accuracy. Further we show how individual illiteracy can be aggregated and mapped geographically at cell tower resolution. Geographical mapping of illiteracy is crucial to know where the illiterate people are, and where to put in resources. In underdeveloped countries such mappings are often based on out-dated household surveys with low spatial and temporal resolution. One in five people worldwide struggle with illiteracy, and it is estimated that illiteracy costs the global economy more than 1 trillion dollars each year. These results potentially enable costeffective, questionnaire-free investigation of illiteracy-related questions on an unprecedented scale', 'cs.AI', '2016-07-05T17:22:18Z', 'http://arxiv.org/abs/1607.01337v1', '2016-10-08 10:25:48', '2016-10-08 10:25:48')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPublish Load (0.8ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 336[0m
  [1m[35mAuthor Load (0.5ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Pål Sundsøy'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Pål Sundsøy', '2016-10-08 10:25:48', '2016-10-08 10:25:48')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (911, 336, 0, '2016-10-08 10:25:48', '2016-10-08 10:25:48')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (0.6ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'An extended MABAC for multi-attribute decision making using trapezoidal interval type-2 fuzzy numbers'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('An extended MABAC for multi-attribute decision making using trapezoidal interval type-2 fuzzy numbers', 'The purpose of this paper is to study a type-2 fuzzy multi-attribute decision making (MADM) methodology. Multi-Attributive Border Approximation area Comparison (MABAC) method is extended for MADM based on trapezoidal interval type-2 fuzzy numbers (TrIT2FNs).This method is a pragmatic and reliable tool for rational decision making due to its own characteristics. A systematic evaluation and assessment method is developed in this paper by integrating TrIT2FNs and used for evaluation and selection of the most suitable candidate for a software company which is heading to hire a system analysis engineer based on few attributes. The performance ratings of alternative candidates and the weights of the criteria are evaluated based on decision makers from different expertise. The validity and feasibility of the proposed method are illustrated by an example and finally compared with two other MADM methods.', 'cs.AI', '2016-07-05T14:05:29Z', 'http://arxiv.org/abs/1607.01254v2', '2016-10-08 10:25:48', '2016-10-08 10:25:48')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPublish Load (0.5ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 337[0m
  [1m[35mAuthor Load (0.7ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Jagannath Roy'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Jagannath Roy', '2016-10-08 10:25:48', '2016-10-08 10:25:48')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (912, 337, 0, '2016-10-08 10:25:48', '2016-10-08 10:25:48')[0m
  [1m[35m (0.8ms)[0m  COMMIT
  [1m[36mAuthor Load (0.8ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Ananta Ranjan'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Ananta Ranjan', '2016-10-08 10:25:48', '2016-10-08 10:25:48')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (913, 337, 1, '2016-10-08 10:25:48', '2016-10-08 10:25:48')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.6ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Animesh Debnath'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Animesh Debnath', '2016-10-08 10:25:48', '2016-10-08 10:25:48')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (914, 337, 2, '2016-10-08 10:25:48', '2016-10-08 10:25:48')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPaper Load (0.6ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Optimal control for a robotic exploration, pick-up and delivery problem'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Optimal control for a robotic exploration, pick-up and delivery problem', 'This paper addresses an optimal control problem for a robot that has to find and collect a finite number of objects and move them to a depot in minimum time. The robot has fourth-order dynamics that change instantaneously at any pick-up or drop-off of an object. The objects are modeled by point masses with a-priori unknown locations in a bounded two-dimensional space that may contain unknown obstacles. For this hybrid system, an Optimal Control Problem (OCP) is approximately solved by a receding horizon scheme, where the derived lower bound for the cost-to-go is evaluated for the worst and for a probabilistic case, assuming a uniform distribution of the objects. First, a time-driven approximate solution based on time and position space discretization and mixed integer programming is presented. Due to the high computational cost of this solution, an alternative event-driven approximate approach based on a suitable motion parameterization and gradient-based optimization is proposed. The solutions are compared in a numerical example, suggesting that the latter approach offers a significant computational advantage while yielding similar qualitative results compared to the former. The methods are particularly relevant for various robotic applications like automated cleaning, search and rescue, harvesting or manufacturing.', 'cs.SY', '2016-07-05T11:53:13Z', 'http://arxiv.org/abs/1607.01202v1', '2016-10-08 10:25:48', '2016-10-08 10:25:48')[0m
  [1m[35m (3.0ms)[0m  COMMIT
  [1m[36mPublish Load (1.0ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 338[0m
  [1m[35mAuthor Load (1.0ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Vladislav Nenchev'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.3ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Vladislav Nenchev', '2016-10-08 10:25:48', '2016-10-08 10:25:48')
  [1m[36m (2.7ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (915, 338, 0, '2016-10-08 10:25:48', '2016-10-08 10:25:48')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (1.0ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Christos G. Cassandras'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Christos G. Cassandras', '2016-10-08 10:25:48', '2016-10-08 10:25:48')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.4ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (916, 338, 1, '2016-10-08 10:25:48', '2016-10-08 10:25:48')
  [1m[36m (0.3ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.8ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Jörg Raisch'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Jörg Raisch', '2016-10-08 10:25:48', '2016-10-08 10:25:48')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (917, 338, 2, '2016-10-08 10:25:48', '2016-10-08 10:25:48')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPaper Load (0.5ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Click Carving: Segmenting Objects in Video with Point Clicks'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Click Carving: Segmenting Objects in Video with Point Clicks', 'We present a novel form of interactive video object segmentation where a few clicks by the user helps the system produce a full spatio-temporal segmentation of the object of interest. Whereas conventional interactive pipelines take the user\'s initialization as a starting point, we show the value in the system taking the lead even in initialization. In particular, for a given video frame, the system precomputes a ranked list of thousands of possible segmentation hypotheses (also referred to as object region proposals) using image and motion cues. Then, the user looks at the top ranked proposals, and clicks on the object boundary to carve away erroneous ones. This process iterates (typically 2-3 times), and each time the system revises the top ranked proposal set, until the user is satisfied with a resulting segmentation mask. Finally, the mask is propagated across the video to produce a spatio-temporal object tube. On three challenging datasets, we provide extensive comparisons with both existing work and simpler alternative methods. In all, the proposed Click Carving approach strikes an excellent balance of accuracy and human effort. It outperforms all similarly fast methods, and is competitive or better than those requiring 2 to 12 times the effort.', 'cs.CV', '2016-07-05T05:35:22Z', 'http://arxiv.org/abs/1607.01115v1', '2016-10-08 10:25:48', '2016-10-08 10:25:48')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPublish Load (0.6ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 339[0m
  [1m[35mAuthor Load (0.6ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Suyog Dutt Jain'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Suyog Dutt Jain', '2016-10-08 10:25:48', '2016-10-08 10:25:48')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (918, 339, 0, '2016-10-08 10:25:48', '2016-10-08 10:25:48')[0m
  [1m[35m (4.0ms)[0m  COMMIT
  [1m[36mAuthor Load (0.6ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Kristen Grauman'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36m (0.2ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (237, 339, 1, '2016-10-08 10:25:48', '2016-10-08 10:25:48')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPaper Load (0.7ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Application of Statistical Relational Learning to Hybrid Recommendation Systems'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Application of Statistical Relational Learning to Hybrid Recommendation Systems', 'Recommendation systems usually involve exploiting the relations among known features and content that describe items (content-based filtering) or the overlap of similar users who interacted with or rated the target item (collaborative filtering). To combine these two filtering approaches, current model-based hybrid recommendation systems typically require extensive feature engineering to construct a user profile. Statistical Relational Learning (SRL) provides a straightforward way to combine the two approaches. However, due to the large scale of the data used in real world recommendation systems, little research exists on applying SRL models to hybrid recommendation systems, and essentially none of that research has been applied on real big-data-scale systems. In this paper, we proposed a way to adapt the state-of-the-art in SRL learning approaches to construct a real hybrid recommendation system. Furthermore, in order to satisfy a common requirement in recommendation systems (i.e. that false positives are more undesirable and therefore penalized more harshly than false negatives), our approach can also allow tuning the trade-off between the precision and recall of the system in a principled way. Our experimental results demonstrate the efficiency of our proposed approach as well as its improved performance on recommendation precision.', 'cs.AI', '2016-07-04T21:21:59Z', 'http://arxiv.org/abs/1607.01050v1', '2016-10-08 10:25:48', '2016-10-08 10:25:48')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPublish Load (0.7ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 340[0m
  [1m[35mAuthor Load (0.7ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Shuo Yang'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Shuo Yang', '2016-10-08 10:25:48', '2016-10-08 10:25:48')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (919, 340, 0, '2016-10-08 10:25:48', '2016-10-08 10:25:48')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.3ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Mohammed Korayem'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36m (0.1ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (156, 340, 1, '2016-10-08 10:25:48', '2016-10-08 10:25:48')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (0.4ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Khalifeh AlJadda'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36m (0.1ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (155, 340, 2, '2016-10-08 10:25:48', '2016-10-08 10:25:48')[0m
  [1m[35m (1.9ms)[0m  COMMIT
  [1m[36mAuthor Load (0.5ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Trey Grainger'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36m (0.2ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (154, 340, 3, '2016-10-08 10:25:48', '2016-10-08 10:25:48')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (0.7ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Sriraam Natarajan'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Sriraam Natarajan', '2016-10-08 10:25:48', '2016-10-08 10:25:48')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (920, 340, 4, '2016-10-08 10:25:48', '2016-10-08 10:25:48')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.6ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Bootstrap Model Aggregation for Distributed Statistical Learning'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.4ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Bootstrap Model Aggregation for Distributed Statistical Learning', 'In distributed, or privacy-preserving learning, we are often given a set of probabilistic models estimated from different local repositories, and asked to combine them into a single model that gives efficient statistical estimation. A simple method is to linearly average the parameters of the local models, which, however, tends to be degenerate or not applicable on non-convex models, or models with different parameter dimensions. One more practical strategy is to generate bootstrap samples from the local models, and then learn a joint model based on the combined bootstrap set. Unfortunately, the bootstrap procedure introduces additional noise and can significantly deteriorate the performance. In this work, we propose two variance reduction methods to correct the bootstrap noise, including a weighted M-estimator that is both statistically efficient and practically powerful. Both theoretical and empirical analysis is provided to demonstrate our methods.', 'stat.ML', '2016-07-04T20:12:41Z', 'http://arxiv.org/abs/1607.01036v1', '2016-10-08 10:25:48', '2016-10-08 10:25:48')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (0.8ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 341
  [1m[36mAuthor Load (0.7ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Jun Han'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Jun Han', '2016-10-08 10:25:48', '2016-10-08 10:25:48')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (921, 341, 0, '2016-10-08 10:25:48', '2016-10-08 10:25:48')
  [1m[36m (3.0ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.0ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Qiang Liu'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Qiang Liu', '2016-10-08 10:25:48', '2016-10-08 10:25:48')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (922, 341, 1, '2016-10-08 10:25:48', '2016-10-08 10:25:48')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPaper Load (0.6ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Generic Statistical Relational Entity Resolution in Knowledge Graphs'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Generic Statistical Relational Entity Resolution in Knowledge Graphs', 'Entity resolution, the problem of identifying the underlying entity of references found in data, has been researched for many decades in many communities. A common theme in this research has been the importance of incorporating relational features into the resolution process. Relational entity resolution is particularly important in knowledge graphs (KGs), which have a regular structure capturing entities and their interrelationships. We identify three major problems in KG entity resolution: (1) intra-KG reference ambiguity; (2) inter-KG reference ambiguity; and (3) ambiguity when extending KGs with new facts. We implement a framework that generalizes across these three settings and exploits this regular structure of KGs. Our framework has many advantages over custom solutions widely deployed in industry, including collective inference, scalability, and interpretability. We apply our framework to two real-world KG entity resolution problems, ambiguity in NELL and merging data from Freebase and MusicBrainz, demonstrating the importance of relational features.', 'cs.AI', '2016-07-04T19:02:47Z', 'http://arxiv.org/abs/1607.00992v1', '2016-10-08 10:25:48', '2016-10-08 10:25:48')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPublish Load (0.7ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 342[0m
  [1m[35mAuthor Load (0.6ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Jay Pujara'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Jay Pujara', '2016-10-08 10:25:48', '2016-10-08 10:25:48')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (923, 342, 0, '2016-10-08 10:25:48', '2016-10-08 10:25:48')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.6ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Lise Getoor'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Lise Getoor', '2016-10-08 10:25:48', '2016-10-08 10:25:48')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (924, 342, 1, '2016-10-08 10:25:48', '2016-10-08 10:25:48')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.6ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Modelling Context with User Embeddings for Sarcasm Detection in Social Media'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Modelling Context with User Embeddings for Sarcasm Detection in Social Media', 'We introduce a deep neural network for automated sarcasm detection. Recent work has emphasized the need for models to capitalize on contextual features, beyond lexical and syntactic cues present in utterances. For example, different speakers will tend to employ sarcasm regarding different subjects and, thus, sarcasm detection models ought to encode such speaker information. Current methods have achieved this by way of laborious feature engineering. By contrast, we propose to automatically learn and then exploit user embeddings, to be used in concert with lexical signals to recognize sarcasm. Our approach does not require elaborate feature engineering (and concomitant data scraping); fitting user embeddings requires only the text from their previous posts. The experimental results show that our model outperforms a state-of-the-art approach leveraging an extensive set of carefully crafted features.', 'cs.CL', '2016-07-04T18:04:18Z', 'http://arxiv.org/abs/1607.00976v2', '2016-10-08 10:25:48', '2016-10-08 10:25:48')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (1.0ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 343
  [1m[36mAuthor Load (0.6ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Silvio Amir'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Silvio Amir', '2016-10-08 10:25:48', '2016-10-08 10:25:48')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (925, 343, 0, '2016-10-08 10:25:48', '2016-10-08 10:25:48')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.9ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Byron C. Wallace'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Byron C. Wallace', '2016-10-08 10:25:48', '2016-10-08 10:25:48')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (926, 343, 1, '2016-10-08 10:25:48', '2016-10-08 10:25:48')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (0.8ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Hao Lyu'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Hao Lyu', '2016-10-08 10:25:48', '2016-10-08 10:25:48')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (927, 343, 2, '2016-10-08 10:25:48', '2016-10-08 10:25:48')
  [1m[36m (3.0ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.0ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Paula Carvalho Mário J. Silva'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Paula Carvalho Mário J. Silva', '2016-10-08 10:25:48', '2016-10-08 10:25:48')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (928, 343, 3, '2016-10-08 10:25:48', '2016-10-08 10:25:48')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (0.8ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Superintelligence cannot be contained: Lessons from Computability Theory'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Superintelligence cannot be contained: Lessons from Computability Theory', 'Superintelligence is a hypothetical agent that possesses intelligence far surpassing that of the brightest and most gifted human minds. In light of recent advances in machine intelligence, a number of scientists, philosophers and technologists have revived the discussion about the potential catastrophic risks entailed by such an entity. In this article, we trace the origins and development of the neo-fear of superintelligence, and some of the major proposals for its containment. We argue that such containment is, in principle, impossible, due to fundamental limits inherent to computing itself. Assuming that a superintelligence will contain a program that includes all the programs that can be executed by a universal Turing machine on input potentially as complex as the state of the world, strict containment requires simulations of such a program, something theoretically (and practically) infeasible.', 'cs.CY', '2016-07-04T14:44:21Z', 'http://arxiv.org/abs/1607.00913v1', '2016-10-08 10:25:48', '2016-10-08 10:25:48')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPublish Load (0.9ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 344[0m
  [1m[35mAuthor Load (0.6ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Manuel Alfonseca'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Manuel Alfonseca', '2016-10-08 10:25:48', '2016-10-08 10:25:48')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (929, 344, 0, '2016-10-08 10:25:48', '2016-10-08 10:25:48')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.7ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Manuel Cebrian'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Manuel Cebrian', '2016-10-08 10:25:48', '2016-10-08 10:25:48')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.3ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (930, 344, 1, '2016-10-08 10:25:48', '2016-10-08 10:25:48')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.6ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Antonio Fernandez Anta'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Antonio Fernandez Anta', '2016-10-08 10:25:48', '2016-10-08 10:25:48')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (931, 344, 2, '2016-10-08 10:25:48', '2016-10-08 10:25:48')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.8ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Lorenzo Coviello'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Lorenzo Coviello', '2016-10-08 10:25:48', '2016-10-08 10:25:48')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (932, 344, 3, '2016-10-08 10:25:48', '2016-10-08 10:25:48')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.8ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Andres Abeliuk'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Andres Abeliuk', '2016-10-08 10:25:48', '2016-10-08 10:25:48')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (933, 344, 4, '2016-10-08 10:25:48', '2016-10-08 10:25:48')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.6ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Iyad Rahwan'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Iyad Rahwan', '2016-10-08 10:25:48', '2016-10-08 10:25:48')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (934, 344, 5, '2016-10-08 10:25:48', '2016-10-08 10:25:48')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.5ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Encoding Cryptographic Functions to SAT Using Transalg System'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Encoding Cryptographic Functions to SAT Using Transalg System', 'In this paper we propose the technology for constructing propositional encodings of discrete functions. It is aimed at solving inversion problems of considered functions using state-of-the-art SAT solvers. We implemented this technology in the form of the software system called Transalg, and used it to construct SAT encodings for a number of cryptanalysis problems. By applying SAT solvers to these encodings we managed to invert several cryptographic functions. In particular, we used the SAT encodings produced by Transalg to construct the family of two-block MD5 collisions in which the first 10 bytes are zeros. Also we used Transalg encoding for the widely known A5/1 keystream generator to solve several dozen of its cryptanalysis instances in a distributed computing environment. In the paper we compare in detail the functionality of Transalg with that of similar software systems.', 'cs.AI', '2016-07-04T13:57:35Z', 'http://arxiv.org/abs/1607.00888v1', '2016-10-08 10:25:48', '2016-10-08 10:25:48')
  [1m[36m (3.0ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (1.0ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 345
  [1m[36mAuthor Load (0.9ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Ilya Otpuschennikov'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Ilya Otpuschennikov', '2016-10-08 10:25:48', '2016-10-08 10:25:48')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (935, 345, 0, '2016-10-08 10:25:48', '2016-10-08 10:25:48')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.9ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Alexander Semenov'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Alexander Semenov', '2016-10-08 10:25:48', '2016-10-08 10:25:48')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (936, 345, 1, '2016-10-08 10:25:48', '2016-10-08 10:25:48')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.9ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Irina Gribanova'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Irina Gribanova', '2016-10-08 10:25:48', '2016-10-08 10:25:48')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (937, 345, 2, '2016-10-08 10:25:48', '2016-10-08 10:25:48')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.6ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Oleg Zaikin'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Oleg Zaikin', '2016-10-08 10:25:48', '2016-10-08 10:25:48')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (938, 345, 3, '2016-10-08 10:25:48', '2016-10-08 10:25:48')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.6ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Stepan Kochemazov'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Stepan Kochemazov', '2016-10-08 10:25:48', '2016-10-08 10:25:48')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (939, 345, 4, '2016-10-08 10:25:48', '2016-10-08 10:25:48')
  [1m[36m (0.3ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.6ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Neighborhood Features Help Detecting Electricity Theft in Big Data Sets'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.6ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Neighborhood Features Help Detecting Electricity Theft in Big Data Sets', 'Electricity theft is a major problem around the world in both developed and developing countries and may range up to 40% of the total electricity distributed. More generally, electricity theft belongs to non-technical losses (NTL), which are losses that occur during the distribution of electricity in power grids. In this paper, we build features from the neighborhood of customers. We first split the area in which the customers are located into grids of different sizes. For each grid cell we then compute the proportion of inspected customers and the proportion of NTL found among the inspected customers. We then analyze the distributions of features generated and show why they are useful to predict NTL. In addition, we compute features from the consumption time series of customers. We also use master data features of customers, such as their customer class and voltage of their connection. We compute these features for a Big Data base of 31M meter readings, 700K customers and 400K inspection results. We then use these features to train four machine learning algorithms that are particularly suitable for Big Data sets because of their parallelizable structure: logistic regression, k-nearest neighbors, linear support vector machine and random forest. Using the neighborhood features instead of only analyzing the time series has resulted in appreciable results for Big Data sets for varying NTL proportions of 1%-90%. This work can therefore be deployed to a wide range of different regions around the world.', 'cs.LG', '2016-07-04T13:08:19Z', 'http://arxiv.org/abs/1607.00872v1', '2016-10-08 10:25:48', '2016-10-08 10:25:48')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (0.9ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 346
  [1m[36mAuthor Load (0.5ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Patrick Glauner'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Patrick Glauner', '2016-10-08 10:25:48', '2016-10-08 10:25:48')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (940, 346, 0, '2016-10-08 10:25:48', '2016-10-08 10:25:48')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.6ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Jorge Meira'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Jorge Meira', '2016-10-08 10:25:48', '2016-10-08 10:25:48')
  [1m[36m (1.6ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (941, 346, 1, '2016-10-08 10:25:48', '2016-10-08 10:25:48')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (0.8ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Lautaro Dolberg'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Lautaro Dolberg', '2016-10-08 10:25:48', '2016-10-08 10:25:48')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (942, 346, 2, '2016-10-08 10:25:48', '2016-10-08 10:25:48')
  [1m[36m (2.9ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.0ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Radu State'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Radu State', '2016-10-08 10:25:48', '2016-10-08 10:25:48')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (943, 346, 3, '2016-10-08 10:25:48', '2016-10-08 10:25:48')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.8ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Franck Bettinger'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Franck Bettinger', '2016-10-08 10:25:48', '2016-10-08 10:25:48')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (944, 346, 4, '2016-10-08 10:25:48', '2016-10-08 10:25:48')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.9ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Yves Rangoni'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Yves Rangoni', '2016-10-08 10:25:48', '2016-10-08 10:25:48')
  [1m[36m (1.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (945, 346, 5, '2016-10-08 10:25:48', '2016-10-08 10:25:48')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.7ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Diogo Duarte'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Diogo Duarte', '2016-10-08 10:25:48', '2016-10-08 10:25:48')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (946, 346, 6, '2016-10-08 10:25:48', '2016-10-08 10:25:48')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.5ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Modeling of Item-Difficulty for Ontology-based MCQs'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Modeling of Item-Difficulty for Ontology-based MCQs', 'Multiple choice questions (MCQs) that can be generated from a domain ontology can significantly reduce human effort & time required for authoring & administering assessments in an e-Learning environment. Even though here are various methods for generating MCQs from ontologies, methods for determining the difficulty-levels of such MCQs are less explored. In this paper, we study various aspects and factors that are involved in determining the difficulty-score of an MCQ, and propose an ontology-based model for the prediction. This model characterizes the difficulty values associated with the stem and choice set of the MCQs, and describes a measure which combines both the scores. Further more, the notion of assigning difficultly-scores based on the skill level of the test taker is utilized for predicating difficulty-score of a stem. We studied the effectiveness of the predicted difficulty-scores with the help of a psychometric model from the Item Response Theory, by involving real-students and domain experts. Our results show that, the predicated difficulty-levels of the MCQs are having high correlation with their actual difficulty-levels.', 'cs.AI', '2016-07-04T13:05:55Z', 'http://arxiv.org/abs/1607.00869v1', '2016-10-08 10:25:48', '2016-10-08 10:25:48')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (0.6ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 347
  [1m[36mAuthor Load (0.7ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Vinu E. V'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Vinu E. V', '2016-10-08 10:25:48', '2016-10-08 10:25:48')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (947, 347, 0, '2016-10-08 10:25:48', '2016-10-08 10:25:48')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.8ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Tahani Alsubait'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Tahani Alsubait', '2016-10-08 10:25:48', '2016-10-08 10:25:48')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (948, 347, 1, '2016-10-08 10:25:48', '2016-10-08 10:25:48')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.7ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'P. Sreenivasa Kumar'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('P. Sreenivasa Kumar', '2016-10-08 10:25:48', '2016-10-08 10:25:48')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (949, 347, 2, '2016-10-08 10:25:48', '2016-10-08 10:25:48')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.5ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Understanding the Abstract Dialectical Framework (Preliminary Report)'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Understanding the Abstract Dialectical Framework (Preliminary Report)', 'Among the most general structures extending the framework by Dung are the abstract dialectical frameworks (ADFs). They come equipped with various types of semantics, with the most prominent - the labeling-based one - analyzed in the context of computational complexity, signatures, instantiations and software support. This makes the abstract dialectical frameworks valuable tools for argumentation. However, there are fewer results available concerning the relation between the ADFs and other argumentation frameworks. In this paper we would like to address this issue by introducing a number of translations from various formalisms into ADFs. The results of our study show the similarities and differences between them, thus promoting the use and understanding of ADFs. Moreover, our analysis also proves their capability to model many of the existing frameworks, including those that go beyond the attack relation. Finally, translations allow other structures to benefit from the research on ADFs in general and from the existing software in particular.', 'cs.AI', '2016-07-04T10:52:57Z', 'http://arxiv.org/abs/1607.00819v1', '2016-10-08 10:25:48', '2016-10-08 10:25:48')
  [1m[36m (3.0ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (1.0ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 348
  [1m[36mAuthor Load (1.0ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Sylwia Polberg'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Sylwia Polberg', '2016-10-08 10:25:48', '2016-10-08 10:25:48')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (950, 348, 0, '2016-10-08 10:25:48', '2016-10-08 10:25:48')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.6ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Formal analysis of HTM Spatial Pooler performance under predefined operation conditions'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Formal analysis of HTM Spatial Pooler performance under predefined operation conditions', 'This paper introduces mathematical formalism for Spatial (SP) of Hierarchical Temporal Memory (HTM) with a spacial consideration for its hardware implementation. Performance of HTM network and its ability to learn and adjust to a problem at hand is governed by a large set of parameters. Most of parameters are codependent which makes creating efficient HTM-based solutions challenging. It requires profound knowledge of the settings and their impact on the performance of system. Consequently, this paper introduced a set of formulas which are to facilitate the design process by enhancing tedious trial-and-error method with a tool for choosing initial parameters which enable quick learning convergence. This is especially important in hardware implementations which are constrained by the limited resources of a platform. The authors focused especially on a formalism of Spatial Pooler and derive at the formulas for quality and convergence of the model. This may be considered as recipes for designing efficient HTM models for given input patterns.', 'cs.AI', '2016-07-04T09:20:29Z', 'http://arxiv.org/abs/1607.00791v1', '2016-10-08 10:25:48', '2016-10-08 10:25:48')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (0.7ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 349
  [1m[36mAuthor Load (0.6ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'M. Pietron'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('M. Pietron', '2016-10-08 10:25:48', '2016-10-08 10:25:48')[0m
  [1m[35m (1.3ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (951, 349, 0, '2016-10-08 10:25:48', '2016-10-08 10:25:48')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.6ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'M. Wielgosz'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('M. Wielgosz', '2016-10-08 10:25:48', '2016-10-08 10:25:48')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (952, 349, 1, '2016-10-08 10:25:48', '2016-10-08 10:25:48')[0m
  [1m[35m (0.3ms)[0m  COMMIT
  [1m[36mAuthor Load (0.6ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'K. Wiatr'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('K. Wiatr', '2016-10-08 10:25:48', '2016-10-08 10:25:48')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (953, 349, 2, '2016-10-08 10:25:48', '2016-10-08 10:25:48')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.6ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Path planning with Inventory-driven Jump-Point-Search'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Path planning with Inventory-driven Jump-Point-Search', 'In many navigational domains the traversability of cells is conditioned on the path taken. This is often the case in video-games, in which a character may need to acquire a certain object (i.e., a key or a flying suit) to be able to traverse specific locations (e.g., doors or high walls). In order for non-player characters to handle such scenarios we present invJPS, an \"inventory-driven\" pathfinding approach based on the highly successful grid-based Jump-Point-Search (JPS) algorithm. We show, formally and experimentally, that the invJPS preserves JPS\'s optimality guarantees and its symmetry breaking advantages in inventory-based variants of game maps.', 'cs.AI', '2016-07-04T01:13:32Z', 'http://arxiv.org/abs/1607.00715v1', '2016-10-08 10:25:48', '2016-10-08 10:25:48')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (0.6ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 350
  [1m[36mAuthor Load (0.6ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Davide Aversa'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Davide Aversa', '2016-10-08 10:25:48', '2016-10-08 10:25:48')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (954, 350, 0, '2016-10-08 10:25:48', '2016-10-08 10:25:48')
  [1m[36m (0.6ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.8ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Sebastian Sardina'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Sebastian Sardina', '2016-10-08 10:25:48', '2016-10-08 10:25:48')
  [1m[36m (4.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (955, 350, 1, '2016-10-08 10:25:48', '2016-10-08 10:25:48')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (1.1ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Stavros Vassos'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Stavros Vassos', '2016-10-08 10:25:48', '2016-10-08 10:25:48')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (956, 350, 2, '2016-10-08 10:25:48', '2016-10-08 10:25:48')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.6ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Can we reach Pareto optimal outcomes using bottom-up approaches?'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Can we reach Pareto optimal outcomes using bottom-up approaches?', 'Traditionally, researchers in decision making have focused on attempting to reach Pareto Optimality using horizontal approaches, where optimality is calculated taking into account every participant at the same time. Sometimes, this may prove to be a difficult task (e.g., conflict, mistrust, no information sharing, etc.). In this paper, we explore the possibility of achieving Pareto Optimal outcomes in a group by using a bottom-up approach: discovering Pareto optimal outcomes by interacting in subgroups. We analytically show that Pareto optimal outcomes in a subgroup are also Pareto optimal in a supergroup of those agents in the case of strict, transitive, and complete preferences. Then, we empirically analyze the prospective usability and practicality of bottom-up approaches in a variety of decision making domains.', 'cs.MA', '2016-07-03T22:44:57Z', 'http://arxiv.org/abs/1607.00695v1', '2016-10-08 10:25:48', '2016-10-08 10:25:48')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (1.0ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 351
  [1m[36mAuthor Load (0.9ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Victor Sanchez-Anguix'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Victor Sanchez-Anguix', '2016-10-08 10:25:48', '2016-10-08 10:25:48')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (957, 351, 0, '2016-10-08 10:25:48', '2016-10-08 10:25:48')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.8ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Reyhan Aydogan'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Reyhan Aydogan', '2016-10-08 10:25:48', '2016-10-08 10:25:48')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (958, 351, 1, '2016-10-08 10:25:48', '2016-10-08 10:25:48')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (0.9ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Tim Baarslag'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Tim Baarslag', '2016-10-08 10:25:48', '2016-10-08 10:25:48')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (959, 351, 2, '2016-10-08 10:25:48', '2016-10-08 10:25:48')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.9ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Catholijn M. Jonker'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Catholijn M. Jonker', '2016-10-08 10:25:48', '2016-10-08 10:25:48')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (960, 351, 3, '2016-10-08 10:25:48', '2016-10-08 10:25:48')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPaper Load (0.5ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'A Hybrid POMDP-BDI Agent Architecture with Online Stochastic Planning and Plan Caching'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('A Hybrid POMDP-BDI Agent Architecture with Online Stochastic Planning and Plan Caching', 'This article presents an agent architecture for controlling an autonomous agent in stochastic environments. The architecture combines the partially observable Markov decision process (POMDP) model with the belief-desire-intention (BDI) framework. The Hybrid POMDP-BDI agent architecture takes the best features from the two approaches, that is, the online generation of reward-maximizing courses of action from POMDP theory, and sophisticated multiple goal management from BDI theory. We introduce the advances made since the introduction of the basic architecture, including (i) the ability to pursue multiple goals simultaneously and (ii) a plan library for storing pre-written plans and for storing recently generated plans for future reuse. A version of the architecture without the plan library is implemented and is evaluated using simulations. The results of the simulation experiments indicate that the approach is feasible.', 'cs.AI', '2016-07-03T17:11:52Z', 'http://arxiv.org/abs/1607.00656v1', '2016-10-08 10:25:48', '2016-10-08 10:25:48')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPublish Load (0.9ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 352[0m
  [1m[35mAuthor Load (0.7ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Gavin Rens'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Gavin Rens', '2016-10-08 10:25:48', '2016-10-08 10:25:48')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (961, 352, 0, '2016-10-08 10:25:48', '2016-10-08 10:25:48')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.9ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Deshendran Moodley'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Deshendran Moodley', '2016-10-08 10:25:48', '2016-10-08 10:25:48')[0m
  [1m[35m (2.9ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (962, 352, 1, '2016-10-08 10:25:48', '2016-10-08 10:25:48')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.7ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Visualizing Natural Language Descriptions: A Survey'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Visualizing Natural Language Descriptions: A Survey', 'A natural language interface exploits the conceptual simplicity and naturalness of the language to create a high-level user-friendly communication channel between humans and machines. One of the promising applications of such interfaces is generating visual interpretations of semantic content of a given natural language that can be then visualized either as a static scene or a dynamic animation. This survey discusses requirements and challenges of developing such systems and reports 26 graphical systems that exploit natural language interfaces and addresses both artificial intelligence and visualization aspects. This work serves as a frame of reference to researchers and to enable further advances in the field.', 'cs.CL', '2016-07-03T10:30:40Z', 'http://dx.doi.org/10.1145/2932710', '2016-10-08 10:25:48', '2016-10-08 10:25:48')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (0.7ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 353
  [1m[36mAuthor Load (0.6ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Kaveh Hassani'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Kaveh Hassani', '2016-10-08 10:25:48', '2016-10-08 10:25:48')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (963, 353, 0, '2016-10-08 10:25:48', '2016-10-08 10:25:48')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.6ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Won-Sook Lee'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Won-Sook Lee', '2016-10-08 10:25:48', '2016-10-08 10:25:48')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (964, 353, 1, '2016-10-08 10:25:48', '2016-10-08 10:25:48')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (0.6ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Adaptive Neighborhood Graph Construction for Inference in Multi-Relational Networks'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Adaptive Neighborhood Graph Construction for Inference in Multi-Relational Networks', 'A neighborhood graph, which represents the instances as vertices and their relations as weighted edges, is the basis of many semi-supervised and relational models for node labeling and link prediction. Most methods employ a sequential process to construct the neighborhood graph. This process often consists of generating a candidate graph, pruning the candidate graph to make a neighborhood graph, and then performing inference on the variables (i.e., nodes) in the neighborhood graph. In this paper, we propose a framework that can dynamically adapt the neighborhood graph based on the states of variables from intermediate inference results, as well as structural properties of the relations connecting them. A key strength of our framework is its ability to handle multi-relational data and employ varying amounts of relations for each instance based on the intermediate inference results. We formulate the link prediction task as inference on neighborhood graphs, and include preliminary results illustrating the effects of different strategies in our proposed framework.', 'cs.SI', '2016-07-02T07:41:45Z', 'http://arxiv.org/abs/1607.00474v1', '2016-10-08 10:25:48', '2016-10-08 10:25:48')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPublish Load (1.0ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 354[0m
  [1m[35mAuthor Load (0.6ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Shobeir Fakhraei'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Shobeir Fakhraei', '2016-10-08 10:25:48', '2016-10-08 10:25:48')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (965, 354, 0, '2016-10-08 10:25:48', '2016-10-08 10:25:48')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.7ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Dhanya Sridhar'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Dhanya Sridhar', '2016-10-08 10:25:48', '2016-10-08 10:25:48')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (966, 354, 1, '2016-10-08 10:25:48', '2016-10-08 10:25:48')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.6ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Jay Pujara'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35m (0.2ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (923, 354, 2, '2016-10-08 10:25:49', '2016-10-08 10:25:49')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.6ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Lise Getoor'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35m (0.1ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (924, 354, 3, '2016-10-08 10:25:49', '2016-10-08 10:25:49')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.5ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'A Greedy Approach to Adapting the Trace Parameter for Temporal Difference Learning'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('A Greedy Approach to Adapting the Trace Parameter for Temporal Difference Learning', 'One of the main obstacles to broad application of reinforcement learning methods is the parameter sensitivity of our core learning algorithms. In many large-scale applications, online computation and function approximation represent key strategies in scaling up reinforcement learning algorithms. In this setting, we have effective and reasonably well understood algorithms for adapting the learning-rate parameter, online during learning. Such meta-learning approaches can improve robustness of learning and enable specialization to current task, improving learning speed. For temporal-difference learning algorithms which we study here, there is yet another parameter, $\\lambda$, that similarly impacts learning speed and stability in practice. Unfortunately, unlike the learning-rate parameter, $\\lambda$ parametrizes the objective function that temporal-difference methods optimize. Different choices of $\\lambda$ produce different fixed-point solutions, and thus adapting $\\lambda$ online and characterizing the optimization is substantially more complex than adapting the learning-rate parameter. There are no meta-learning method for $\\lambda$ that can achieve (1) incremental updating, (2) compatibility with function approximation, and (3) maintain stability of learning under both on and off-policy sampling. In this paper we contribute a novel objective function for optimizing $\\lambda$ as a function of state rather than time. We derive a new incremental, linear complexity $\\lambda$-adaption algorithm that does not require offline batch updating or access to a model of the world, and present a suite of experiments illustrating the practicality of our new algorithm in three different settings. Taken together, our contributions represent a concrete step towards black-box application of temporal-difference learning methods in real world problems.', 'cs.AI', '2016-07-02T01:33:00Z', 'http://arxiv.org/abs/1607.00446v1', '2016-10-08 10:25:49', '2016-10-08 10:25:49')
  [1m[36m (3.0ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (1.1ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 355
  [1m[36mAuthor Load (0.4ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Martha White'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36m (0.2ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (126, 355, 0, '2016-10-08 10:25:49', '2016-10-08 10:25:49')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (0.8ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Adam White'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Adam White', '2016-10-08 10:25:49', '2016-10-08 10:25:49')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (967, 355, 1, '2016-10-08 10:25:49', '2016-10-08 10:25:49')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.6ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Situated Structure Learning of a Bayesian Logic Network for Commonsense Reasoning'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Situated Structure Learning of a Bayesian Logic Network for Commonsense Reasoning', 'This paper details the implementation of an algorithm for automatically generating a high-level knowledge network to perform commonsense reasoning, specifically with the application of robotic task repair. The network is represented using a Bayesian Logic Network (BLN) (Jain, Waldherr, and Beetz 2009), which combines a set of directed relations between abstract concepts, including IsA, AtLocation, HasProperty, and UsedFor, with a corresponding probability distribution that models the uncertainty inherent in these relations. Inference over this network enables reasoning over the abstract concepts in order to perform appropriate object substitution or to locate missing objects in the robot\'s environment. The structure of the network is generated by combining information from two existing knowledge sources: ConceptNet (Speer and Havasi 2012), and WordNet (Miller 1995). This is done in a \"situated\" manner by only including information relevant a given context. Results show that the generated network is able to accurately predict object categories, locations, properties, and affordances in three different household scenarios.', 'cs.AI', '2016-07-01T22:52:57Z', 'http://arxiv.org/abs/1607.00428v1', '2016-10-08 10:25:49', '2016-10-08 10:25:49')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (0.6ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 356
  [1m[36mAuthor Load (0.6ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Haley Garrison'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Haley Garrison', '2016-10-08 10:25:49', '2016-10-08 10:25:49')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (968, 356, 0, '2016-10-08 10:25:49', '2016-10-08 10:25:49')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.7ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Sonia Chernova'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Sonia Chernova', '2016-10-08 10:25:49', '2016-10-08 10:25:49')
  [1m[36m (2.9ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (969, 356, 1, '2016-10-08 10:25:49', '2016-10-08 10:25:49')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPaper Load (0.7ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Learning Relational Dependency Networks for Relation Extraction'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Learning Relational Dependency Networks for Relation Extraction', 'We consider the task of KBP slot filling -- extracting relation information from newswire documents for knowledge base construction. We present our pipeline, which employs Relational Dependency Networks (RDNs) to learn linguistic patterns for relation extraction. Additionally, we demonstrate how several components such as weak supervision, word2vec features, joint learning and the use of human advice, can be incorporated in this relational framework. We evaluate the different components in the benchmark KBP 2015 task and show that RDNs effectively model a diverse set of features and perform competitively with current state-of-the-art relation extraction.', 'cs.AI', '2016-07-01T22:11:38Z', 'http://arxiv.org/abs/1607.00424v1', '2016-10-08 10:25:49', '2016-10-08 10:25:49')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPublish Load (0.8ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 357[0m
  [1m[35mAuthor Load (0.6ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Dileep Viswanathan'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Dileep Viswanathan', '2016-10-08 10:25:49', '2016-10-08 10:25:49')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.4ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (970, 357, 0, '2016-10-08 10:25:49', '2016-10-08 10:25:49')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (0.8ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Ameet Soni'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Ameet Soni', '2016-10-08 10:25:49', '2016-10-08 10:25:49')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (971, 357, 1, '2016-10-08 10:25:49', '2016-10-08 10:25:49')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.6ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Jude Shavlik'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Jude Shavlik', '2016-10-08 10:25:49', '2016-10-08 10:25:49')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (972, 357, 2, '2016-10-08 10:25:49', '2016-10-08 10:25:49')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.6ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Sriraam Natarajan'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36m (0.1ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (920, 357, 3, '2016-10-08 10:25:49', '2016-10-08 10:25:49')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (0.5ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Domain Adaptation for Neural Networks by Parameter Augmentation'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.7ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Domain Adaptation for Neural Networks by Parameter Augmentation', 'We propose a simple domain adaptation method for neural networks in a supervised setting. Supervised domain adaptation is a way of improving the generalization performance on the target domain by using the source domain dataset, assuming that both of the datasets are labeled. Recently, recurrent neural networks have been shown to be successful on a variety of NLP tasks such as caption generation; however, the existing domain adaptation techniques are limited to (1) tune the model parameters by the target dataset after the training by the source dataset, or (2) design the network to have dual output, one for the source domain and the other for the target domain. Reformulating the idea of the domain adaptation technique proposed by Daume (2007), we propose a simple domain adaptation method, which can be applied to neural networks trained with a cross-entropy loss. On captioning datasets, we show performance improvements over other domain adaptation methods.', 'cs.CL', '2016-07-01T21:24:21Z', 'http://arxiv.org/abs/1607.00410v1', '2016-10-08 10:25:49', '2016-10-08 10:25:49')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPublish Load (0.9ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 358[0m
  [1m[35mAuthor Load (0.6ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Yusuke Watanabe'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Yusuke Watanabe', '2016-10-08 10:25:49', '2016-10-08 10:25:49')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (973, 358, 0, '2016-10-08 10:25:49', '2016-10-08 10:25:49')[0m
  [1m[35m (0.3ms)[0m  COMMIT
  [1m[36mAuthor Load (0.6ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Kazuma Hashimoto'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Kazuma Hashimoto', '2016-10-08 10:25:49', '2016-10-08 10:25:49')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (974, 358, 1, '2016-10-08 10:25:49', '2016-10-08 10:25:49')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.9ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Yoshimasa Tsuruoka'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Yoshimasa Tsuruoka', '2016-10-08 10:25:49', '2016-10-08 10:25:49')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (975, 358, 2, '2016-10-08 10:25:49', '2016-10-08 10:25:49')[0m
  [1m[35m (2.9ms)[0m  COMMIT
  [1m[36mPaper Load (0.9ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Meaningful Models: Utilizing Conceptual Structure to Improve Machine Learning Interpretability'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Meaningful Models: Utilizing Conceptual Structure to Improve Machine Learning Interpretability', 'The last decade has seen huge progress in the development of advanced machine learning models; however, those models are powerless unless human users can interpret them. Here we show how the mind\'s construction of concepts and meaning can be used to create more interpretable machine learning models. By proposing a novel method of classifying concepts, in terms of \'form\' and \'function\', we elucidate the nature of meaning and offer proposals to improve model understandability. As machine learning begins to permeate daily life, interpretable models may serve as a bridge between domain-expert authors and non-expert users.', 'stat.ML', '2016-07-01T15:07:52Z', 'http://arxiv.org/abs/1607.00279v1', '2016-10-08 10:25:49', '2016-10-08 10:25:49')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPublish Load (0.8ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 359[0m
  [1m[35mAuthor Load (0.7ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Nick Condry'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Nick Condry', '2016-10-08 10:25:49', '2016-10-08 10:25:49')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (976, 359, 0, '2016-10-08 10:25:49', '2016-10-08 10:25:49')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (0.5ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Why is Posterior Sampling Better than Optimism for Reinforcement Learning'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Why is Posterior Sampling Better than Optimism for Reinforcement Learning', 'Computational results demonstrate that posterior sampling for reinforcement learning (PSRL) dramatically outperforms algorithms driven by optimism, such as UCRL2. We provide insight into the extent of this performance boost and the phenomenon that drives it. We leverage this insight to establish an $\\tilde{O}(H\\sqrt{SAT})$ Bayesian expected regret bound for PSRL in finite-horizon episodic Markov decision processes, where $H$ is the horizon, $S$ is the number of states, $A$ is the number of actions and $T$ is the time elapsed. This improves upon the best previous bound of $\\tilde{O}(H S \\sqrt{AT})$ for any reinforcement learning algorithm.', 'stat.ML', '2016-07-01T11:58:28Z', 'http://arxiv.org/abs/1607.00215v2', '2016-10-08 10:25:49', '2016-10-08 10:25:49')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPublish Load (0.6ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 360[0m
  [1m[35mAuthor Load (0.7ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Ian Osband'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Ian Osband', '2016-10-08 10:25:49', '2016-10-08 10:25:49')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (977, 360, 0, '2016-10-08 10:25:49', '2016-10-08 10:25:49')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.6ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Benjamin Van Roy'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Benjamin Van Roy', '2016-10-08 10:25:49', '2016-10-08 10:25:49')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (978, 360, 1, '2016-10-08 10:25:49', '2016-10-08 10:25:49')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.6ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Throwing fuel on the embers: Probability or Dichotomy, Cognitive or Linguistic?'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Throwing fuel on the embers: Probability or Dichotomy, Cognitive or Linguistic?', 'Prof. Robert Berwick\'s abstract for his forthcoming invited talk at the ACL2016 workshop on Cognitive Aspects of Computational Language Learning revives an ancient debate. Entitled \"Why take a chance?\", Berwick seems to refer implicitly to Chomsky\'s critique of the statistical approach of Harris as well as the currently dominant paradigms in CoNLL. Berwick avoids Chomsky\'s use of \"innate\" but states that \"the debate over the existence of sophisticated mental grammars was settled with Chomsky\'s Logical Structure of Linguistic Theory (1957/1975)\", acknowledging that \"this debate has often been revived\". This paper agrees with the view that this debate has long since been settled, but with the opposite outcome! Given the embers have not yet died away, and the questions remain fundamental, perhaps it is appropriate to refuel the debate, so I would like to join Bob in throwing fuel on this fire by reviewing the evidence against the Chomskian position!', 'cs.CL', '2016-07-01T10:01:11Z', 'http://arxiv.org/abs/1607.00186v1', '2016-10-08 10:25:49', '2016-10-08 10:25:49')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (0.7ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 361
  [1m[36mAuthor Load (0.6ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'David M. W. Powers'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('David M. W. Powers', '2016-10-08 10:25:49', '2016-10-08 10:25:49')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (979, 361, 0, '2016-10-08 10:25:49', '2016-10-08 10:25:49')
  [1m[36m (3.0ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.9ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'LSTM-based Encoder-Decoder for Multi-sensor Anomaly Detection'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.4ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('LSTM-based Encoder-Decoder for Multi-sensor Anomaly Detection', 'Mechanical devices such as engines, vehicles, aircrafts, etc., are typically instrumented with numerous sensors to capture the behavior and health of the machine. However, there are often external factors or variables which are not captured by sensors leading to time-series which are inherently unpredictable. For instance, manual controls and/or unmonitored environmental conditions or load may lead to inherently unpredictable time-series. Detecting anomalies in such scenarios becomes challenging using standard approaches based on mathematical models that rely on stationarity, or prediction models that utilize prediction errors to detect anomalies. We propose a Long Short Term Memory Networks based Encoder-Decoder scheme for Anomaly Detection (EncDec-AD) that learns to reconstruct \'normal\' time-series behavior, and thereafter uses reconstruction error to detect anomalies. We experiment with three publicly available quasi predictable time-series datasets: power demand, space shuttle, and ECG, and two real-world engine datasets with both predictive and unpredictable behavior. We show that EncDec-AD is robust and can detect anomalies from predictable, unpredictable, periodic, aperiodic, and quasi-periodic time-series. Further, we show that EncDec-AD is able to detect anomalies from short time-series (length as small as 30) as well as long time-series (length as large as 500).', 'cs.AI', '2016-07-01T08:25:48Z', 'http://arxiv.org/abs/1607.00148v2', '2016-10-08 10:25:49', '2016-10-08 10:25:49')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (0.8ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 362
  [1m[36mAuthor Load (0.4ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Pankaj Malhotra'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36m (0.1ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (316, 362, 0, '2016-10-08 10:25:49', '2016-10-08 10:25:49')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (0.6ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Anusha Ramakrishnan'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36m (0.2ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (318, 362, 1, '2016-10-08 10:25:49', '2016-10-08 10:25:49')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (0.6ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Gaurangi Anand'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36m (0.2ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (319, 362, 2, '2016-10-08 10:25:49', '2016-10-08 10:25:49')[0m
  [1m[35m (0.3ms)[0m  COMMIT
  [1m[36mAuthor Load (0.4ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Lovekesh Vig'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36m (0.1ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (320, 362, 3, '2016-10-08 10:25:49', '2016-10-08 10:25:49')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.4ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Puneet Agarwal'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36m (0.1ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (321, 362, 4, '2016-10-08 10:25:49', '2016-10-08 10:25:49')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (0.6ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Gautam Shroff'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36m (0.2ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (322, 362, 5, '2016-10-08 10:25:49', '2016-10-08 10:25:49')[0m
  [1m[35m (2.4ms)[0m  COMMIT
  [1m[36mPaper Load (0.7ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Missing Data Estimation in High-Dimensional Datasets: A Swarm Intelligence-Deep Neural Network Approach'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Missing Data Estimation in High-Dimensional Datasets: A Swarm Intelligence-Deep Neural Network Approach', 'In this paper, we examine the problem of missing data in high-dimensional datasets by taking into consideration the Missing Completely at Random and Missing at Random mechanisms, as well as theArbitrary missing pattern. Additionally, this paper employs a methodology based on Deep Learning and Swarm Intelligence algorithms in order to provide reliable estimates for missing data. The deep learning technique is used to extract features from the input data via an unsupervised learning approach by modeling the data distribution based on the input. This deep learning technique is then used as part of the objective function for the swarm intelligence technique in order to estimate the missing data after a supervised fine-tuning phase by minimizing an error function based on the interrelationship and correlation between features in the dataset. The investigated methodology in this paper therefore has longer running times, however, the promising potential outcomes justify the trade-off. Also, basic knowledge of statistics is presumed.', 'cs.AI', '2016-07-01T07:34:50Z', 'http://arxiv.org/abs/1607.00136v1', '2016-10-08 10:25:49', '2016-10-08 10:25:49')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPublish Load (0.6ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 363[0m
  [1m[35mAuthor Load (0.6ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Collins Leke'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Collins Leke', '2016-10-08 10:25:49', '2016-10-08 10:25:49')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (980, 363, 0, '2016-10-08 10:25:49', '2016-10-08 10:25:49')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.7ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Tshilidzi Marwala'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Tshilidzi Marwala', '2016-10-08 10:25:49', '2016-10-08 10:25:49')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (981, 363, 1, '2016-10-08 10:25:49', '2016-10-08 10:25:49')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.7ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Fractal Dimension Pattern Based Multiresolution Analysis for Rough Estimator of Person-Dependent Audio Emotion Recognition'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Fractal Dimension Pattern Based Multiresolution Analysis for Rough Estimator of Person-Dependent Audio Emotion Recognition', 'As a general means of expression, audio analysis and recognition has attracted much attentions for its wide applications in real-life world. Audio emotion recognition (AER) attempts to understand emotional states of human with the given utterance signals, and has been studied abroad for its further development on friendly human-machine interfaces. Distinguish from other existing works, the person-dependent patterns of audio emotions are conducted, and fractal dimension features are calculated for acoustic feature extraction. Furthermore, it is able to efficiently learn intrinsic characteristics of auditory emotions, while the utterance features are learned from fractal dimensions of each sub-bands. Experimental results show the proposed method is able to provide comparative performance for audio emotion recognition.', 'cs.AI', '2016-07-01T00:54:10Z', 'http://arxiv.org/abs/1607.00087v1', '2016-10-08 10:25:49', '2016-10-08 10:25:49')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (0.9ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 364
  [1m[36mAuthor Load (0.6ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Miao Cheng'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Miao Cheng', '2016-10-08 10:25:49', '2016-10-08 10:25:49')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (982, 364, 0, '2016-10-08 10:25:49', '2016-10-08 10:25:49')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.6ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Towards A Virtual Assistant That Can Be Taught New Tasks In Any Domain By Its End-Users'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Towards A Virtual Assistant That Can Be Taught New Tasks In Any Domain By Its End-Users', 'The challenge stated in the title can be divided into two main problems. The first problem is to reliably mimic the way that users interact with user interfaces. The second problem is to build an instructible agent, i.e. one that can be taught to execute tasks expressed as previously unseen natural language commands. This paper proposes a solution to the second problem, a system we call Helpa. End-users can teach Helpa arbitrary new tasks whose level of complexity is similar to the tasks available from today\'s most popular virtual assistants. Teaching Helpa does not involve any programming. Instead, users teach Helpa by providing just one example of a command paired with a demonstration of how to execute that command. Helpa does not rely on any pre-existing domain-specific knowledge. It is therefore completely domain-independent. Our usability study showed that end-users can teach Helpa many new tasks in less than a minute each, often much less.', 'cs.AI', '2016-06-30T22:04:26Z', 'http://arxiv.org/abs/1607.00061v1', '2016-10-08 10:25:49', '2016-10-08 10:25:49')
  [1m[36m (5.0ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (1.0ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 365
  [1m[36mAuthor Load (1.0ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'I. Dan Melamed'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('I. Dan Melamed', '2016-10-08 10:25:49', '2016-10-08 10:25:49')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (983, 365, 0, '2016-10-08 10:25:49', '2016-10-08 10:25:49')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.8ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Nobal B. Niraula'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Nobal B. Niraula', '2016-10-08 10:25:49', '2016-10-08 10:25:49')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (984, 365, 1, '2016-10-08 10:25:49', '2016-10-08 10:25:49')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPaper Load (0.6ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Lifted Region-Based Belief Propagation'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Lifted Region-Based Belief Propagation', 'Due to the intractable nature of exact lifted inference, research has recently focused on the discovery of accurate and efficient approximate inference algorithms in Statistical Relational Models (SRMs), such as Lifted First-Order Belief Propagation. FOBP simulates propositional factor graph belief propagation without constructing the ground factor graph by identifying and lifting over redundant message computations. In this work, we propose a generalization of FOBP called Lifted Generalized Belief Propagation, in which both the region structure and the message structure can be lifted. This approach allows more of the inference to be performed intra-region (in the exact inference step of BP), thereby allowing simulation of propagation on a graph structure with larger region scopes and fewer edges, while still maintaining tractability. We demonstrate that the resulting algorithm converges in fewer iterations to more accurate results on a variety of SRMs.', 'cs.AI', '2016-06-30T19:50:33Z', 'http://arxiv.org/abs/1606.09637v1', '2016-10-08 10:25:49', '2016-10-08 10:25:49')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPublish Load (0.7ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 366[0m
  [1m[35mAuthor Load (0.6ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'David Smith'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('David Smith', '2016-10-08 10:25:49', '2016-10-08 10:25:49')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.4ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (985, 366, 0, '2016-10-08 10:25:49', '2016-10-08 10:25:49')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (0.9ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Parag Singla'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Parag Singla', '2016-10-08 10:25:49', '2016-10-08 10:25:49')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (986, 366, 1, '2016-10-08 10:25:49', '2016-10-08 10:25:49')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.8ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Vibhav Gogate'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Vibhav Gogate', '2016-10-08 10:25:49', '2016-10-08 10:25:49')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (987, 366, 2, '2016-10-08 10:25:49', '2016-10-08 10:25:49')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPaper Load (0.6ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'A Permutation-based Model for Crowd Labeling: Optimal Estimation and Robustness'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('A Permutation-based Model for Crowd Labeling: Optimal Estimation and Robustness', 'The aggregation and denoising of crowd labeled data is a task that has gained increased significance with the advent of crowdsourcing platforms and massive datasets. In this paper, we propose a permutation-based model for crowd labeled data that is a significant generalization of the common Dawid-Skene model, and introduce a new error metric by which to compare different estimators. Working in a high-dimensional non-asymptotic framework that allows both the number of workers and tasks to scale, we derive optimal rates of convergence for the permutation-based model. We show that the permutation-based model offers significant robustness in estimation due to its richness, while surprisingly incurring only a small additional statistical penalty as compared to the Dawid-Skene model. Finally, we propose a computationally-efficient method, called the OBI-WAN estimator, that is uniformly optimal over a class intermediate between the permutation-based and the Dawid-Skene models, and is uniformly consistent over the entire permutation-based model class. In contrast, the guarantees for estimators available in prior literature are sub-optimal over the original Dawid-Skene model.', 'cs.LG', '2016-06-30T19:40:56Z', 'http://arxiv.org/abs/1606.09632v1', '2016-10-08 10:25:49', '2016-10-08 10:25:49')[0m
  [1m[35m (2.9ms)[0m  COMMIT
  [1m[36mPublish Load (1.1ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 367[0m
  [1m[35mAuthor Load (0.9ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Nihar B. Shah'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.4ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Nihar B. Shah', '2016-10-08 10:25:49', '2016-10-08 10:25:49')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (988, 367, 0, '2016-10-08 10:25:49', '2016-10-08 10:25:49')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (0.9ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Sivaraman Balakrishnan'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Sivaraman Balakrishnan', '2016-10-08 10:25:49', '2016-10-08 10:25:49')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (989, 367, 1, '2016-10-08 10:25:49', '2016-10-08 10:25:49')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.6ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Martin J. Wainwright'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Martin J. Wainwright', '2016-10-08 10:25:49', '2016-10-08 10:25:49')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (990, 367, 2, '2016-10-08 10:25:49', '2016-10-08 10:25:49')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPaper Load (0.6ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Contextual Symmetries in Probabilistic Graphical Models'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Contextual Symmetries in Probabilistic Graphical Models', 'An important approach for efficient inference in probabilistic graphical models exploits symmetries among objects in the domain. Symmetric variables (states) are collapsed into meta-variables (meta-states) and inference algorithms are run over the lifted graphical model instead of the flat one. Our paper extends existing definitions of symmetry by introducing the novel notion of contextual symmetry. Two states that are not globally symmetric, can be contextually symmetric under some specific assignment to a subset of variables, referred to as the context variables. Contextual symmetry subsumes previous symmetry definitions and can rep resent a large class of symmetries not representable earlier. We show how to compute contextual symmetries by reducing it to the problem of graph isomorphism. We extend previous work on exploiting symmetries in the MCMC framework to the case of contextual symmetries. Our experiments on several domains of interest demonstrate that exploiting contextual symmetries can result in significant computational gains.', 'cs.AI', '2016-06-30T18:03:42Z', 'http://arxiv.org/abs/1606.09594v1', '2016-10-08 10:25:49', '2016-10-08 10:25:49')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPublish Load (0.8ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 368[0m
  [1m[35mAuthor Load (0.6ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Ankit Anand'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Ankit Anand', '2016-10-08 10:25:49', '2016-10-08 10:25:49')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (991, 368, 0, '2016-10-08 10:25:49', '2016-10-08 10:25:49')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.7ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Aditya Grover'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Aditya Grover', '2016-10-08 10:25:49', '2016-10-08 10:25:49')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (992, 368, 1, '2016-10-08 10:25:49', '2016-10-08 10:25:49')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.5ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = ' Mausam'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35m (0.1ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (203, 368, 2, '2016-10-08 10:25:49', '2016-10-08 10:25:49')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.8ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Parag Singla'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35m (0.2ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (986, 368, 3, '2016-10-08 10:25:49', '2016-10-08 10:25:49')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.7ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Ordering as privileged information'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Ordering as privileged information', 'We propose to accelerate the rate of convergence of the pattern recognition task by directly minimizing the variance diameters of certain hypothesis spaces, which are critical quantities in fast-convergence results.We show that the variance diameters can be controlled by dividing hypothesis spaces into metric balls based on a new order metric. This order metric can be minimized as an ordinal regression problem, leading to a LUPI (Learning Using Privileged Information) application where we take the privileged information as some desired ordering, and construct a faster-converging hypothesis space by empirically restricting some larger hypothesis space according to that ordering. We give a risk analysis of the approach. We discuss the difficulties with model selection and give an innovative technique for selecting multiple model parameters. Finally, we provide some data experiments.', 'cs.AI', '2016-06-30T17:06:30Z', 'http://arxiv.org/abs/1606.09577v1', '2016-10-08 10:25:49', '2016-10-08 10:25:49')
  [1m[36m (3.0ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (1.1ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 369
  [1m[36mAuthor Load (1.0ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Thomas Vacek'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Thomas Vacek', '2016-10-08 10:25:49', '2016-10-08 10:25:49')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (993, 369, 0, '2016-10-08 10:25:49', '2016-10-08 10:25:49')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.7ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Probabilistic Reasoning in the Description Logic ALCP with the Principle of Maximum Entropy (Full Version)'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Probabilistic Reasoning in the Description Logic ALCP with the Principle of Maximum Entropy (Full Version)', 'A central question for knowledge representation is how to encode and handle uncertain knowledge adequately. We introduce the probabilistic description logic ALCP that is designed for representing context-dependent knowledge, where the actual context taking place is uncertain. ALCP allows the expression of logical dependencies on the domain and probabilistic dependencies on the possible contexts. In order to draw probabilistic conclusions, we employ the principle of maximum entropy. We provide reasoning algorithms for this logic, and show that it satisfies several desirable properties of probabilistic logics.', 'cs.AI', '2016-06-30T14:49:01Z', 'http://arxiv.org/abs/1606.09521v1', '2016-10-08 10:25:49', '2016-10-08 10:25:49')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (0.8ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 370
  [1m[36mAuthor Load (0.6ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Rafael Peñaloza'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Rafael Peñaloza', '2016-10-08 10:25:49', '2016-10-08 10:25:49')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (994, 370, 0, '2016-10-08 10:25:49', '2016-10-08 10:25:49')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.6ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Nico Potyka'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Nico Potyka', '2016-10-08 10:25:49', '2016-10-08 10:25:49')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (995, 370, 1, '2016-10-08 10:25:49', '2016-10-08 10:25:49')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (0.7ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Clique-Width and Directed Width Measures for Answer-Set Programming'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.6ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Clique-Width and Directed Width Measures for Answer-Set Programming', 'Disjunctive Answer Set Programming (ASP) is a powerful declarative programming paradigm whose main decision problems are located on the second level of the polynomial hierarchy. Identifying tractable fragments and developing efficient algorithms for such fragments are thus important objectives in order to complement the sophisticated ASP systems available to date. Hard problems can become tractable if some problem parameter is bounded by a fixed constant; such problems are then called fixed-parameter tractable (FPT). While several FPT results for ASP exist, parameters that relate to directed or signed graphs representing the program at hand have been neglected so far. In this paper, we first give some negative observations showing that directed width measures on the dependency graph of a program do not lead to FPT results. We then consider the graph parameter of signed clique-width and present a novel dynamic programming algorithm that is FPT w.r.t. this parameter. Clique-width is more general than the well-known treewidth, and, to the best of our knowledge, ours is the first FPT algorithm for bounded clique-width for reasoning problems beyond SAT.', 'cs.AI', '2016-06-30T12:14:33Z', 'http://arxiv.org/abs/1606.09449v1', '2016-10-08 10:25:49', '2016-10-08 10:25:49')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPublish Load (0.8ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 371[0m
  [1m[35mAuthor Load (0.7ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Bernhard Bliem'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Bernhard Bliem', '2016-10-08 10:25:49', '2016-10-08 10:25:49')
  [1m[36m (1.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.4ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (996, 371, 0, '2016-10-08 10:25:49', '2016-10-08 10:25:49')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (0.8ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Sebastian Ordyniak'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Sebastian Ordyniak', '2016-10-08 10:25:49', '2016-10-08 10:25:49')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (997, 371, 1, '2016-10-08 10:25:49', '2016-10-08 10:25:49')
  [1m[36m (3.0ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.7ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Stefan Woltran'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35m (0.2ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (352, 371, 2, '2016-10-08 10:25:49', '2016-10-08 10:25:49')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.8ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Learning Crosslingual Word Embeddings without Bilingual Corpora'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Learning Crosslingual Word Embeddings without Bilingual Corpora', 'Crosslingual word embeddings represent lexical items from different languages in the same vector space, enabling transfer of NLP tools. However, previous attempts had expensive resource requirements, difficulty incorporating monolingual data or were unable to handle polysemy. We address these drawbacks in our method which takes advantage of a high coverage dictionary in an EM style training algorithm over monolingual corpora in two languages. Our model achieves state-of-the-art performance on bilingual lexicon induction task exceeding models using large bilingual corpora, and competitive results on the monolingual word similarity and cross-lingual document classification task.', 'cs.CL', '2016-06-30T09:18:53Z', 'http://arxiv.org/abs/1606.09403v1', '2016-10-08 10:25:49', '2016-10-08 10:25:49')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (0.8ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 372
  [1m[36mAuthor Load (0.7ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Long Duong'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Long Duong', '2016-10-08 10:25:49', '2016-10-08 10:25:49')[0m
  [1m[35m (1.3ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (998, 372, 0, '2016-10-08 10:25:49', '2016-10-08 10:25:49')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.8ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Hiroshi Kanayama'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Hiroshi Kanayama', '2016-10-08 10:25:49', '2016-10-08 10:25:49')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (999, 372, 1, '2016-10-08 10:25:49', '2016-10-08 10:25:49')[0m
  [1m[35m (0.3ms)[0m  COMMIT
  [1m[36mAuthor Load (1.0ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Tengfei Ma'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Tengfei Ma', '2016-10-08 10:25:49', '2016-10-08 10:25:49')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1000, 372, 2, '2016-10-08 10:25:49', '2016-10-08 10:25:49')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.8ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Steven Bird'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Steven Bird', '2016-10-08 10:25:49', '2016-10-08 10:25:49')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1001, 372, 3, '2016-10-08 10:25:49', '2016-10-08 10:25:49')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.6ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Trevor Cohn'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Trevor Cohn', '2016-10-08 10:25:49', '2016-10-08 10:25:49')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1002, 372, 4, '2016-10-08 10:25:49', '2016-10-08 10:25:49')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.6ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Swift: Compiled Inference for Probabilistic Programming Languages'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Swift: Compiled Inference for Probabilistic Programming Languages', 'A probabilistic program defines a probability measure over its semantic structures. One common goal of probabilistic programming languages (PPLs) is to compute posterior probabilities for arbitrary models and queries, given observed evidence, using a generic inference engine. Most PPL inference engines---even the compiled ones---incur significant runtime interpretation overhead, especially for contingent and open-universe models. This paper describes Swift, a compiler for the BLOG PPL. Swift-generated code incorporates optimizations that eliminate interpretation overhead, maintain dynamic dependencies efficiently, and handle memory management for possible worlds of varying sizes. Experiments comparing Swift with other PPL engines on a variety of inference problems demonstrate speedups ranging from 12x to 326x.', 'cs.AI', '2016-06-30T08:30:54Z', 'http://arxiv.org/abs/1606.09242v1', '2016-10-08 10:25:49', '2016-10-08 10:25:49')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (0.9ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 373
  [1m[36mAuthor Load (0.8ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Yi Wu'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Yi Wu', '2016-10-08 10:25:49', '2016-10-08 10:25:49')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1003, 373, 0, '2016-10-08 10:25:49', '2016-10-08 10:25:49')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.8ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Lei Li'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Lei Li', '2016-10-08 10:25:49', '2016-10-08 10:25:49')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1004, 373, 1, '2016-10-08 10:25:49', '2016-10-08 10:25:49')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (0.9ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Stuart Russell'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Stuart Russell', '2016-10-08 10:25:49', '2016-10-08 10:25:49')[0m
  [1m[35m (2.9ms)[0m  COMMIT
  [1m[36m (0.3ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.4ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1005, 373, 2, '2016-10-08 10:25:49', '2016-10-08 10:25:49')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.1ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Rastislav Bodik'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Rastislav Bodik', '2016-10-08 10:25:49', '2016-10-08 10:25:49')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1006, 373, 3, '2016-10-08 10:25:49', '2016-10-08 10:25:49')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (0.7ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Neutrosophic Overset, Neutrosophic Underset, and Neutrosophic Offset. Similarly for Neutrosophic Over-/Under-/Off- Logic, Probability, and Statistics'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.4ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Neutrosophic Overset, Neutrosophic Underset, and Neutrosophic Offset. Similarly for Neutrosophic Over-/Under-/Off- Logic, Probability, and Statistics', 'Neutrosophic Over-/Under-/Off-Set and -Logic were defined by the author in 1995 and published for the first time in 2007. We extended the neutrosophic set respectively to Neutrosophic Overset {when some neutrosophic component is over 1}, Neutrosophic Underset {when some neutrosophic component is below 0}, and to Neutrosophic Offset {when some neutrosophic components are off the interval [0, 1], i.e. some neutrosophic component over 1 and other neutrosophic component below 0}. This is no surprise with respect to the classical fuzzy set/logic, intuitionistic fuzzy set/logic, or classical/imprecise probability, where the values are not allowed outside the interval [0, 1], since our real-world has numerous examples and applications of over-/under-/off-neutrosophic components. For example, person working overtime deserves a membership degree over 1, while a person producing more damage than benefit to a company deserves a membership below 0. Then, similarly, the Neutrosophic Logic/Measure/Probability/Statistics etc. were extended to respectively Neutrosophic Over-/Under-/Off-Logic, -Measure, -Probability, -Statistics etc. [Smarandache, 2007].', 'cs.AI', '2016-06-30T02:17:59Z', 'http://arxiv.org/abs/1607.00234v1', '2016-10-08 10:25:49', '2016-10-08 10:25:49')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPublish Load (0.8ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 374[0m
  [1m[35mAuthor Load (0.6ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Florentin Smarandache'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Florentin Smarandache', '2016-10-08 10:25:49', '2016-10-08 10:25:49')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1007, 374, 0, '2016-10-08 10:25:49', '2016-10-08 10:25:49')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPaper Load (0.6ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'How Many Folders Do You Really Need?'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('How Many Folders Do You Really Need?', 'Email classification is still a mostly manual task. Consequently, most Web mail users never define a single folder. Recently however, automatic classification offering the same categories to all users has started to appear in some Web mail clients, such as AOL or Gmail. We adopt this approach, rather than previous (unsuccessful) personalized approaches because of the change in the nature of consumer email traffic, which is now dominated by (non-spam) machine-generated email. We propose here a novel approach for (1) automatically distinguishing between personal and machine-generated email and (2) classifying messages into latent categories, without requiring users to have defined any folder. We report how we have discovered that a set of 6 \"latent\" categories (one for human- and the others for machine-generated messages) can explain a significant portion of email traffic. We describe in details the steps involved in building a Web-scale email categorization system, from the collection of ground-truth labels, the selection of features to the training of models. Experimental evaluation was performed on more than 500 billion messages received during a period of six months by users of Yahoo mail service, who elected to be part of such research studies. Our system achieved precision and recall rates close to 90% and the latent categories we discovered were shown to cover 70% of both email traffic and email search queries. We believe that these results pave the way for a change of approach in the Web mail industry, and could support the invention of new large-scale email discovery paradigms that had not been possible before.', 'cs.AI', '2016-06-29T21:35:24Z', 'http://dx.doi.org/10.1145/2661829.2662018.', '2016-10-08 10:25:49', '2016-10-08 10:25:49')[0m
  [1m[35m (2.9ms)[0m  COMMIT
  [1m[36mPublish Load (1.1ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 375[0m
  [1m[35mAuthor Load (0.8ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Mihajlo Grbovic'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35m (0.2ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (880, 375, 0, '2016-10-08 10:25:49', '2016-10-08 10:25:49')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.7ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Guy Halawi'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Guy Halawi', '2016-10-08 10:25:49', '2016-10-08 10:25:49')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1008, 375, 1, '2016-10-08 10:25:49', '2016-10-08 10:25:49')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.9ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Zohar Karnin'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36m (0.2ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (909, 375, 2, '2016-10-08 10:25:49', '2016-10-08 10:25:49')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (0.7ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Yoelle Maarek'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Yoelle Maarek', '2016-10-08 10:25:49', '2016-10-08 10:25:49')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1009, 375, 3, '2016-10-08 10:25:49', '2016-10-08 10:25:49')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.6ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Compression of Neural Machine Translation Models via Pruning'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.4ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Compression of Neural Machine Translation Models via Pruning', 'Neural Machine Translation (NMT), like many other deep learning domains, typically suffers from over-parameterization, resulting in large storage sizes. This paper examines three simple magnitude-based pruning schemes to compress NMT models, namely class-blind, class-uniform, and class-distribution, which differ in terms of how pruning thresholds are computed for the different classes of weights in the NMT architecture. We demonstrate the efficacy of weight pruning as a compression technique for a state-of-the-art NMT system. We show that an NMT model with over 200 million parameters can be pruned by 40% with very little performance loss as measured on the WMT\'14 English-German translation task. This sheds light on the distribution of redundancy in the NMT architecture. Our main result is that with retraining, we can recover and even surpass the original performance with an 80%-pruned model.', 'cs.AI', '2016-06-29T20:36:23Z', 'http://arxiv.org/abs/1606.09274v1', '2016-10-08 10:25:49', '2016-10-08 10:25:49')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (0.8ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 376
  [1m[36mAuthor Load (0.6ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Abigail See'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Abigail See', '2016-10-08 10:25:49', '2016-10-08 10:25:49')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1010, 376, 0, '2016-10-08 10:25:49', '2016-10-08 10:25:49')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.6ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Minh-Thang Luong'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Minh-Thang Luong', '2016-10-08 10:25:49', '2016-10-08 10:25:49')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1011, 376, 1, '2016-10-08 10:25:49', '2016-10-08 10:25:49')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.9ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Christopher D. Manning'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Christopher D. Manning', '2016-10-08 10:25:49', '2016-10-08 10:25:49')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1012, 376, 2, '2016-10-08 10:25:49', '2016-10-08 10:25:49')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.6ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Algebraic foundations for qualitative calculi and networks'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Algebraic foundations for qualitative calculi and networks', 'A qualitative representation $\\phi$ is like an ordinary representation of a relation algebra, but instead of requiring $(a; b)^\\phi = a^\\phi | b^\\phi$, as we do for ordinary representations, we only require that $c^\\phi\\supseteq a^\\phi | b^\\phi \\iff c\\geq a ; b$, for each $c$ in the algebra. A constraint network is qualitatively satisfiable if its nodes can be mapped to elements of a qualitative representation, preserving the constraints. If a constraint network is satisfiable then it is clearly qualitatively satisfiable, but the converse can fail. However, for a wide range of relation algebras including the point algebra, the Allen Interval Algebra, RCC8 and many others, a network is satisfiable if and only if it is qualitatively satisfiable. Unlike ordinary composition, the weak composition arising from qualitative representations need not be associative, so we can generalise by considering network satisfaction problems over non-associative algebras. We prove that computationally, qualitative representations have many advantages over ordinary representations: whereas many finite relation algebras have only infinite representations, every finite qualitatively representable algebra has a finite qualitative representation; the representability problem for (the atom structures of) finite non-associative algebras is NP-complete; the network satisfaction problem over a finite qualitatively representable algebra is always in NP; the validity of equations over qualitative representations is co-NP-complete. On the other hand we prove that there is no finite axiomatisation of the class of qualitatively representable algebras.', 'cs.AI', '2016-06-29T15:00:48Z', 'http://arxiv.org/abs/1606.09140v2', '2016-10-08 10:25:49', '2016-10-08 10:25:49')
  [1m[36m (3.0ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (1.1ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 377
  [1m[36mAuthor Load (1.0ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Robin Hirsch'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Robin Hirsch', '2016-10-08 10:25:49', '2016-10-08 10:25:49')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1013, 377, 0, '2016-10-08 10:25:49', '2016-10-08 10:25:49')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.9ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Marcel Jackson'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Marcel Jackson', '2016-10-08 10:25:49', '2016-10-08 10:25:49')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1014, 377, 1, '2016-10-08 10:25:49', '2016-10-08 10:25:49')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (1.1ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Tomasz Kowalski'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Tomasz Kowalski', '2016-10-08 10:25:49', '2016-10-08 10:25:49')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1015, 377, 2, '2016-10-08 10:25:49', '2016-10-08 10:25:49')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.6ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Credibilistic TOPSIS Model for Evaluation and Selection of Municipal Solid Waste Disposal Methods'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Credibilistic TOPSIS Model for Evaluation and Selection of Municipal Solid Waste Disposal Methods', 'Municipal solid waste management (MSWM) is a challenging issue of urban development in developing countries. Each country having different socio-economic-environmental background, might not accept a particular disposal method as the optimal choice. Selection of suitable disposal method in MSWM, under vague and imprecise information can be considered as multi criteria decision making problem (MCDM). In the present paper, TOPSIS (Technique for Order Preference by Similarity to Ideal Solution) methodology is extended based on credibility theory for evaluating the performances of MSW disposal methods under some criteria fixed by experts. The proposed model helps decision makers to choose a preferable alternative for their municipal area. A sensitivity analysis by our proposed model confirms this fact.', 'cs.AI', '2016-06-29T06:13:22Z', 'http://arxiv.org/abs/1606.08965v3', '2016-10-08 10:25:49', '2016-10-08 10:25:49')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (0.9ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 378
  [1m[36mAuthor Load (0.6ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Jagannath Roy'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36m (0.1ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (912, 378, 0, '2016-10-08 10:25:49', '2016-10-08 10:25:49')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.6ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Krishnendu Adhikary'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Krishnendu Adhikary', '2016-10-08 10:25:49', '2016-10-08 10:25:49')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1016, 378, 1, '2016-10-08 10:25:49', '2016-10-08 10:25:49')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.8ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Samarjit Kar'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Samarjit Kar', '2016-10-08 10:25:49', '2016-10-08 10:25:49')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1017, 378, 2, '2016-10-08 10:25:49', '2016-10-08 10:25:49')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (0.7ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Non-linear Label Ranking for Large-scale Prediction of Long-Term User Interests'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Non-linear Label Ranking for Large-scale Prediction of Long-Term User Interests', 'We consider the problem of personalization of online services from the viewpoint of ad targeting, where we seek to find the best ad categories to be shown to each user, resulting in improved user experience and increased advertisers\' revenue. We propose to address this problem as a task of ranking the ad categories depending on a user\'s preference, and introduce a novel label ranking approach capable of efficiently learning non-linear, highly accurate models in large-scale settings. Experiments on a real-world advertising data set with more than 3.2 million users show that the proposed algorithm outperforms the existing solutions in terms of both rank loss and top-K retrieval performance, strongly suggesting the benefit of using the proposed model on large-scale ranking problems.', 'cs.AI', '2016-06-29T06:00:35Z', 'http://arxiv.org/abs/1606.08963v1', '2016-10-08 10:25:49', '2016-10-08 10:25:49')[0m
  [1m[35m (3.0ms)[0m  COMMIT
  [1m[36mPublish Load (1.1ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 379[0m
  [1m[35mAuthor Load (0.8ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Nemanja Djuric'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35m (0.2ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (881, 379, 0, '2016-10-08 10:25:49', '2016-10-08 10:25:49')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.7ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Mihajlo Grbovic'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35m (0.2ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (880, 379, 1, '2016-10-08 10:25:49', '2016-10-08 10:25:49')
  [1m[36m (1.3ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.8ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Vladan Radosavljevic'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35m (0.2ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (882, 379, 2, '2016-10-08 10:25:49', '2016-10-08 10:25:49')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.9ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Narayan Bhamidipati'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Narayan Bhamidipati', '2016-10-08 10:25:49', '2016-10-08 10:25:49')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1018, 379, 3, '2016-10-08 10:25:49', '2016-10-08 10:25:49')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (1.0ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Slobodan Vucetic'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Slobodan Vucetic', '2016-10-08 10:25:49', '2016-10-08 10:25:49')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1019, 379, 4, '2016-10-08 10:25:49', '2016-10-08 10:25:49')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.6ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Evaluation and selection of Medical Tourism sites: A rough AHP based MABAC approach'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Evaluation and selection of Medical Tourism sites: A rough AHP based MABAC approach', 'In this paper, a novel multiple criteria decision making (MCDM) methodology is presented for assessing and prioritizing medical tourism destinations in uncertain environment. A systematic evaluation and assessment method is proposed by integrating rough number based AHP (Analytic Hierarchy Process) and rough number based MABAC (Multi-Attributive Border Approximation area Comparison). Rough number is used to aggregate individual judgments and preferences to deal with vagueness in decision making due to limited data. Rough AHP analyzes the relative importance of criteria based on their preferences given by experts. Rough MABAC evaluates the alternative sites based on the criteria weights. The proposed methodology is explained through a case study considering different cities for healthcare service in India. The validity of the obtained ranking for the given decision making problem is established by testing criteria proposed by Wang and Triantaphyllou (2008) along with further analysis and discussion.', 'cs.AI', '2016-06-29T06:00:32Z', 'http://arxiv.org/abs/1606.08962v2', '2016-10-08 10:25:49', '2016-10-08 10:25:49')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (0.9ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 380
  [1m[36mAuthor Load (0.8ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Jagannath Roy'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.3ms)[0m  BEGIN
  [1m[36m (0.2ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (912, 380, 0, '2016-10-08 10:25:49', '2016-10-08 10:25:49')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.7ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Kajal Chatterjee'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Kajal Chatterjee', '2016-10-08 10:25:49', '2016-10-08 10:25:49')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1020, 380, 1, '2016-10-08 10:25:49', '2016-10-08 10:25:49')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.9ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Abhirup Bandhopadhyay'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Abhirup Bandhopadhyay', '2016-10-08 10:25:49', '2016-10-08 10:25:49')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1021, 380, 2, '2016-10-08 10:25:49', '2016-10-08 10:25:49')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.9ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Samarjit Kar'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36m (0.2ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1017, 380, 3, '2016-10-08 10:25:49', '2016-10-08 10:25:49')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (0.6ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Greedy, Joint Syntactic-Semantic Parsing with Stack LSTMs'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Greedy, Joint Syntactic-Semantic Parsing with Stack LSTMs', 'We present a transition-based parser that jointly produces syntactic and semantic dependencies. It learns a representation of the entire algorithm state, using stack long short-term memories. Our greedy inference algorithm has linear time, including feature extraction. On the CoNLL 2008--9 English shared tasks, we obtain the best published parsing performance among models that jointly learn syntax and semantics.', 'cs.CL', '2016-06-29T05:01:56Z', 'http://arxiv.org/abs/1606.08954v1', '2016-10-08 10:25:49', '2016-10-08 10:25:49')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPublish Load (0.9ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 381[0m
  [1m[35mAuthor Load (0.9ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Swabha Swayamdipta'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Swabha Swayamdipta', '2016-10-08 10:25:49', '2016-10-08 10:25:49')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.3ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1022, 381, 0, '2016-10-08 10:25:49', '2016-10-08 10:25:49')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (1.1ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Miguel Ballesteros'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Miguel Ballesteros', '2016-10-08 10:25:49', '2016-10-08 10:25:49')[0m
  [1m[35m (3.0ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1023, 381, 1, '2016-10-08 10:25:49', '2016-10-08 10:25:49')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.0ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Chris Dyer'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Chris Dyer', '2016-10-08 10:25:49', '2016-10-08 10:25:49')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1024, 381, 2, '2016-10-08 10:25:49', '2016-10-08 10:25:49')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (0.9ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Noah A. Smith'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Noah A. Smith', '2016-10-08 10:25:49', '2016-10-08 10:25:49')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1025, 381, 3, '2016-10-08 10:25:49', '2016-10-08 10:25:49')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.6ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'subgraph2vec: Learning Distributed Representations of Rooted Sub-graphs from Large Graphs'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('subgraph2vec: Learning Distributed Representations of Rooted Sub-graphs from Large Graphs', 'In this paper, we present subgraph2vec, a novel approach for learning latent representations of rooted subgraphs from large graphs inspired by recent advancements in Deep Learning and Graph Kernels. These latent representations encode semantic substructure dependencies in a continuous vector space, which is easily exploited by statistical models for tasks such as graph classification, clustering, link prediction and community detection. subgraph2vec leverages on local information obtained from neighbourhoods of nodes to learn their latent representations in an unsupervised fashion. We demonstrate that subgraph vectors learnt by our approach could be used in conjunction with classifiers such as CNNs, SVMs and relational data clustering algorithms to achieve significantly superior accuracies. Also, we show that the subgraph vectors could be used for building a deep learning variant of Weisfeiler-Lehman graph kernel. Our experiments on several benchmark and large-scale real-world datasets reveal that subgraph2vec achieves significant improvements in accuracies over existing graph kernels on both supervised and unsupervised learning tasks. Specifically, on two realworld program analysis tasks, namely, code clone and malware detection, subgraph2vec outperforms state-of-the-art kernels by more than 17% and 4%, respectively.', 'cs.LG', '2016-06-29T01:05:36Z', 'http://arxiv.org/abs/1606.08928v1', '2016-10-08 10:25:49', '2016-10-08 10:25:49')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (0.8ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 382
  [1m[36mAuthor Load (0.7ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Annamalai Narayanan'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Annamalai Narayanan', '2016-10-08 10:25:49', '2016-10-08 10:25:49')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1026, 382, 0, '2016-10-08 10:25:49', '2016-10-08 10:25:49')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.7ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Mahinthan Chandramohan'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Mahinthan Chandramohan', '2016-10-08 10:25:49', '2016-10-08 10:25:49')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1027, 382, 1, '2016-10-08 10:25:49', '2016-10-08 10:25:49')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.4ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Lihui Chen'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36m (0.2ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (293, 382, 2, '2016-10-08 10:25:49', '2016-10-08 10:25:49')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (1.0ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Yang Liu'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Yang Liu', '2016-10-08 10:25:49', '2016-10-08 10:25:49')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1028, 382, 3, '2016-10-08 10:25:49', '2016-10-08 10:25:49')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.8ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Santhoshkumar Saminathan'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Santhoshkumar Saminathan', '2016-10-08 10:25:49', '2016-10-08 10:25:49')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1029, 382, 4, '2016-10-08 10:25:49', '2016-10-08 10:25:49')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (0.6ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Exploring high-level Perspectives on Self-Configuration Capabilities of Systems'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (6.4ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Exploring high-level Perspectives on Self-Configuration Capabilities of Systems', 'Optimization of product performance repetitively introduces the need to make products adaptive in a more general sense. This more general idea is often captured under the term \'self-configuration\'. Despite the importance of such capability, research work on this feature appears isolated by technical domains. It is not easy to tell quickly whether the approaches chosen in different technological domains introduce new ideas or whether the differences just reflect domain idiosyncrasies. For the sake of easy identification of key differences between systems with self-configuring capabilities, I will explore higher level concepts for understanding self-configuration, such as the {\\Omega}-units, in order to provide theoretical instruments for connecting different areas of technology and research.', 'cs.AI', '2016-06-28T22:36:38Z', 'http://dx.doi.org/10.13140/RG.2.1.2945.6885', '2016-10-08 10:25:49', '2016-10-08 10:25:49')[0m
  [1m[35m (3.0ms)[0m  COMMIT
  [1m[36mPublish Load (1.1ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 383[0m
  [1m[35mAuthor Load (1.0ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Aleksander Lodwich'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Aleksander Lodwich', '2016-10-08 10:25:49', '2016-10-08 10:25:49')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.5ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1030, 383, 0, '2016-10-08 10:25:49', '2016-10-08 10:25:49')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (0.7ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'On the Semantic Relationship between Probabilistic Soft Logic and Markov Logic'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('On the Semantic Relationship between Probabilistic Soft Logic and Markov Logic', 'Markov Logic Networks (MLN) and Probabilistic Soft Logic (PSL) are widely applied formalisms in Statistical Relational Learning, an emerging area in Artificial Intelligence that is concerned with combining logical and statistical AI. Despite their resemblance, the relationship has not been formally stated. In this paper, we describe the precise semantic relationship between them from a logical perspective. This is facilitated by first extending fuzzy logic to allow weights, which can be also viewed as a generalization of PSL, and then relate that generalization to MLN. We observe that the relationship between PSL and MLN is analogous to the known relationship between fuzzy logic and Boolean logic, and furthermore the weight scheme of PSL is essentially a generalization of the weight scheme of MLN for the many-valued setting.', 'cs.AI', '2016-06-28T21:43:19Z', 'http://arxiv.org/abs/1606.08896v1', '2016-10-08 10:25:49', '2016-10-08 10:25:49')[0m
  [1m[35m (0.3ms)[0m  COMMIT
  [1m[36mPublish Load (0.6ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 384[0m
  [1m[35mAuthor Load (0.6ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Joohyung Lee'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Joohyung Lee', '2016-10-08 10:25:49', '2016-10-08 10:25:49')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1031, 384, 0, '2016-10-08 10:25:49', '2016-10-08 10:25:49')[0m
  [1m[35m (0.3ms)[0m  COMMIT
  [1m[36mAuthor Load (0.6ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Yi Wang'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Yi Wang', '2016-10-08 10:25:49', '2016-10-08 10:25:49')[0m
  [1m[35m (0.3ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1032, 384, 1, '2016-10-08 10:25:49', '2016-10-08 10:25:49')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.6ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Technical Report: Towards a Universal Code Formatter through Machine Learning'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Technical Report: Towards a Universal Code Formatter through Machine Learning', 'There are many declarative frameworks that allow us to implement code formatters relatively easily for any specific language, but constructing them is cumbersome. The first problem is that \"everybody\" wants to format their code differently, leading to either many formatter variants or a ridiculous number of configuration options. Second, the size of each implementation scales with a language\'s grammar size, leading to hundreds of rules. In this paper, we solve the formatter construction problem using a novel approach, one that automatically derives formatters for any given language without intervention from a language expert. We introduce a code formatter called CodeBuff that uses machine learning to abstract formatting rules from a representative corpus, using a carefully designed feature set. Our experiments on Java, SQL, and ANTLR grammars show that CodeBuff is efficient, has excellent accuracy, and is grammar invariant for a given language. It also generalizes to a 4th language tested during manuscript preparation.', 'cs.PL', '2016-06-28T20:04:07Z', 'http://arxiv.org/abs/1606.08866v1', '2016-10-08 10:25:49', '2016-10-08 10:25:49')
  [1m[36m (3.0ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (0.6ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 385
  [1m[36mAuthor Load (0.6ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Terence Parr'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Terence Parr', '2016-10-08 10:25:49', '2016-10-08 10:25:49')[0m
  [1m[35m (0.3ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1033, 385, 0, '2016-10-08 10:25:49', '2016-10-08 10:25:49')
  [1m[36m (0.3ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.6ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Jurgin Vinju'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Jurgin Vinju', '2016-10-08 10:25:49', '2016-10-08 10:25:49')
  [1m[36m (0.3ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1034, 385, 1, '2016-10-08 10:25:49', '2016-10-08 10:25:49')[0m
  [1m[35m (0.3ms)[0m  COMMIT
  [1m[36mPaper Load (0.7ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Active Ranking from Pairwise Comparisons and the Futility of Parametric Assumptions'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Active Ranking from Pairwise Comparisons and the Futility of Parametric Assumptions', 'We consider sequential or active ranking of a set of n items based on noisy pairwise comparisons. Items are ranked according to the probability that a given item beats a randomly chosen item, and ranking refers to partitioning the items into sets of pre-specified sizes according to their scores. This notion of ranking includes as special cases the identification of the top-k items and the total ordering of the items. We first analyze a sequential ranking algorithm that counts the number of comparisons won, and uses these counts to decide whether to stop, or to compare another pair of items, chosen based on confidence intervals specified by the data collected up to that point. We prove that this algorithm succeeds in recovering the ranking using a number of comparisons that is optimal up to logarithmic factors. This guarantee does not require any structural properties of the underlying pairwise probability matrix, unlike a significant body of past work on pairwise ranking based on parametric models such as the Thurstone or Bradley-Terry-Luce models. It has been a long-standing open question as to whether or not imposing these parametric assumptions allow for improved ranking algorithms. Our second contribution settles this issue in the context of the problem of active ranking from pairwise comparisons: by means of tight lower bounds, we prove that perhaps surprisingly, these popular parametric modeling choices offer little statistical advantage.', 'cs.LG', '2016-06-28T19:59:52Z', 'http://arxiv.org/abs/1606.08842v1', '2016-10-08 10:25:49', '2016-10-08 10:25:49')[0m
  [1m[35m (0.3ms)[0m  COMMIT
  [1m[36mPublish Load (0.6ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 386[0m
  [1m[35mAuthor Load (0.6ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Reinhard Heckel'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Reinhard Heckel', '2016-10-08 10:25:49', '2016-10-08 10:25:49')
  [1m[36m (0.3ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1035, 386, 0, '2016-10-08 10:25:49', '2016-10-08 10:25:49')[0m
  [1m[35m (0.3ms)[0m  COMMIT
  [1m[36mAuthor Load (0.6ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Nihar B. Shah'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36m (0.1ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (988, 386, 1, '2016-10-08 10:25:49', '2016-10-08 10:25:49')[0m
  [1m[35m (0.3ms)[0m  COMMIT
  [1m[36mAuthor Load (0.6ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Kannan Ramchandran'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Kannan Ramchandran', '2016-10-08 10:25:49', '2016-10-08 10:25:49')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1036, 386, 2, '2016-10-08 10:25:49', '2016-10-08 10:25:49')
  [1m[36m (0.3ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.6ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Martin J. Wainwright'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35m (0.1ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (990, 386, 3, '2016-10-08 10:25:49', '2016-10-08 10:25:49')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.6ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Adaptive Training of Random Mapping for Data Quantization'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Adaptive Training of Random Mapping for Data Quantization', 'Data quantization learns encoding results of data with certain requirements, and provides a broad perspective of many real-world applications to data handling. Nevertheless, the results of encoder is usually limited to multivariate inputs with the random mapping, and side information of binary codes are hardly to mostly depict the original data patterns as possible. In the literature, cosine based random quantization has attracted much attentions due to its intrinsic bounded results. Nevertheless, it usually suffers from the uncertain outputs, and information of original data fails to be fully preserved in the reduced codes. In this work, a novel binary embedding method, termed adaptive training quantization (ATQ), is proposed to learn the ideal transform of random encoder, where the limitation of cosine random mapping is tackled. As an adaptive learning idea, the reduced mapping is adaptively calculated with idea of data group, while the bias of random transform is to be improved to hold most matching information. Experimental results show that the proposed method is able to obtain outstanding performance compared with other random quantization methods.', 'cs.LG', '2016-06-28T18:15:32Z', 'http://arxiv.org/abs/1606.08808v1', '2016-10-08 10:25:49', '2016-10-08 10:25:49')
  [1m[36m (2.7ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (0.7ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 387
  [1m[36mAuthor Load (0.6ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Miao Cheng'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36m (0.1ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (982, 387, 0, '2016-10-08 10:25:49', '2016-10-08 10:25:49')[0m
  [1m[35m (0.3ms)[0m  COMMIT
  [1m[36mAuthor Load (0.6ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Ah Chung Tsoi'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Ah Chung Tsoi', '2016-10-08 10:25:49', '2016-10-08 10:25:49')[0m
  [1m[35m (0.3ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1037, 387, 1, '2016-10-08 10:25:49', '2016-10-08 10:25:49')
  [1m[36m (0.3ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.6ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = '\"Show me the cup\": Reference with Continuous Representations'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('\"Show me the cup\": Reference with Continuous Representations', 'One of the most basic functions of language is to refer to objects in a shared scene. Modeling reference with continuous representations is challenging because it requires individuation, i.e., tracking and distinguishing an arbitrary number of referents. We introduce a neural network model that, given a definite description and a set of objects represented by natural images, points to the intended object if the expression has a unique referent, or indicates a failure, if it does not. The model, directly trained on reference acts, is competitive with a pipeline manually engineered to perform the same task, both when referents are purely visual, and when they are characterized by a combination of visual and linguistic properties.', 'cs.CL', '2016-06-28T16:31:50Z', 'http://arxiv.org/abs/1606.08777v1', '2016-10-08 10:25:49', '2016-10-08 10:25:49')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (0.6ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 388
  [1m[36mAuthor Load (0.8ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Gemma Boleda'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Gemma Boleda', '2016-10-08 10:25:49', '2016-10-08 10:25:49')[0m
  [1m[35m (0.3ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1038, 388, 0, '2016-10-08 10:25:49', '2016-10-08 10:25:49')
  [1m[36m (0.3ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.6ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Sebastian Padó'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Sebastian Padó', '2016-10-08 10:25:49', '2016-10-08 10:25:49')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1039, 388, 1, '2016-10-08 10:25:49', '2016-10-08 10:25:49')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.7ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Marco Baroni'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Marco Baroni', '2016-10-08 10:25:49', '2016-10-08 10:25:49')[0m
  [1m[35m (0.3ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1040, 388, 2, '2016-10-08 10:25:49', '2016-10-08 10:25:49')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.6ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Performance Based Evaluation of Various Machine Learning Classification Techniques for Chronic Kidney Disease Diagnosis'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Performance Based Evaluation of Various Machine Learning Classification Techniques for Chronic Kidney Disease Diagnosis', 'Areas where Artificial Intelligence (AI) & related fields are finding their applications are increasing day by day, moving from core areas of computer science they are finding their applications in various other domains.In recent times Machine Learning i.e. a sub-domain of AI has been widely used in order to assist medical experts and doctors in the prediction, diagnosis and prognosis of various diseases and other medical disorders. In this manuscript the authors applied various machine learning algorithms to a problem in the domain of medical diagnosis and analyzed their efficiency in predicting the results. The problem selected for the study is the diagnosis of the Chronic Kidney Disease.The dataset used for the study consists of 400 instances and 24 attributes. The authors evaluated 12 classification techniques by applying them to the Chronic Kidney Disease data. In order to calculate efficiency, results of the prediction by candidate methods were compared with the actual medical results of the subject.The various metrics used for performance evaluation are predictive accuracy, precision, sensitivity and specificity. The results indicate that decision-tree performed best with nearly the accuracy of 98.6%, sensitivity of 0.9720, precision of 1 and specificity of 1.', 'cs.LG', '2016-06-28T07:00:07Z', 'http://arxiv.org/abs/1606.09581v2', '2016-10-08 10:25:49', '2016-10-08 10:25:49')
  [1m[36m (2.7ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (0.7ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 389
  [1m[36mAuthor Load (1.1ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Sahil Sharma'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Sahil Sharma', '2016-10-08 10:25:49', '2016-10-08 10:25:49')[0m
  [1m[35m (0.2ms)[0m  COMMIT
  [1m[36m (0.3ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1041, 389, 0, '2016-10-08 10:25:49', '2016-10-08 10:25:49')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.2ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Vinod Sharma'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Vinod Sharma', '2016-10-08 10:25:49', '2016-10-08 10:25:49')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.7ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1042, 389, 1, '2016-10-08 10:25:49', '2016-10-08 10:25:49')[0m
  [1m[35m (1.5ms)[0m  COMMIT
  [1m[36mAuthor Load (1.2ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Atul Sharma'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Atul Sharma', '2016-10-08 10:25:49', '2016-10-08 10:25:49')[0m
  [1m[35m (0.3ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1043, 389, 2, '2016-10-08 10:25:49', '2016-10-08 10:25:49')
  [1m[36m (0.3ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.6ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'A Local Density-Based Approach for Local Outlier Detection'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('A Local Density-Based Approach for Local Outlier Detection', 'This paper presents a simple but effective density-based outlier detection approach with the local kernel density estimation (KDE). A Relative Density-based Outlier Score (RDOS) is introduced to measure the local outlierness of objects, in which the density distribution at the location of an object is estimated with a local KDE method based on extended nearest neighbors of the object. Instead of using only $k$ nearest neighbors, we further consider reverse nearest neighbors and shared nearest neighbors of an object for density distribution estimation. Some theoretical properties of the proposed RDOS including its expected value and false alarm probability are derived. A comprehensive experimental study on both synthetic and real-life data sets demonstrates that our approach is more effective than state-of-the-art outlier detection methods.', 'cs.AI', '2016-06-28T02:23:58Z', 'http://arxiv.org/abs/1606.08538v1', '2016-10-08 10:25:49', '2016-10-08 10:25:49')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (1.0ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 390
  [1m[36mAuthor Load (0.6ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Bo Tang'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Bo Tang', '2016-10-08 10:25:49', '2016-10-08 10:25:49')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1044, 390, 0, '2016-10-08 10:25:49', '2016-10-08 10:25:49')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.7ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Haibo He'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Haibo He', '2016-10-08 10:25:49', '2016-10-08 10:25:49')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1045, 390, 1, '2016-10-08 10:25:49', '2016-10-08 10:25:49')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (0.6ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'A Learning Algorithm for Relational Logistic Regression: Preliminary Results'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('A Learning Algorithm for Relational Logistic Regression: Preliminary Results', 'Relational logistic regression (RLR) is a representation of conditional probability in terms of weighted formulae for modelling multi-relational data. In this paper, we develop a learning algorithm for RLR models. Learning an RLR model from data consists of two steps: 1- learning the set of formulae to be used in the model (a.k.a. structure learning) and learning the weight of each formula (a.k.a. parameter learning). For structure learning, we deploy Schmidt and Murphy\'s hierarchical assumption: first we learn a model with simple formulae, then more complex formulae are added iteratively only if all their sub-formulae have proven effective in previous learned models. For parameter learning, we convert the problem into a non-relational learning problem and use an off-the-shelf logistic regression learning algorithm from Weka, an open-source machine learning tool, to learn the weights. We also indicate how hidden features about the individuals can be incorporated into RLR to boost the learning performance. We compare our learning algorithm to other structure and parameter learning algorithms in the literature, and compare the performance of RLR models to standard logistic regression and RDN-Boost on a modified version of the MovieLens data-set.', 'cs.AI', '2016-06-28T01:43:38Z', 'http://arxiv.org/abs/1606.08531v1', '2016-10-08 10:25:49', '2016-10-08 10:25:49')[0m
  [1m[35m (3.0ms)[0m  COMMIT
  [1m[36mPublish Load (1.0ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 391[0m
  [1m[35mAuthor Load (0.9ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Bahare Fatemi'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Bahare Fatemi', '2016-10-08 10:25:49', '2016-10-08 10:25:49')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1046, 391, 0, '2016-10-08 10:25:49', '2016-10-08 10:25:49')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (0.9ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Seyed Mehran Kazemi'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Seyed Mehran Kazemi', '2016-10-08 10:25:49', '2016-10-08 10:25:49')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1047, 391, 1, '2016-10-08 10:25:49', '2016-10-08 10:25:49')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.9ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'David Poole'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('David Poole', '2016-10-08 10:25:49', '2016-10-08 10:25:49')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1048, 391, 2, '2016-10-08 10:25:49', '2016-10-08 10:25:49')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPaper Load (0.6ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Towards Verified Artificial Intelligence'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Towards Verified Artificial Intelligence', 'Verified artificial intelligence (AI) is the goal of designing AI-based systems that are provably correct with respect to mathematically-specified requirements. This paper considers Verified AI from a formal methods perspective. We describe five challenges for achieving Verified AI, and five corresponding principles for addressing these challenges.', 'cs.AI', '2016-06-27T23:51:04Z', 'http://arxiv.org/abs/1606.08514v2', '2016-10-08 10:25:49', '2016-10-08 10:25:49')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPublish Load (0.8ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 392[0m
  [1m[35mAuthor Load (0.6ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Sanjit A. Seshia'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Sanjit A. Seshia', '2016-10-08 10:25:49', '2016-10-08 10:25:49')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1049, 392, 0, '2016-10-08 10:25:49', '2016-10-08 10:25:49')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (1.0ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Dorsa Sadigh'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Dorsa Sadigh', '2016-10-08 10:25:49', '2016-10-08 10:25:49')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1050, 392, 1, '2016-10-08 10:25:49', '2016-10-08 10:25:49')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.9ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'S. Shankar Sastry'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('S. Shankar Sastry', '2016-10-08 10:25:50', '2016-10-08 10:25:50')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1051, 392, 2, '2016-10-08 10:25:50', '2016-10-08 10:25:50')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPaper Load (0.6ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'A Reduction for Optimizing Lattice Submodular Functions with Diminishing Returns'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('A Reduction for Optimizing Lattice Submodular Functions with Diminishing Returns', 'A function $f: \\mathbb{Z}_+^E \\rightarrow \\mathbb{R}_+$ is DR-submodular if it satisfies $f(\\bx + \\chi_i) -f (\\bx) \\ge f(\\by + \\chi_i) - f(\\by)$ for all $\\bx\\le \\by, i\\in E$. Recently, the problem of maximizing a DR-submodular function $f: \\mathbb{Z}_+^E \\rightarrow \\mathbb{R}_+$ subject to a budget constraint $\\|\\bx\\|_1 \\leq B$ as well as additional constraints has received significant attention \\cite{SKIK14,SY15,MYK15,SY16}. In this note, we give a generic reduction from the DR-submodular setting to the submodular setting. The running time of the reduction and the size of the resulting submodular instance depends only \\emph{logarithmically} on $B$. Using this reduction, one can translate the results for unconstrained and constrained submodular maximization to the DR-submodular setting for many types of constraints in a unified manner.', 'cs.DS', '2016-06-27T16:44:44Z', 'http://arxiv.org/abs/1606.08362v1', '2016-10-08 10:25:50', '2016-10-08 10:25:50')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPublish Load (1.0ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 393[0m
  [1m[35mAuthor Load (0.7ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Alina Ene'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Alina Ene', '2016-10-08 10:25:50', '2016-10-08 10:25:50')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1052, 393, 0, '2016-10-08 10:25:50', '2016-10-08 10:25:50')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (0.9ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Huy L. Nguyen'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Huy L. Nguyen', '2016-10-08 10:25:50', '2016-10-08 10:25:50')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1053, 393, 1, '2016-10-08 10:25:50', '2016-10-08 10:25:50')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.6ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Lifted Rule Injection for Relation Embeddings'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Lifted Rule Injection for Relation Embeddings', 'Methods based on representation learning currently hold the state-of-the-art in many natural language processing and knowledge base inference tasks. Yet, a major challenge is how to efficiently incorporate commonsense knowledge into such models. A recent approach regularizes relation and entity representations by propositionalization of first-order logic rules. However, propositionalization does not scale beyond domains with only few entities and rules. In this paper we present a highly efficient method for incorporating implication rules into distributed representations for automated knowledge base construction. We map entity-tuple embeddings into an approximately Boolean space and encourage a partial ordering over relation embeddings based on implication rules mined from WordNet. Surprisingly, we find that the strong restriction of the entity-tuple embedding space does not hurt the expressiveness of the model and even acts as a regularizer that improves generalization. By incorporating few commonsense rules, we achieve an increase of 2 percentage points mean average precision over a matrix factorization baseline, while observing a negligible increase in runtime.', 'cs.LG', '2016-06-27T16:39:23Z', 'http://arxiv.org/abs/1606.08359v1', '2016-10-08 10:25:50', '2016-10-08 10:25:50')
  [1m[36m (3.0ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (1.1ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 394
  [1m[36mAuthor Load (0.9ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Thomas Demeester'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Thomas Demeester', '2016-10-08 10:25:50', '2016-10-08 10:25:50')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1054, 394, 0, '2016-10-08 10:25:50', '2016-10-08 10:25:50')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.9ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Tim Rocktäschel'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Tim Rocktäschel', '2016-10-08 10:25:50', '2016-10-08 10:25:50')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1055, 394, 1, '2016-10-08 10:25:50', '2016-10-08 10:25:50')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (0.8ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Sebastian Riedel'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Sebastian Riedel', '2016-10-08 10:25:50', '2016-10-08 10:25:50')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1056, 394, 2, '2016-10-08 10:25:50', '2016-10-08 10:25:50')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.6ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'True Lies'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('True Lies', 'A true lie is a lie that becomes true when announced. In a logic of announcements, where the announcing agent is not modelled, a true lie is a formula (that is false and) that becomes true when announced. We investigate true lies and other types of interaction between announced formulas, their preconditions and their postconditions, in the setting Gerbrandy\'s logic of believed announcements, wherein agents may have or obtain incorrect beliefs. Our results are on the satisfiability and validity of instantiations of these semantically defined categories, on iterated announcements, including arbitrarily often iterated announcements, and on syntactic characterization. We close with results for iterated announcements in the logic of knowledge (instead of belief), and for lying as private announcements (instead of public announcements) to different agents. Detailed examples illustrate our lying concepts.', 'cs.AI', '2016-06-27T15:59:32Z', 'http://arxiv.org/abs/1606.08333v1', '2016-10-08 10:25:50', '2016-10-08 10:25:50')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (0.7ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 395
  [1m[36mAuthor Load (0.6ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Thomas Ågotnes'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Thomas Ågotnes', '2016-10-08 10:25:50', '2016-10-08 10:25:50')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1057, 395, 0, '2016-10-08 10:25:50', '2016-10-08 10:25:50')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.9ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Hans van Ditmarsch'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Hans van Ditmarsch', '2016-10-08 10:25:50', '2016-10-08 10:25:50')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1058, 395, 1, '2016-10-08 10:25:50', '2016-10-08 10:25:50')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (0.9ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Yanjing Wang'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Yanjing Wang', '2016-10-08 10:25:50', '2016-10-08 10:25:50')[0m
  [1m[35m (0.3ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1059, 395, 2, '2016-10-08 10:25:50', '2016-10-08 10:25:50')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.6ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'STransE: a novel embedding model of entities and relationships in knowledge bases'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (45.1ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('STransE: a novel embedding model of entities and relationships in knowledge bases', 'Knowledge bases of real-world facts about entities and their relationships are useful resources for a variety of natural language processing tasks. However, because knowledge bases are typically incomplete, it is useful to be able to perform link prediction, i.e., predict whether a relationship not in the knowledge base is likely to be true. This paper combines insights from several previous link prediction models into a new embedding model STransE that represents each entity as a low-dimensional vector, and each relation by two matrices and a translation vector. STransE is a simple combination of the SE and TransE models, but it obtains better link prediction performance on two benchmark datasets than previous embedding models. Thus, STransE can serve as a new baseline for the more complex models in the link prediction task.', 'cs.CL', '2016-06-27T06:50:10Z', 'http://arxiv.org/abs/1606.08140v2', '2016-10-08 10:25:50', '2016-10-08 10:25:50')
  [1m[36m (3.1ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (1.1ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 396
  [1m[36mAuthor Load (1.0ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Dat Quoc Nguyen'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Dat Quoc Nguyen', '2016-10-08 10:25:50', '2016-10-08 10:25:50')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1060, 396, 0, '2016-10-08 10:25:50', '2016-10-08 10:25:50')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.8ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Kairit Sirts'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Kairit Sirts', '2016-10-08 10:25:50', '2016-10-08 10:25:50')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1061, 396, 1, '2016-10-08 10:25:50', '2016-10-08 10:25:50')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (0.9ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Lizhen Qu'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Lizhen Qu', '2016-10-08 10:25:50', '2016-10-08 10:25:50')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1062, 396, 2, '2016-10-08 10:25:50', '2016-10-08 10:25:50')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.8ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Mark Johnson'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Mark Johnson', '2016-10-08 10:25:50', '2016-10-08 10:25:50')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1063, 396, 3, '2016-10-08 10:25:50', '2016-10-08 10:25:50')[0m
  [1m[35m (0.3ms)[0m  COMMIT
  [1m[36mPaper Load (0.6ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Propagators and Solvers for the Algebra of Modular Systems'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Propagators and Solvers for the Algebra of Modular Systems', 'Solving complex problems can involve non-trivial combinations of distinct knowledge bases and problem solvers. The Algebra of Modular Systems is a knowledge representation framework that provides a method for formally specifying such systems in purely semantic terms. Formally, an expression of the algebra defines a class of structures. Many expressive formalism used in practice solve the model expansion task, where a structure is given on the input and an expansion of this structure in the defined class of structures is searched (this practice overcomes the common undecidability problem for expressive logics). In this paper, we construct a solver for the model expansion task for a complex modular systems from an expression in the algebra and black-box propagators or solvers for the primitive modules. To this end, we define a general notion of propagators equipped with an explanation mechanism, an extension of the alge- bra to propagators, and a lazy conflict-driven learning algorithm. The result is a framework for seamlessly combining solving technology from different domains to produce a solver for a combined system.', 'cs.AI', '2016-06-27T05:53:57Z', 'http://arxiv.org/abs/1606.08130v1', '2016-10-08 10:25:50', '2016-10-08 10:25:50')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPublish Load (0.7ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 397[0m
  [1m[35mAuthor Load (0.3ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Bart Bogaerts'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35m (0.1ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (226, 397, 0, '2016-10-08 10:25:50', '2016-10-08 10:25:50')
  [1m[36m (1.0ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.9ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Eugenia Ternovska'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Eugenia Ternovska', '2016-10-08 10:25:50', '2016-10-08 10:25:50')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1064, 397, 1, '2016-10-08 10:25:50', '2016-10-08 10:25:50')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (0.8ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'David Mitchell'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('David Mitchell', '2016-10-08 10:25:50', '2016-10-08 10:25:50')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1065, 397, 2, '2016-10-08 10:25:50', '2016-10-08 10:25:50')
  [1m[36m (2.9ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (1.0ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Can Turing machine be curious about its Turing test results? Three informal lectures on physics of intelligence'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Can Turing machine be curious about its Turing test results? Three informal lectures on physics of intelligence', 'What is the nature of curiosity? Is there any scientific way to understand the origin of this mysterious force that drives the behavior of even the stupidest naturally intelligent systems and is completely absent in their smartest artificial analogs? Can we build AI systems that could be curious about something, systems that would have an intrinsic motivation to learn? Is such a motivation quantifiable? Is it implementable? I will discuss this problem from the standpoint of physics. The relationship between physics and intelligence is a consequence of the fact that correctly predicted information is nothing but an energy resource, and the process of thinking can be viewed as a process of accumulating and spending this resource through the acts of perception and, respectively, decision making. The natural motivation of any autonomous system to keep this accumulation/spending balance as high as possible allows one to treat the problem of describing the dynamics of thinking processes as a resource optimization problem. Here I will propose and discuss a simple theoretical model of such an autonomous system which I call the Autonomous Turing Machine (ATM). The potential attractiveness of ATM lies in the fact that it is the model of a self-propelled AI for which the only available energy resource is the information itself. For ATM, the problem of optimal thinking, learning, and decision-making becomes conceptually simple and mathematically well tractable. This circumstance makes the ATM an ideal playground for studying the dynamics of intelligent behavior and allows one to quantify many seemingly unquantifiable features of genuine intelligence.', 'cs.AI', '2016-06-27T01:53:02Z', 'http://arxiv.org/abs/1606.08109v1', '2016-10-08 10:25:50', '2016-10-08 10:25:50')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (0.8ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 398
  [1m[36mAuthor Load (0.8ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Alex Ushveridze'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Alex Ushveridze', '2016-10-08 10:25:50', '2016-10-08 10:25:50')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1066, 398, 0, '2016-10-08 10:25:50', '2016-10-08 10:25:50')
  [1m[36m (0.3ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.6ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Content-Based Top-N Recommendation using Heterogeneous Relations'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Content-Based Top-N Recommendation using Heterogeneous Relations', 'Top-$N$ recommender systems have been extensively studied. However, the sparsity of user-item activities has not been well resolved. While many hybrid systems were proposed to address the cold-start problem, the profile information has not been sufficiently leveraged. Furthermore, the heterogeneity of profiles between users and items intensifies the challenge. In this paper, we propose a content-based top-$N$ recommender system by learning the global term weights in profiles. To achieve this, we bring in PathSim, which could well measures the node similarity with heterogeneous relations (between users and items). Starting from the original TF-IDF value, the global term weights gradually converge, and eventually reflect both profile and activity information. To facilitate training, the derivative is reformulated into matrix form, which could easily be paralleled. We conduct extensive experiments, which demonstrate the superiority of the proposed method.', 'cs.IR', '2016-06-27T00:58:16Z', 'http://arxiv.org/abs/1606.08104v1', '2016-10-08 10:25:50', '2016-10-08 10:25:50')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (0.7ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 399
  [1m[36mAuthor Load (0.6ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Yifan Chen'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Yifan Chen', '2016-10-08 10:25:50', '2016-10-08 10:25:50')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1067, 399, 0, '2016-10-08 10:25:50', '2016-10-08 10:25:50')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.8ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Xiang Zhao'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Xiang Zhao', '2016-10-08 10:25:50', '2016-10-08 10:25:50')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1068, 399, 1, '2016-10-08 10:25:50', '2016-10-08 10:25:50')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.9ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Junjiao Gan'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Junjiao Gan', '2016-10-08 10:25:50', '2016-10-08 10:25:50')[0m
  [1m[35m (3.1ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1069, 399, 2, '2016-10-08 10:25:50', '2016-10-08 10:25:50')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.8ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Junkai Ren'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Junkai Ren', '2016-10-08 10:25:50', '2016-10-08 10:25:50')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1070, 399, 3, '2016-10-08 10:25:50', '2016-10-08 10:25:50')[0m
  [1m[35m (1.4ms)[0m  COMMIT
  [1m[36mAuthor Load (1.1ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Yang Fang'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Yang Fang', '2016-10-08 10:25:50', '2016-10-08 10:25:50')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1071, 399, 4, '2016-10-08 10:25:50', '2016-10-08 10:25:50')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.6ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'X575: writing rengas with web services'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('X575: writing rengas with web services', 'Our software system simulates the classical collaborative Japanese poetry form, renga, made of linked haikus. We used NLP methods wrapped up as web services. Our experiments were only a partial success, since results fail to satisfy classical constraints. To gather ideas for future work, we examine related research in semiotics, linguistics, and computing.', 'cs.AI', '2016-06-25T20:04:42Z', 'http://arxiv.org/abs/1606.07955v1', '2016-10-08 10:25:50', '2016-10-08 10:25:50')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (1.0ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 400
  [1m[36mAuthor Load (0.6ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Daniel Winterstein'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Daniel Winterstein', '2016-10-08 10:25:50', '2016-10-08 10:25:50')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1072, 400, 0, '2016-10-08 10:25:50', '2016-10-08 10:25:50')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.8ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Joseph Corneli'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Joseph Corneli', '2016-10-08 10:25:50', '2016-10-08 10:25:50')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1073, 400, 1, '2016-10-08 10:25:50', '2016-10-08 10:25:50')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (0.6ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Label Tree Embeddings for Acoustic Scene Classification'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Label Tree Embeddings for Acoustic Scene Classification', 'We present in this paper an efficient approach for acoustic scene classification by exploring the structure of class labels. Given a set of class labels, a category taxonomy is automatically learned by collectively optimizing a clustering of the labels into multiple meta-classes in a tree structure. An acoustic scene instance is then embedded into a low-dimensional feature representation which consists of the likelihoods that it belongs to the meta-classes. We demonstrate state-of-the-art results on two different datasets for the acoustic scene classification task, including the DCASE 2013 and LITIS Rouen datasets.', 'cs.MM', '2016-06-25T12:57:44Z', 'http://dx.doi.org/10.1145/2964284.2967268', '2016-10-08 10:25:50', '2016-10-08 10:25:50')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPublish Load (1.0ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 401[0m
  [1m[35mAuthor Load (0.6ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Huy Phan'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35m (0.2ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (866, 401, 0, '2016-10-08 10:25:50', '2016-10-08 10:25:50')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.8ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Lars Hertel'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35m (0.1ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (867, 401, 1, '2016-10-08 10:25:50', '2016-10-08 10:25:50')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.8ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Marco Maass'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35m (0.2ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (868, 401, 2, '2016-10-08 10:25:50', '2016-10-08 10:25:50')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.6ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Philipp Koch'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35m (0.2ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (869, 401, 3, '2016-10-08 10:25:50', '2016-10-08 10:25:50')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.6ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Alfred Mertins'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35m (0.1ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (870, 401, 4, '2016-10-08 10:25:50', '2016-10-08 10:25:50')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.6ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Non-Monotonic Spatial Reasoning with Answer Set Programming Modulo Theories'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Non-Monotonic Spatial Reasoning with Answer Set Programming Modulo Theories', 'The systematic modelling of dynamic spatial systems is a key requirement in a wide range of application areas such as commonsense cognitive robotics, computer-aided architecture design, and dynamic geographic information systems. We present ASPMT(QS), a novel approach and fully-implemented prototype for non-monotonic spatial reasoning -a crucial requirement within dynamic spatial systems- based on Answer Set Programming Modulo Theories (ASPMT). ASPMT(QS) consists of a (qualitative) spatial representation module (QS) and a method for turning tight ASPMT instances into Satisfiability Modulo Theories (SMT) instances in order to compute stable models by means of SMT solvers. We formalise and implement concepts of default spatial reasoning and spatial frame axioms. Spatial reasoning is performed by encoding spatial relations as systems of polynomial constraints, and solving via SMT with the theory of real nonlinear arithmetic. We empirically evaluate ASPMT(QS) in comparison with other contemporary spatial reasoning systems both within and outside the context of logic programming. ASPMT(QS) is currently the only existing system that is capable of reasoning about indirect spatial effects (i.e., addressing the ramification problem), and integrating geometric and qualitative spatial information within a non-monotonic spatial reasoning context. This paper is under consideration for publication in TPLP.', 'cs.AI', '2016-06-25T01:02:30Z', 'http://arxiv.org/abs/1606.07860v2', '2016-10-08 10:25:50', '2016-10-08 10:25:50')
  [1m[36m (3.0ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (1.1ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 402
  [1m[36mAuthor Load (0.9ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Przemysław Andrzej Wałęga'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Przemysław Andrzej Wałęga', '2016-10-08 10:25:50', '2016-10-08 10:25:50')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1074, 402, 0, '2016-10-08 10:25:50', '2016-10-08 10:25:50')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.6ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Carl Schultz'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35m (0.2ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (453, 402, 1, '2016-10-08 10:25:50', '2016-10-08 10:25:50')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.7ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Mehul Bhatt'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.3ms)[0m  [1mBEGIN[0m
  [1m[35m (0.2ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (452, 402, 2, '2016-10-08 10:25:50', '2016-10-08 10:25:50')
  [1m[36m (0.3ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.6ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Proactive Decision Support using Automated Planning'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Proactive Decision Support using Automated Planning', 'Proactive decision support (PDS) helps in improving the decision making experience of human decision makers in human-in-the-loop planning environments. Here both the quality of the decisions and the ease of making them are enhanced. In this regard, we propose a PDS framework, named RADAR, based on the research in Automated Planning in AI, that aids the human decision maker with her plan to achieve her goals by providing alerts on: whether such a plan can succeed at all, whether there exist any resource constraints that may foil her plan, etc. This is achieved by generating and analyzing the landmarks that must be accomplished by any successful plan on the way to achieving the goals. Note that, this approach also supports naturalistic decision making which is being acknowledged as a necessary element in proactive decision support, since it only aids the human decision maker through suggestions and alerts rather than enforcing fixed plans or decisions. We demonstrate the utility of the proposed framework through search-and-rescue examples in a fire-fighting domain.', 'cs.HC', '2016-06-24T21:54:28Z', 'http://arxiv.org/abs/1606.07841v1', '2016-10-08 10:25:50', '2016-10-08 10:25:50')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (0.7ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 403
  [1m[36mAuthor Load (0.6ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Satya Gautam Vadlamudi'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Satya Gautam Vadlamudi', '2016-10-08 10:25:50', '2016-10-08 10:25:50')[0m
  [1m[35m (2.1ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1075, 403, 0, '2016-10-08 10:25:50', '2016-10-08 10:25:50')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.1ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Tathagata Chakraborti'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Tathagata Chakraborti', '2016-10-08 10:25:50', '2016-10-08 10:25:50')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.3ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1076, 403, 1, '2016-10-08 10:25:50', '2016-10-08 10:25:50')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.8ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Yu Zhang'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Yu Zhang', '2016-10-08 10:25:50', '2016-10-08 10:25:50')[0m
  [1m[35m (0.6ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1077, 403, 2, '2016-10-08 10:25:50', '2016-10-08 10:25:50')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.9ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Subbarao Kambhampati'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Subbarao Kambhampati', '2016-10-08 10:25:50', '2016-10-08 10:25:50')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1078, 403, 3, '2016-10-08 10:25:50', '2016-10-08 10:25:50')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (0.6ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Neural Network Based Next-Song Recommendation'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Neural Network Based Next-Song Recommendation', 'Recently, the next-item/basket recommendation system, which considers the sequential relation between bought items, has drawn attention of researchers. The utilization of sequential patterns has boosted performance on several kinds of recommendation tasks. Inspired by natural language processing (NLP) techniques, we propose a novel neural network (NN) based next-song recommender, CNN-rec, in this paper. Then, we compare the proposed system with several NN based and classic recommendation systems on the next-song recommendation task. Verification results indicate the proposed system outperforms classic systems and has comparable performance with the state-of-the-art system.', 'cs.IR', '2016-06-24T15:25:55Z', 'http://arxiv.org/abs/1606.07722v1', '2016-10-08 10:25:50', '2016-10-08 10:25:50')[0m
  [1m[35m (3.1ms)[0m  COMMIT
  [1m[36mPublish Load (1.2ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 404[0m
  [1m[35mAuthor Load (1.0ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Kai-Chun Hsu'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Kai-Chun Hsu', '2016-10-08 10:25:50', '2016-10-08 10:25:50')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1079, 404, 0, '2016-10-08 10:25:50', '2016-10-08 10:25:50')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.9ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Szu-Yu Chou'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Szu-Yu Chou', '2016-10-08 10:25:50', '2016-10-08 10:25:50')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1080, 404, 1, '2016-10-08 10:25:50', '2016-10-08 10:25:50')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.0ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Yi-Hsuan Yang'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Yi-Hsuan Yang', '2016-10-08 10:25:50', '2016-10-08 10:25:50')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1081, 404, 2, '2016-10-08 10:25:50', '2016-10-08 10:25:50')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.7ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Tai-Shih Chi'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Tai-Shih Chi', '2016-10-08 10:25:50', '2016-10-08 10:25:50')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1082, 404, 3, '2016-10-08 10:25:50', '2016-10-08 10:25:50')
  [1m[36m (1.6ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.7ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'A Game-Theoretic Approach to Word Sense Disambiguation'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('A Game-Theoretic Approach to Word Sense Disambiguation', 'This paper presents a new model for word sense disambiguation formulated in terms of evolutionary game theory, where each word to be disambiguated is represented as a node on a graph whose edges represent word relations and senses are represented as classes. The words simultaneously update their class membership preferences according to the senses that neighboring words are likely to choose. We use distributional information to weigh the influence that each word has on the decisions of the others and semantic similarity information to measure the strength of compatibility among the choices. With this information we can formulate the word sense disambiguation problem as a constraint satisfaction problem and solve it using tools derived from game theory, maintaining the textual coherence. The model is based on two ideas: similar words should be assigned to similar classes and the meaning of a word does not depend on all the words in a text but just on some of them. The paper provides an in-depth motivation of the idea of modeling the word sense disambiguation problem in terms of game theory, which is illustrated by an example. The conclusion presents an extensive analysis on the combination of similarity measures to use in the framework and a comparison with state-of-the-art systems. The results show that our model outperforms state-of-the-art algorithms and can be applied to different tasks and in different scenarios.', 'cs.AI', '2016-06-24T14:45:27Z', 'http://arxiv.org/abs/1606.07711v4', '2016-10-08 10:25:50', '2016-10-08 10:25:50')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (0.8ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 405
  [1m[36mAuthor Load (0.2ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Rocco Tripodi'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36m (0.2ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (4, 405, 0, '2016-10-08 10:25:50', '2016-10-08 10:25:50')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (0.4ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Marcello Pelillo'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36m (0.2ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (6, 405, 1, '2016-10-08 10:25:50', '2016-10-08 10:25:50')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (0.6ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Fully DNN-based Multi-label regression for audio tagging'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Fully DNN-based Multi-label regression for audio tagging', 'Acoustic event detection for content analysis in most cases relies on lots of labeled data. However, manually annotating data is a time-consuming task, which thus makes few annotated resources available so far. Unlike audio event detection, automatic audio tagging, a multi-label acoustic event classification task, only relies on weakly labeled data. This is highly desirable to some practical applications using audio analysis. In this paper we propose to use a fully deep neural network (DNN) framework to handle the multi-label classification task in a regression way. Considering that only chunk-level rather than frame-level labels are available, the whole or almost whole frames of the chunk were fed into the DNN to perform a multi-label regression for the expected tags. The fully DNN, which is regarded as an encoding function, can well map the audio features sequence to a multi-tag vector. A deep pyramid structure was also designed to extract more robust high-level features related to the target tags. Further improved methods were adopted, such as the Dropout and background noise aware training, to enhance its generalization capability for new audio recordings in mismatched environments. Compared with the conventional Gaussian Mixture Model (GMM) and support vector machine (SVM) methods, the proposed fully DNN-based method could well utilize the long-term temporal information with the whole chunk as the input. The results show that our approach obtained a 15% relative improvement compared with the official GMM-based method of DCASE 2016 challenge.', 'cs.CV', '2016-06-24T14:17:34Z', 'http://arxiv.org/abs/1606.07695v2', '2016-10-08 10:25:50', '2016-10-08 10:25:50')[0m
  [1m[35m (2.9ms)[0m  COMMIT
  [1m[36mPublish Load (1.2ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 406[0m
  [1m[35mAuthor Load (0.8ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Yong Xu'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Yong Xu', '2016-10-08 10:25:50', '2016-10-08 10:25:50')
  [1m[36m (0.6ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1083, 406, 0, '2016-10-08 10:25:50', '2016-10-08 10:25:50')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (0.9ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Qiang Huang'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Qiang Huang', '2016-10-08 10:25:50', '2016-10-08 10:25:50')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1084, 406, 1, '2016-10-08 10:25:50', '2016-10-08 10:25:50')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.9ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Wenwu Wang'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Wenwu Wang', '2016-10-08 10:25:50', '2016-10-08 10:25:50')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1085, 406, 2, '2016-10-08 10:25:50', '2016-10-08 10:25:50')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.8ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Philip J. B. Jackson'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Philip J. B. Jackson', '2016-10-08 10:25:50', '2016-10-08 10:25:50')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1086, 406, 3, '2016-10-08 10:25:50', '2016-10-08 10:25:50')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.7ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Mark D. Plumbley'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Mark D. Plumbley', '2016-10-08 10:25:50', '2016-10-08 10:25:50')
  [1m[36m (0.3ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1087, 406, 4, '2016-10-08 10:25:50', '2016-10-08 10:25:50')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (0.6ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Detecting New and Arbitrary Relations among Linked Data Entities using Pattern Extraction'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Detecting New and Arbitrary Relations among Linked Data Entities using Pattern Extraction', 'Although several RDF knowledge bases are available through the LOD initiative, often these data sources remain isolated, lacking schemata and links to other datasets. While there are numerous works that focus on establishing that two resources are identical and on adding more instances of an already existing relation, the problem of finding new relations between any two given datasets has not been investigated in detail. In this paper, given two entity sets, we present an unsupervised approach to enrich the LOD cloud with new relations between them by exploiting the web corpus. During the first phase we gather prospective relations from the corpus through pattern extraction and paraphrase detection. In the second phase, we perform actual enrichment by extracting instances of these relations. We have empirically evaluated our approach on several dataset pairs and found that the system can indeed be used for enriching the existing datasets with new relations.', 'cs.DB', '2016-06-24T06:00:42Z', 'http://arxiv.org/abs/1606.07572v1', '2016-10-08 10:25:50', '2016-10-08 10:25:50')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPublish Load (0.9ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 407[0m
  [1m[35mAuthor Load (0.6ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'S Subhashree'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('S Subhashree', '2016-10-08 10:25:50', '2016-10-08 10:25:50')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1088, 407, 0, '2016-10-08 10:25:50', '2016-10-08 10:25:50')[0m
  [1m[35m (2.9ms)[0m  COMMIT
  [1m[36mAuthor Load (0.9ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'P Sreenivasa Kumar'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36m (0.2ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (688, 407, 1, '2016-10-08 10:25:50', '2016-10-08 10:25:50')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPaper Load (0.8ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Translucent Players: Explaining Cooperative Behavior in Social Dilemmas'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Translucent Players: Explaining Cooperative Behavior in Social Dilemmas', 'In the last few decades, numerous experiments have shown that humans do not always behave so as to maximize their material payoff. Cooperative behavior when non-cooperation is a dominant strategy (with respect to the material payoffs) is particularly puzzling. Here we propose a novel approach to explain cooperation, assuming what Halpern and Pass call translucent players. Typically, players are assumed to be opaque, in the sense that a deviation by one player in a normal-form game does not affect the strategies used by other players. But a player may believe that if he switches from one strategy to another, the fact that he chooses to switch may be visible to the other players. For example, if he chooses to defect in Prisoner\'s Dilemma, the other player may sense his guilt. We show that by assuming translucent players, we can recover many of the regularities observed in human behavior in well-studied games such as Prisoner\'s Dilemma, Traveler\'s Dilemma, Bertrand Competition, and the Public Goods game.', 'cs.GT', '2016-06-24T01:02:30Z', 'http://dx.doi.org/10.4204/EPTCS.215.9', '2016-10-08 10:25:50', '2016-10-08 10:25:50')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPublish Load (1.1ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 408[0m
  [1m[35mAuthor Load (0.7ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Valerio Capraro'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Valerio Capraro', '2016-10-08 10:25:50', '2016-10-08 10:25:50')
  [1m[36m (0.3ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1089, 408, 0, '2016-10-08 10:25:50', '2016-10-08 10:25:50')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.7ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Joseph Y. Halpern'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Joseph Y. Halpern', '2016-10-08 10:25:50', '2016-10-08 10:25:50')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1090, 408, 1, '2016-10-08 10:25:50', '2016-10-08 10:25:50')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.6ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'The optimality of coarse categories in decision-making and information storage'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('The optimality of coarse categories in decision-making and information storage', 'An agent who lacks preferences and instead makes decisions using criteria that are costly to create should select efficient sets of criteria, where the cost of making a given number of choice distinctions is minimized. Under mild conditions, efficiency requires that binary criteria with only two categories per criterion are chosen. When applied to the problem of determining the optimal number of digits in an information storage device, this result implies that binary digits (bits) are the efficient solution, even when the marginal cost of using additional digits declines rapidly to 0. This short paper pays particular attention to the symmetry conditions entailed when sets of criteria are efficient.', 'cs.AI', '2016-06-24T00:39:09Z', 'http://dx.doi.org/10.4204/EPTCS.215.16', '2016-10-08 10:25:50', '2016-10-08 10:25:50')
  [1m[36m (2.9ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (0.8ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 409
  [1m[36mAuthor Load (0.8ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Michael Mandler'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Michael Mandler', '2016-10-08 10:25:50', '2016-10-08 10:25:50')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1091, 409, 0, '2016-10-08 10:25:50', '2016-10-08 10:25:50')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.6ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'A Dynamic Epistemic Framework for Conformant Planning'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('A Dynamic Epistemic Framework for Conformant Planning', 'In this paper, we introduce a lightweight dynamic epistemic logical framework for automated planning under initial uncertainty. We reduce plan verification and conformant planning to model checking problems of our logic. We show that the model checking problem of the iteration-free fragment is PSPACE-complete. By using two non-standard (but equivalent) semantics, we give novel model checking algorithms to the full language and the iteration-free language.', 'cs.AI', '2016-06-24T00:33:19Z', 'http://dx.doi.org/10.4204/EPTCS.215.21', '2016-10-08 10:25:50', '2016-10-08 10:25:50')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (0.9ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 410
  [1m[36mAuthor Load (0.7ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Quan Yu'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Quan Yu', '2016-10-08 10:25:50', '2016-10-08 10:25:50')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1092, 410, 0, '2016-10-08 10:25:50', '2016-10-08 10:25:50')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.8ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Yanjun Li'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Yanjun Li', '2016-10-08 10:25:50', '2016-10-08 10:25:50')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1093, 410, 1, '2016-10-08 10:25:50', '2016-10-08 10:25:50')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.9ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Yanjing Wang'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36m (0.2ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1059, 410, 2, '2016-10-08 10:25:50', '2016-10-08 10:25:50')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (0.6ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Parameterized Complexity Results for a Model of Theory of Mind Based on Dynamic Epistemic Logic'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Parameterized Complexity Results for a Model of Theory of Mind Based on Dynamic Epistemic Logic', 'In this paper we introduce a computational-level model of theory of mind (ToM) based on dynamic epistemic logic (DEL), and we analyze its computational complexity. The model is a special case of DEL model checking. We provide a parameterized complexity analysis, considering several aspects of DEL (e.g., number of agents, size of preconditions, etc.) as parameters. We show that model checking for DEL is PSPACE-hard, also when restricted to single-pointed models and S5 relations, thereby solving an open problem in the literature. Our approach is aimed at formalizing current intractability claims in the cognitive science literature regarding computational models of ToM.', 'cs.LO', '2016-06-24T00:32:51Z', 'http://dx.doi.org/10.4204/EPTCS.215.18', '2016-10-08 10:25:50', '2016-10-08 10:25:50')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPublish Load (0.9ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 411[0m
  [1m[35mAuthor Load (0.7ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Iris van de Pol'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Iris van de Pol', '2016-10-08 10:25:50', '2016-10-08 10:25:50')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1094, 411, 0, '2016-10-08 10:25:50', '2016-10-08 10:25:50')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.8ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Iris van Rooij'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Iris van Rooij', '2016-10-08 10:25:50', '2016-10-08 10:25:50')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1095, 411, 1, '2016-10-08 10:25:50', '2016-10-08 10:25:50')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.7ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Jakub Szymanik'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Jakub Szymanik', '2016-10-08 10:25:50', '2016-10-08 10:25:50')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1096, 411, 2, '2016-10-08 10:25:50', '2016-10-08 10:25:50')[0m
  [1m[35m (3.0ms)[0m  COMMIT
  [1m[36mPaper Load (1.0ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Relating Knowledge and Coordinated Action: The Knowledge of Preconditions Principle'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.4ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Relating Knowledge and Coordinated Action: The Knowledge of Preconditions Principle', 'The Knowledge of Preconditions principle (KoP) is proposed as a widely applicable connection between knowledge and action in multi-agent systems. Roughly speaking, it asserts that if some condition is a necessary condition for performing a given action A, then knowing that this condition holds is also a necessary condition for performing A. Since the specifications of tasks often involve necessary conditions for actions, the KoP principle shows that such specifications induce knowledge preconditions for the actions. Distributed protocols or multi-agent plans that satisfy the specifications must ensure that this knowledge be attained, and that it is detected by the agents as a condition for action. The knowledge of preconditions principle is formalised in the runs and systems framework, and is proven to hold in a wide class of settings. Well-known connections between knowledge and coordinated action are extended and shown to derive directly from the KoP principle: a \"common knowledge of preconditions\" principle is established showing that common knowledge is a necessary condition for performing simultaneous actions, and a \"nested knowledge of preconditions\" principle is proven, showing that coordinating actions to be performed in linear temporal order requires a corresponding form of nested knowledge.', 'cs.MA', '2016-06-24T00:32:41Z', 'http://dx.doi.org/10.4204/EPTCS.215.17', '2016-10-08 10:25:50', '2016-10-08 10:25:50')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPublish Load (0.9ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 412[0m
  [1m[35mAuthor Load (0.9ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Yoram Moses'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Yoram Moses', '2016-10-08 10:25:50', '2016-10-08 10:25:50')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1097, 412, 0, '2016-10-08 10:25:50', '2016-10-08 10:25:50')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPaper Load (0.7ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Preference at First Sight'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Preference at First Sight', 'We consider decision-making and game scenarios in which an agent is limited by his/her computational ability to foresee all the available moves towards the future - that is, we study scenarios with short sight. We focus on how short sight affects the logical properties of decision making in multi-agent settings. We start with single-agent sequential decision making (SSDM) processes, modeling them by a new structure of \"preference-sight trees\". Using this model, we first explore the relation between a new natural solution concept of Sight-Compatible Backward Induction (SCBI) and the histories produced by classical Backward Induction (BI). In particular, we find necessary and sufficient conditions for the two analyses to be equivalent. Next, we study whether larger sight always contributes to better outcomes. Then we develop a simple logical special-purpose language to formally express some key properties of our preference-sight models. Lastly, we show how short-sight SSDM scenarios call for substantial enrichments of existing fixed-point logics that have been developed for the classical BI solution concept. We also discuss changes in earlier modal logics expressing \"surface reasoning\" about best actions in the presence of short sight. Our analysis may point the way to logical and computational analysis of more realistic game models.', 'cs.LO', '2016-06-24T00:32:31Z', 'http://dx.doi.org/10.4204/EPTCS.215.15', '2016-10-08 10:25:50', '2016-10-08 10:25:50')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPublish Load (0.7ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 413[0m
  [1m[35mAuthor Load (0.7ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Chanjuan Liu'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.7ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Chanjuan Liu', '2016-10-08 10:25:50', '2016-10-08 10:25:50')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1098, 413, 0, '2016-10-08 10:25:50', '2016-10-08 10:25:50')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (0.6ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'An Axiomatic Approach to Routing'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('An Axiomatic Approach to Routing', 'Information delivery in a network of agents is a key issue for large, complex systems that need to do so in a predictable, efficient manner. The delivery of information in such multi-agent systems is typically implemented through routing protocols that determine how information flows through the network. Different routing protocols exist each with its own benefits, but it is generally unclear which properties can be successfully combined within a given algorithm. We approach this problem from the axiomatic point of view, i.e., we try to establish what are the properties we would seek to see in such a system, and examine the different properties which uniquely define common routing algorithms used today. We examine several desirable properties, such as robustness, which ensures adding nodes and edges does not change the routing in a radical, unpredictable ways; and properties that depend on the operating environment, such as an \"economic model\", where nodes choose their paths based on the cost they are charged to pass information to the next node. We proceed to fully characterize minimal spanning tree, shortest path, and weakest link routing algorithms, showing a tight set of axioms for each.', 'cs.GT', '2016-06-24T00:32:22Z', 'http://dx.doi.org/10.4204/EPTCS.215.14', '2016-10-08 10:25:50', '2016-10-08 10:25:50')[0m
  [1m[35m (2.9ms)[0m  COMMIT
  [1m[36mPublish Load (1.0ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 414[0m
  [1m[35mAuthor Load (0.9ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Omer Lev'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Omer Lev', '2016-10-08 10:25:50', '2016-10-08 10:25:50')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1099, 414, 0, '2016-10-08 10:25:50', '2016-10-08 10:25:50')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (0.9ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Moshe Tennenholtz'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Moshe Tennenholtz', '2016-10-08 10:25:50', '2016-10-08 10:25:50')[0m
  [1m[35m (2.7ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1100, 414, 1, '2016-10-08 10:25:50', '2016-10-08 10:25:50')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.8ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Aviv Zohar'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Aviv Zohar', '2016-10-08 10:25:50', '2016-10-08 10:25:50')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1101, 414, 2, '2016-10-08 10:25:50', '2016-10-08 10:25:50')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (0.7ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Ceteris paribus logic in counterfactual reasoning'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Ceteris paribus logic in counterfactual reasoning', 'The semantics for counterfactuals due to David Lewis has been challenged on the basis of unlikely, or impossible, events. Such events may skew a given similarity order in favour of those possible worlds which exhibit them. By updating the relational structure of a model according to a ceteris paribus clause one forces out, in a natural manner, those possible worlds which do not satisfy the requirements of the clause. We develop a ceteris paribus logic for counterfactual reasoning capable of performing such actions, and offer several alternative (relaxed) interpretations of ceteris paribus. We apply this framework in a way which allows us to reason counterfactually without having our similarity order skewed by unlikely events. This continues the investigation of formal ceteris paribus reasoning, which has previously been applied to preferences, logics of game forms, and questions in decision-making, among other areas.', 'cs.LO', '2016-06-24T00:32:05Z', 'http://dx.doi.org/10.4204/EPTCS.215.13', '2016-10-08 10:25:50', '2016-10-08 10:25:50')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPublish Load (0.9ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 415[0m
  [1m[35mAuthor Load (0.6ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Patrick Girard'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Patrick Girard', '2016-10-08 10:25:50', '2016-10-08 10:25:50')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1102, 415, 0, '2016-10-08 10:25:50', '2016-10-08 10:25:50')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.7ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Marcus Anthony Triplett'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Marcus Anthony Triplett', '2016-10-08 10:25:50', '2016-10-08 10:25:50')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1103, 415, 1, '2016-10-08 10:25:50', '2016-10-08 10:25:50')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.7ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Standard State Space Models of Unawareness (Extended Abstract)'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Standard State Space Models of Unawareness (Extended Abstract)', 'The impossibility theorem of Dekel, Lipman and Rustichini has been thought to demonstrate that standard state-space models cannot be used to represent unawareness. We first show that Dekel, Lipman and Rustichini do not establish this claim. We then distinguish three notions of awareness, and argue that although one of them may not be adequately modeled using standard state spaces, there is no reason to think that standard state spaces cannot provide models of the other two notions. In fact, standard space models of these forms of awareness are attractively simple. They allow us to prove completeness and decidability results with ease, to carry over standard techniques from decision theory, and to add propositional quantifiers straightforwardly.', 'cs.AI', '2016-06-24T00:31:42Z', 'http://dx.doi.org/10.4204/EPTCS.215.11', '2016-10-08 10:25:50', '2016-10-08 10:25:50')
  [1m[36m (3.1ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (1.0ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 416
  [1m[36mAuthor Load (0.7ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Peter Fritz'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Peter Fritz', '2016-10-08 10:25:50', '2016-10-08 10:25:50')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1104, 416, 0, '2016-10-08 10:25:50', '2016-10-08 10:25:50')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.0ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Harvey Lederman'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Harvey Lederman', '2016-10-08 10:25:50', '2016-10-08 10:25:50')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1105, 416, 1, '2016-10-08 10:25:50', '2016-10-08 10:25:50')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPaper Load (0.6ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Epistemic Protocols for Distributed Gossiping'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Epistemic Protocols for Distributed Gossiping', 'Gossip protocols aim at arriving, by means of point-to-point or group communications, at a situation in which all the agents know each other\'s secrets. We consider distributed gossip protocols which are expressed by means of epistemic logic. We provide an operational semantics of such protocols and set up an appropriate framework to argue about their correctness. Then we analyze specific protocols for complete graphs and for directed rings.', 'cs.AI', '2016-06-24T00:30:33Z', 'http://dx.doi.org/10.4204/EPTCS.215.5', '2016-10-08 10:25:50', '2016-10-08 10:25:50')[0m
  [1m[35m (0.6ms)[0m  COMMIT
  [1m[36mPublish Load (1.0ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 417[0m
  [1m[35mAuthor Load (0.9ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Krzysztof R. Apt'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Krzysztof R. Apt', '2016-10-08 10:25:50', '2016-10-08 10:25:50')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.3ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1106, 417, 0, '2016-10-08 10:25:50', '2016-10-08 10:25:50')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.7ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Davide Grossi'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Davide Grossi', '2016-10-08 10:25:50', '2016-10-08 10:25:50')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1107, 417, 1, '2016-10-08 10:25:50', '2016-10-08 10:25:50')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.9ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Wiebe van der Hoek'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Wiebe van der Hoek', '2016-10-08 10:25:50', '2016-10-08 10:25:50')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1108, 417, 2, '2016-10-08 10:25:50', '2016-10-08 10:25:50')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (0.6ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Resolving Distributed Knowledge'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Resolving Distributed Knowledge', 'Distributed knowledge is the sum of the knowledge in a group; what someone who is able to discern between two possible worlds whenever any member of the group can discern between them, would know. Sometimes distributed knowledge is referred to as the potential knowledge of a group, or the joint knowledge they could obtain if they had unlimited means of communication. In epistemic logic, the formula D_G{\\phi} is intended to express the fact that group G has distributed knowledge of {\\phi}, that there is enough information in the group to infer {\\phi}. But this is not the same as reasoning about what happens if the members of the group share their information. In this paper we introduce an operator R_G, such that R_G{\\phi} means that {\\phi} is true after G have shared all their information with each other - after G\'s distributed knowledge has been resolved. The R_G operators are called resolution operators. Semantically, we say that an expression R_G{\\phi} is true iff {\\phi} is true in what van Benthem [11, p. 249] calls (G\'s) communication core; the model update obtained by removing links to states for members of G that are not linked by all members of G. We study logics with different combinations of resolution operators and operators for common and distributed knowledge. Of particular interest is the relationship between distributed and common knowledge. The main results are sound and complete axiomatizations.', 'cs.LO', '2016-06-24T00:30:18Z', 'http://dx.doi.org/10.4204/EPTCS.215.4', '2016-10-08 10:25:50', '2016-10-08 10:25:50')[0m
  [1m[35m (6.3ms)[0m  COMMIT
  [1m[36mPublish Load (1.1ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 418[0m
  [1m[35mAuthor Load (1.3ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Thomas Ågotnes'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35m (0.2ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1057, 418, 0, '2016-10-08 10:25:50', '2016-10-08 10:25:50')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.8ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Yì N. Wáng'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Yì N. Wáng', '2016-10-08 10:25:50', '2016-10-08 10:25:50')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1109, 418, 1, '2016-10-08 10:25:50', '2016-10-08 10:25:50')[0m
  [1m[35m (0.3ms)[0m  COMMIT
  [1m[36mPaper Load (0.6ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Human-Agent Decision-making: Combining Theory and Practice'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Human-Agent Decision-making: Combining Theory and Practice', 'Extensive work has been conducted both in game theory and logic to model strategic interaction. An important question is whether we can use these theories to design agents for interacting with people? On the one hand, they provide a formal design specification for agent strategies. On the other hand, people do not necessarily adhere to playing in accordance with these strategies, and their behavior is affected by a multitude of social and psychological factors. In this paper we will consider the question of whether strategies implied by theories of strategic behavior can be used by automated agents that interact proficiently with people. We will focus on automated agents that we built that need to interact with people in two negotiation settings: bargaining and deliberation. For bargaining we will study game-theory based equilibrium agents and for argumentation we will discuss logic-based argumentation theory. We will also consider security games and persuasion games and will discuss the benefits of using equilibrium based agents.', 'cs.AI', '2016-06-24T00:30:07Z', 'http://dx.doi.org/10.4204/EPTCS.215.2', '2016-10-08 10:25:50', '2016-10-08 10:25:50')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPublish Load (1.0ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 419[0m
  [1m[35mAuthor Load (0.7ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Sarit Kraus'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Sarit Kraus', '2016-10-08 10:25:50', '2016-10-08 10:25:50')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1110, 419, 0, '2016-10-08 10:25:50', '2016-10-08 10:25:50')[0m
  [1m[35m (2.5ms)[0m  COMMIT
  [1m[36mPaper Load (0.8ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Sort Story: Sorting Jumbled Images and Captions into Stories'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Sort Story: Sorting Jumbled Images and Captions into Stories', 'Temporal common sense has applications in AI tasks such as QA, multi-document summarization, and human-AI communication. We propose the task of sequencing -- given a jumbled set of aligned image-caption pairs that belong to a story, the task is to sort them such that the output sequence forms a coherent story. We present multiple approaches, via unary (position) and pairwise (order) predictions, and their ensemble-based combinations, achieving strong results on this task. As features, we use both text-based and image-based features, which depict complementary improvements. Using qualitative examples, we demonstrate that our models have learnt interesting aspects of temporal common sense.', 'cs.CL', '2016-06-23T21:54:44Z', 'http://arxiv.org/abs/1606.07493v3', '2016-10-08 10:25:50', '2016-10-08 10:25:50')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPublish Load (1.0ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 420[0m
  [1m[35mAuthor Load (0.8ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Harsh Agrawal'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Harsh Agrawal', '2016-10-08 10:25:50', '2016-10-08 10:25:50')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1111, 420, 0, '2016-10-08 10:25:50', '2016-10-08 10:25:50')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.7ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Arjun Chandrasekaran'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Arjun Chandrasekaran', '2016-10-08 10:25:50', '2016-10-08 10:25:50')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1112, 420, 1, '2016-10-08 10:25:50', '2016-10-08 10:25:50')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.4ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Dhruv Batra'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35m (0.1ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (188, 420, 2, '2016-10-08 10:25:50', '2016-10-08 10:25:50')
  [1m[36m (0.3ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.3ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Devi Parikh'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35m (0.1ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (187, 420, 3, '2016-10-08 10:25:50', '2016-10-08 10:25:50')
  [1m[36m (1.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.0ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Mohit Bansal'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Mohit Bansal', '2016-10-08 10:25:50', '2016-10-08 10:25:50')
  [1m[36m (3.0ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.4ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1113, 420, 4, '2016-10-08 10:25:50', '2016-10-08 10:25:50')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPaper Load (0.7ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'The VGLC: The Video Game Level Corpus'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('The VGLC: The Video Game Level Corpus', 'Levels are a key component of many different video games, and a large body of work has been produced on how to procedurally generate game levels. Recently, Machine Learning techniques have been applied to video game level generation towards the purpose of automatically generating levels that have the properties of the training corpus. Towards that end we have made available a corpora of video game levels in an easy to parse format ideal for different machine learning and other game AI research purposes.', 'cs.HC', '2016-06-23T21:36:36Z', 'http://arxiv.org/abs/1606.07487v2', '2016-10-08 10:25:50', '2016-10-08 10:25:50')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPublish Load (0.8ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 421[0m
  [1m[35mAuthor Load (0.6ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Adam James Summerville'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Adam James Summerville', '2016-10-08 10:25:50', '2016-10-08 10:25:50')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1114, 421, 0, '2016-10-08 10:25:50', '2016-10-08 10:25:50')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (1.1ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Sam Snodgrass'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Sam Snodgrass', '2016-10-08 10:25:50', '2016-10-08 10:25:50')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1115, 421, 1, '2016-10-08 10:25:50', '2016-10-08 10:25:50')
  [1m[36m (0.3ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.7ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Michael Mateas'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Michael Mateas', '2016-10-08 10:25:50', '2016-10-08 10:25:50')
  [1m[36m (0.8ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1116, 421, 2, '2016-10-08 10:25:50', '2016-10-08 10:25:50')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.7ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Santiago Ontañón'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Santiago Ontañón', '2016-10-08 10:25:50', '2016-10-08 10:25:50')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1117, 421, 3, '2016-10-08 10:25:50', '2016-10-08 10:25:50')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.6ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Visual Analysis of Hidden State Dynamics in Recurrent Neural Networks'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Visual Analysis of Hidden State Dynamics in Recurrent Neural Networks', 'Recurrent neural networks, and in particular long short-term memory networks (LSTMs), are a remarkably effective tool for sequence modeling that learn a dense black-box hidden representation of their sequential input. Researchers interested in better understanding these models have studied the changes in hidden state representations over time and noticed some interpretable patterns but also significant noise. In this work, we present LSTMVis a visual analysis tool for recurrent neural networks with a focus on understanding these hidden state dynamics. The tool allows a user to select a hypothesis input range to focus on local state changes, to match these states changes to similar patterns in a large data set, and to align these results with domain specific structural annotations. We further show several use cases of the tool for analyzing specific hidden state properties on datasets containing nesting, phrase structure, and chord progressions, and demonstrate how the tool can be used to isolate patterns for further statistical analysis.', 'cs.CL', '2016-06-23T20:20:39Z', 'http://arxiv.org/abs/1606.07461v1', '2016-10-08 10:25:50', '2016-10-08 10:25:50')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (1.1ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 422
  [1m[36mAuthor Load (0.7ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Hendrik Strobelt'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Hendrik Strobelt', '2016-10-08 10:25:50', '2016-10-08 10:25:50')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1118, 422, 0, '2016-10-08 10:25:50', '2016-10-08 10:25:50')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.8ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Sebastian Gehrmann'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Sebastian Gehrmann', '2016-10-08 10:25:50', '2016-10-08 10:25:50')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1119, 422, 1, '2016-10-08 10:25:50', '2016-10-08 10:25:50')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.8ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Bernd Huber'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Bernd Huber', '2016-10-08 10:25:50', '2016-10-08 10:25:50')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1120, 422, 2, '2016-10-08 10:25:50', '2016-10-08 10:25:50')
  [1m[36m (2.9ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.1ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Hanspeter Pfister'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Hanspeter Pfister', '2016-10-08 10:25:50', '2016-10-08 10:25:50')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1121, 422, 3, '2016-10-08 10:25:50', '2016-10-08 10:25:50')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (1.0ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Alexander M. Rush'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Alexander M. Rush', '2016-10-08 10:25:50', '2016-10-08 10:25:50')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1122, 422, 4, '2016-10-08 10:25:50', '2016-10-08 10:25:50')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.6ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Learning to Poke by Poking: Experiential Learning of Intuitive Physics'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Learning to Poke by Poking: Experiential Learning of Intuitive Physics', 'We investigate an experiential learning paradigm for acquiring an internal model of intuitive physics. Our model is evaluated on a real-world robotic manipulation task that requires displacing objects to target locations by poking. The robot gathered over 400 hours of experience by executing more than 50K pokes on different objects. We propose a novel approach based on deep neural networks for modeling the dynamics of robot\'s interactions directly from images, by jointly estimating forward and inverse models of dynamics. The inverse model objective provides supervision to construct informative visual features, which the forward model can then predict and in turn regularize the feature space for the inverse model. The interplay between these two objectives creates useful, accurate models that can then be used for multi-step decision making. This formulation has the additional benefit that it is possible to learn forward models in an abstract feature space and thus alleviate the need of predicting pixels. Our experiments show that this joint modeling approach outperforms alternative methods. We also demonstrate that active data collection using the learned model further improves performance.', 'cs.CV', '2016-06-23T19:42:57Z', 'http://arxiv.org/abs/1606.07419v1', '2016-10-08 10:25:50', '2016-10-08 10:25:50')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (0.9ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 423
  [1m[36mAuthor Load (0.3ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Pulkit Agrawal'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36m (0.1ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (210, 423, 0, '2016-10-08 10:25:50', '2016-10-08 10:25:50')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (0.8ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Ashvin Nair'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Ashvin Nair', '2016-10-08 10:25:50', '2016-10-08 10:25:50')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1123, 423, 1, '2016-10-08 10:25:50', '2016-10-08 10:25:50')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.0ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Pieter Abbeel'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Pieter Abbeel', '2016-10-08 10:25:50', '2016-10-08 10:25:50')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1124, 423, 2, '2016-10-08 10:25:50', '2016-10-08 10:25:50')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.7ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Jitendra Malik'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Jitendra Malik', '2016-10-08 10:25:50', '2016-10-08 10:25:50')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1125, 423, 3, '2016-10-08 10:25:50', '2016-10-08 10:25:50')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.0ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Sergey Levine'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Sergey Levine', '2016-10-08 10:25:50', '2016-10-08 10:25:50')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1126, 423, 4, '2016-10-08 10:25:50', '2016-10-08 10:25:50')[0m
  [1m[35m (0.3ms)[0m  COMMIT
  [1m[36mPaper Load (0.7ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Robust Learning of Fixed-Structure Bayesian Networks'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Robust Learning of Fixed-Structure Bayesian Networks', 'We investigate the problem of learning Bayesian networks in an agnostic model where an $\\epsilon$-fraction of the samples are adversarially corrupted. Our agnostic learning model is similar to -- in fact, stronger than -- Huber\'s contamination model in robust statistics. In this work, we study the fully observable Bernoulli case where the structure of the network is given. Even in this basic setting, previous learning algorithms either run in exponential time or lose dimension-dependent factors in their error guarantees. We provide the first computationally efficient agnostic learning algorithm for this problem with dimension-independent error guarantees. Our algorithm has polynomial sample complexity, runs in polynomial time, and achieves error that scales nearly-linearly with the fraction of adversarially corrupted samples.', 'cs.DS', '2016-06-23T17:47:13Z', 'http://arxiv.org/abs/1606.07384v1', '2016-10-08 10:25:50', '2016-10-08 10:25:50')[0m
  [1m[35m (2.9ms)[0m  COMMIT
  [1m[36mPublish Load (1.1ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 424[0m
  [1m[35mAuthor Load (0.9ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Ilias Diakonikolas'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Ilias Diakonikolas', '2016-10-08 10:25:50', '2016-10-08 10:25:50')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1127, 424, 0, '2016-10-08 10:25:50', '2016-10-08 10:25:50')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (0.9ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Daniel Kane'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Daniel Kane', '2016-10-08 10:25:50', '2016-10-08 10:25:50')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1128, 424, 1, '2016-10-08 10:25:50', '2016-10-08 10:25:50')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.0ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Alistair Stewart'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Alistair Stewart', '2016-10-08 10:25:50', '2016-10-08 10:25:50')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1129, 424, 2, '2016-10-08 10:25:50', '2016-10-08 10:25:50')[0m
  [1m[35m (1.0ms)[0m  COMMIT
  [1m[36mPaper Load (0.7ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Proceedings Fifteenth Conference on Theoretical Aspects of Rationality and Knowledge'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Proceedings Fifteenth Conference on Theoretical Aspects of Rationality and Knowledge', 'The 15th Conference on Theoretical Aspects of Rationality and Knowledge (TARK) took place in Carnegie Mellon University, Pittsburgh, USA from June 4 to 6, 2015. The mission of the TARK conferences is to bring together researchers from a wide variety of fields, including Artificial Intelligence, Cryptography, Distributed Computing, Economics and Game Theory, Linguistics, Philosophy, and Psychology, in order to further our understanding of interdisciplinary issues involving reasoning about rationality and knowledge. These proceedings consist of a subset of the papers / abstracts presented at the TARK conference.', 'cs.GT', '2016-06-23T12:50:36Z', 'http://dx.doi.org/10.4204/EPTCS.215', '2016-10-08 10:25:50', '2016-10-08 10:25:50')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPublish Load (0.9ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 425[0m
  [1m[35mAuthor Load (0.7ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'R Ramanujam'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('R Ramanujam', '2016-10-08 10:25:50', '2016-10-08 10:25:50')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1130, 425, 0, '2016-10-08 10:25:50', '2016-10-08 10:25:50')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (0.9ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'A review of undirected and acyclic directed Gaussian Markov model selection and estimation'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('A review of undirected and acyclic directed Gaussian Markov model selection and estimation', 'Markov models lie at the interface between statistical independence in a probability distribution and graph separation properties. We review model selection and estimation in directed and undirected Markov models with Gaussian parametrization, emphasizing the main similarities and differences. These two model types are foundationally similar but not equivalent, as we highlight. We report existing results with a unified notation and terminology, taking into account literature from both the artificial intelligence and statistics research communities, which first developed these models. Finally, we point out the main active research areas and open problems now existing with regard to these traditional, albeit rich, Markov models.', 'stat.ME', '2016-06-23T12:12:20Z', 'http://arxiv.org/abs/1606.07282v2', '2016-10-08 10:25:50', '2016-10-08 10:25:50')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPublish Load (0.8ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 426[0m
  [1m[35mAuthor Load (0.6ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Irene Córdoba Sánchez'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Irene Córdoba Sánchez', '2016-10-08 10:25:50', '2016-10-08 10:25:50')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1131, 426, 0, '2016-10-08 10:25:50', '2016-10-08 10:25:50')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (1.0ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Concha Bielza'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Concha Bielza', '2016-10-08 10:25:50', '2016-10-08 10:25:50')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1132, 426, 1, '2016-10-08 10:25:50', '2016-10-08 10:25:50')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.7ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Pedro Larrañaga'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Pedro Larrañaga', '2016-10-08 10:25:50', '2016-10-08 10:25:50')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1133, 426, 2, '2016-10-08 10:25:50', '2016-10-08 10:25:50')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (0.6ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Log-based Evaluation of Label Splits for Process Models'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Log-based Evaluation of Label Splits for Process Models', 'Process mining techniques aim to extract insights in processes from event logs. One of the challenges in process mining is identifying interesting and meaningful event labels that contribute to a better understanding of the process. Our application area is mining data from smart homes for elderly, where the ultimate goal is to signal deviations from usual behavior and provide timely recommendations in order to extend the period of independent living. Extracting individual process models showing user behavior is an important instrument in achieving this goal. However, the interpretation of sensor data at an appropriate abstraction level is not straightforward. For example, a motion sensor in a bedroom can be triggered by tossing and turning in bed or by getting up. We try to derive the actual activity depending on the context (time, previous events, etc.). In this paper we introduce the notion of label refinements, which links more abstract event descriptions with their more refined counterparts. We present a statistical evaluation method to determine the usefulness of a label refinement for a given event log from a process perspective. Based on data from smart homes, we show how our statistical evaluation method for label refinements can be used in practice. Our method was able to select two label refinements out of a set of candidate label refinements that both had a positive effect on model precision.', 'cs.DB', '2016-06-23T10:29:48Z', 'http://dx.doi.org/10.1016/j.procs.2016.08.096', '2016-10-08 10:25:50', '2016-10-08 10:25:50')[0m
  [1m[35m (2.9ms)[0m  COMMIT
  [1m[36mPublish Load (1.1ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 427[0m
  [1m[35mAuthor Load (0.4ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Niek Tax'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35m (0.2ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (61, 427, 0, '2016-10-08 10:25:51', '2016-10-08 10:25:51')
  [1m[36m (1.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.5ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Natalia Sidorova'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35m (0.2ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (63, 427, 1, '2016-10-08 10:25:51', '2016-10-08 10:25:51')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.4ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Reinder Haakma'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35m (0.2ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (64, 427, 2, '2016-10-08 10:25:51', '2016-10-08 10:25:51')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.8ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Wil M. P. van der Aalst'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Wil M. P. van der Aalst', '2016-10-08 10:25:51', '2016-10-08 10:25:51')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1134, 427, 3, '2016-10-08 10:25:51', '2016-10-08 10:25:51')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (0.6ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Adaptive Task Assignment in Online Learning Environments'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Adaptive Task Assignment in Online Learning Environments', 'With the increasing popularity of online learning, intelligent tutoring systems are regaining increased attention. In this paper, we introduce adaptive algorithms for personalized assignment of learning tasks to student so that to improve his performance in online learning environments. As main contribution of this paper, we propose a a novel Skill-Based Task Selector (SBTS) algorithm which is able to approximate a student\'s skill level based on his performance and consequently suggest adequate assignments. The SBTS is inspired by the class of multi-armed bandit algorithms. However, in contrast to standard multi-armed bandit approaches, the SBTS aims at acquiring two criteria related to student learning, namely: which topics should the student work on, and what level of difficulty should the task be. The SBTS centers on innovative reward and punishment schemes in a task and skill matrix based on the student behaviour. To verify the algorithm, the complex student behaviour is modelled using a neighbour node selection approach based on empirical estimations of a students learning curve. The algorithm is evaluated with a practical scenario from a basic java programming course. The SBTS is able to quickly and accurately adapt to the composite student competency --- even with a multitude of student models.', 'cs.AI', '2016-06-23T09:09:49Z', 'http://arxiv.org/abs/1606.07233v1', '2016-10-08 10:25:51', '2016-10-08 10:25:51')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPublish Load (0.7ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 428[0m
  [1m[35mAuthor Load (0.6ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Per-Arne Andersen'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Per-Arne Andersen', '2016-10-08 10:25:51', '2016-10-08 10:25:51')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1135, 428, 0, '2016-10-08 10:25:51', '2016-10-08 10:25:51')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.7ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Christian Kråkevik'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Christian Kråkevik', '2016-10-08 10:25:51', '2016-10-08 10:25:51')[0m
  [1m[35m (3.0ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1136, 428, 1, '2016-10-08 10:25:51', '2016-10-08 10:25:51')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.0ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Morten Goodwin'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Morten Goodwin', '2016-10-08 10:25:51', '2016-10-08 10:25:51')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1137, 428, 2, '2016-10-08 10:25:51', '2016-10-08 10:25:51')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (1.0ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Anis Yazidi'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Anis Yazidi', '2016-10-08 10:25:51', '2016-10-08 10:25:51')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1138, 428, 3, '2016-10-08 10:25:51', '2016-10-08 10:25:51')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.6ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'E-commerce in Your Inbox: Product Recommendations at Scale'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('E-commerce in Your Inbox: Product Recommendations at Scale', 'In recent years online advertising has become increasingly ubiquitous and effective. Advertisements shown to visitors fund sites and apps that publish digital content, manage social networks, and operate e-mail services. Given such large variety of internet resources, determining an appropriate type of advertising for a given platform has become critical to financial success. Native advertisements, namely ads that are similar in look and feel to content, have had great success in news and social feeds. However, to date there has not been a winning formula for ads in e-mail clients. In this paper we describe a system that leverages user purchase history determined from e-mail receipts to deliver highly personalized product ads to Yahoo Mail users. We propose to use a novel neural language-based algorithm specifically tailored for delivering effective product recommendations, which was evaluated against baselines that included showing popular products and products predicted based on co-occurrence. We conducted rigorous offline testing using a large-scale product purchase data set, covering purchases of more than 29 million users from 172 e-commerce websites. Ads in the form of product recommendations were successfully tested on online traffic, where we observed a steady 9% lift in click-through rates over other ad formats in mail, as well as comparable lift in conversion rates. Following successful tests, the system was launched into production during the holiday season of 2014.', 'cs.AI', '2016-06-23T01:20:59Z', 'http://dx.doi.org/10.1145/2783258.2788627.', '2016-10-08 10:25:51', '2016-10-08 10:25:51')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (0.7ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 429
  [1m[36mAuthor Load (0.5ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Mihajlo Grbovic'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36m (0.1ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (880, 429, 0, '2016-10-08 10:25:51', '2016-10-08 10:25:51')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.7ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Vladan Radosavljevic'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36m (0.2ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (882, 429, 1, '2016-10-08 10:25:51', '2016-10-08 10:25:51')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (0.8ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Nemanja Djuric'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36m (0.2ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (881, 429, 2, '2016-10-08 10:25:51', '2016-10-08 10:25:51')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (0.9ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Narayan Bhamidipati'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36m (0.1ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1018, 429, 3, '2016-10-08 10:25:51', '2016-10-08 10:25:51')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (0.9ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Jaikit Savla'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Jaikit Savla', '2016-10-08 10:25:51', '2016-10-08 10:25:51')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1139, 429, 4, '2016-10-08 10:25:51', '2016-10-08 10:25:51')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.7ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Varun Bhagwan'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Varun Bhagwan', '2016-10-08 10:25:51', '2016-10-08 10:25:51')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1140, 429, 5, '2016-10-08 10:25:51', '2016-10-08 10:25:51')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (0.8ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Doug Sharp'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Doug Sharp', '2016-10-08 10:25:51', '2016-10-08 10:25:51')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1141, 429, 6, '2016-10-08 10:25:51', '2016-10-08 10:25:51')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.7ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'An Approach to Stable Gradient Descent Adaptation of Higher-Order Neural Units'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('An Approach to Stable Gradient Descent Adaptation of Higher-Order Neural Units', 'Stability evaluation of a weight-update system of higher-order neural units (HONUs) with polynomial aggregation of neural inputs (also known as classes of polynomial neural networks) for adaptation of both feedforward and recurrent HONUs by a gradient descent method is introduced. An essential core of the approach is based on spectral radius of a weight-update system, and it allows stability monitoring and its maintenance at every adaptation step individually. Assuring stability of the weight-update system (at every single adaptation step) naturally results in adaptation stability of the whole neural architecture that adapts to target data. As an aside, the used approach highlights the fact that the weight optimization of HONU is a linear problem, so the proposed approach can be generally extended to any neural architecture that is linear in its adaptable parameters.', 'cs.NE', '2016-06-23T01:07:27Z', 'http://dx.doi.org/10.1109/TNNLS.2016.2572310', '2016-10-08 10:25:51', '2016-10-08 10:25:51')
  [1m[36m (2.9ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (1.2ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 430
  [1m[36mAuthor Load (1.0ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Ivo Bukovsky'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Ivo Bukovsky', '2016-10-08 10:25:51', '2016-10-08 10:25:51')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1142, 430, 0, '2016-10-08 10:25:51', '2016-10-08 10:25:51')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.9ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Noriyasu Homma'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Noriyasu Homma', '2016-10-08 10:25:51', '2016-10-08 10:25:51')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1143, 430, 1, '2016-10-08 10:25:51', '2016-10-08 10:25:51')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (0.6ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Automated Extraction of Number of Subjects in Randomised Controlled Trials'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Automated Extraction of Number of Subjects in Randomised Controlled Trials', 'We present a simple approach for automatically extracting the number of subjects involved in randomised controlled trials (RCT). Our approach first applies a set of rule-based techniques to extract candidate study sizes from the abstracts of the articles. Supervised classification is then performed over the candidates with support vector machines, using a small set of lexical, structural, and contextual features. With only a small annotated training set of 201 RCTs, we obtained an accuracy of 88\\%. We believe that this system will aid complex medical text processing tasks such as summarisation and question answering.', 'cs.AI', '2016-06-22T23:35:59Z', 'http://arxiv.org/abs/1606.07137v1', '2016-10-08 10:25:51', '2016-10-08 10:25:51')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPublish Load (0.9ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 431[0m
  [1m[35mAuthor Load (0.8ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Abeed Sarker'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Abeed Sarker', '2016-10-08 10:25:51', '2016-10-08 10:25:51')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1144, 431, 0, '2016-10-08 10:25:51', '2016-10-08 10:25:51')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (0.7ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Finding Proofs in Tarskian Geometry'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.4ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Finding Proofs in Tarskian Geometry', 'We report on a project to use a theorem prover to find proofs of the theorems in Tarskian geometry. These theorems start with fundamental properties of betweenness, proceed through the derivations of several famous theorems due to Gupta and end with the derivation from Tarski\'s axioms of Hilbert\'s 1899 axioms for geometry. They include the four challenge problems left unsolved by Quaife, who two decades ago found some \\Otter proofs in Tarskian geometry (solving challenges issued in Wos\'s 1998 book). There are 212 theorems in this collection. We were able to find \\Otter proofs of all these theorems. We developed a methodology for the automated preparation and checking of the input files for those theorems, to ensure that no human error has corrupted the formal development of an entire theory as embodied in two hundred input files and proofs. We distinguish between proofs that were found completely mechanically (without reference to the steps of a book proof) and proofs that were constructed by some technique that involved a human knowing the steps of a book proof. Proofs of length 40--100, roughly speaking, are difficult exercises for a human, and proofs of 100-250 steps belong in a Ph.D. thesis or publication. 29 of the proofs in our collection are longer than 40 steps, and ten are longer than 90 steps. We were able to derive completely mechanically all but 26 of the 183 theorems that have \"short\" proofs (40 or fewer deduction steps). We found proofs of the rest, as well as the 29 \"hard\" theorems, using a method that requires consulting the book proof at the outset. Our \"subformula strategy\" enabled us to prove four of the 29 hard theorems completely mechanically. These are Ph.D. level proofs, of length up to 108.', 'cs.AI', '2016-06-22T20:39:23Z', 'http://arxiv.org/abs/1606.07095v1', '2016-10-08 10:25:51', '2016-10-08 10:25:51')[0m
  [1m[35m (3.7ms)[0m  COMMIT
  [1m[36mPublish Load (1.2ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 432[0m
  [1m[35mAuthor Load (1.1ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Michael Beeson'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Michael Beeson', '2016-10-08 10:25:51', '2016-10-08 10:25:51')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1145, 432, 0, '2016-10-08 10:25:51', '2016-10-08 10:25:51')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.9ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Larry Wos'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Larry Wos', '2016-10-08 10:25:51', '2016-10-08 10:25:51')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1146, 432, 1, '2016-10-08 10:25:51', '2016-10-08 10:25:51')
  [1m[36m (0.3ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.6ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Emulating Human Conversations using Convolutional Neural Network-based IR'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.4ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Emulating Human Conversations using Convolutional Neural Network-based IR', 'Conversational agents (\"bots\") are beginning to be widely used in conversational interfaces. To design a system that is capable of emulating human-like interactions, a conversational layer that can serve as a fabric for chat-like interaction with the agent is needed. In this paper, we introduce a model that employs Information Retrieval by utilizing convolutional deep structured semantic neural network-based features in the ranker to present human-like responses in ongoing conversation with a user. In conversations, accounting for context is critical to the retrieval model; we show that our context-sensitive approach using a Convolutional Deep Structured Semantic Model (cDSSM) with character trigrams significantly outperforms several conventional baselines in terms of the relevance of responses retrieved.', 'cs.AI', '2016-06-22T19:55:24Z', 'http://arxiv.org/abs/1606.07056v1', '2016-10-08 10:25:51', '2016-10-08 10:25:51')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (0.9ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 433
  [1m[36mAuthor Load (0.7ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Abhay Prakash'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Abhay Prakash', '2016-10-08 10:25:51', '2016-10-08 10:25:51')[0m
  [1m[35m (1.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1147, 433, 0, '2016-10-08 10:25:51', '2016-10-08 10:25:51')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.9ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Chris Brockett'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Chris Brockett', '2016-10-08 10:25:51', '2016-10-08 10:25:51')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1148, 433, 1, '2016-10-08 10:25:51', '2016-10-08 10:25:51')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.9ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Puneet Agrawal'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Puneet Agrawal', '2016-10-08 10:25:51', '2016-10-08 10:25:51')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1149, 433, 2, '2016-10-08 10:25:51', '2016-10-08 10:25:51')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.6ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Ancestral Causal Inference'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Ancestral Causal Inference', 'Constraint-based causal discovery from limited data is a notoriously difficult challenge due to the many borderline independence test decisions. Several approaches to improve the reliability of the predictions by exploiting redundancy in the independence information have been proposed recently. Though promising, existing approaches can still be greatly improved in terms of accuracy and scalability. We present a novel method that reduces the combinatorial explosion of the search space by using a more coarse-grained representation of causal information, drastically reducing computation time. Additionally, we propose a method to score causal predictions based on their confidence. Crucially, our implementation also allows one to easily combine observational and interventional data and to incorporate various types of available background knowledge. We prove soundness and asymptotic consistency of our method and demonstrate that it can outperform the state-of-the-art on synthetic data, achieving a speedup of several orders of magnitude. We illustrate its practical feasibility by applying it on a challenging protein data set.', 'cs.LG', '2016-06-22T18:26:27Z', 'http://arxiv.org/abs/1606.07035v1', '2016-10-08 10:25:51', '2016-10-08 10:25:51')
  [1m[36m (2.9ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (1.2ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 434
  [1m[36mAuthor Load (1.0ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Sara Magliacane'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Sara Magliacane', '2016-10-08 10:25:51', '2016-10-08 10:25:51')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1150, 434, 0, '2016-10-08 10:25:51', '2016-10-08 10:25:51')
  [1m[36m (0.6ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.9ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Tom Claassen'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Tom Claassen', '2016-10-08 10:25:51', '2016-10-08 10:25:51')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1151, 434, 1, '2016-10-08 10:25:51', '2016-10-08 10:25:51')[0m
  [1m[35m (0.3ms)[0m  COMMIT
  [1m[36mAuthor Load (0.3ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Joris M. Mooij'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36m (0.1ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (245, 434, 2, '2016-10-08 10:25:51', '2016-10-08 10:25:51')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (0.7ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Efficient Attack Graph Analysis through Approximate Inference'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Efficient Attack Graph Analysis through Approximate Inference', 'Attack graphs provide compact representations of the attack paths that an attacker can follow to compromise network resources by analysing network vulnerabilities and topology. These representations are a powerful tool for security risk assessment. Bayesian inference on attack graphs enables the estimation of the risk of compromise to the system\'s components given their vulnerabilities and interconnections, and accounts for multi-step attacks spreading through the system. Whilst static analysis considers the risk posture at rest, dynamic analysis also accounts for evidence of compromise, e.g. from SIEM software or forensic investigation. However, in this context, exact Bayesian inference techniques do not scale well. In this paper we show how Loopy Belief Propagation - an approximate inference technique - can be applied to attack graphs, and that it scales linearly in the number of nodes for both static and dynamic analysis, making such analyses viable for larger networks. We experiment with different topologies and network clustering on synthetic Bayesian attack graphs with thousands of nodes to show that the algorithm\'s accuracy is acceptable and converge to a stable solution. We compare sequential and parallel versions of Loopy Belief Propagation with exact inference techniques for both static and dynamic analysis, showing the advantages of approximate inference techniques to scale to larger attack graphs.', 'cs.CR', '2016-06-22T17:48:17Z', 'http://arxiv.org/abs/1606.07025v1', '2016-10-08 10:25:51', '2016-10-08 10:25:51')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPublish Load (0.8ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 435[0m
  [1m[35mAuthor Load (0.6ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Luis Muñoz-González'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Luis Muñoz-González', '2016-10-08 10:25:51', '2016-10-08 10:25:51')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1152, 435, 0, '2016-10-08 10:25:51', '2016-10-08 10:25:51')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.8ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Daniele Sgandurra'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Daniele Sgandurra', '2016-10-08 10:25:51', '2016-10-08 10:25:51')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1153, 435, 1, '2016-10-08 10:25:51', '2016-10-08 10:25:51')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.7ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Andrea Paudice'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Andrea Paudice', '2016-10-08 10:25:51', '2016-10-08 10:25:51')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1154, 435, 2, '2016-10-08 10:25:51', '2016-10-08 10:25:51')[0m
  [1m[35m (0.3ms)[0m  COMMIT
  [1m[36mAuthor Load (0.7ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Emil C. Lupu'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Emil C. Lupu', '2016-10-08 10:25:51', '2016-10-08 10:25:51')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1155, 435, 3, '2016-10-08 10:25:51', '2016-10-08 10:25:51')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.7ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Simultaneous Control and Human Feedback in the Training of a Robotic Agent with Actor-Critic Reinforcement Learning'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Simultaneous Control and Human Feedback in the Training of a Robotic Agent with Actor-Critic Reinforcement Learning', 'This paper contributes a preliminary report on the advantages and disadvantages of incorporating simultaneous human control and feedback signals in the training of a reinforcement learning robotic agent. While robotic human-machine interfaces have become increasingly complex in both form and function, control remains challenging for users. This has resulted in an increasing gap between user control approaches and the number of robotic motors which can be controlled. One way to address this gap is to shift some autonomy to the robot. Semi-autonomous actions of the robotic agent can then be shaped by human feedback, simplifying user control. Most prior work on agent shaping by humans has incorporated training with feedback, or has included indirect control signals. By contrast, in this paper we explore how a human can provide concurrent feedback signals and real-time myoelectric control signals to train a robot\'s actor-critic reinforcement learning control system. Using both a physical and a simulated robotic system, we compare training performance on a simple movement task when reward is derived from the environment, when reward is provided by the human, and combinations of these two approaches. Our results indicate that some benefit can be gained with the inclusion of human generated feedback.', 'cs.HC', '2016-06-22T15:09:04Z', 'http://arxiv.org/abs/1606.06979v1', '2016-10-08 10:25:51', '2016-10-08 10:25:51')
  [1m[36m (2.9ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (1.2ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 436
  [1m[36mAuthor Load (0.9ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Kory W. Mathewson'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Kory W. Mathewson', '2016-10-08 10:25:51', '2016-10-08 10:25:51')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1156, 436, 0, '2016-10-08 10:25:51', '2016-10-08 10:25:51')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.0ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Patrick M. Pilarski'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Patrick M. Pilarski', '2016-10-08 10:25:51', '2016-10-08 10:25:51')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1157, 436, 1, '2016-10-08 10:25:51', '2016-10-08 10:25:51')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (0.7ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Inferring Logical Forms From Denotations'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Inferring Logical Forms From Denotations', 'A core problem in learning semantic parsers from denotations is picking out consistent logical forms--those that yield the correct denotation--from a combinatorially large space. To control the search space, previous work relied on restricted set of rules, which limits expressivity. In this paper, we consider a much more expressive class of logical forms, and show how to use dynamic programming to efficiently represent the complete set of consistent logical forms. Expressivity also introduces many more spurious logical forms which are consistent with the correct denotation but do not represent the meaning of the utterance. To address this, we generate fictitious worlds and use crowdsourced denotations on these worlds to filter out spurious logical forms. On the WikiTableQuestions dataset, we increase the coverage of answerable questions from 53.5% to 76%, and the additional crowdsourced supervision lets us rule out 92.1% of spurious logical forms.', 'cs.CL', '2016-06-22T11:07:43Z', 'http://arxiv.org/abs/1606.06900v1', '2016-10-08 10:25:51', '2016-10-08 10:25:51')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPublish Load (0.9ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 437[0m
  [1m[35mAuthor Load (0.6ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Panupong Pasupat'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Panupong Pasupat', '2016-10-08 10:25:51', '2016-10-08 10:25:51')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1158, 437, 0, '2016-10-08 10:25:51', '2016-10-08 10:25:51')[0m
  [1m[35m (0.3ms)[0m  COMMIT
  [1m[36mAuthor Load (0.7ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Percy Liang'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Percy Liang', '2016-10-08 10:25:51', '2016-10-08 10:25:51')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1159, 437, 1, '2016-10-08 10:25:51', '2016-10-08 10:25:51')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.6ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Structure in the Value Function of Two-Player Zero-Sum Games of Incomplete Information'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Structure in the Value Function of Two-Player Zero-Sum Games of Incomplete Information', 'Zero-sum stochastic games provide a rich model for competitive decision making. However, under general forms of state uncertainty as considered in the Partially Observable Stochastic Game (POSG), such decision making problems are still not very well understood. This paper makes a contribution to the theory of zero-sum POSGs by characterizing structure in their value function. In particular, we introduce a new formulation of the value function for zs-POSGs as a function of the \"plan-time sufficient statistics\" (roughly speaking the information distribution in the POSG), which has the potential to enable generalization over such information distributions. We further delineate this generalization capability by proving a structural result on the shape of value function: it exhibits concavity and convexity with respect to appropriately chosen marginals of the statistic space. This result is a key pre-cursor for developing solution methods that may be able to exploit such structure. Finally, we show how these results allow us to reduce a zs-POSG to a \"centralized\" model with shared observations, thereby transferring results for the latter, narrower class, to games with individual (private) observations.', 'cs.AI', '2016-06-22T10:41:04Z', 'http://arxiv.org/abs/1606.06888v1', '2016-10-08 10:25:51', '2016-10-08 10:25:51')
  [1m[36m (2.9ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (1.2ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 438
  [1m[36mAuthor Load (0.9ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Auke J. Wiggers'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Auke J. Wiggers', '2016-10-08 10:25:51', '2016-10-08 10:25:51')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1160, 438, 0, '2016-10-08 10:25:51', '2016-10-08 10:25:51')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.0ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Frans A. Oliehoek'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Frans A. Oliehoek', '2016-10-08 10:25:51', '2016-10-08 10:25:51')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1161, 438, 1, '2016-10-08 10:25:51', '2016-10-08 10:25:51')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (0.9ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Diederik M. Roijers'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Diederik M. Roijers', '2016-10-08 10:25:51', '2016-10-08 10:25:51')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1162, 438, 2, '2016-10-08 10:25:51', '2016-10-08 10:25:51')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.7ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Étude de Problèmes d\'Optimisation Combinatoire à Multiples Composantes Interdépendantes'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Étude de Problèmes d\'Optimisation Combinatoire à Multiples Composantes Interdépendantes', 'This extended abstract presents an overview on NP-hard optimization problems with multiple interdependent components. These problems occur in many real-world applications: industrial applications, engineering, and logistics. The fact that these problems are composed of many sub-problems that are NP-hard makes them even more challenging to solve using exact algorithms. This is mainly due to the high complexity of this class of algorithms and the hardness of the problems themselves. The main source of difficulty of these problems is the presence of internal dependencies between sub-problems. This aspect of interdependence of components is presented, and some outlines on solving approaches are briefly introduced from a (meta)heuristics and evolutionary computation perspective.', 'cs.AI', '2016-06-22T01:34:53Z', 'http://arxiv.org/abs/1606.06797v1', '2016-10-08 10:25:51', '2016-10-08 10:25:51')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (1.1ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 439
  [1m[36mAuthor Load (0.9ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Mohamed El Yafrani'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Mohamed El Yafrani', '2016-10-08 10:25:51', '2016-10-08 10:25:51')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1163, 439, 0, '2016-10-08 10:25:51', '2016-10-08 10:25:51')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.7ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Belaïd Ahiod'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Belaïd Ahiod', '2016-10-08 10:25:51', '2016-10-08 10:25:51')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1164, 439, 1, '2016-10-08 10:25:51', '2016-10-08 10:25:51')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (0.6ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Concrete Problems in AI Safety'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Concrete Problems in AI Safety', 'Rapid progress in machine learning and artificial intelligence (AI) has brought increasing attention to the potential impacts of AI technologies on society. In this paper we discuss one such potential impact: the problem of accidents in machine learning systems, defined as unintended and harmful behavior that may emerge from poor design of real-world AI systems. We present a list of five practical research problems related to accident risk, categorized according to whether the problem originates from having the wrong objective function (\"avoiding side effects\" and \"avoiding reward hacking\"), an objective function that is too expensive to evaluate frequently (\"scalable supervision\"), or undesirable behavior during the learning process (\"safe exploration\" and \"distributional shift\"). We review previous work in these areas as well as suggesting research directions with a focus on relevance to cutting-edge AI systems. Finally, we consider the high-level question of how to think most productively about the safety of forward-looking applications of AI.', 'cs.AI', '2016-06-21T13:37:05Z', 'http://arxiv.org/abs/1606.06565v2', '2016-10-08 10:25:51', '2016-10-08 10:25:51')[0m
  [1m[35m (2.9ms)[0m  COMMIT
  [1m[36mPublish Load (1.2ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 440[0m
  [1m[35mAuthor Load (1.0ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Dario Amodei'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Dario Amodei', '2016-10-08 10:25:51', '2016-10-08 10:25:51')
  [1m[36m (0.8ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1165, 440, 0, '2016-10-08 10:25:51', '2016-10-08 10:25:51')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.9ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Chris Olah'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Chris Olah', '2016-10-08 10:25:51', '2016-10-08 10:25:51')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1166, 440, 1, '2016-10-08 10:25:51', '2016-10-08 10:25:51')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.7ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Jacob Steinhardt'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Jacob Steinhardt', '2016-10-08 10:25:51', '2016-10-08 10:25:51')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1167, 440, 2, '2016-10-08 10:25:51', '2016-10-08 10:25:51')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.8ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Paul Christiano'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Paul Christiano', '2016-10-08 10:25:51', '2016-10-08 10:25:51')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1168, 440, 3, '2016-10-08 10:25:51', '2016-10-08 10:25:51')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.7ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'John Schulman'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('John Schulman', '2016-10-08 10:25:51', '2016-10-08 10:25:51')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1169, 440, 4, '2016-10-08 10:25:51', '2016-10-08 10:25:51')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (1.1ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Dan Mané'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Dan Mané', '2016-10-08 10:25:51', '2016-10-08 10:25:51')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1170, 440, 5, '2016-10-08 10:25:51', '2016-10-08 10:25:51')
  [1m[36m (0.3ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.6ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Graphical Models for Optimal Power Flow'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Graphical Models for Optimal Power Flow', 'Optimal power flow (OPF) is the central optimization problem in electric power grids. Although solved routinely in the course of power grid operations, it is known to be strongly NP-hard in general, and weakly NP-hard over tree networks. In this paper, we formulate the optimal power flow problem over tree networks as an inference problem over a tree-structured graphical model where the nodal variables are low-dimensional vectors. We adapt the standard dynamic programming algorithm for inference over a tree-structured graphical model to the OPF problem. Combining this with an interval discretization of the nodal variables, we develop an approximation algorithm for the OPF problem. Further, we use techniques from constraint programming (CP) to perform interval computations and adaptive bound propagation to obtain practically efficient algorithms. Compared to previous algorithms that solve OPF with optimality guarantees using convex relaxations, our approach is able to work for arbitrary distribution networks and handle mixed-integer optimization problems. Further, it can be implemented in a distributed message-passing fashion that is scalable and is suitable for \"smart grid\" applications like control of distributed energy resources. We evaluate our technique numerically on several benchmark networks and show that practical OPF problems can be solved effectively using this approach.', 'cs.SY', '2016-06-21T11:04:10Z', 'http://arxiv.org/abs/1606.06512v1', '2016-10-08 10:25:51', '2016-10-08 10:25:51')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (0.7ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 441
  [1m[36mAuthor Load (0.7ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Krishnamurthy Dvijotham'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Krishnamurthy Dvijotham', '2016-10-08 10:25:51', '2016-10-08 10:25:51')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1171, 441, 0, '2016-10-08 10:25:51', '2016-10-08 10:25:51')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.7ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Pascal Van Hentenryck'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Pascal Van Hentenryck', '2016-10-08 10:25:51', '2016-10-08 10:25:51')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1172, 441, 1, '2016-10-08 10:25:51', '2016-10-08 10:25:51')[0m
  [1m[35m (3.0ms)[0m  COMMIT
  [1m[36mAuthor Load (1.2ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Michael Chertkov'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Michael Chertkov', '2016-10-08 10:25:51', '2016-10-08 10:25:51')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1173, 441, 2, '2016-10-08 10:25:51', '2016-10-08 10:25:51')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.1ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Sidhant Misra'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Sidhant Misra', '2016-10-08 10:25:51', '2016-10-08 10:25:51')
  [1m[36m (0.3ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1174, 441, 3, '2016-10-08 10:25:51', '2016-10-08 10:25:51')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.8ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Marc Vuffray'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Marc Vuffray', '2016-10-08 10:25:51', '2016-10-08 10:25:51')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1175, 441, 4, '2016-10-08 10:25:51', '2016-10-08 10:25:51')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.7ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Neighborhood Mixture Model for Knowledge Base Completion'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Neighborhood Mixture Model for Knowledge Base Completion', 'Knowledge bases are useful resources for many natural language processing tasks, however, they are far from complete. In this paper, we define a novel entity representation as a mixture of its neighborhood in the knowledge base and apply this technique on TransE-a well-known embedding model for knowledge base completion. Experimental results show that the neighborhood information significantly helps to improve the results of the TransE, leading to better performance than obtained by other state-of-the-art embedding models on three benchmark datasets for triple classification, entity prediction and relation prediction tasks.', 'cs.CL', '2016-06-21T07:54:35Z', 'http://arxiv.org/abs/1606.06461v2', '2016-10-08 10:25:51', '2016-10-08 10:25:51')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (1.1ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 442
  [1m[36mAuthor Load (0.9ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Dat Quoc Nguyen'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36m (0.1ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1060, 442, 0, '2016-10-08 10:25:51', '2016-10-08 10:25:51')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (0.9ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Kairit Sirts'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36m (0.1ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1061, 442, 1, '2016-10-08 10:25:51', '2016-10-08 10:25:51')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (1.0ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Lizhen Qu'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36m (0.1ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1062, 442, 2, '2016-10-08 10:25:51', '2016-10-08 10:25:51')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (0.9ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Mark Johnson'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36m (0.1ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1063, 442, 3, '2016-10-08 10:25:51', '2016-10-08 10:25:51')[0m
  [1m[35m (0.6ms)[0m  COMMIT
  [1m[36mPaper Load (0.6ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'The Schema Editor of OpenIoT for Semantic Sensor Networks'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('The Schema Editor of OpenIoT for Semantic Sensor Networks', 'Ontologies provide conceptual abstractions over data, in domains such as the Internet of Things, in a way that sensor data can be harvested and interpreted by people and applications. The Semantic Sensor Network (SSN) ontology is the de-facto standard for semantic representation of sensor observations and metadata, and it is used at the core of the open source platform for the Internet of Things, OpenIoT. In this paper we present a Schema Editor that provides an intuitive web interface for defining new types of sensors, and concrete instances of them, using the SSN ontology as the core model. This editor is fully integrated with the OpenIoT platform for generating virtual sensor descriptions and automating their semantic annotation and registration process.', 'cs.AI', '2016-06-21T06:20:22Z', 'http://arxiv.org/abs/1606.06434v1', '2016-10-08 10:25:51', '2016-10-08 10:25:51')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPublish Load (0.8ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 443[0m
  [1m[35mAuthor Load (0.7ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Prem Prakash Jayaraman'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Prem Prakash Jayaraman', '2016-10-08 10:25:51', '2016-10-08 10:25:51')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1176, 443, 0, '2016-10-08 10:25:51', '2016-10-08 10:25:51')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.9ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Jean-Paul Calbimonte'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Jean-Paul Calbimonte', '2016-10-08 10:25:51', '2016-10-08 10:25:51')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1177, 443, 1, '2016-10-08 10:25:51', '2016-10-08 10:25:51')
  [1m[36m (0.3ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.7ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Hoan Nguyen Mau Quoc'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Hoan Nguyen Mau Quoc', '2016-10-08 10:25:51', '2016-10-08 10:25:51')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1178, 443, 2, '2016-10-08 10:25:51', '2016-10-08 10:25:51')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPaper Load (0.6ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Unanimous Prediction for 100% Precision with Application to Learning Semantic Mappings'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Unanimous Prediction for 100% Precision with Application to Learning Semantic Mappings', 'Can we train a system that, on any new input, either says \"don\'t know\" or makes a prediction that is guaranteed to be correct? We answer the question in the affirmative provided our model family is well-specified. Specifically, we introduce the unanimity principle: only predict when all models consistent with the training data predict the same output. We operationalize this principle for semantic parsing, the task of mapping utterances to logical forms. We develop a simple, efficient method that reasons over the infinite set of all consistent models by only checking two of the models. We prove that our method obtains 100% precision even with a modest amount of training data from a possibly adversarial distribution. Empirically, we demonstrate the effectiveness of our approach on the standard GeoQuery dataset.', 'cs.LG', '2016-06-20T23:59:25Z', 'http://arxiv.org/abs/1606.06368v2', '2016-10-08 10:25:51', '2016-10-08 10:25:51')[0m
  [1m[35m (2.9ms)[0m  COMMIT
  [1m[36mPublish Load (1.2ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 444[0m
  [1m[35mAuthor Load (1.0ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Fereshte Khani'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Fereshte Khani', '2016-10-08 10:25:51', '2016-10-08 10:25:51')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.4ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1179, 444, 0, '2016-10-08 10:25:51', '2016-10-08 10:25:51')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (0.9ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Martin Rinard'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Martin Rinard', '2016-10-08 10:25:51', '2016-10-08 10:25:51')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1180, 444, 1, '2016-10-08 10:25:51', '2016-10-08 10:25:51')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.7ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Percy Liang'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35m (0.1ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1159, 444, 2, '2016-10-08 10:25:51', '2016-10-08 10:25:51')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.6ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Complex Embeddings for Simple Link Prediction'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Complex Embeddings for Simple Link Prediction', 'In statistical relational learning, the link prediction problem is key to automatically understand the structure of large knowledge bases. As in previous studies, we propose to solve this problem through latent factorization. However, here we make use of complex valued embeddings. The composition of complex embeddings can handle a large variety of binary relations, among them symmetric and antisymmetric relations. Compared to state-of-the-art models such as Neural Tensor Network and Holographic Embeddings, our approach based on complex embeddings is arguably simpler, as it only uses the Hermitian dot product, the complex counterpart of the standard dot product between real vectors. Our approach is scalable to large datasets as it remains linear in both space and time, while consistently outperforming alternative approaches on standard link prediction benchmarks.', 'cs.AI', '2016-06-20T22:52:48Z', 'http://arxiv.org/abs/1606.06357v1', '2016-10-08 10:25:51', '2016-10-08 10:25:51')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (0.7ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 445
  [1m[36mAuthor Load (0.7ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Théo Trouillon'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Théo Trouillon', '2016-10-08 10:25:51', '2016-10-08 10:25:51')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1181, 445, 0, '2016-10-08 10:25:51', '2016-10-08 10:25:51')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.8ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Johannes Welbl'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Johannes Welbl', '2016-10-08 10:25:51', '2016-10-08 10:25:51')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1182, 445, 1, '2016-10-08 10:25:51', '2016-10-08 10:25:51')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.8ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Sebastian Riedel'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36m (0.1ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1056, 445, 2, '2016-10-08 10:25:51', '2016-10-08 10:25:51')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (1.0ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Éric Gaussier'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Éric Gaussier', '2016-10-08 10:25:51', '2016-10-08 10:25:51')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1183, 445, 3, '2016-10-08 10:25:51', '2016-10-08 10:25:51')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.8ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Guillaume Bouchard'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Guillaume Bouchard', '2016-10-08 10:25:51', '2016-10-08 10:25:51')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1184, 445, 4, '2016-10-08 10:25:51', '2016-10-08 10:25:51')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (0.7ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'A Hierarchical Reinforcement Learning Method for Persistent Time-Sensitive Tasks'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('A Hierarchical Reinforcement Learning Method for Persistent Time-Sensitive Tasks', 'Reinforcement learning has been applied to many interesting problems such as the famous TD-gammon and the inverted helicopter flight. However, little effort has been put into developing methods to learn policies for complex persistent tasks and tasks that are time-sensitive. In this paper, we take a step towards solving this problem by using signal temporal logic (STL) as task specification, and taking advantage of the temporal abstraction feature that the options framework provide. We show via simulation that a relatively easy to implement algorithm that combines STL and options can learn a satisfactory policy with a small number of training cases', 'cs.AI', '2016-06-20T22:43:29Z', 'http://arxiv.org/abs/1606.06355v1', '2016-10-08 10:25:51', '2016-10-08 10:25:51')[0m
  [1m[35m (2.9ms)[0m  COMMIT
  [1m[36mPublish Load (1.2ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 446[0m
  [1m[35mAuthor Load (0.9ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Xiao Li'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Xiao Li', '2016-10-08 10:25:51', '2016-10-08 10:25:51')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1185, 446, 0, '2016-10-08 10:25:51', '2016-10-08 10:25:51')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (0.9ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Calin Belta'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Calin Belta', '2016-10-08 10:25:51', '2016-10-08 10:25:51')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1186, 446, 1, '2016-10-08 10:25:51', '2016-10-08 10:25:51')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.6ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'The Founded Semantics and Constraint Semantics of Logic Rules'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('The Founded Semantics and Constraint Semantics of Logic Rules', 'This paper describes a simple new semantics for logic rules, the founded semantics, and its straightforward extension to another simple new semantics, the constraint semantics. The new semantics support unrestricted negation, as well as unrestricted existential and universal quantifications. They are uniquely expressive and intuitive by allowing assumptions about the predicates and rules to be specified explicitly, are completely declarative and easy to understand, and relate cleanly to prior semantics. In addition, founded semantics can be computed in linear time in the size of the ground program.', 'cs.LO', '2016-06-20T19:48:20Z', 'http://arxiv.org/abs/1606.06269v2', '2016-10-08 10:25:51', '2016-10-08 10:25:51')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (0.7ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 447
  [1m[36mAuthor Load (0.6ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Yanhong A. Liu'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Yanhong A. Liu', '2016-10-08 10:25:51', '2016-10-08 10:25:51')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1187, 447, 0, '2016-10-08 10:25:51', '2016-10-08 10:25:51')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.9ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Scott D. Stoller'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Scott D. Stoller', '2016-10-08 10:25:51', '2016-10-08 10:25:51')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1188, 447, 1, '2016-10-08 10:25:51', '2016-10-08 10:25:51')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (0.6ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Polymetric Rhythmic Feel for a Cognitive Drum Computer'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Polymetric Rhythmic Feel for a Cognitive Drum Computer', 'This paper addresses a question about music cognition: how do we derive polymetric structures. A preference rule system is presented which is implemented into a drum computer. The preference rule system allows inferring local polymetric structures, like two-over-three and three-over-two. By analyzing the micro-timing of West African percussion music a timing pattern consisting of six pulses was discovered. It integrates binary and ternary rhythmic feels. The presented drum computer integrates the discovered superimposed polymetric swing (timing and velocity) appropriate to the rhythmic sequence the user inputs. For binary sequences, the amount of binary swing is increased and for ternary sequences, the ternary swing is increased.', 'cs.SD', '2016-06-20T16:27:12Z', 'http://arxiv.org/abs/1606.06197v2', '2016-10-08 10:25:51', '2016-10-08 10:25:51')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPublish Load (0.7ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 448[0m
  [1m[35mAuthor Load (0.6ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Oliver Weede'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Oliver Weede', '2016-10-08 10:25:51', '2016-10-08 10:25:51')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1189, 448, 0, '2016-10-08 10:25:51', '2016-10-08 10:25:51')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (0.6ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'High Confidence Off-Policy Evaluation with Models'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('High Confidence Off-Policy Evaluation with Models', 'In many reinforcement learning applications executing a poor policy may be costly or even dangerous. Thus, it is desirable to determine confidence interval lower bounds on the performance of any given policy without executing said policy. Current methods for high confidence off-policy evaluation require a substantial amount of data to achieve a tight lower bound, while existing model-based methods only address the problem in discrete state spaces. We propose two bootstrapping approaches combined with learned MDP transition models in order to efficiently estimate lower confidence bounds on policy performance with limited data in both continuous and discrete state spaces. Since direct use of a model may introduce bias, we derive a theoretical upper bound on model bias when we estimate the model transitions with i.i.d. sampled trajectories. This bound can be used to guide selection between the two methods. Finally, we empirically validate the data-efficiency of our proposed methods across three domains and analyze the settings where one method is preferable to the other.', 'cs.AI', '2016-06-20T14:06:22Z', 'http://arxiv.org/abs/1606.06126v1', '2016-10-08 10:25:51', '2016-10-08 10:25:51')[0m
  [1m[35m (3.0ms)[0m  COMMIT
  [1m[36mPublish Load (1.2ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 449[0m
  [1m[35mAuthor Load (1.0ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Josiah P. Hanna'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Josiah P. Hanna', '2016-10-08 10:25:51', '2016-10-08 10:25:51')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1190, 449, 0, '2016-10-08 10:25:51', '2016-10-08 10:25:51')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.9ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Peter Stone'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Peter Stone', '2016-10-08 10:25:51', '2016-10-08 10:25:51')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1191, 449, 1, '2016-10-08 10:25:51', '2016-10-08 10:25:51')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.7ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Scott Niekum'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Scott Niekum', '2016-10-08 10:25:51', '2016-10-08 10:25:51')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.3ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1192, 449, 2, '2016-10-08 10:25:51', '2016-10-08 10:25:51')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (0.7ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Product Classification in E-Commerce using Distributional Semantics'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.4ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Product Classification in E-Commerce using Distributional Semantics', 'Product classification is the task of automatically predicting a taxonomy path for a product in a predefined taxonomy hierarchy given a textual product description or title. For efficient product classification we require a suitable representation for a document (the textual description of a product) feature vector and efficient and fast algorithms for prediction. To address the above challenges, we propose a new distributional semantics representation for document vector formation. We also develop a new two-level ensemble approach utilizing (with respect to the taxonomy tree) a path-wise, node-wise and depth-wise classifiers for error reduction in the final product classification. Our experiments show the effectiveness of the distributional representation and the ensemble approach on data sets from a leading e-commerce platform and achieve better results on various evaluation metrics compared to earlier approaches.', 'cs.AI', '2016-06-20T12:26:21Z', 'http://arxiv.org/abs/1606.06083v2', '2016-10-08 10:25:51', '2016-10-08 10:25:51')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPublish Load (0.9ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 450[0m
  [1m[35mAuthor Load (0.7ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Vivek Gupta'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Vivek Gupta', '2016-10-08 10:25:51', '2016-10-08 10:25:51')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1193, 450, 0, '2016-10-08 10:25:51', '2016-10-08 10:25:51')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.8ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Harish Karnick'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Harish Karnick', '2016-10-08 10:25:51', '2016-10-08 10:25:51')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1194, 450, 1, '2016-10-08 10:25:51', '2016-10-08 10:25:51')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.0ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Ashendra Bansal'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Ashendra Bansal', '2016-10-08 10:25:51', '2016-10-08 10:25:51')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1195, 450, 2, '2016-10-08 10:25:51', '2016-10-08 10:25:51')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.9ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Pradhuman Jhala'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Pradhuman Jhala', '2016-10-08 10:25:51', '2016-10-08 10:25:51')[0m
  [1m[35m (3.0ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.4ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1196, 450, 3, '2016-10-08 10:25:51', '2016-10-08 10:25:51')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.7ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Bandit-Based Random Mutation Hill-Climbing'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Bandit-Based Random Mutation Hill-Climbing', 'The Random Mutation Hill-Climbing algorithm is a direct search technique mostly used in discrete domains. It repeats the process of randomly selecting a neighbour of a best-so-far solution and accepts the neighbour if it is better than or equal to it. In this work, we propose to use a novel method to select the neighbour solution using a set of independent multi- armed bandit-style selection units which results in a bandit-based Random Mutation Hill-Climbing algorithm. The new algorithm significantly outperforms Random Mutation Hill-Climbing in both OneMax (in noise-free and noisy cases) and Royal Road problems (in the noise-free case). The algorithm shows particular promise for discrete optimisation problems where each fitness evaluation is expensive.', 'cs.AI', '2016-06-20T09:53:29Z', 'http://arxiv.org/abs/1606.06041v1', '2016-10-08 10:25:51', '2016-10-08 10:25:51')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (1.0ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 451
  [1m[36mAuthor Load (0.6ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Jialin Liu'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36m (0.1ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (631, 451, 0, '2016-10-08 10:25:51', '2016-10-08 10:25:51')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (0.5ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Diego Peŕez-Liebana'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36m (0.2ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (108, 451, 1, '2016-10-08 10:25:51', '2016-10-08 10:25:51')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.4ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Simon M. Lucas'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36m (0.1ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (109, 451, 2, '2016-10-08 10:25:51', '2016-10-08 10:25:51')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPaper Load (0.6ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'The LAMBADA dataset: Word prediction requiring a broad discourse context'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('The LAMBADA dataset: Word prediction requiring a broad discourse context', 'We introduce LAMBADA, a dataset to evaluate the capabilities of computational models for text understanding by means of a word prediction task. LAMBADA is a collection of narrative passages sharing the characteristic that human subjects are able to guess their last word if they are exposed to the whole passage, but not if they only see the last sentence preceding the target word. To succeed on LAMBADA, computational models cannot simply rely on local context, but must be able to keep track of information in the broader discourse. We show that LAMBADA exemplifies a wide range of linguistic phenomena, and that none of several state-of-the-art language models reaches accuracy above 1% on this novel benchmark. We thus propose LAMBADA as a challenging test set, meant to encourage the development of new models capable of genuine understanding of broad context in natural language text.', 'cs.CL', '2016-06-20T09:37:17Z', 'http://arxiv.org/abs/1606.06031v1', '2016-10-08 10:25:51', '2016-10-08 10:25:51')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPublish Load (0.7ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 452[0m
  [1m[35mAuthor Load (0.7ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Denis Paperno'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Denis Paperno', '2016-10-08 10:25:51', '2016-10-08 10:25:51')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1197, 452, 0, '2016-10-08 10:25:51', '2016-10-08 10:25:51')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.8ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Germán Kruszewski'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Germán Kruszewski', '2016-10-08 10:25:51', '2016-10-08 10:25:51')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1198, 452, 1, '2016-10-08 10:25:51', '2016-10-08 10:25:51')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.7ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Angeliki Lazaridou'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Angeliki Lazaridou', '2016-10-08 10:25:51', '2016-10-08 10:25:51')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1199, 452, 2, '2016-10-08 10:25:51', '2016-10-08 10:25:51')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.7ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Quan Ngoc Pham'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Quan Ngoc Pham', '2016-10-08 10:25:51', '2016-10-08 10:25:51')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.4ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1200, 452, 3, '2016-10-08 10:25:51', '2016-10-08 10:25:51')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.7ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Raffaella Bernardi'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Raffaella Bernardi', '2016-10-08 10:25:51', '2016-10-08 10:25:51')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1201, 452, 4, '2016-10-08 10:25:51', '2016-10-08 10:25:51')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (1.0ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Sandro Pezzelle'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Sandro Pezzelle', '2016-10-08 10:25:51', '2016-10-08 10:25:51')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1202, 452, 5, '2016-10-08 10:25:51', '2016-10-08 10:25:51')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.9ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Marco Baroni'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35m (0.1ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1040, 452, 6, '2016-10-08 10:25:51', '2016-10-08 10:25:51')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.9ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Gemma Boleda'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35m (0.1ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1038, 452, 7, '2016-10-08 10:25:51', '2016-10-08 10:25:51')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.9ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Raquel Fernández'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Raquel Fernández', '2016-10-08 10:25:51', '2016-10-08 10:25:51')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1203, 452, 8, '2016-10-08 10:25:51', '2016-10-08 10:25:51')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (0.6ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'On Reward Function for Survival'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('On Reward Function for Survival', 'Obtaining a survival strategy (policy) is one of the fundamental problems of biological agents. In this paper, we generalize the formulation of previous research related to the survival of an agent and we formulate the survival problem as a maximization of the multi-step survival probability in future time steps. We introduce a method for converting the maximization of multi-step survival probability into a classical reinforcement learning problem. Using this conversion, the reward function (negative temporal cost function) is expressed as the log of the temporal survival probability. And we show that the objective function of the reinforcement learning in this sense is proportional to the variational lower bound of the original problem. Finally, We empirically demonstrate that the agent learns survival behavior by using the reward function introduced in this paper.', 'cs.AI', '2016-06-18T15:33:04Z', 'http://arxiv.org/abs/1606.05767v2', '2016-10-08 10:25:51', '2016-10-08 10:25:51')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPublish Load (1.1ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 453[0m
  [1m[35mAuthor Load (0.7ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Naoto Yoshida'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Naoto Yoshida', '2016-10-08 10:25:51', '2016-10-08 10:25:51')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1204, 453, 0, '2016-10-08 10:25:51', '2016-10-08 10:25:51')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (0.7ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Student performance prediction using classification data mining techniques'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Student performance prediction using classification data mining techniques', 'Students opting engineering as their disciple is increasing rapidly. But due to various factors and inappropriate primary education in India dropout rates are high. Students are unable to excel in core engineering subjects which are complex and mathematical, hence mostly get drop / keep term (kt) in that subject. With the help of data mining techniques we can predict the performance of students in terms of grades and dropout for a subject. This paper compares various techniques such as na\\\"ive Bayes, LibSVM, J48, random forest, and JRip and try to choose one of them as per our needs and their accuracy. Based on the rules obtained from this technique(s), we derive the key factors influencing student performance.', 'cs.LG', '2016-06-18T10:06:44Z', 'http://arxiv.org/abs/1606.05735v1', '2016-10-08 10:25:51', '2016-10-08 10:25:51')[0m
  [1m[35m (3.0ms)[0m  COMMIT
  [1m[36mPublish Load (1.2ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 454[0m
  [1m[35mAuthor Load (1.0ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Muhammed Salman Shamsi'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Muhammed Salman Shamsi', '2016-10-08 10:25:51', '2016-10-08 10:25:51')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1205, 454, 0, '2016-10-08 10:25:51', '2016-10-08 10:25:51')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.8ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Jhansi Lakshmi'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Jhansi Lakshmi', '2016-10-08 10:25:51', '2016-10-08 10:25:51')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1206, 454, 1, '2016-10-08 10:25:51', '2016-10-08 10:25:51')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.6ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'An Efficient Large-scale Semi-supervised Multi-label Classifier Capable of Handling Missing labels'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('An Efficient Large-scale Semi-supervised Multi-label Classifier Capable of Handling Missing labels', 'Multi-label classification has received considerable interest in recent years. Multi-label classifiers have to address many problems including: handling large-scale datasets with many instances and a large set of labels, compensating missing label assignments in the training set, considering correlations between labels, as well as exploiting unlabeled data to improve prediction performance. To tackle datasets with a large set of labels, embedding-based methods have been proposed which seek to represent the label assignments in a low-dimensional space. Many state-of-the-art embedding-based methods use a linear dimensionality reduction to represent the label assignments in a low-dimensional space. However, by doing so, these methods actually neglect the tail labels - labels that are infrequently assigned to instances. We propose an embedding-based method that non-linearly embeds the label vectors using an stochastic approach, thereby predicting the tail labels more accurately. Moreover, the proposed method have excellent mechanisms for handling missing labels, dealing with large-scale datasets, as well as exploiting unlabeled data. With the best of our knowledge, our proposed method is the first multi-label classifier that simultaneously addresses all of the mentioned challenges. Experiments on real-world datasets show that our method outperforms stateof-the-art multi-label classifiers by a large margin, in terms of prediction performance, as well as training time.', 'cs.LG', '2016-06-18T07:49:13Z', 'http://arxiv.org/abs/1606.05725v1', '2016-10-08 10:25:51', '2016-10-08 10:25:51')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (1.1ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 455
  [1m[36mAuthor Load (0.6ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Amirhossein Akbarnejad'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Amirhossein Akbarnejad', '2016-10-08 10:25:51', '2016-10-08 10:25:51')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1207, 455, 0, '2016-10-08 10:25:51', '2016-10-08 10:25:51')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.9ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Mahdieh Soleymani Baghshah'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Mahdieh Soleymani Baghshah', '2016-10-08 10:25:51', '2016-10-08 10:25:51')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1208, 455, 1, '2016-10-08 10:25:51', '2016-10-08 10:25:51')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPaper Load (0.7ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Data-driven HR - Résumé Analysis Based on Natural Language Processing and Machine Learning'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Data-driven HR - Résumé Analysis Based on Natural Language Processing and Machine Learning', 'Recruiters usually spend less than a minute looking at each r\\\'esum\\\'e when deciding whether it\'s worth continuing the recruitment process with the candidate. Recruiters focus on keywords, and it\'s almost impossible to guarantee a fair process of candidate selection. The main scope of this paper is to tackle this issue by introducing a data-driven approach that shows how to process r\\\'esum\\\'es automatically and give recruiters more time to only examine promising candidates. Furthermore, we show how to leverage Machine Learning and Natural Language Processing in order to extract all required information from the r\\\'esum\\\'es. Once the information is extracted, a ranking score is calculated. The score describes how well the candidates fit based on their education, work experience and skills. Later this paper illustrates a prototype application that shows how this novel approach can increase the productivity of recruiters. The application enables them to filter and rank candidates based on predefined job descriptions. Guided by the ranking, recruiters can get deeper insights from candidate profiles and validate why and how the application ranked them. This application shows how to improve the hiring process by giving an unbiased hiring decision support.', 'cs.CL', '2016-06-17T17:52:31Z', 'http://arxiv.org/abs/1606.05611v2', '2016-10-08 10:25:51', '2016-10-08 10:25:51')[0m
  [1m[35m (3.0ms)[0m  COMMIT
  [1m[36mPublish Load (1.2ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 456[0m
  [1m[35mAuthor Load (1.0ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Tim Zimmermann'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Tim Zimmermann', '2016-10-08 10:25:51', '2016-10-08 10:25:51')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1209, 456, 0, '2016-10-08 10:25:51', '2016-10-08 10:25:51')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.8ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Leo Kotschenreuther'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Leo Kotschenreuther', '2016-10-08 10:25:51', '2016-10-08 10:25:51')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1210, 456, 1, '2016-10-08 10:25:51', '2016-10-08 10:25:51')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.8ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Karsten Schmidt'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Karsten Schmidt', '2016-10-08 10:25:51', '2016-10-08 10:25:51')
  [1m[36m (1.6ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1211, 456, 2, '2016-10-08 10:25:51', '2016-10-08 10:25:51')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPaper Load (0.7ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Adding Context to Concept Trees'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Adding Context to Concept Trees', 'Concept Trees are a type of database that can organise arbitrary textual information using a very simple rule. Each tree tries to represent a single cohesive concept and the trees can link with each other for navigation and semantic purposes. The trees are therefore a type of semantic network and would benefit from having a consistent level of context for each of the nodes. The Concept Tree nodes have a mathematical basis allowing for a consistent build process. These would represent nouns or verbs in a text sentence, for example. New to the design can then be lists of descriptive elements for each of the nodes. The descriptors can also be weighted, but do not have to follow the strict counting rule of the tree nodes. With the new descriptive layers, a much richer type of knowledge can be achieved and still reasoned over automatically. The linking structure of the licas network is very relevant to building the concept trees now and forms the basis for their construction. The concept tree - symbolic neural network relation is also extended further.', 'cs.AI', '2016-06-17T17:32:11Z', 'http://arxiv.org/abs/1606.05597v1', '2016-10-08 10:25:51', '2016-10-08 10:25:51')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPublish Load (1.1ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 457[0m
  [1m[35mAuthor Load (0.9ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Kieran Greer'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Kieran Greer', '2016-10-08 10:25:51', '2016-10-08 10:25:51')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1212, 457, 0, '2016-10-08 10:25:51', '2016-10-08 10:25:51')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (0.7ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Introspective Agents: Confidence Measures for General Value Functions'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Introspective Agents: Confidence Measures for General Value Functions', 'Agents of general intelligence deployed in real-world scenarios must adapt to ever-changing environmental conditions. While such adaptive agents may leverage engineered knowledge, they will require the capacity to construct and evaluate knowledge themselves from their own experience in a bottom-up, constructivist fashion. This position paper builds on the idea of encoding knowledge as temporally extended predictions through the use of general value functions. Prior work has focused on learning predictions about externally derived signals about a task or environment (e.g. battery level, joint position). Here we advocate that the agent should also predict internally generated signals regarding its own learning process - for example, an agent\'s confidence in its learned predictions. Finally, we suggest how such information would be beneficial in creating an introspective agent that is able to learn to make good decisions in a complex, changing world.', 'cs.AI', '2016-06-17T17:24:36Z', 'http://arxiv.org/abs/1606.05593v1', '2016-10-08 10:25:51', '2016-10-08 10:25:51')[0m
  [1m[35m (3.0ms)[0m  COMMIT
  [1m[36mPublish Load (1.2ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 458[0m
  [1m[35mAuthor Load (0.9ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Craig Sherstan'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Craig Sherstan', '2016-10-08 10:25:51', '2016-10-08 10:25:51')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1213, 458, 0, '2016-10-08 10:25:51', '2016-10-08 10:25:51')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.6ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Adam White'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36m (0.1ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (967, 458, 1, '2016-10-08 10:25:51', '2016-10-08 10:25:51')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (1.0ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Marlos C. Machado'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Marlos C. Machado', '2016-10-08 10:25:51', '2016-10-08 10:25:51')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1214, 458, 2, '2016-10-08 10:25:51', '2016-10-08 10:25:51')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.7ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Patrick M. Pilarski'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35m (0.1ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1157, 458, 3, '2016-10-08 10:25:51', '2016-10-08 10:25:51')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.6ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Learning Abstract Classes using Deep Learning'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Learning Abstract Classes using Deep Learning', 'Humans are generally good at learning abstract concepts about objects and scenes (e.g.\\ spatial orientation, relative sizes, etc.). Over the last years convolutional neural networks have achieved almost human performance in recognizing concrete classes (i.e.\\ specific object categories). This paper tests the performance of a current CNN (GoogLeNet) on the task of differentiating between abstract classes which are trivially differentiable for humans. We trained and tested the CNN on the two abstract classes of horizontal and vertical orientation and determined how well the network is able to transfer the learned classes to other, previously unseen objects.', 'cs.CV', '2016-06-17T12:51:23Z', 'http://dx.doi.org/10.4108/eai.3-12-2015.2262468', '2016-10-08 10:25:51', '2016-10-08 10:25:51')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (1.0ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 459
  [1m[36mAuthor Load (0.7ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Sebastian Stabinger'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Sebastian Stabinger', '2016-10-08 10:25:51', '2016-10-08 10:25:51')[0m
  [1m[35m (1.9ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1215, 459, 0, '2016-10-08 10:25:51', '2016-10-08 10:25:51')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.0ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Antonio Rodriguez-Sanchez'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Antonio Rodriguez-Sanchez', '2016-10-08 10:25:51', '2016-10-08 10:25:51')
  [1m[36m (0.6ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1216, 459, 1, '2016-10-08 10:25:51', '2016-10-08 10:25:51')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (1.0ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Justus Piater'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Justus Piater', '2016-10-08 10:25:51', '2016-10-08 10:25:51')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1217, 459, 2, '2016-10-08 10:25:51', '2016-10-08 10:25:51')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.7ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Most central or least central? How much modeling decisions influence a node\'s centrality ranking in multiplex networks'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Most central or least central? How much modeling decisions influence a node\'s centrality ranking in multiplex networks', 'To understand a node\'s centrality in a multiplex network, its centrality values in all the layers of the network can be aggregated. This requires a normalization of the values, to allow their meaningful comparison and aggregation over networks with different sizes and orders. The concrete choices of such preprocessing steps like normalization and aggregation are almost never discussed in network analytic papers. In this paper, we show that even sticking to the most simple centrality index (the degree) but using different, classic choices of normalization and aggregation strategies, can turn a node from being among the most central to being among the least central. We present our results by using an aggregation operator which scales between different, classic aggregation strategies based on three multiplex networks. We also introduce a new visualization and characterization of a node\'s sensitivity to the choice of a normalization and aggregation strategy in multiplex networks. The observed high sensitivity of single nodes to the specific choice of aggregation and normalization strategies is of strong importance, especially for all kinds of intelligence-analytic software as it questions the interpretations of the findings.', 'cs.SI', '2016-06-17T10:25:24Z', 'http://arxiv.org/abs/1606.05468v1', '2016-10-08 10:25:51', '2016-10-08 10:25:51')
  [1m[36m (2.9ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (1.2ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 460
  [1m[36mAuthor Load (1.0ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Sude Tavassoli'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Sude Tavassoli', '2016-10-08 10:25:51', '2016-10-08 10:25:51')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1218, 460, 0, '2016-10-08 10:25:51', '2016-10-08 10:25:51')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.8ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Katharina Anna Zweig'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Katharina Anna Zweig', '2016-10-08 10:25:51', '2016-10-08 10:25:51')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1219, 460, 1, '2016-10-08 10:25:51', '2016-10-08 10:25:51')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPaper Load (0.6ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Abducing Compliance of Incomplete Event Logs'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Abducing Compliance of Incomplete Event Logs', 'The capability to store data about business processes execution in so-called Event Logs has brought to the diffusion of tools for the analysis of process executions and for the assessment of the goodness of a process model. Nonetheless, these tools are often very rigid in dealing with with Event Logs that include incomplete information about the process execution. Thus, while the ability of handling incomplete event data is one of the challenges mentioned in the process mining manifesto, the evaluation of compliance of an execution trace still requires an end-to-end complete trace to be performed. This paper exploits the power of abduction to provide a flexible, yet computationally effective, framework to deal with different forms of incompleteness in an Event Log. Moreover it proposes a refinement of the classical notion of compliance into strong and conditional compliance to take into account incomplete logs. Finally, performances evaluation in an experimental setting shows the feasibility of the presented approach.', 'cs.AI', '2016-06-17T08:30:28Z', 'http://arxiv.org/abs/1606.05446v1', '2016-10-08 10:25:51', '2016-10-08 10:25:51')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPublish Load (1.0ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 461[0m
  [1m[35mAuthor Load (0.6ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Federico Chesani'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Federico Chesani', '2016-10-08 10:25:51', '2016-10-08 10:25:51')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1220, 461, 0, '2016-10-08 10:25:51', '2016-10-08 10:25:51')[0m
  [1m[35m (0.3ms)[0m  COMMIT
  [1m[36mAuthor Load (0.7ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Riccardo De Masellis'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Riccardo De Masellis', '2016-10-08 10:25:51', '2016-10-08 10:25:51')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1221, 461, 1, '2016-10-08 10:25:51', '2016-10-08 10:25:51')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.0ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Chiara Di Francescomarino'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Chiara Di Francescomarino', '2016-10-08 10:25:51', '2016-10-08 10:25:51')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1222, 461, 2, '2016-10-08 10:25:51', '2016-10-08 10:25:51')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (0.6ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Chiara Ghidini'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36m (0.1ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (818, 461, 3, '2016-10-08 10:25:51', '2016-10-08 10:25:51')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.8ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Paola Mello'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Paola Mello', '2016-10-08 10:25:51', '2016-10-08 10:25:51')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1223, 461, 4, '2016-10-08 10:25:51', '2016-10-08 10:25:51')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.9ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Marco Montali'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Marco Montali', '2016-10-08 10:25:51', '2016-10-08 10:25:51')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1224, 461, 5, '2016-10-08 10:25:51', '2016-10-08 10:25:51')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.7ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Sergio Tessaris'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Sergio Tessaris', '2016-10-08 10:25:52', '2016-10-08 10:25:52')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1225, 461, 6, '2016-10-08 10:25:52', '2016-10-08 10:25:52')
  [1m[36m (3.0ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (1.1ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Proceedings First International Workshop on Hammers for Type Theories'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.4ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Proceedings First International Workshop on Hammers for Type Theories', 'This volume of EPTCS contains the proceedings of the First Workshop on Hammers for Type Theories (HaTT 2016), held on 1 July 2016 as part of the International Joint Conference on Automated Reasoning (IJCAR 2016) in Coimbra, Portugal. The proceedings contain four regular papers, as well as abstracts of the two invited talks by Pierre Corbineau (Verimag, France) and Aleksy Schubert (University of Warsaw, Poland).', 'cs.LO', '2016-06-17T06:52:32Z', 'http://dx.doi.org/10.4204/EPTCS.210', '2016-10-08 10:25:52', '2016-10-08 10:25:52')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (0.9ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 462
  [1m[36mAuthor Load (0.9ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Jasmin Christian Blanchette'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Jasmin Christian Blanchette', '2016-10-08 10:25:52', '2016-10-08 10:25:52')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1226, 462, 0, '2016-10-08 10:25:52', '2016-10-08 10:25:52')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.8ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Cezary Kaliszyk'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Cezary Kaliszyk', '2016-10-08 10:25:52', '2016-10-08 10:25:52')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1227, 462, 1, '2016-10-08 10:25:52', '2016-10-08 10:25:52')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPaper Load (0.6ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'On the expressive power of deep neural networks'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('On the expressive power of deep neural networks', 'We study the effects of the depth and width of a neural network on its expressive power. Precise theoretical and experimental results are derived in the generic setting of neural networks after random initialization. We find that three different measures of functional expressivity: number of transitions (a measure of non-linearity/complexity), network activation patterns (a new definition with an intrinsic link to hyperplane arrangements in input space) and number of dichotomies, show an exponential dependence on depth but not width. These three measures are related to each other, and, are also directly proportional to a fourth quantity, trajectory length. Most crucially, we show, both theoretically and experimentally, that trajectory length grows exponentially with depth, which is why all three measures display an exponential dependence on depth. These results also suggest that parameters earlier in the network have greater influence over the expressive power of the network. So for any layer, its influence on expressivity is determined by the remaining depth of the network after that layer, which is supported by experiments on fully connected and convolutional networks on MNIST and CIFAR-10.', 'stat.ML', '2016-06-16T19:55:29Z', 'http://arxiv.org/abs/1606.05336v3', '2016-10-08 10:25:52', '2016-10-08 10:25:52')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPublish Load (0.7ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 463[0m
  [1m[35mAuthor Load (0.6ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Maithra Raghu'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Maithra Raghu', '2016-10-08 10:25:52', '2016-10-08 10:25:52')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1228, 463, 0, '2016-10-08 10:25:52', '2016-10-08 10:25:52')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.7ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Ben Poole'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Ben Poole', '2016-10-08 10:25:52', '2016-10-08 10:25:52')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1229, 463, 1, '2016-10-08 10:25:52', '2016-10-08 10:25:52')
  [1m[36m (0.6ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.9ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Jon Kleinberg'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Jon Kleinberg', '2016-10-08 10:25:52', '2016-10-08 10:25:52')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1230, 463, 2, '2016-10-08 10:25:52', '2016-10-08 10:25:52')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.7ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Surya Ganguli'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Surya Ganguli', '2016-10-08 10:25:52', '2016-10-08 10:25:52')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1231, 463, 3, '2016-10-08 10:25:52', '2016-10-08 10:25:52')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.0ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Jascha Sohl-Dickstein'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Jascha Sohl-Dickstein', '2016-10-08 10:25:52', '2016-10-08 10:25:52')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1232, 463, 4, '2016-10-08 10:25:52', '2016-10-08 10:25:52')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (0.6ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Unsupervised Risk Estimation Using Only Conditional Independence Structure'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Unsupervised Risk Estimation Using Only Conditional Independence Structure', 'We show how to estimate a model\'s test error from unlabeled data, on distributions very different from the training distribution, while assuming only that certain conditional independencies are preserved between train and test. We do not need to assume that the optimal predictor is the same between train and test, or that the true distribution lies in any parametric family. We can also efficiently differentiate the error estimate to perform unsupervised discriminative learning. Our technical tool is the method of moments, which allows us to exploit conditional independencies in the absence of a fully-specified model. Our framework encompasses a large family of losses including the log and exponential loss, and extends to structured output settings such as hidden Markov models.', 'cs.LG', '2016-06-16T18:48:51Z', 'http://arxiv.org/abs/1606.05313v1', '2016-10-08 10:25:52', '2016-10-08 10:25:52')[0m
  [1m[35m (3.0ms)[0m  COMMIT
  [1m[36mPublish Load (1.2ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 464[0m
  [1m[35mAuthor Load (0.9ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Jacob Steinhardt'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35m (0.1ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1167, 464, 0, '2016-10-08 10:25:52', '2016-10-08 10:25:52')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.9ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Percy Liang'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35m (0.2ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1159, 464, 1, '2016-10-08 10:25:52', '2016-10-08 10:25:52')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.6ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Successor Features for Transfer in Reinforcement Learning'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Successor Features for Transfer in Reinforcement Learning', 'Transfer in reinforcement learning refers to the notion that generalization should occur not only within a task but also across tasks. Our focus is on transfer where the reward functions vary across tasks while the environment\'s dynamics remain the same. The method we propose rests on two key ideas: \"successor features,\" a value function representation that decouples the dynamics of the environment from the rewards, and \"generalized policy improvement,\" a generalization of dynamic programming\'s policy improvement step that considers a set of policies rather than a single one. Put together, the two ideas lead to an approach that integrates seamlessly within the reinforcement learning framework and allows transfer to take place between tasks without any restriction. The proposed method also provides performance guarantees for the transferred policy even before any learning has taken place. We derive two theorems that set our approach in firm theoretical ground and present experiments that show that it successfully promotes transfer in practice.', 'cs.AI', '2016-06-16T18:45:32Z', 'http://arxiv.org/abs/1606.05312v1', '2016-10-08 10:25:52', '2016-10-08 10:25:52')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (1.1ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 465
  [1m[36mAuthor Load (0.7ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'André Barreto'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('André Barreto', '2016-10-08 10:25:52', '2016-10-08 10:25:52')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1233, 465, 0, '2016-10-08 10:25:52', '2016-10-08 10:25:52')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.8ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Rémi Munos'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Rémi Munos', '2016-10-08 10:25:52', '2016-10-08 10:25:52')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1234, 465, 1, '2016-10-08 10:25:52', '2016-10-08 10:25:52')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.7ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Tom Schaul'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Tom Schaul', '2016-10-08 10:25:52', '2016-10-08 10:25:52')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1235, 465, 2, '2016-10-08 10:25:52', '2016-10-08 10:25:52')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.7ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'David Silver'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('David Silver', '2016-10-08 10:25:52', '2016-10-08 10:25:52')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1236, 465, 3, '2016-10-08 10:25:52', '2016-10-08 10:25:52')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (0.6ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Deep Reinforcement Learning Discovers Internal Models'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Deep Reinforcement Learning Discovers Internal Models', 'Deep Reinforcement Learning (DRL) is a trending field of research, showing great promise in challenging problems such as playing Atari, solving Go and controlling robots. While DRL agents perform well in practice we are still lacking the tools to analayze their performance. In this work we present the Semi-Aggregated MDP (SAMDP) model. A model best suited to describe policies exhibiting both spatial and temporal hierarchies. We describe its advantages for analyzing trained policies over other modeling approaches, and show that under the right state representation, like that of DQN agents, SAMDP can help to identify skills. We detail the automatic process of creating it from recorded trajectories, up to presenting it on t-SNE maps. We explain how to evaluate its fitness and show surprising results indicating high compatibility with the policy at hand. We conclude by showing how using the SAMDP model, an extra performance gain can be squeezed from the agent.', 'cs.AI', '2016-06-16T13:09:16Z', 'http://arxiv.org/abs/1606.05174v1', '2016-10-08 10:25:52', '2016-10-08 10:25:52')[0m
  [1m[35m (3.1ms)[0m  COMMIT
  [1m[36mPublish Load (1.2ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 466[0m
  [1m[35mAuthor Load (1.0ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Nir Baram'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Nir Baram', '2016-10-08 10:25:52', '2016-10-08 10:25:52')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1237, 466, 0, '2016-10-08 10:25:52', '2016-10-08 10:25:52')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.8ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Tom Zahavy'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Tom Zahavy', '2016-10-08 10:25:52', '2016-10-08 10:25:52')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1238, 466, 1, '2016-10-08 10:25:52', '2016-10-08 10:25:52')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.4ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Shie Mannor'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35m (0.2ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (12, 466, 2, '2016-10-08 10:25:52', '2016-10-08 10:25:52')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.7ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Robust Active Perception via Data-association aware Belief Space planning'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Robust Active Perception via Data-association aware Belief Space planning', 'We develop a belief space planning (BSP) approach that advances the state of the art by incorporating reasoning about data association (DA) within planning, while considering additional sources of uncertainty. Existing BSP approaches typically assume data association is given and perfect, an assumption that can be harder to justify while operating, in the presence of localization uncertainty, in ambiguous and perceptually aliased environments. In contrast, our data association aware belief space planning (DA-BSP) approach explicitly reasons about DA within belief evolution, and as such can better accommodate these challenging real world scenarios. In particular, we show that due to perceptual aliasing, the posterior belief becomes a mixture of probability distribution functions, and design cost functions that measure the expected level of ambiguity and posterior uncertainty. Using these and standard costs (e.g.~control penalty, distance to goal) within the objective function, yields a general framework that reliably represents action impact, and in particular, capable of active disambiguation. Our approach is thus applicable to robust active perception and autonomous navigation in perceptually aliased environments. We demonstrate key aspects in basic and realistic simulations.', 'cs.RO', '2016-06-16T10:22:04Z', 'http://arxiv.org/abs/1606.05124v1', '2016-10-08 10:25:52', '2016-10-08 10:25:52')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (0.8ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 467
  [1m[36mAuthor Load (0.7ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Shashank Pathak'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Shashank Pathak', '2016-10-08 10:25:52', '2016-10-08 10:25:52')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1239, 467, 0, '2016-10-08 10:25:52', '2016-10-08 10:25:52')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.7ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Antony Thomas'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Antony Thomas', '2016-10-08 10:25:52', '2016-10-08 10:25:52')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1240, 467, 1, '2016-10-08 10:25:52', '2016-10-08 10:25:52')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (1.0ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Asaf Feniger'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Asaf Feniger', '2016-10-08 10:25:52', '2016-10-08 10:25:52')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1241, 467, 2, '2016-10-08 10:25:52', '2016-10-08 10:25:52')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.7ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Vadim Indelman'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Vadim Indelman', '2016-10-08 10:25:52', '2016-10-08 10:25:52')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1242, 467, 3, '2016-10-08 10:25:52', '2016-10-08 10:25:52')[0m
  [1m[35m (0.9ms)[0m  COMMIT
  [1m[36mPaper Load (0.7ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Assessing Human Error Against a Benchmark of Perfection'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Assessing Human Error Against a Benchmark of Perfection', 'An increasing number of domains are providing us with detailed trace data on human decisions in settings where we can evaluate the quality of these decisions via an algorithm. Motivated by this development, an emerging line of work has begun to consider whether we can characterize and predict the kinds of decisions where people are likely to make errors. To investigate what a general framework for human error prediction might look like, we focus on a model system with a rich history in the behavioral sciences: the decisions made by chess players as they select moves in a game. We carry out our analysis at a large scale, employing datasets with several million recorded games, and using chess tablebases to acquire a form of ground truth for a subset of chess positions that have been completely solved by computers but remain challenging even for the best players in the world. We organize our analysis around three categories of features that we argue are present in most settings where the analysis of human error is applicable: the skill of the decision-maker, the time available to make the decision, and the inherent difficulty of the decision. We identify rich structure in all three of these categories of features, and find strong evidence that in our domain, features describing the inherent difficulty of an instance are significantly more powerful than features based on skill or time.', 'cs.AI', '2016-06-15T20:00:32Z', 'http://dx.doi.org/10.1145/2939672.2939803', '2016-10-08 10:25:52', '2016-10-08 10:25:52')[0m
  [1m[35m (3.0ms)[0m  COMMIT
  [1m[36mPublish Load (1.2ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 468[0m
  [1m[35mAuthor Load (1.0ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Ashton Anderson'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Ashton Anderson', '2016-10-08 10:25:52', '2016-10-08 10:25:52')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1243, 468, 0, '2016-10-08 10:25:52', '2016-10-08 10:25:52')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.8ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Jon Kleinberg'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36m (0.1ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1230, 468, 1, '2016-10-08 10:25:52', '2016-10-08 10:25:52')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (1.0ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Sendhil Mullainathan'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Sendhil Mullainathan', '2016-10-08 10:25:52', '2016-10-08 10:25:52')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1244, 468, 2, '2016-10-08 10:25:52', '2016-10-08 10:25:52')
  [1m[36m (1.7ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.8ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Safe Exploration in Finite Markov Decision Processes with Gaussian Processes'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Safe Exploration in Finite Markov Decision Processes with Gaussian Processes', 'In classical reinforcement learning, when exploring an environment, agents accept arbitrary short term loss for long term gain. This is infeasible for safety critical applications, such as robotics, where even a single unsafe action may cause system failure. In this paper, we address the problem of safely exploring finite Markov decision processes (MDP). We define safety in terms of an, a priori unknown, safety constraint that depends on states and actions. We aim to explore the MDP under this constraint, assuming that the unknown function satisfies regularity conditions expressed via a Gaussian process prior. We develop a novel algorithm for this task and prove that it is able to completely explore the safely reachable part of the MDP without violating the safety constraint. To achieve this, it cautiously explores safe states and actions in order to gain statistical confidence about the safety of unvisited state-action pairs from noisy observations collected while navigating the environment. Moreover, the algorithm explicitly considers reachability when exploring the MDP, ensuring that it does not get stuck in any state with no safe way out. We demonstrate our method on digital terrain models for the task of exploring an unknown map with a rover.', 'cs.LG', '2016-06-15T13:18:30Z', 'http://arxiv.org/abs/1606.04753v1', '2016-10-08 10:25:52', '2016-10-08 10:25:52')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (0.8ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 469
  [1m[36mAuthor Load (0.7ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Matteo Turchetta'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Matteo Turchetta', '2016-10-08 10:25:52', '2016-10-08 10:25:52')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1245, 469, 0, '2016-10-08 10:25:52', '2016-10-08 10:25:52')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.9ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Felix Berkenkamp'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Felix Berkenkamp', '2016-10-08 10:25:52', '2016-10-08 10:25:52')
  [1m[36m (3.0ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1246, 469, 1, '2016-10-08 10:25:52', '2016-10-08 10:25:52')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.9ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Andreas Krause'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Andreas Krause', '2016-10-08 10:25:52', '2016-10-08 10:25:52')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1247, 469, 2, '2016-10-08 10:25:52', '2016-10-08 10:25:52')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.6ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Strategic Attentive Writer for Learning Macro-Actions'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Strategic Attentive Writer for Learning Macro-Actions', 'We present a novel deep recurrent neural network architecture that learns to build implicit plans in an end-to-end manner by purely interacting with an environment in reinforcement learning setting. The network builds an internal plan, which is continuously updated upon observation of the next input from the environment. It can also partition this internal representation into contiguous sub- sequences by learning for how long the plan can be committed to - i.e. followed without re-planing. Combining these properties, the proposed model, dubbed STRategic Attentive Writer (STRAW) can learn high-level, temporally abstracted macro- actions of varying lengths that are solely learnt from data without any prior information. These macro-actions enable both structured exploration and economic computation. We experimentally demonstrate that STRAW delivers strong improvements on several ATARI games by employing temporally extended planning strategies (e.g. Ms. Pacman and Frostbite). It is at the same time a general algorithm that can be applied on any sequence data. To that end, we also show that when trained on text prediction task, STRAW naturally predicts frequent n-grams (instead of macro-actions), demonstrating the generality of the approach.', 'cs.AI', '2016-06-15T09:28:52Z', 'http://arxiv.org/abs/1606.04695v1', '2016-10-08 10:25:52', '2016-10-08 10:25:52')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (0.8ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 470
  [1m[36mAuthor Load (0.8ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = ' Alexander'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES (' Alexander', '2016-10-08 10:25:52', '2016-10-08 10:25:52')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1248, 470, 0, '2016-10-08 10:25:52', '2016-10-08 10:25:52')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.0ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = ' Vezhnevets'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES (' Vezhnevets', '2016-10-08 10:25:52', '2016-10-08 10:25:52')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1249, 470, 1, '2016-10-08 10:25:52', '2016-10-08 10:25:52')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (1.1ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Volodymyr Mnih'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Volodymyr Mnih', '2016-10-08 10:25:52', '2016-10-08 10:25:52')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1250, 470, 2, '2016-10-08 10:25:52', '2016-10-08 10:25:52')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.0ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'John Agapiou'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('John Agapiou', '2016-10-08 10:25:52', '2016-10-08 10:25:52')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.3ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1251, 470, 3, '2016-10-08 10:25:52', '2016-10-08 10:25:52')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.8ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Simon Osindero'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Simon Osindero', '2016-10-08 10:25:52', '2016-10-08 10:25:52')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1252, 470, 4, '2016-10-08 10:25:52', '2016-10-08 10:25:52')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.8ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Alex Graves'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Alex Graves', '2016-10-08 10:25:52', '2016-10-08 10:25:52')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1253, 470, 5, '2016-10-08 10:25:52', '2016-10-08 10:25:52')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (1.1ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Oriol Vinyals'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Oriol Vinyals', '2016-10-08 10:25:52', '2016-10-08 10:25:52')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1254, 470, 6, '2016-10-08 10:25:52', '2016-10-08 10:25:52')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.0ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Koray Kavukcuoglu'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Koray Kavukcuoglu', '2016-10-08 10:25:52', '2016-10-08 10:25:52')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1255, 470, 7, '2016-10-08 10:25:52', '2016-10-08 10:25:52')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (0.6ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Natural Language Generation as Planning under Uncertainty Using Reinforcement Learning'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Natural Language Generation as Planning under Uncertainty Using Reinforcement Learning', 'We present and evaluate a new model for Natural Language Generation (NLG) in Spoken Dialogue Systems, based on statistical planning, given noisy feedback from the current generation context (e.g. a user and a surface realiser). We study its use in a standard NLG problem: how to present information (in this case a set of search results) to users, given the complex trade- offs between utterance length, amount of information conveyed, and cognitive load. We set these trade-offs by analysing existing MATCH data. We then train a NLG pol- icy using Reinforcement Learning (RL), which adapts its behaviour to noisy feed- back from the current generation context. This policy is compared to several base- lines derived from previous work in this area. The learned policy significantly out- performs all the prior approaches.', 'cs.CL', '2016-06-15T09:05:56Z', 'http://arxiv.org/abs/1606.04686v1', '2016-10-08 10:25:52', '2016-10-08 10:25:52')[0m
  [1m[35m (3.0ms)[0m  COMMIT
  [1m[36mPublish Load (1.2ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 471[0m
  [1m[35mAuthor Load (1.0ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Verena Rieser'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Verena Rieser', '2016-10-08 10:25:52', '2016-10-08 10:25:52')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1256, 471, 0, '2016-10-08 10:25:52', '2016-10-08 10:25:52')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (1.0ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Oliver Lemon'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Oliver Lemon', '2016-10-08 10:25:52', '2016-10-08 10:25:52')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1257, 471, 1, '2016-10-08 10:25:52', '2016-10-08 10:25:52')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.6ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Deep Reinforcement Learning With Macro-Actions'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Deep Reinforcement Learning With Macro-Actions', 'Deep reinforcement learning has been shown to be a powerful framework for learning policies from complex high-dimensional sensory inputs to actions in complex tasks, such as the Atari domain. In this paper, we explore output representation modeling in the form of temporal abstraction to improve convergence and reliability of deep reinforcement learning approaches. We concentrate on macro-actions, and evaluate these on different Atari 2600 games, where we show that they yield significant improvements in learning speed. Additionally, we show that they can even achieve better scores than DQN. We offer analysis and explanation for both convergence and final results, revealing a problem deep RL approaches have with sparse reward signals.', 'cs.LG', '2016-06-15T01:57:40Z', 'http://arxiv.org/abs/1606.04615v1', '2016-10-08 10:25:52', '2016-10-08 10:25:52')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (0.8ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 472
  [1m[36mAuthor Load (0.7ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Ishan P. Durugkar'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Ishan P. Durugkar', '2016-10-08 10:25:52', '2016-10-08 10:25:52')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1258, 472, 0, '2016-10-08 10:25:52', '2016-10-08 10:25:52')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.7ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Clemens Rosenbaum'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Clemens Rosenbaum', '2016-10-08 10:25:52', '2016-10-08 10:25:52')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1259, 472, 1, '2016-10-08 10:25:52', '2016-10-08 10:25:52')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.7ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Stefan Dernbach'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Stefan Dernbach', '2016-10-08 10:25:52', '2016-10-08 10:25:52')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1260, 472, 2, '2016-10-08 10:25:52', '2016-10-08 10:25:52')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.8ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Sridhar Mahadevan'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Sridhar Mahadevan', '2016-10-08 10:25:52', '2016-10-08 10:25:52')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1261, 472, 3, '2016-10-08 10:25:52', '2016-10-08 10:25:52')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (0.6ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Impossibility in Belief Merging'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Impossibility in Belief Merging', 'With the aim of studying social properties of belief merging and having a better understanding of impossibility, we extend in three ways the framework of logic-based merging introduced by Konieczny and Pino P\\\'erez. First, at the level of representation of the information, we pass from belief bases to complex epistemic states. Second, the profiles are represented as functions of finite societies to the set of epistemic states (a sort of vectors) and not as multisets of epistemic states. Third, we extend the set of rational postulates in order to consider the epistemic versions of the classical postulates of Social Choice Theory: Standard Domain, Pareto Property, Independence of Irrelevant Alternatives and Absence of Dictator. These epistemic versions of social postulates are given, essentially, in terms of the finite propositional logic. We state some representation theorems for these operators. These extensions and representation theorems allow us to establish an epistemic and very general version of Arrow\'s Impossibility Theorem. One of the interesting features of our result, is that it holds for different representations of epistemic states; for instance conditionals, Ordinal Conditional functions and, of course, total preorders.', 'cs.AI', '2016-06-14T23:05:39Z', 'http://arxiv.org/abs/1606.04589v1', '2016-10-08 10:25:52', '2016-10-08 10:25:52')[0m
  [1m[35m (2.9ms)[0m  COMMIT
  [1m[36mPublish Load (1.2ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 473[0m
  [1m[35mAuthor Load (0.9ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Amílcar Mata Díaz'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Amílcar Mata Díaz', '2016-10-08 10:25:52', '2016-10-08 10:25:52')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1262, 473, 0, '2016-10-08 10:25:52', '2016-10-08 10:25:52')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (1.0ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Ramón Pino Pérez'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Ramón Pino Pérez', '2016-10-08 10:25:52', '2016-10-08 10:25:52')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1263, 473, 1, '2016-10-08 10:25:52', '2016-10-08 10:25:52')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.7ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Why is Compiling Lifted Inference into a Low-Level Language so Effective?'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Why is Compiling Lifted Inference into a Low-Level Language so Effective?', 'First-order knowledge compilation techniques have proven efficient for lifted inference. They compile a relational probability model into a target circuit on which many inference queries can be answered efficiently. Early methods used data structures as their target circuit. In our KR-2016 paper, we showed that compiling to a low-level program instead of a data structure offers orders of magnitude speedup, resulting in the state-of-the-art lifted inference technique. In this paper, we conduct experiments to address two questions regarding our KR-2016 results: 1- does the speedup come from more efficient compilation or more efficient reasoning with the target circuit?, and 2- why are low-level programs more efficient target circuits than data structures?', 'cs.AI', '2016-06-14T19:13:30Z', 'http://arxiv.org/abs/1606.04512v1', '2016-10-08 10:25:52', '2016-10-08 10:25:52')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (0.8ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 474
  [1m[36mAuthor Load (0.6ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Seyed Mehran Kazemi'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36m (0.1ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1047, 474, 0, '2016-10-08 10:25:52', '2016-10-08 10:25:52')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.8ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'David Poole'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36m (0.1ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.4ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1048, 474, 1, '2016-10-08 10:25:52', '2016-10-08 10:25:52')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPaper Load (0.7ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Lifted Convex Quadratic Programming'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Lifted Convex Quadratic Programming', 'Symmetry is the essential element of lifted inference that has recently demon- strated the possibility to perform very efficient inference in highly-connected, but symmetric probabilistic models models. This raises the question, whether this holds for optimisation problems in general. Here we show that for a large class of optimisation methods this is actually the case. More precisely, we introduce the concept of fractional symmetries of convex quadratic programs (QPs), which lie at the heart of many machine learning approaches, and exploit it to lift, i.e., to compress QPs. These lifted QPs can then be tackled with the usual optimization toolbox (off-the-shelf solvers, cutting plane algorithms, stochastic gradients etc.). If the original QP exhibits symmetry, then the lifted one will generally be more compact, and hence their optimization is likely to be more efficient.', 'cs.AI', '2016-06-14T18:18:58Z', 'http://arxiv.org/abs/1606.04486v1', '2016-10-08 10:25:52', '2016-10-08 10:25:52')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPublish Load (0.9ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 475[0m
  [1m[35mAuthor Load (0.7ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Martin Mladenov'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Martin Mladenov', '2016-10-08 10:25:52', '2016-10-08 10:25:52')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1264, 475, 0, '2016-10-08 10:25:52', '2016-10-08 10:25:52')[0m
  [1m[35m (3.0ms)[0m  COMMIT
  [1m[36mAuthor Load (1.3ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Leonard Kleinhans'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Leonard Kleinhans', '2016-10-08 10:25:52', '2016-10-08 10:25:52')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1265, 475, 1, '2016-10-08 10:25:52', '2016-10-08 10:25:52')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.9ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Kristian Kersting'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Kristian Kersting', '2016-10-08 10:25:52', '2016-10-08 10:25:52')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1266, 475, 2, '2016-10-08 10:25:52', '2016-10-08 10:25:52')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPaper Load (0.8ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'DeepMath - Deep Sequence Models for Premise Selection'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('DeepMath - Deep Sequence Models for Premise Selection', 'We study the effectiveness of neural sequence models for premise selection in automated theorem proving, one of the main bottlenecks in the formalization of mathematics. We propose a two stage approach for this task that yields good results for the premise selection task on the Mizar corpus while avoiding the hand-engineered features of existing state-of-the-art models. To our knowledge, this is the first time deep learning has been applied to theorem proving.', 'cs.AI', '2016-06-14T16:27:41Z', 'http://arxiv.org/abs/1606.04442v1', '2016-10-08 10:25:52', '2016-10-08 10:25:52')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPublish Load (1.0ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 476[0m
  [1m[35mAuthor Load (1.0ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Alex A. Alemi'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Alex A. Alemi', '2016-10-08 10:25:52', '2016-10-08 10:25:52')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1267, 476, 0, '2016-10-08 10:25:52', '2016-10-08 10:25:52')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.7ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Francois Chollet'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Francois Chollet', '2016-10-08 10:25:52', '2016-10-08 10:25:52')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1268, 476, 1, '2016-10-08 10:25:52', '2016-10-08 10:25:52')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.9ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Geoffrey Irving'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Geoffrey Irving', '2016-10-08 10:25:52', '2016-10-08 10:25:52')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1269, 476, 2, '2016-10-08 10:25:52', '2016-10-08 10:25:52')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (1.0ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Christian Szegedy'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Christian Szegedy', '2016-10-08 10:25:52', '2016-10-08 10:25:52')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1270, 476, 3, '2016-10-08 10:25:52', '2016-10-08 10:25:52')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.9ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Josef Urban'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Josef Urban', '2016-10-08 10:25:52', '2016-10-08 10:25:52')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1271, 476, 4, '2016-10-08 10:25:52', '2016-10-08 10:25:52')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (0.6ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Logic Tensor Networks: Deep Learning and Logical Reasoning from Data and Knowledge'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Logic Tensor Networks: Deep Learning and Logical Reasoning from Data and Knowledge', 'We propose Logic Tensor Networks: a uniform framework for integrating automatic learning and reasoning. A logic formalism called Real Logic is defined on a first-order language whereby formulas have truth-value in the interval [0,1] and semantics defined concretely on the domain of real numbers. Logical constants are interpreted as feature vectors of real numbers. Real Logic promotes a well-founded integration of deductive reasoning on a knowledge-base and efficient data-driven relational machine learning. We show how Real Logic can be implemented in deep Tensor Neural Networks with the use of Google\'s tensorflow primitives. The paper concludes with experiments applying Logic Tensor Networks on a simple but representative example of knowledge completion.', 'cs.AI', '2016-06-14T15:25:28Z', 'http://arxiv.org/abs/1606.04422v2', '2016-10-08 10:25:52', '2016-10-08 10:25:52')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPublish Load (1.0ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 477[0m
  [1m[35mAuthor Load (0.7ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Luciano Serafini'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Luciano Serafini', '2016-10-08 10:25:52', '2016-10-08 10:25:52')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1272, 477, 0, '2016-10-08 10:25:52', '2016-10-08 10:25:52')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.8ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Artur d\'Avila Garcez'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Artur d\'Avila Garcez', '2016-10-08 10:25:52', '2016-10-08 10:25:52')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1273, 477, 1, '2016-10-08 10:25:52', '2016-10-08 10:25:52')
  [1m[36m (2.9ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.9ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'The Parallel Knowledge Gradient Method for Batch Bayesian Optimization'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('The Parallel Knowledge Gradient Method for Batch Bayesian Optimization', 'In many applications of black-box optimization, one can evaluate multiple points simultaneously, e.g. when evaluating the performances of several different neural network architectures in a parallel computing environment. In this paper, we develop a novel batch Bayesian optimization algorithm --- the parallel knowledge gradient method. By construction, this method provides the one-step Bayes optimal batch of points to sample. We provide an efficient strategy for computing this Bayes-optimal batch of points, and we demonstrate that the parallel knowledge gradient method finds global optima significantly faster than previous batch Bayesian optimization algorithms on both synthetic test functions and when tuning hyperparameters of practical machine learning algorithms, especially when function evaluations are noisy.', 'stat.ML', '2016-06-14T15:12:01Z', 'http://arxiv.org/abs/1606.04414v1', '2016-10-08 10:25:52', '2016-10-08 10:25:52')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (1.2ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 478
  [1m[36mAuthor Load (0.7ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Jian Wu'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Jian Wu', '2016-10-08 10:25:52', '2016-10-08 10:25:52')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1274, 478, 0, '2016-10-08 10:25:52', '2016-10-08 10:25:52')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.0ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Peter I. Frazier'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Peter I. Frazier', '2016-10-08 10:25:52', '2016-10-08 10:25:52')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1275, 478, 1, '2016-10-08 10:25:52', '2016-10-08 10:25:52')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (0.7ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Relating Strong Spatial Cognition to Symbolic Problem Solving --- An Example'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Relating Strong Spatial Cognition to Symbolic Problem Solving --- An Example', 'In this note, we discuss and analyse a shortest path finding approach using strong spatial cognition. It is compared with a symbolic graph-based algorithm and it is shown that both approaches are similar with respect to structure and complexity. Nevertheless, the strong spatial cognition solution is easy to understand and even pops up immediately when one has to solve the problem.', 'cs.AI', '2016-06-14T14:41:24Z', 'http://arxiv.org/abs/1606.04397v1', '2016-10-08 10:25:52', '2016-10-08 10:25:52')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPublish Load (0.7ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 479[0m
  [1m[35mAuthor Load (0.7ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Ulrich Furbach'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Ulrich Furbach', '2016-10-08 10:25:52', '2016-10-08 10:25:52')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1276, 479, 0, '2016-10-08 10:25:52', '2016-10-08 10:25:52')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.8ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Florian Furbach'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Florian Furbach', '2016-10-08 10:25:52', '2016-10-08 10:25:52')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1277, 479, 1, '2016-10-08 10:25:52', '2016-10-08 10:25:52')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.0ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Christian Freksa'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Christian Freksa', '2016-10-08 10:25:52', '2016-10-08 10:25:52')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1278, 479, 2, '2016-10-08 10:25:52', '2016-10-08 10:25:52')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPaper Load (0.7ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Digits that are not: Generating new types through deep neural nets'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Digits that are not: Generating new types through deep neural nets', 'For an artificial creative agent, an essential driver of the search for novelty is a value function which is often provided by the system designer or users. We argue that an important barrier for progress in creativity research is the inability of these systems to develop their own notion of value for novelty. We propose a notion of knowledge-driven creativity that circumvent the need for an externally imposed value function, allowing the system to explore based on what it has learned from a set of referential objects. The concept is illustrated by a specific knowledge model provided by a deep generative autoencoder. Using the described system, we train a knowledge model on a set of digit images and we use the same model to build coherent sets of new digits that do not belong to known digit types.', 'cs.AI', '2016-06-14T13:29:13Z', 'http://arxiv.org/abs/1606.04345v1', '2016-10-08 10:25:52', '2016-10-08 10:25:52')[0m
  [1m[35m (3.0ms)[0m  COMMIT
  [1m[36mPublish Load (1.3ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 480[0m
  [1m[35mAuthor Load (1.0ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Akın Kazakçıand Mehdi Cherti'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Akın Kazakçıand Mehdi Cherti', '2016-10-08 10:25:52', '2016-10-08 10:25:52')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1279, 480, 0, '2016-10-08 10:25:52', '2016-10-08 10:25:52')[0m
  [1m[35m (1.9ms)[0m  COMMIT
  [1m[36mAuthor Load (1.2ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Balázs Kégl'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Balázs Kégl', '2016-10-08 10:25:52', '2016-10-08 10:25:52')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.4ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1280, 480, 1, '2016-10-08 10:25:52', '2016-10-08 10:25:52')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.7ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Entropy/IP: Uncovering Structure in IPv6 Addresses'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Entropy/IP: Uncovering Structure in IPv6 Addresses', 'In this paper, we introduce Entropy/IP: a system that discovers Internet address structure based on analyses of a subset of IPv6 addresses known to be active, i.e., training data, gleaned by readily available passive and active means. The system is completely automated and employs a combination of information-theoretic and machine learning techniques to probabilistically model IPv6 addresses. We present results showing that our system is effective in exposing structural characteristics of portions of the IPv6 Internet address space populated by active client, service, and router addresses. In addition to visualizing the address structure for exploration, the system uses its models to generate candidate target addresses for scanning. For each of 15 evaluated datasets, we train on 1K addresses and generate 1M candidates for scanning. We achieve some success in 14 datasets, finding up to 40% of the generated addresses to be active. In 11 of these datasets, we find active network identifiers (e.g., /64 prefixes or `subnets\') not seen in training. Thus, we provide the first evidence that it is practical to discover subnets and hosts by scanning probabilistically selected areas of the IPv6 address space not known to contain active hosts a priori.', 'cs.NI', '2016-06-14T12:38:26Z', 'http://arxiv.org/abs/1606.04327v1', '2016-10-08 10:25:52', '2016-10-08 10:25:52')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (0.9ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 481
  [1m[36mAuthor Load (0.7ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Pawel Foremski'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Pawel Foremski', '2016-10-08 10:25:52', '2016-10-08 10:25:52')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1281, 481, 0, '2016-10-08 10:25:52', '2016-10-08 10:25:52')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.9ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'David Plonka'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('David Plonka', '2016-10-08 10:25:52', '2016-10-08 10:25:52')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1282, 481, 1, '2016-10-08 10:25:52', '2016-10-08 10:25:52')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.9ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Arthur Berger'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Arthur Berger', '2016-10-08 10:25:52', '2016-10-08 10:25:52')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1283, 481, 2, '2016-10-08 10:25:52', '2016-10-08 10:25:52')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.6ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Experimental and causal view on information integration in autonomous agents'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Experimental and causal view on information integration in autonomous agents', 'The amount of digitally available but heterogeneous information about the world is remarkable, and new technologies such as self-driving cars, smart homes, or the internet of things may further increase it. In this paper we examine certain aspects of the problem of how such heterogeneous information can be harnessed by autonomous agents. After discussing potentials and limitations of some existing approaches, we investigate how \\emph{experiments} can help to obtain a better understanding of the problem. Specifically, we present a simple agent that integrates video data from a different agent, and implement and evaluate a version of it on the novel experimentation platform \\emph{Malmo}. The focus of a second investigation is on how information about the hardware of different agents, the agents\' sensory data, and \\emph{causal} information can be utilized for knowledge transfer between agents and subsequently more data-efficient decision making. Finally, we discuss potential future steps w.r.t.\\ theory and experimentation, and formulate open questions.', 'cs.AI', '2016-06-14T08:38:18Z', 'http://arxiv.org/abs/1606.04250v2', '2016-10-08 10:25:52', '2016-10-08 10:25:52')
  [1m[36m (2.9ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (1.2ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 482
  [1m[36mAuthor Load (1.0ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Philipp Geiger'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Philipp Geiger', '2016-10-08 10:25:52', '2016-10-08 10:25:52')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1284, 482, 0, '2016-10-08 10:25:52', '2016-10-08 10:25:52')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.9ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Katja Hofmann'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Katja Hofmann', '2016-10-08 10:25:52', '2016-10-08 10:25:52')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1285, 482, 1, '2016-10-08 10:25:52', '2016-10-08 10:25:52')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (1.0ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Bernhard Schölkopf'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Bernhard Schölkopf', '2016-10-08 10:25:52', '2016-10-08 10:25:52')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1286, 482, 2, '2016-10-08 10:25:52', '2016-10-08 10:25:52')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.7ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Spreadsheet Probabilistic Programming'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.4ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Spreadsheet Probabilistic Programming', 'Spreadsheet workbook contents are simple programs. Because of this, probabilistic programming techniques can be used to perform Bayesian inversion of spreadsheet computations. What is more, existing execution engines in spreadsheet applications such as Microsoft Excel can be made to do this using only built-in functionality. We demonstrate this by developing a native Excel implementation of both a particle Markov Chain Monte Carlo variant and black-box variational inference for spreadsheet probabilistic programming. The resulting engine performs probabilistically coherent inference over spreadsheet computations, notably including spreadsheets that include user-defined black-box functions. Spreadsheet engines that choose to integrate the functionality we describe in this paper will give their users the ability to both easily develop probabilistic models and maintain them over time by including actuals via a simple user-interface mechanism. For spreadsheet end-users this would mean having access to efficient and probabilistically coherent probabilistic modeling and inference for use in all kinds of decision making under uncertainty.', 'cs.AI', '2016-06-14T07:01:00Z', 'http://arxiv.org/abs/1606.04216v1', '2016-10-08 10:25:52', '2016-10-08 10:25:52')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (0.9ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 483
  [1m[36mAuthor Load (0.8ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Mike Wu'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Mike Wu', '2016-10-08 10:25:52', '2016-10-08 10:25:52')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1287, 483, 0, '2016-10-08 10:25:52', '2016-10-08 10:25:52')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.0ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Yura Perov'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Yura Perov', '2016-10-08 10:25:52', '2016-10-08 10:25:52')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1288, 483, 1, '2016-10-08 10:25:52', '2016-10-08 10:25:52')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (0.8ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Frank Wood'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Frank Wood', '2016-10-08 10:25:52', '2016-10-08 10:25:52')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1289, 483, 2, '2016-10-08 10:25:52', '2016-10-08 10:25:52')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.1ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Hongseok Yang'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Hongseok Yang', '2016-10-08 10:25:52', '2016-10-08 10:25:52')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1290, 483, 3, '2016-10-08 10:25:52', '2016-10-08 10:25:52')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPaper Load (0.8ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Micro-interventions in urban transport from pattern discovery on the flow of passengers and on the bus network'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Micro-interventions in urban transport from pattern discovery on the flow of passengers and on the bus network', 'In this paper, we describe a case study in a big metropolis, in which from data collected by digital sensors, we tried to understand mobility patterns of persons using buses and how this can generate knowledge to suggest interventions that are applied incrementally into the transportation network in use. We have first estimated an Origin-Destination matrix of buses users from datasets about the ticket validation and GPS positioning of buses. Then we represent the supply of buses with their routes through bus stops as a complex network, which allowed us to understand the bottlenecks of the current scenario and, in particular, applying community discovery techniques, to identify clusters that the service supply infrastructure has. Finally, from the superimposing of the flow of people represented in the OriginDestination matrix in the supply network, we exemplify how micro-interventions can be prospected by means of an example of the introduction of express routes.', 'cs.AI', '2016-06-14T01:44:16Z', 'http://arxiv.org/abs/1606.04190v1', '2016-10-08 10:25:52', '2016-10-08 10:25:52')[0m
  [1m[35m (2.9ms)[0m  COMMIT
  [1m[36mPublish Load (1.3ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 484[0m
  [1m[35mAuthor Load (0.9ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Carlos Caminha'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Carlos Caminha', '2016-10-08 10:25:52', '2016-10-08 10:25:52')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1291, 484, 0, '2016-10-08 10:25:52', '2016-10-08 10:25:52')[0m
  [1m[35m (1.3ms)[0m  COMMIT
  [1m[36mAuthor Load (1.0ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Vasco Furtado'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Vasco Furtado', '2016-10-08 10:25:52', '2016-10-08 10:25:52')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.4ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1292, 484, 1, '2016-10-08 10:25:52', '2016-10-08 10:25:52')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.9ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Vládia Pinheiro e Caio Ponte'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Vládia Pinheiro e Caio Ponte', '2016-10-08 10:25:52', '2016-10-08 10:25:52')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1293, 484, 2, '2016-10-08 10:25:52', '2016-10-08 10:25:52')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (0.7ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Networked Intelligence: Towards Autonomous Cyber Physical Systems'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Networked Intelligence: Towards Autonomous Cyber Physical Systems', 'Developing intelligent systems requires combining results from both industry and academia. In this report you find an overview of relevant research fields and industrially applicable technologies for building very large scale cyber physical systems. A concept architecture is used to illustrate how existing pieces may fit together, and the maturity of the subsystems is estimated. The goal is to structure the developments and the challenge of machine intelligence for Consumer and Industrial Internet technologists, cyber physical systems researchers and people interested in the convergence of data & Internet of Things. It can be used for planning developments of intelligent systems.', 'cs.AI', '2016-06-13T19:57:48Z', 'http://arxiv.org/abs/1606.04087v6', '2016-10-08 10:25:52', '2016-10-08 10:25:52')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPublish Load (0.8ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 485[0m
  [1m[35mAuthor Load (0.7ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Andre Karpistsenko'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Andre Karpistsenko', '2016-10-08 10:25:52', '2016-10-08 10:25:52')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1294, 485, 0, '2016-10-08 10:25:52', '2016-10-08 10:25:52')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (0.7ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Bacteria Foraging Algorithm with Genetic Operators for the Solution of QAP and mQAP'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Bacteria Foraging Algorithm with Genetic Operators for the Solution of QAP and mQAP', 'The Bacterial Foraging Optimization (BFO) is one of the metaheuristics algorithms that most widely used to solve optimization problems. The BFO is imitated from the behavior of the foraging bacteria group such as Ecoli. The main aim of algorithm is to eliminate those bacteria that have weak foraging methods and maintaining those bacteria that have strong foraging methods. In this extent, each bacterium communicates with other bacteria by sending signals such that bacterium change the position in the next step if prior factors have been satisfied. In fact, the process of algorithm allows bacteria to follow up nutrients toward the optimal. In this paper, the BFO is used for the solutions of Quadratic Assignment Problem (QAP), and multi- objective QAP (mQAP) by using updating mechanisms including mutation, crossover, and a local search.', 'cs.NE', '2016-06-13T18:18:07Z', 'http://arxiv.org/abs/1606.04055v1', '2016-10-08 10:25:52', '2016-10-08 10:25:52')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPublish Load (0.8ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 486[0m
  [1m[35mAuthor Load (0.7ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Saeid Parvandeh'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Saeid Parvandeh', '2016-10-08 10:25:52', '2016-10-08 10:25:52')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1295, 486, 0, '2016-10-08 10:25:52', '2016-10-08 10:25:52')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (1.0ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Ahmet Unveren'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Ahmet Unveren', '2016-10-08 10:25:52', '2016-10-08 10:25:52')[0m
  [1m[35m (3.0ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.4ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1296, 486, 1, '2016-10-08 10:25:52', '2016-10-08 10:25:52')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.0ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Bill C. White'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.4ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Bill C. White', '2016-10-08 10:25:52', '2016-10-08 10:25:52')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1297, 486, 2, '2016-10-08 10:25:52', '2016-10-08 10:25:52')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (1.0ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Mohammadreza Boroumand'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Mohammadreza Boroumand', '2016-10-08 10:25:52', '2016-10-08 10:25:52')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1298, 486, 3, '2016-10-08 10:25:52', '2016-10-08 10:25:52')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.9ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Parya Soltani'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Parya Soltani', '2016-10-08 10:25:52', '2016-10-08 10:25:52')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1299, 486, 4, '2016-10-08 10:25:52', '2016-10-08 10:25:52')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (0.6ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Using a Distributional Semantic Vector Space with a Knowledge Base for Reasoning in Uncertain Conditions'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Using a Distributional Semantic Vector Space with a Knowledge Base for Reasoning in Uncertain Conditions', 'The inherent inflexibility and incompleteness of commonsense knowledge bases (KB) has limited their usefulness. We describe a system called Displacer for performing KB queries extended with the analogical capabilities of the word2vec distributional semantic vector space (DSVS). This allows the system to answer queries with information which was not contained in the original KB in any form. By performing analogous queries on semantically related terms and mapping their answers back into the context of the original query using displacement vectors, we are able to give approximate answers to many questions which, if posed to the KB alone, would return no results. We also show how the hand-curated knowledge in a KB can be used to increase the accuracy of a DSVS in solving analogy problems. In these ways, a KB and a DSVS can make up for each other\'s weaknesses.', 'cs.AI', '2016-06-13T15:45:00Z', 'http://arxiv.org/abs/1606.04000v1', '2016-10-08 10:25:52', '2016-10-08 10:25:52')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPublish Load (1.1ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 487[0m
  [1m[35mAuthor Load (0.7ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Douglas Summers-Stay'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Douglas Summers-Stay', '2016-10-08 10:25:52', '2016-10-08 10:25:52')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1300, 487, 0, '2016-10-08 10:25:52', '2016-10-08 10:25:52')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.9ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Clare Voss'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Clare Voss', '2016-10-08 10:25:52', '2016-10-08 10:25:52')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1301, 487, 1, '2016-10-08 10:25:52', '2016-10-08 10:25:52')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.1ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Taylor Cassidy'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Taylor Cassidy', '2016-10-08 10:25:52', '2016-10-08 10:25:52')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1302, 487, 2, '2016-10-08 10:25:52', '2016-10-08 10:25:52')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (0.7ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Bounding and Minimizing Counterfactual Error'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.4ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Bounding and Minimizing Counterfactual Error', 'There is intense interest in applying machine learning methods to problems of causal inference which arise in applications such as healthcare, economic policy, and education. In this paper we use the counterfactual inference approach to causal inference, and propose new theoretical results and new algorithms for performing counterfactual inference. Building on an idea recently proposed by Johansson et al., our results and methods rely on learning so-called \"balanced\" representations: representations that are similar between the factual and counterfactual distributions. We give a novel, simple and intuitive bound, showing that the expected counterfactual error of a representation is bounded by a sum of the factual error of that representation and the distance between the factual and counterfactual distributions induced by the representation. We use Integral Probability Metrics to measure distances between distributions, and focus on two special cases: the Wasserstein distance and the Maximum Mean Discrepancy (MMD) distance. Our bound leads directly to new algorithms, which are simpler and easier to employ compared to those suggested in Johansson et al.. Experiments on real and simulated data show the new algorithms match or outperform state-of-the-art methods.', 'stat.ML', '2016-06-13T14:40:57Z', 'http://arxiv.org/abs/1606.03976v2', '2016-10-08 10:25:52', '2016-10-08 10:25:52')[0m
  [1m[35m (3.0ms)[0m  COMMIT
  [1m[36mPublish Load (1.3ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 488[0m
  [1m[35mAuthor Load (1.2ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Uri Shalit'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Uri Shalit', '2016-10-08 10:25:52', '2016-10-08 10:25:52')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.4ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1303, 488, 0, '2016-10-08 10:25:52', '2016-10-08 10:25:52')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.9ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Fredrik Johansson'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Fredrik Johansson', '2016-10-08 10:25:52', '2016-10-08 10:25:52')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1304, 488, 1, '2016-10-08 10:25:52', '2016-10-08 10:25:52')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.1ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'David Sontag'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('David Sontag', '2016-10-08 10:25:52', '2016-10-08 10:25:52')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1305, 488, 2, '2016-10-08 10:25:52', '2016-10-08 10:25:52')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (0.8ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Visual-Inertial Scene Representations'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Visual-Inertial Scene Representations', 'We describe a representation of a scene that captures geometric and semantic attributes of objects within, along with their uncertainty. Objects are assumed persistent in the scene, and their likelihood computed from intermittent visual data using a convolutional architecture, integrated within a Bayesian filtering framework with inertials and a context model. Our method yields a posterior estimate of geometry (attributed point cloud and associated uncertainty), semantics (identities and co-occurrence), and a point-estimate of topology for a variable number of objects within the scene, implemented causally and in real-time on commodity hardware.', 'cs.CV', '2016-06-13T14:22:10Z', 'http://arxiv.org/abs/1606.03968v1', '2016-10-08 10:25:52', '2016-10-08 10:25:52')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPublish Load (1.0ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 489[0m
  [1m[35mAuthor Load (0.4ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Stefano Soatto'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35m (0.1ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (481, 489, 0, '2016-10-08 10:25:52', '2016-10-08 10:25:52')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.6ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'A framework for redescription set construction'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('A framework for redescription set construction', 'Redescription mining is a field of knowledge discovery that aims at finding different descriptions of similar subsets of instances in the data. These instances are characterized with descriptive attributes from one or more disjoint sets of attributes called views. By exploring different characterizations it is possible to find non trivial and interesting connections between different subsets of attributes. In this work, we explore the process of creating possibly large and heterogeneous redescription set in which redescriptions are iteratively improved by a conjunctive refinement procedure aimed at increasing redescription accuracy. This set is used by our redescription set construction procedure to create multiple redescription sets of user defined size. Set construction is based on redescription selection by using multi-objective optimization incorporating user defined importance levels towards one or more redescription quality criteria. These properties distinguish our approach from current state of the art approaches that create one, mostly smaller set that contains redescriptions satisfying a pre-defined set of constraints. We introduce a new redescription quality criterion that assesses the variability of redescription accuracy when missing values are present in the data. Finally, we compare the performance of our framework with three state of the art redescription mining algorithms.', 'cs.AI', '2016-06-13T13:15:41Z', 'http://arxiv.org/abs/1606.03935v1', '2016-10-08 10:25:52', '2016-10-08 10:25:52')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (1.0ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 490
  [1m[36mAuthor Load (0.7ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Matej Mihelčić'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Matej Mihelčić', '2016-10-08 10:25:52', '2016-10-08 10:25:52')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1306, 490, 0, '2016-10-08 10:25:52', '2016-10-08 10:25:52')
  [1m[36m (4.6ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.3ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Sašo Džeroski'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.3ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Sašo Džeroski', '2016-10-08 10:25:52', '2016-10-08 10:25:52')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1307, 490, 1, '2016-10-08 10:25:52', '2016-10-08 10:25:52')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (1.0ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Nada Lavrač'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Nada Lavrač', '2016-10-08 10:25:52', '2016-10-08 10:25:52')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1308, 490, 2, '2016-10-08 10:25:52', '2016-10-08 10:25:52')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.9ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Tomislav Šmuc'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Tomislav Šmuc', '2016-10-08 10:25:52', '2016-10-08 10:25:52')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1309, 490, 3, '2016-10-08 10:25:52', '2016-10-08 10:25:52')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPaper Load (0.7ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'A Probabilistic-Based Model for Binary CSP'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('A Probabilistic-Based Model for Binary CSP', 'This work introduces a probabilistic-based model for binary CSP that provides a fine grained analysis of its internal structure. Assuming that a domain modification could occur in the CSP, it shows how to express, in a predictive way, the probability that a domain value becomes inconsistent, then it express the expectation of the number of arc-inconsistent values in each domain of the constraint network. Thus, it express the expectation of the number of arc-inconsistent values for the whole constraint network. Next, it provides bounds for each of these three probabilistic indicators. Finally, a polytime algorithm, which propagates the probabilistic information, is presented.', 'cs.AI', '2016-06-13T11:03:26Z', 'http://arxiv.org/abs/1606.03894v1', '2016-10-08 10:25:52', '2016-10-08 10:25:52')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPublish Load (1.0ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 491[0m
  [1m[35mAuthor Load (0.7ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Amine Balafrej'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Amine Balafrej', '2016-10-08 10:25:52', '2016-10-08 10:25:52')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1310, 491, 0, '2016-10-08 10:25:52', '2016-10-08 10:25:52')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.4ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Xavier Lorca'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36m (0.1ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (248, 491, 1, '2016-10-08 10:25:52', '2016-10-08 10:25:52')[0m
  [1m[35m (0.3ms)[0m  COMMIT
  [1m[36mAuthor Load (0.8ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Charlotte Truchet'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Charlotte Truchet', '2016-10-08 10:25:52', '2016-10-08 10:25:52')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1311, 491, 2, '2016-10-08 10:25:52', '2016-10-08 10:25:52')
  [1m[36m (0.3ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.6ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Neural Associative Memory for Dual-Sequence Modeling'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Neural Associative Memory for Dual-Sequence Modeling', 'Many important NLP problems can be posed as dual-sequence or sequence-to-sequence modeling tasks. Recent advances in building end-to-end neural architectures have been highly successful in solving such tasks. In this work we propose a new architecture for dual-sequence modeling that is based on associative memory. We derive AM-RNNs, a recurrent associative memory (AM) which augments generic recurrent neural networks (RNN). This architecture is extended to the Dual AM-RNN which operates on two AMs at once. Our models achieve very competitive results on textual entailment. A qualitative analysis demonstrates that long range dependencies between source and target-sequence can be bridged effectively using Dual AM-RNNs. However, an initial experiment on auto-encoding reveals that these benefits are not exploited by the system when learning to solve sequence-to-sequence tasks which indicates that additional supervision or regularization is needed.', 'cs.NE', '2016-06-13T09:08:04Z', 'http://arxiv.org/abs/1606.03864v2', '2016-10-08 10:25:52', '2016-10-08 10:25:52')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (0.8ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 492
  [1m[36mAuthor Load (0.8ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Dirk Weissenborn'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Dirk Weissenborn', '2016-10-08 10:25:52', '2016-10-08 10:25:52')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.4ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1312, 492, 0, '2016-10-08 10:25:52', '2016-10-08 10:25:52')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.7ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Reweighted Data for Robust Probabilistic Models'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.4ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Reweighted Data for Robust Probabilistic Models', 'Probabilistic models analyze data by relying on a set of assumptions. When a model performs poorly, we challenge its assumptions. This approach has led to myriad hand-crafted robust models; they offer protection against small deviations from their assumptions. We propose a simple way to systematically mitigate mismatch of a large class of probabilistic models. The idea is to raise the likelihood of each observation to a weight. Inferring these weights allows a model to identify observations that match its assumptions; down-weighting others enables robust inference and improved predictive accuracy. We study four different forms of model mismatch, ranging from missing latent groups to structure misspecification. A Poisson factorization analysis of the Movielens dataset shows the benefits of reweighting in a real data scenario.', 'stat.ML', '2016-06-13T08:56:35Z', 'http://arxiv.org/abs/1606.03860v1', '2016-10-08 10:25:52', '2016-10-08 10:25:52')
  [1m[36m (2.9ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (1.3ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 493
  [1m[36mAuthor Load (1.0ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Yixin Wang'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Yixin Wang', '2016-10-08 10:25:52', '2016-10-08 10:25:52')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1313, 493, 0, '2016-10-08 10:25:52', '2016-10-08 10:25:52')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.0ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Alp Kucukelbir'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Alp Kucukelbir', '2016-10-08 10:25:52', '2016-10-08 10:25:52')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1314, 493, 1, '2016-10-08 10:25:52', '2016-10-08 10:25:52')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (1.0ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'David M. Blei'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('David M. Blei', '2016-10-08 10:25:52', '2016-10-08 10:25:52')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.6ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1315, 493, 2, '2016-10-08 10:25:52', '2016-10-08 10:25:52')
  [1m[36m (0.3ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.7ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Evidential Label Propagation Algorithm for Graphs'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Evidential Label Propagation Algorithm for Graphs', 'Community detection has attracted considerable attention crossing many areas as it can be used for discovering the structure and features of complex networks. With the increasing size of social networks in real world, community detection approaches should be fast and accurate. The Label Propagation Algorithm (LPA) is known to be one of the near-linear solutions and benefits of easy implementation, thus it forms a good basis for efficient community detection methods. In this paper, we extend the update rule and propagation criterion of LPA in the framework of belief functions. A new community detection approach, called Evidential Label Propagation (ELP), is proposed as an enhanced version of conventional LPA. The node influence is first defined to guide the propagation process. The plausibility is used to determine the domain label of each node. The update order of nodes is discussed to improve the robustness of the method. ELP algorithm will converge after the domain labels of all the nodes become unchanged. The mass assignments are calculated finally as memberships of nodes. The overlapping nodes and outliers can be detected simultaneously through the proposed method. The experimental results demonstrate the effectiveness of ELP.', 'cs.AI', '2016-06-13T06:58:34Z', 'http://arxiv.org/abs/1606.03832v1', '2016-10-08 10:25:52', '2016-10-08 10:25:52')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (1.0ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 494
  [1m[36mAuthor Load (0.5ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Kuang Zhou'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36m (0.2ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (585, 494, 0, '2016-10-08 10:25:52', '2016-10-08 10:25:52')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (0.7ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Arnaud Martin'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36m (0.1ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (586, 494, 1, '2016-10-08 10:25:52', '2016-10-08 10:25:52')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.5ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Quan Pan'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36m (0.2ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (587, 494, 2, '2016-10-08 10:25:52', '2016-10-08 10:25:52')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (1.0ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Zhun-Ga Liu'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Zhun-Ga Liu', '2016-10-08 10:25:52', '2016-10-08 10:25:52')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1316, 494, 3, '2016-10-08 10:25:52', '2016-10-08 10:25:52')
  [1m[36m (0.3ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.7ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'MITRE at SemEval-2016 Task 6: Transfer Learning for Stance Detection'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('MITRE at SemEval-2016 Task 6: Transfer Learning for Stance Detection', 'We describe MITRE\'s submission to the SemEval-2016 Task 6, Detecting Stance in Tweets. This effort achieved the top score in Task A on supervised stance detection, producing an average F1 score of 67.8 when assessing whether a tweet author was in favor or against a topic. We employed a recurrent neural network initialized with features learned via distant supervision on two large unlabeled datasets. We trained embeddings of words and phrases with the word2vec skip-gram method, then used those features to learn sentence representations via a hashtag prediction auxiliary task. These sentence vectors were then fine-tuned for stance detection on several hundred labeled examples. The result was a high performing system that used transfer learning to maximize the value of the available training data.', 'cs.AI', '2016-06-13T00:12:49Z', 'http://arxiv.org/abs/1606.03784v1', '2016-10-08 10:25:52', '2016-10-08 10:25:52')
  [1m[36m (2.9ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (1.2ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 495
  [1m[36mAuthor Load (0.9ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Guido Zarrella'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Guido Zarrella', '2016-10-08 10:25:52', '2016-10-08 10:25:52')[0m
  [1m[35m (2.6ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1317, 495, 0, '2016-10-08 10:25:52', '2016-10-08 10:25:52')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.0ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Amy Marsh'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Amy Marsh', '2016-10-08 10:25:52', '2016-10-08 10:25:52')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1318, 495, 1, '2016-10-08 10:25:52', '2016-10-08 10:25:52')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (0.6ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Neural Belief Tracker: Data-Driven Dialogue State Tracking'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Neural Belief Tracker: Data-Driven Dialogue State Tracking', 'Belief tracking is a core component of modern spoken dialogue system pipelines. However, most current approaches would have difficulty scaling to larger, more complex dialogue domains. This is due to their dependency on either: a) Spoken Language Understanding models that require large amounts of annotated training data; or b) hand-crafted semantic lexicons that capture the lexical variation in users\' language. We propose a novel Neural Belief Tracking (NBT) framework which aims to overcome these problems by building on recent advances in semantic representation learning. The NBT models reason over continuous distributed representations of words, utterances and dialogue context. Our evaluation on two datasets shows that this approach overcomes both limitations, matching the performance of state-of-the-art models that have greater resource requirements.', 'cs.CL', '2016-06-12T22:59:14Z', 'http://arxiv.org/abs/1606.03777v1', '2016-10-08 10:25:52', '2016-10-08 10:25:52')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPublish Load (1.0ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 496[0m
  [1m[35mAuthor Load (0.7ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Nikola Mrkšić'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Nikola Mrkšić', '2016-10-08 10:25:52', '2016-10-08 10:25:52')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1319, 496, 0, '2016-10-08 10:25:52', '2016-10-08 10:25:52')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.8ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Diarmuid Ó Séaghdha'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Diarmuid Ó Séaghdha', '2016-10-08 10:25:53', '2016-10-08 10:25:53')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1320, 496, 1, '2016-10-08 10:25:53', '2016-10-08 10:25:53')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.7ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Tsung-Hsien Wen'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Tsung-Hsien Wen', '2016-10-08 10:25:53', '2016-10-08 10:25:53')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1321, 496, 2, '2016-10-08 10:25:53', '2016-10-08 10:25:53')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (1.1ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Blaise Thomson'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Blaise Thomson', '2016-10-08 10:25:53', '2016-10-08 10:25:53')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.4ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1322, 496, 3, '2016-10-08 10:25:53', '2016-10-08 10:25:53')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.9ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Steve Young'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Steve Young', '2016-10-08 10:25:53', '2016-10-08 10:25:53')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1323, 496, 4, '2016-10-08 10:25:53', '2016-10-08 10:25:53')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPaper Load (0.7ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Mining the Networks of Supply and Demand of Public Transport for Overload and Waste of Resources'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Mining the Networks of Supply and Demand of Public Transport for Overload and Waste of Resources', 'We propose here a methodology to help to understand the shortcomings of public transportation in a city via the mining of complex networks representing the supply and demand of public transport. We show how to build these networks based upon data on smart card use in buses via the application of algorithms that estimate an OD and reconstruct the complete itinerary of the passengers. The overlapping of the two networks sheds light in potential overload and waste in the offer of resources that can be mitigated with strategies for balancing supply and demand.', 'cs.AI', '2016-06-12T16:17:57Z', 'http://arxiv.org/abs/1606.03737v1', '2016-10-08 10:25:53', '2016-10-08 10:25:53')[0m
  [1m[35m (2.9ms)[0m  COMMIT
  [1m[36mPublish Load (1.1ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 497[0m
  [1m[35mAuthor Load (0.8ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Carlos Caminha'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35m (0.1ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1291, 497, 0, '2016-10-08 10:25:53', '2016-10-08 10:25:53')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.0ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Vasco Furtado'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35m (0.1ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1292, 497, 1, '2016-10-08 10:25:53', '2016-10-08 10:25:53')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.0ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Vládia Pinheiro e Caio Ponte'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35m (0.1ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1293, 497, 2, '2016-10-08 10:25:53', '2016-10-08 10:25:53')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.7ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Deep Reinforcement Learning with a Combinatorial Action Space for Predicting Popular Reddit Threads'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Deep Reinforcement Learning with a Combinatorial Action Space for Predicting Popular Reddit Threads', 'We introduce an online popularity prediction and tracking task as a benchmark task for reinforcement learning with a combinatorial, natural language action space. A specified number of discussion threads predicted to be popular are recommended, chosen from a fixed window of recent comments to track. Novel deep reinforcement learning architectures are studied for effective modeling of the value function associated with actions comprised of interdependent sub-actions. The proposed model, which represents dependence between sub-actions through a bi-directional LSTM, gives the best performance across different experimental configurations and domains, and it also generalizes well with varying numbers of recommendation requests.', 'cs.CL', '2016-06-12T05:38:20Z', 'http://arxiv.org/abs/1606.03667v3', '2016-10-08 10:25:53', '2016-10-08 10:25:53')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (0.8ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 498
  [1m[36mAuthor Load (0.7ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Ji He'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Ji He', '2016-10-08 10:25:53', '2016-10-08 10:25:53')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1324, 498, 0, '2016-10-08 10:25:53', '2016-10-08 10:25:53')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.2ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Mari Ostendorf'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Mari Ostendorf', '2016-10-08 10:25:53', '2016-10-08 10:25:53')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1325, 498, 1, '2016-10-08 10:25:53', '2016-10-08 10:25:53')[0m
  [1m[35m (1.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.6ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Xiaodong He'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36m (0.2ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (496, 498, 2, '2016-10-08 10:25:53', '2016-10-08 10:25:53')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (1.0ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Jianshu Chen'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Jianshu Chen', '2016-10-08 10:25:53', '2016-10-08 10:25:53')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1326, 498, 3, '2016-10-08 10:25:53', '2016-10-08 10:25:53')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.3ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Jianfeng Gao'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35m (0.1ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (69, 498, 4, '2016-10-08 10:25:53', '2016-10-08 10:25:53')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.8ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Lihong Li'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Lihong Li', '2016-10-08 10:25:53', '2016-10-08 10:25:53')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1327, 498, 5, '2016-10-08 10:25:53', '2016-10-08 10:25:53')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.3ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Li Deng'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36m (0.2ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (70, 498, 6, '2016-10-08 10:25:53', '2016-10-08 10:25:53')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (0.6ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Store Location Selection via Mining Search Query Logs of Baidu Maps'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Store Location Selection via Mining Search Query Logs of Baidu Maps', 'Choosing a good location when opening a new store is crucial for the future success of a business. Traditional methods include offline manual survey, which is very time consuming, and analytic models based on census data, which are un- able to adapt to the dynamic market. The rapid increase of the availability of big data from various types of mobile devices, such as online query data and offline positioning data, provides us with the possibility to develop automatic and accurate data-driven prediction models for business store placement. In this paper, we propose a Demand Distribution Driven Store Placement (D3SP) framework for business store placement by mining search query data from Baidu Maps. D3SP first detects the spatial-temporal distributions of customer demands on different business services via query data from Baidu Maps, the largest online map search engine in China, and detects the gaps between demand and sup- ply. Then we determine candidate locations via clustering such gaps. In the final stage, we solve the location optimization problem by predicting and ranking the number of customers. We not only deploy supervised regression models to predict the number of customers, but also learn to rank models to directly rank the locations. We evaluate our framework on various types of businesses in real-world cases, and the experiments results demonstrate the effectiveness of our methods. D3SP as the core function for store placement has already been implemented as a core component of our business analytics platform and could be potentially used by chain store merchants on Baidu Nuomi.', 'cs.AI', '2016-06-12T03:42:10Z', 'http://arxiv.org/abs/1606.03662v1', '2016-10-08 10:25:53', '2016-10-08 10:25:53')[0m
  [1m[35m (3.0ms)[0m  COMMIT
  [1m[36mPublish Load (1.3ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 499[0m
  [1m[35mAuthor Load (0.9ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Mengwen Xu'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Mengwen Xu', '2016-10-08 10:25:53', '2016-10-08 10:25:53')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1328, 499, 0, '2016-10-08 10:25:53', '2016-10-08 10:25:53')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.9ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Tianyi Wang'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Tianyi Wang', '2016-10-08 10:25:53', '2016-10-08 10:25:53')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1329, 499, 1, '2016-10-08 10:25:53', '2016-10-08 10:25:53')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.9ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Zhengwei Wu'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Zhengwei Wu', '2016-10-08 10:25:53', '2016-10-08 10:25:53')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1330, 499, 2, '2016-10-08 10:25:53', '2016-10-08 10:25:53')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.8ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Jingbo Zhou'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Jingbo Zhou', '2016-10-08 10:25:53', '2016-10-08 10:25:53')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1331, 499, 3, '2016-10-08 10:25:53', '2016-10-08 10:25:53')
  [1m[36m (0.3ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.6ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Jian Li'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35m (0.1ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (826, 499, 4, '2016-10-08 10:25:53', '2016-10-08 10:25:53')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.1ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Haishan Wu'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Haishan Wu', '2016-10-08 10:25:53', '2016-10-08 10:25:53')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1332, 499, 5, '2016-10-08 10:25:53', '2016-10-08 10:25:53')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (0.7ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'The Opacity of Backbones'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('The Opacity of Backbones', 'A backbone of a boolean formula $F$ is a collection $S$ of its variables for which there is a unique partial assignment $a_S$ such that $F[a_S]$ is satisfiable [MZK+99,WGS03]. This paper studies the nontransparency of backbones. We show that, under the widely believed assumption that integer factoring is hard, there exist sets of boolean formulas that have obvious, nontrivial backbones yet finding the values, $a_S$, of those backbones is intractable. We also show that, under the same assumption, there exist sets of boolean formulas that obviously have large backbones yet producing such a backbone $S$ is intractable. Further, we show that if integer factoring is not merely worst-case hard but is frequently hard, as is widely believed, then the frequency of hardness in our two results is not too much less than that frequency.', 'cs.AI', '2016-06-11T21:49:24Z', 'http://arxiv.org/abs/1606.03634v1', '2016-10-08 10:25:53', '2016-10-08 10:25:53')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPublish Load (1.2ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 500[0m
  [1m[35mAuthor Load (0.7ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Lane A. Hemaspaandra'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Lane A. Hemaspaandra', '2016-10-08 10:25:53', '2016-10-08 10:25:53')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1333, 500, 0, '2016-10-08 10:25:53', '2016-10-08 10:25:53')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.7ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'David E. Narváez'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('David E. Narváez', '2016-10-08 10:25:53', '2016-10-08 10:25:53')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1334, 500, 1, '2016-10-08 10:25:53', '2016-10-08 10:25:53')
  [1m[36m (2.9ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.8ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Word Sense Disambiguation using a Bidirectional LSTM'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Word Sense Disambiguation using a Bidirectional LSTM', 'In this paper we present a model that leverages a bidirectional long short-term memory network to learn word sense disambiguation directly from data. The approach is end-to-end trainable and makes effective use of word order. Further, to improve the robustness of the model we introduce dropword, a regularization technique that randomly removes words from the text. The model is evaluated on two standard datasets and achieves state-of-the-art results on both datasets, using identical hyperparameter settings.', 'cs.CL', '2016-06-11T08:12:02Z', 'http://arxiv.org/abs/1606.03568v1', '2016-10-08 10:25:53', '2016-10-08 10:25:53')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (0.9ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 501
  [1m[36mAuthor Load (0.7ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Mikael Kågebäck'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Mikael Kågebäck', '2016-10-08 10:25:53', '2016-10-08 10:25:53')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1335, 501, 0, '2016-10-08 10:25:53', '2016-10-08 10:25:53')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.0ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Hans Salomonsson'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Hans Salomonsson', '2016-10-08 10:25:53', '2016-10-08 10:25:53')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1336, 501, 1, '2016-10-08 10:25:53', '2016-10-08 10:25:53')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (0.7ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'The Mythos of Model Interpretability'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('The Mythos of Model Interpretability', 'Supervised machine learning models boast remarkable predictive capabilities. But can you trust your model? Will it work in deployment? What else can it tell you about the world? We want models to be not only good, but interpretable. And yet the task of interpretation appears underspecified. Papers provide diverse and sometimes non-overlapping motivations for interpretability, and offer myriad notions of what attributes render models interpretable. Despite this ambiguity, many papers proclaim interpretability axiomatically, absent further explanation. In this paper, we seek to refine the discourse on interpretability. First, we examine the motivations underlying interest in interpretability, finding them to be diverse and occasionally discordant. Then, we address model properties and techniques thought to confer interpretability, identifying transparency to humans and post-hoc explanations as competing notions. Throughout, we discuss the feasibility and desirability of different notions, and question the oft-made assertions that linear models are interpretable and that deep neural networks are not.', 'cs.LG', '2016-06-10T21:28:47Z', 'http://arxiv.org/abs/1606.03490v2', '2016-10-08 10:25:53', '2016-10-08 10:25:53')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPublish Load (0.8ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 502[0m
  [1m[35mAuthor Load (0.7ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Zachary C. Lipton'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Zachary C. Lipton', '2016-10-08 10:25:53', '2016-10-08 10:25:53')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.4ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1337, 502, 0, '2016-10-08 10:25:53', '2016-10-08 10:25:53')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (0.6ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Generative Adversarial Imitation Learning'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Generative Adversarial Imitation Learning', 'Consider learning a policy from example expert behavior, without interaction with the expert or access to reinforcement signal. One approach is to recover the expert\'s cost function with inverse reinforcement learning, then extract a policy from that cost function with reinforcement learning. This approach is indirect and can be slow. We propose a new general framework for directly extracting a policy from data, as if it were obtained by reinforcement learning following inverse reinforcement learning. We show that a certain instantiation of our framework draws an analogy between imitation learning and generative adversarial networks, from which we derive a model-free imitation learning algorithm that obtains significant performance gains over existing model-free methods in imitating complex behaviors in large, high-dimensional environments.', 'cs.LG', '2016-06-10T20:51:29Z', 'http://arxiv.org/abs/1606.03476v1', '2016-10-08 10:25:53', '2016-10-08 10:25:53')[0m
  [1m[35m (2.9ms)[0m  COMMIT
  [1m[36mPublish Load (1.3ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 503[0m
  [1m[35mAuthor Load (1.0ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Jonathan Ho'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Jonathan Ho', '2016-10-08 10:25:53', '2016-10-08 10:25:53')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1338, 503, 0, '2016-10-08 10:25:53', '2016-10-08 10:25:53')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (1.0ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Stefano Ermon'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.4ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Stefano Ermon', '2016-10-08 10:25:53', '2016-10-08 10:25:53')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1339, 503, 1, '2016-10-08 10:25:53', '2016-10-08 10:25:53')
  [1m[36m (0.3ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.6ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'De-identification of Patient Notes with Recurrent Neural Networks'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('De-identification of Patient Notes with Recurrent Neural Networks', 'Objective: Patient notes in electronic health records (EHRs) may contain critical information for medical investigations. However, the vast majority of medical investigators can only access de-identified notes, in order to protect the confidentiality of patients. In the United States, the Health Insurance Portability and Accountability Act (HIPAA) defines 18 types of protected health information (PHI) that needs to be removed to de-identify patient notes. Manual de-identification is impractical given the size of EHR databases, the limited number of researchers with access to the non-de-identified notes, and the frequent mistakes of human annotators. A reliable automated de-identification system would consequently be of high value. Materials and Methods: We introduce the first de-identification system based on artificial neural networks (ANNs), which requires no handcrafted features or rules, unlike existing systems. We compare the performance of the system with state-of-the-art systems on two datasets: the i2b2 2014 de-identification challenge dataset, which is the largest publicly available de-identification dataset, and the MIMIC de-identification dataset, which we assembled and is twice as large as the i2b2 2014 dataset. Results: Our ANN model outperforms the state-of-the-art systems. It yields an F1-score of 97.85 on the i2b2 2014 dataset, with a recall 97.38 and a precision of 97.32, and an F1-score of 99.23 on the MIMIC de-identification dataset, with a recall 99.25 and a precision of 99.06. Conclusion: Our findings support the use of ANNs for de-identification of patient notes, as they show better performance than previously published systems while requiring no feature engineering.', 'cs.CL', '2016-06-10T20:45:30Z', 'http://arxiv.org/abs/1606.03475v1', '2016-10-08 10:25:53', '2016-10-08 10:25:53')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (1.1ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 504
  [1m[36mAuthor Load (0.6ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Franck Dernoncourt'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36m (0.1ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (848, 504, 0, '2016-10-08 10:25:53', '2016-10-08 10:25:53')[0m
  [1m[35m (2.4ms)[0m  COMMIT
  [1m[36mAuthor Load (1.3ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Ji Young Lee'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Ji Young Lee', '2016-10-08 10:25:53', '2016-10-08 10:25:53')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1340, 504, 1, '2016-10-08 10:25:53', '2016-10-08 10:25:53')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.0ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Ozlem Uzuner'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Ozlem Uzuner', '2016-10-08 10:25:53', '2016-10-08 10:25:53')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1341, 504, 2, '2016-10-08 10:25:53', '2016-10-08 10:25:53')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.8ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Peter Szolovits'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Peter Szolovits', '2016-10-08 10:25:53', '2016-10-08 10:25:53')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1342, 504, 3, '2016-10-08 10:25:53', '2016-10-08 10:25:53')
  [1m[36m (0.3ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.7ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Scan Order in Gibbs Sampling: Models in Which it Matters and Bounds on How Much'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Scan Order in Gibbs Sampling: Models in Which it Matters and Bounds on How Much', 'Gibbs sampling is a Markov Chain Monte Carlo sampling technique that iteratively samples variables from their conditional distributions. There are two common scan orders for the variables: random scan and systematic scan. Due to the benefits of locality in hardware, systematic scan is commonly used, even though most statistical guarantees are only for random scan. While it has been conjectured that the mixing times of random scan and systematic scan do not differ by more than a logarithmic factor, we show by counterexample that this is not the case, and we prove that that the mixing times do not differ by more than a polynomial factor under mild conditions. To prove these relative bounds, we introduce a method of augmenting the state space to study systematic scan using conductance.', 'cs.LG', '2016-06-10T19:24:10Z', 'http://arxiv.org/abs/1606.03432v1', '2016-10-08 10:25:53', '2016-10-08 10:25:53')
  [1m[36m (2.8ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (1.1ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 505
  [1m[36mAuthor Load (1.0ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Bryan He'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Bryan He', '2016-10-08 10:25:53', '2016-10-08 10:25:53')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1343, 505, 0, '2016-10-08 10:25:53', '2016-10-08 10:25:53')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.8ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Christopher De Sa'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Christopher De Sa', '2016-10-08 10:25:53', '2016-10-08 10:25:53')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1344, 505, 1, '2016-10-08 10:25:53', '2016-10-08 10:25:53')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.9ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Ioannis Mitliagkas'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Ioannis Mitliagkas', '2016-10-08 10:25:53', '2016-10-08 10:25:53')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1345, 505, 2, '2016-10-08 10:25:53', '2016-10-08 10:25:53')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.0ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Christopher Ré'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Christopher Ré', '2016-10-08 10:25:53', '2016-10-08 10:25:53')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1346, 505, 3, '2016-10-08 10:25:53', '2016-10-08 10:25:53')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (0.6ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Length bias in Encoder Decoder Models and a Case for Global Conditioning'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Length bias in Encoder Decoder Models and a Case for Global Conditioning', 'Encoder-decoder networks are popular for probabilistic modeling sequences in many applications. These models use the power of the Long Short-Term Memory (LSTM) architecture to capture the full dependence among variables and are not subject to label bias of locally conditioned models that assume partial conditional independence. However in practice they exhibit a bias towards short sequences even when using a beam search to find the optimal sequence. Surprisingly, sometimes there is even a decline in accuracy with increasing the beam size. In this paper we show that such phenomena are due to a discrepancy between the full sequence margin and the per-element margin enforced by the locally conditioned training objective of a encoder-decoder model. The discrepancy more adversely impacts long sequences, explaining the bias towards predicting short sequences. For the case where the predicted sequences come from a closed set, we show that a globally conditioned model alleviates the above problems of encoder-decoder models. From a practical point of view, our proposed model also eliminates the need for a beam-search during inference, which reduces to an efficient dot-product based search in a vector-space.', 'cs.AI', '2016-06-10T17:30:46Z', 'http://arxiv.org/abs/1606.03402v1', '2016-10-08 10:25:53', '2016-10-08 10:25:53')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPublish Load (1.0ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 506[0m
  [1m[35mAuthor Load (0.7ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Pavel Sountsov'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Pavel Sountsov', '2016-10-08 10:25:53', '2016-10-08 10:25:53')
  [1m[36m (0.3ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1347, 506, 0, '2016-10-08 10:25:53', '2016-10-08 10:25:53')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (1.0ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Sunita Sarawagi'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Sunita Sarawagi', '2016-10-08 10:25:53', '2016-10-08 10:25:53')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1348, 506, 1, '2016-10-08 10:25:53', '2016-10-08 10:25:53')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.7ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'WordNet2Vec: Corpora Agnostic Word Vectorization Method'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('WordNet2Vec: Corpora Agnostic Word Vectorization Method', 'A complex nature of big data resources demands new methods for structuring especially for textual content. WordNet is a good knowledge source for comprehensive abstraction of natural language as its good implementations exist for many languages. Since WordNet embeds natural language in the form of a complex network, a transformation mechanism WordNet2Vec is proposed in the paper. It creates vectors for each word from WordNet. These vectors encapsulate general position - role of a given word towards all other words in the natural language. Any list or set of such vectors contains knowledge about the context of its component within the whole language. Such word representation can be easily applied to many analytic tasks like classification or clustering. The usefulness of the WordNet2Vec method was demonstrated in sentiment analysis, i.e. classification with transfer learning for the real Amazon opinion textual dataset.', 'cs.CL', '2016-06-10T14:12:47Z', 'http://arxiv.org/abs/1606.03335v1', '2016-10-08 10:25:53', '2016-10-08 10:25:53')
  [1m[36m (3.0ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (1.3ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 507
  [1m[36mAuthor Load (1.2ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Roman Bartusiak'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Roman Bartusiak', '2016-10-08 10:25:53', '2016-10-08 10:25:53')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1349, 507, 0, '2016-10-08 10:25:53', '2016-10-08 10:25:53')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.1ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Łukasz Augustyniak'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Łukasz Augustyniak', '2016-10-08 10:25:53', '2016-10-08 10:25:53')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1350, 507, 1, '2016-10-08 10:25:53', '2016-10-08 10:25:53')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (1.0ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Tomasz Kajdanowicz'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Tomasz Kajdanowicz', '2016-10-08 10:25:53', '2016-10-08 10:25:53')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1351, 507, 2, '2016-10-08 10:25:53', '2016-10-08 10:25:53')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.0ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Przemysław Kazienko'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Przemysław Kazienko', '2016-10-08 10:25:53', '2016-10-08 10:25:53')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1352, 507, 3, '2016-10-08 10:25:53', '2016-10-08 10:25:53')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.9ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Maciej Piasecki'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Maciej Piasecki', '2016-10-08 10:25:53', '2016-10-08 10:25:53')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1353, 507, 4, '2016-10-08 10:25:53', '2016-10-08 10:25:53')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.7ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Community Structure in Industrial SAT Instances'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Community Structure in Industrial SAT Instances', 'Modern SAT solvers have experienced a remarkable progress on solving industrial instances. Most of the techniques have been developed after an intensive experimental process. It is believed that these techniques exploit the underlying structure of industrial instances. However, there are few works trying to exactly characterize the main features of this structure. The research community on complex networks has developed techniques of analysis and algorithms to study real-world graphs that can be used by the SAT community. Recently, there have been some attempts to analyze the structure of industrial SAT instances in terms of complex networks, with the aim of explaining the success of SAT solving techniques, and possibly improving them. In this paper, inspired by the results on complex networks, we study the community structure, or modularity, of industrial SAT instances. In a graph with clear community structure, or high modularity, we can find a partition of its nodes into communities such that most edges connect variables of the same community. In our analysis, we represent SAT instances as graphs, and we show that most application benchmarks are characterized by a high modularity. On the contrary, random SAT instances are closer to the classical Erd\\\"os-R\\\'enyi random graph model, where no structure can be observed. We also analyze how this structure evolves by the effects of the execution of the SAT solver. We detect that new clauses learnt by the solver during the search contribute to destroy the original community structure of the formula. This partially explains the distinct performance of SAT solvers on random and industrial SAT instances.', 'cs.AI', '2016-06-10T14:02:12Z', 'http://arxiv.org/abs/1606.03329v2', '2016-10-08 10:25:53', '2016-10-08 10:25:53')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (1.1ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 508
  [1m[36mAuthor Load (0.8ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Carlos Ansótegui'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Carlos Ansótegui', '2016-10-08 10:25:53', '2016-10-08 10:25:53')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1354, 508, 0, '2016-10-08 10:25:53', '2016-10-08 10:25:53')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.9ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Maria Luisa Bonet'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Maria Luisa Bonet', '2016-10-08 10:25:53', '2016-10-08 10:25:53')
  [1m[36m (3.0ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1355, 508, 1, '2016-10-08 10:25:53', '2016-10-08 10:25:53')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (1.1ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Jesús Giráldez-Cru'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Jesús Giráldez-Cru', '2016-10-08 10:25:53', '2016-10-08 10:25:53')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1356, 508, 2, '2016-10-08 10:25:53', '2016-10-08 10:25:53')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.1ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Jordi Levy'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Jordi Levy', '2016-10-08 10:25:53', '2016-10-08 10:25:53')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1357, 508, 3, '2016-10-08 10:25:53', '2016-10-08 10:25:53')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (0.7ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Structured Factored Inference: A Framework for Automated Reasoning in Probabilistic Programming Languages'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.4ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Structured Factored Inference: A Framework for Automated Reasoning in Probabilistic Programming Languages', 'Reasoning on large and complex real-world models is a computationally difficult task, yet one that is required for effective use of many AI applications. A plethora of inference algorithms have been developed that work well on specific models or only on parts of general models. Consequently, a system that can intelligently apply these inference algorithms to different parts of a model for fast reasoning is highly desirable. We introduce a new framework called structured factored inference (SFI) that provides the foundation for such a system. Using models encoded in a probabilistic programming language, SFI provides a sound means to decompose a model into sub-models, apply an inference algorithm to each sub-model, and combine the resulting information to answer a query. Our results show that SFI is nearly as accurate as exact inference yet retains the benefits of approximate inference methods.', 'cs.AI', '2016-06-10T12:53:01Z', 'http://arxiv.org/abs/1606.03298v1', '2016-10-08 10:25:53', '2016-10-08 10:25:53')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPublish Load (1.2ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 509[0m
  [1m[35mAuthor Load (0.7ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Avi Pfeffer'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Avi Pfeffer', '2016-10-08 10:25:53', '2016-10-08 10:25:53')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1358, 509, 0, '2016-10-08 10:25:53', '2016-10-08 10:25:53')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.8ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Brian Ruttenberg'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Brian Ruttenberg', '2016-10-08 10:25:53', '2016-10-08 10:25:53')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1359, 509, 1, '2016-10-08 10:25:53', '2016-10-08 10:25:53')
  [1m[36m (0.3ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.8ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'William Kretschmer'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('William Kretschmer', '2016-10-08 10:25:53', '2016-10-08 10:25:53')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.3ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1360, 509, 2, '2016-10-08 10:25:53', '2016-10-08 10:25:53')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPaper Load (0.7ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Tunable Online MUS/MSS Enumeration'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Tunable Online MUS/MSS Enumeration', 'In various areas of computer science, the problem of dealing with a set of constraints arises. If the set of constraints is unsatisfiable, one may ask for a minimal description of the reason for this unsatisifi- ability. Minimal unsatisifable subsets (MUSes) and maximal satisifiable subsets (MSSes) are two kinds of such minimal descriptions. The goal of this work is the enumeration of MUSes and MSSes for a given constraint system. As such full enumeration may be intractable in general, we focus on building an online algorithm, which produces MUSes/MSSes in an on-the-fly manner as soon as they are discovered. The problem has been studied before even in its online version. However, our algorithm uses a novel approach that is able to outperform current state-of-the art algorithms for online MUS/MSS enumeration. Moreover, the performance of our algorithm can be adjusted using tunable parameters. We evaluate the algorithm on a set of benchmarks.', 'cs.AI', '2016-06-10T12:24:35Z', 'http://arxiv.org/abs/1606.03289v1', '2016-10-08 10:25:53', '2016-10-08 10:25:53')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPublish Load (1.0ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 510[0m
  [1m[35mAuthor Load (0.7ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Jaroslav Bendik'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Jaroslav Bendik', '2016-10-08 10:25:53', '2016-10-08 10:25:53')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1361, 510, 0, '2016-10-08 10:25:53', '2016-10-08 10:25:53')[0m
  [1m[35m (3.0ms)[0m  COMMIT
  [1m[36mAuthor Load (1.3ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Nikola Benes'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Nikola Benes', '2016-10-08 10:25:53', '2016-10-08 10:25:53')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1362, 510, 1, '2016-10-08 10:25:53', '2016-10-08 10:25:53')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.9ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Ivana Cerna'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Ivana Cerna', '2016-10-08 10:25:53', '2016-10-08 10:25:53')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1363, 510, 2, '2016-10-08 10:25:53', '2016-10-08 10:25:53')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (1.1ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Jiri Barnat'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Jiri Barnat', '2016-10-08 10:25:53', '2016-10-08 10:25:53')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1364, 510, 3, '2016-10-08 10:25:53', '2016-10-08 10:25:53')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.6ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Natural Language Generation enhances human decision-making with uncertain information'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Natural Language Generation enhances human decision-making with uncertain information', 'Decision-making is often dependent on uncertain data, e.g. data associated with confidence scores or probabilities. We present a comparison of different information presentations for uncertain data and, for the first time, measure their effects on human decision-making. We show that the use of Natural Language Generation (NLG) improves decision-making under uncertainty, compared to state-of-the-art graphical-based representation methods. In a task-based study with 442 adults, we found that presentations using NLG lead to 24% better decision-making on average than the graphical presentations, and to 44% better decision-making when NLG is combined with graphics. We also show that women achieve significantly better results when presented with NLG output (an 87% increase on average compared to graphical presentations).', 'cs.CL', '2016-06-10T10:12:13Z', 'http://arxiv.org/abs/1606.03254v2', '2016-10-08 10:25:53', '2016-10-08 10:25:53')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (0.9ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 511
  [1m[36mAuthor Load (0.7ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Dimitra Gkatzia'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Dimitra Gkatzia', '2016-10-08 10:25:53', '2016-10-08 10:25:53')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1365, 511, 0, '2016-10-08 10:25:53', '2016-10-08 10:25:53')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.7ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Oliver Lemon'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35m (0.1ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1257, 511, 1, '2016-10-08 10:25:53', '2016-10-08 10:25:53')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.8ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Verena Rieser'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35m (0.1ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1256, 511, 2, '2016-10-08 10:25:53', '2016-10-08 10:25:53')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.7ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Simple epistemic planning: generalised gossiping'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.4ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Simple epistemic planning: generalised gossiping', 'The gossip problem, in which information (known as secrets) must be shared among a certain number of agents using the minimum number of calls, is of interest in the conception of communication networks and protocols. We extend the gossip problem to arbitrary epistemic depths. For example, we may require not only that all agents know all secrets but also that all agents know that all agents know all secrets. We give optimal protocols for various versions of the generalised gossip problem, depending on the graph of communication links, in the case of two-way communications, one-way communications and parallel communication. We also study different variants which allow us to impose negative goals such as that certain agents must not know certain secrets. We show that in the presence of negative goals testing the existence of a successful protocol is NP-complete whereas this is always polynomial-time in the case of purely positive goals.', 'cs.AI', '2016-06-10T09:31:26Z', 'http://arxiv.org/abs/1606.03244v2', '2016-10-08 10:25:53', '2016-10-08 10:25:53')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (0.8ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 512
  [1m[36mAuthor Load (0.7ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Martin C. Cooper'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Martin C. Cooper', '2016-10-08 10:25:53', '2016-10-08 10:25:53')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1366, 512, 0, '2016-10-08 10:25:53', '2016-10-08 10:25:53')
  [1m[36m (1.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.1ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Andreas Herzig'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Andreas Herzig', '2016-10-08 10:25:53', '2016-10-08 10:25:53')
  [1m[36m (3.0ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1367, 512, 1, '2016-10-08 10:25:53', '2016-10-08 10:25:53')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (1.2ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Faustine Maffre'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Faustine Maffre', '2016-10-08 10:25:53', '2016-10-08 10:25:53')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1368, 512, 2, '2016-10-08 10:25:53', '2016-10-08 10:25:53')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.9ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Frédéric Maris'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Frédéric Maris', '2016-10-08 10:25:53', '2016-10-08 10:25:53')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1369, 512, 3, '2016-10-08 10:25:53', '2016-10-08 10:25:53')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (1.0ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Pierre Régnier'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Pierre Régnier', '2016-10-08 10:25:53', '2016-10-08 10:25:53')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1370, 512, 4, '2016-10-08 10:25:53', '2016-10-08 10:25:53')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.8ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Towards Anthropo-inspired Computational Systems: the $P^3$ Model'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Towards Anthropo-inspired Computational Systems: the $P^3$ Model', 'This paper proposes a model which aim is providing a more coherent framework for agents design. We identify three closely related anthropo-centered domains working on separate functional levels. Abstracting from human physiology, psychology, and philosophy we create the $P^3$ model to be used as a multi-tier approach to deal with complex class of problems. The three layers identified in this model have been named PhysioComputing, MindComputing, and MetaComputing. Several instantiations of this model are finally presented related to different IT areas such as artificial intelligence, distributed computing, software and service engineering.', 'cs.AI', '2016-06-10T08:39:22Z', 'http://arxiv.org/abs/1606.03229v1', '2016-10-08 10:25:53', '2016-10-08 10:25:53')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (1.0ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 513
  [1m[36mAuthor Load (0.7ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Michael W. Bridges'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Michael W. Bridges', '2016-10-08 10:25:53', '2016-10-08 10:25:53')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1371, 513, 0, '2016-10-08 10:25:53', '2016-10-08 10:25:53')
  [1m[36m (0.3ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.9ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Salvatore Distefano'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Salvatore Distefano', '2016-10-08 10:25:53', '2016-10-08 10:25:53')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1372, 513, 1, '2016-10-08 10:25:53', '2016-10-08 10:25:53')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (0.7ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Manuel Mazzara'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36m (0.2ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (628, 513, 2, '2016-10-08 10:25:53', '2016-10-08 10:25:53')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (1.0ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Marat Minlebaev'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Marat Minlebaev', '2016-10-08 10:25:53', '2016-10-08 10:25:53')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1373, 513, 3, '2016-10-08 10:25:53', '2016-10-08 10:25:53')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.6ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Max Talanov'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35m (0.2ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (626, 513, 4, '2016-10-08 10:25:53', '2016-10-08 10:25:53')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.1ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Jordi Vallverdú'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Jordi Vallverdú', '2016-10-08 10:25:53', '2016-10-08 10:25:53')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1374, 513, 5, '2016-10-08 10:25:53', '2016-10-08 10:25:53')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPaper Load (0.7ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Fuzzy-Klassen Model for Development Disparities Analysis based on Gross Regional Domestic Product Sector of a Region'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Fuzzy-Klassen Model for Development Disparities Analysis based on Gross Regional Domestic Product Sector of a Region', 'Analysis of regional development imbalances quadrant has a very important meaning in order to see the extent of achievement of the development of certain areas as well as the difference. Factors that could be used as a tool to measure the inequality of development is to look at the average growth and development contribution of each sector of Gross Regional Domestic Product (GRDP) based on the analyzed region and the reference region. This study discusses the development of a model to determine the regional development imbalances using fuzzy approach system, and the rules of typology Klassen. The model is then called fuzzy-Klassen. Implications Product Mamdani fuzzy system is used in the model as an inference engine to generate output after defuzzyfication process. Application of MATLAB is used as a tool of analysis in this study. The test a result of Kota Cilegon is shows that there are significant differences between traditional Klassen typology analyses with the results of the model developed. Fuzzy model-Klassen shows GRDP sector inequality Cilegon City is dominated by Quadrant I (K4), where status is the sector forward and grows exponentially. While the traditional Klassen typology, half of GRDP sector is dominated by Quadrant IV (K4) with a sector that is lagging relative status.', 'cs.AI', '2016-06-10T05:55:56Z', 'http://dx.doi.org/10.5120/ijca2015905389', '2016-10-08 10:25:53', '2016-10-08 10:25:53')[0m
  [1m[35m (3.0ms)[0m  COMMIT
  [1m[36mPublish Load (1.3ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 514[0m
  [1m[35mAuthor Load (0.9ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Tb. Ai Munandar'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Tb. Ai Munandar', '2016-10-08 10:25:53', '2016-10-08 10:25:53')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1375, 514, 0, '2016-10-08 10:25:53', '2016-10-08 10:25:53')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.9ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Retantyo Wardoyo'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.3ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Retantyo Wardoyo', '2016-10-08 10:25:53', '2016-10-08 10:25:53')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1376, 514, 1, '2016-10-08 10:25:53', '2016-10-08 10:25:53')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.7ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Policy Networks with Two-Stage Training for Dialogue Systems'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Policy Networks with Two-Stage Training for Dialogue Systems', 'In this paper, we propose to use deep policy networks which are trained with an advantage actor-critic method for statistically optimised dialogue systems. First, we show that, on summary state and action spaces, deep Reinforcement Learning (RL) outperforms Gaussian Processes methods. Summary state and action spaces lead to good performance but require pre-engineering effort, RL knowledge, and domain expertise. In order to remove the need to define such summary spaces, we show that deep RL can also be trained efficiently on the original state and action spaces. Dialogue systems based on partially observable Markov decision processes are known to require many dialogues to train, which makes them unappealing for practical deployment. We show that a deep RL method based on an actor-critic architecture can exploit a small amount of data very efficiently. Indeed, with only a few hundred dialogues collected with a handcrafted policy, the actor-critic deep learner is considerably bootstrapped from a combination of supervised and batch RL. In addition, convergence to an optimal policy is significantly sped up compared to other deep RL methods initialized on the data with batch RL. All experiments are performed on a restaurant domain derived from the Dialogue State Tracking Challenge 2 (DSTC2) dataset.', 'cs.CL', '2016-06-10T01:02:19Z', 'http://arxiv.org/abs/1606.03152v4', '2016-10-08 10:25:53', '2016-10-08 10:25:53')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (0.8ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 515
  [1m[36mAuthor Load (0.7ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Mehdi Fatemi'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Mehdi Fatemi', '2016-10-08 10:25:53', '2016-10-08 10:25:53')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1377, 515, 0, '2016-10-08 10:25:53', '2016-10-08 10:25:53')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.9ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Layla El Asri'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Layla El Asri', '2016-10-08 10:25:53', '2016-10-08 10:25:53')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1378, 515, 1, '2016-10-08 10:25:53', '2016-10-08 10:25:53')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.9ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Hannes Schulz'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Hannes Schulz', '2016-10-08 10:25:53', '2016-10-08 10:25:53')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1379, 515, 2, '2016-10-08 10:25:53', '2016-10-08 10:25:53')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.9ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Jing He'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Jing He', '2016-10-08 10:25:53', '2016-10-08 10:25:53')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1380, 515, 3, '2016-10-08 10:25:53', '2016-10-08 10:25:53')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (1.1ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Kaheer Suleman'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Kaheer Suleman', '2016-10-08 10:25:53', '2016-10-08 10:25:53')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1381, 515, 4, '2016-10-08 10:25:53', '2016-10-08 10:25:53')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.7ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Cooperative Inverse Reinforcement Learning'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Cooperative Inverse Reinforcement Learning', 'For an autonomous system to be helpful to humans and to pose no unwarranted risks, it needs to align its values with those of the humans in its environment in such a way that its actions contribute to the maximization of value for the humans. We propose a formal definition of the value alignment problem as cooperative inverse reinforcement learning (CIRL). A CIRL problem is a cooperative, partial-information game with two agents, human and robot; both are rewarded according to the human\'s reward function, but the robot does not initially know what this is. In contrast to classical IRL, where the human is assumed to act optimally in isolation, optimal CIRL solutions produce behaviors such as active teaching, active learning, and communicative actions that are more effective in achieving value alignment. We show that computing optimal joint policies in CIRL games can be reduced to solving a POMDP, prove that optimality in isolation is suboptimal in CIRL, and derive an approximate CIRL algorithm.', 'cs.AI', '2016-06-09T22:39:54Z', 'http://arxiv.org/abs/1606.03137v2', '2016-10-08 10:25:53', '2016-10-08 10:25:53')
  [1m[36m (2.9ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (1.3ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 516
  [1m[36mAuthor Load (1.2ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Dylan Hadfield-Menell'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Dylan Hadfield-Menell', '2016-10-08 10:25:53', '2016-10-08 10:25:53')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1382, 516, 0, '2016-10-08 10:25:53', '2016-10-08 10:25:53')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.0ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Anca Dragan'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Anca Dragan', '2016-10-08 10:25:53', '2016-10-08 10:25:53')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1383, 516, 1, '2016-10-08 10:25:53', '2016-10-08 10:25:53')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (0.9ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Pieter Abbeel'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36m (0.2ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1124, 516, 2, '2016-10-08 10:25:53', '2016-10-08 10:25:53')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (1.0ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Stuart Russell'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36m (0.2ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1005, 516, 3, '2016-10-08 10:25:53', '2016-10-08 10:25:53')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (0.7ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'The \"Horse\'\' Inside: Seeking Causes Behind the Behaviours of Music Content Analysis Systems'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('The \"Horse\'\' Inside: Seeking Causes Behind the Behaviours of Music Content Analysis Systems', 'Building systems that possess the sensitivity and intelligence to identify and describe high-level attributes in music audio signals continues to be an elusive goal, but one that surely has broad and deep implications for a wide variety of applications. Hundreds of papers have so far been published toward this goal, and great progress appears to have been made. Some systems produce remarkable accuracies at recognising high-level semantic concepts, such as music style, genre and mood. However, it might be that these numbers do not mean what they seem. In this paper, we take a state-of-the-art music content analysis system and investigate what causes it to achieve exceptionally high performance in a benchmark music audio dataset. We dissect the system to understand its operation, determine its sensitivities and limitations, and predict the kinds of knowledge it could and could not possess about music. We perform a series of experiments to illuminate what the system has actually learned to do, and to what extent it is performing the intended music listening task. Our results demonstrate how the initial manifestation of music intelligence in this state-of-the-art can be deceptive. Our work provides constructive directions toward developing music content analysis systems that can address the music information and creation needs of real-world users.', 'cs.SD', '2016-06-09T18:10:31Z', 'http://arxiv.org/abs/1606.03044v1', '2016-10-08 10:25:53', '2016-10-08 10:25:53')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPublish Load (0.7ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 517[0m
  [1m[35mAuthor Load (0.7ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Bob L. Sturm'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Bob L. Sturm', '2016-10-08 10:25:53', '2016-10-08 10:25:53')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1384, 517, 0, '2016-10-08 10:25:53', '2016-10-08 10:25:53')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (0.7ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'MuFuRU: The Multi-Function Recurrent Unit'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('MuFuRU: The Multi-Function Recurrent Unit', 'Recurrent neural networks such as the GRU and LSTM found wide adoption in natural language processing and achieve state-of-the-art results for many tasks. These models are characterized by a memory state that can be written to and read from by applying gated composition operations to the current input and the previous state. However, they only cover a small subset of potentially useful compositions. We propose Multi-Function Recurrent Units (MuFuRUs) that allow for arbitrary differentiable functions as composition operations. Furthermore, MuFuRUs allow for an input- and state-dependent choice of these composition operations that is learned. Our experiments demonstrate that the additional functionality helps in different sequence modeling tasks, including the evaluation of propositional logic formulae, language modeling and sentiment analysis.', 'cs.NE', '2016-06-09T15:41:17Z', 'http://arxiv.org/abs/1606.03002v1', '2016-10-08 10:25:53', '2016-10-08 10:25:53')[0m
  [1m[35m (3.0ms)[0m  COMMIT
  [1m[36mPublish Load (1.3ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 518[0m
  [1m[35mAuthor Load (0.9ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Dirk Weissenborn'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35m (0.2ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1312, 518, 0, '2016-10-08 10:25:53', '2016-10-08 10:25:53')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.0ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Tim Rocktäschel'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35m (0.1ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1055, 518, 1, '2016-10-08 10:25:53', '2016-10-08 10:25:53')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.7ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Generative Topic Embedding: a Continuous Representation of Documents (Extended Version with Proofs)'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Generative Topic Embedding: a Continuous Representation of Documents (Extended Version with Proofs)', 'Word embedding maps words into a low-dimensional continuous embedding space by exploiting the local word collocation patterns in a small context window. On the other hand, topic modeling maps documents onto a low-dimensional topic space, by utilizing the global word collocation patterns in the same document. These two types of patterns are complementary. In this paper, we propose a generative topic embedding model to combine the two types of patterns. In our model, topics are represented by embedding vectors, and are shared across documents. The probability of each word is influenced by both its local context and its topic. A variational inference method yields the topic embeddings as well as the topic mixing proportions for each document. Jointly they represent the document in a low-dimensional continuous space. In two document classification tasks, our method performs better than eight existing methods, with fewer features. In addition, we illustrate with an example that our method can generate coherent topics even based on only one document.', 'cs.CL', '2016-06-09T14:45:39Z', 'http://arxiv.org/abs/1606.02979v2', '2016-10-08 10:25:53', '2016-10-08 10:25:53')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (1.1ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 519
  [1m[36mAuthor Load (0.7ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Shaohua Li'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Shaohua Li', '2016-10-08 10:25:53', '2016-10-08 10:25:53')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1385, 519, 0, '2016-10-08 10:25:53', '2016-10-08 10:25:53')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.9ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Tat-Seng Chua'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Tat-Seng Chua', '2016-10-08 10:25:53', '2016-10-08 10:25:53')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1386, 519, 1, '2016-10-08 10:25:53', '2016-10-08 10:25:53')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.9ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Jun Zhu'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Jun Zhu', '2016-10-08 10:25:53', '2016-10-08 10:25:53')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1387, 519, 2, '2016-10-08 10:25:53', '2016-10-08 10:25:53')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.9ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Chunyan Miao'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Chunyan Miao', '2016-10-08 10:25:53', '2016-10-08 10:25:53')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1388, 519, 3, '2016-10-08 10:25:53', '2016-10-08 10:25:53')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (0.7ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'A Cognitive Architecture for the Implementation of Emotions in Computing Systems'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('A Cognitive Architecture for the Implementation of Emotions in Computing Systems', 'In this paper we present a new neurobiologically-inspired affective cognitive architecture: NEUCOGAR (NEUromodulating COGnitive ARchitecture). The objective of NEUCOGAR is the identification of a mapping from the influence of serotonin, dopamine and noradrenaline to the computing processes based on Von Neuman\'s architecture, in order to implement affective phenomena which can operate on the Turing\'s machine model. As basis of the modeling we use and extend the L\\\"ovheim Cube of Emotion with parameters of the Von Neumann architecture. Validation is conducted via simulation on a computing system of dopamine neuromodulation and its effects on the Cortex. In the experimental phase of the project, the increase of computing power and storage redistribution due to emotion stimulus modulated by the dopamine system, confirmed the soundness of the model.', 'cs.AI', '2016-06-09T10:43:21Z', 'http://dx.doi.org/10.1016/j.bica.2015.11.002', '2016-10-08 10:25:53', '2016-10-08 10:25:53')[0m
  [1m[35m (2.9ms)[0m  COMMIT
  [1m[36mPublish Load (1.3ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 520[0m
  [1m[35mAuthor Load (0.9ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Jordi Vallverdú'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35m (0.1ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1374, 520, 0, '2016-10-08 10:25:53', '2016-10-08 10:25:53')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.7ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Max Talanov'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35m (0.1ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (626, 520, 1, '2016-10-08 10:25:53', '2016-10-08 10:25:53')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.9ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Salvatore Distefano'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35m (0.1ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1372, 520, 2, '2016-10-08 10:25:53', '2016-10-08 10:25:53')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.7ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Manuel Mazzara'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35m (0.2ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (628, 520, 3, '2016-10-08 10:25:53', '2016-10-08 10:25:53')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.7ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Alexander Tchitchigin'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35m (0.1ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (625, 520, 4, '2016-10-08 10:25:53', '2016-10-08 10:25:53')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.0ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Ildar Nurgaliev'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Ildar Nurgaliev', '2016-10-08 10:25:53', '2016-10-08 10:25:53')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1389, 520, 5, '2016-10-08 10:25:53', '2016-10-08 10:25:53')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (0.7ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Understanding User Instructions by Utilizing Open Knowledge for Service Robots'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Understanding User Instructions by Utilizing Open Knowledge for Service Robots', 'Understanding user instructions in natural language is an active research topic in AI and robotics. Typically, natural user instructions are high-level and can be reduced into low-level tasks expressed in common verbs (e.g., `take\', `get\', `put\'). For robots understanding such instructions, one of the key challenges is to process high-level user instructions and achieve the specified tasks with robots\' primitive actions. To address this, we propose novel algorithms by utilizing semantic roles of common verbs defined in semantic dictionaries and integrating multiple open knowledge to generate task plans. Specifically, we present a new method for matching and recovering semantics of user instructions and a novel task planner that exploits functional knowledge of robot\'s action model. To verify and evaluate our approach, we implemented a prototype system using knowledge from several open resources. Experiments on our system confirmed the correctness and efficiency of our algorithms. Notably, our system has been deployed in the KeJia robot, which participated the annual RoboCup@Home competitions in the past three years and achieved encouragingly high scores in the benchmark tests.', 'cs.RO', '2016-06-09T09:02:16Z', 'http://arxiv.org/abs/1606.02877v1', '2016-10-08 10:25:53', '2016-10-08 10:25:53')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPublish Load (0.9ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 521[0m
  [1m[35mAuthor Load (0.7ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Dongcai Lu'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Dongcai Lu', '2016-10-08 10:25:53', '2016-10-08 10:25:53')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1390, 521, 0, '2016-10-08 10:25:53', '2016-10-08 10:25:53')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.7ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Feng Wu'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Feng Wu', '2016-10-08 10:25:53', '2016-10-08 10:25:53')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1391, 521, 1, '2016-10-08 10:25:53', '2016-10-08 10:25:53')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.3ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Xiaoping Chen'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Xiaoping Chen', '2016-10-08 10:25:53', '2016-10-08 10:25:53')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1392, 521, 2, '2016-10-08 10:25:53', '2016-10-08 10:25:53')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPaper Load (0.7ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'A Thorough Examination of the CNN/Daily Mail Reading Comprehension Task'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('A Thorough Examination of the CNN/Daily Mail Reading Comprehension Task', 'Enabling a computer to understand a document so that it can answer comprehension questions is a central, yet unsolved goal of NLP. A key factor impeding its solution by machine learned systems is the limited availability of human-annotated data. Hermann et al. (2015) seek to solve this problem by creating over a million training examples by pairing CNN and Daily Mail news articles with their summarized bullet points, and show that a neural network can then be trained to give good performance on this task. In this paper, we conduct a thorough examination of this new reading comprehension task. Our primary aim is to understand what depth of language understanding is required to do well on this task. We approach this from one side by doing a careful hand-analysis of a small subset of the problems and from the other by showing that simple, carefully designed systems can obtain accuracies of 73.6% and 76.6% on these two datasets, exceeding current state-of-the-art results by 7-10% and approaching what we believe is the ceiling for performance on this task.', 'cs.CL', '2016-06-09T08:19:16Z', 'http://arxiv.org/abs/1606.02858v2', '2016-10-08 10:25:53', '2016-10-08 10:25:53')[0m
  [1m[35m (3.0ms)[0m  COMMIT
  [1m[36mPublish Load (1.3ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 522[0m
  [1m[35mAuthor Load (1.0ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Danqi Chen'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Danqi Chen', '2016-10-08 10:25:53', '2016-10-08 10:25:53')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1393, 522, 0, '2016-10-08 10:25:53', '2016-10-08 10:25:53')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (1.0ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Jason Bolton'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Jason Bolton', '2016-10-08 10:25:53', '2016-10-08 10:25:53')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1394, 522, 1, '2016-10-08 10:25:53', '2016-10-08 10:25:53')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.0ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Christopher D. Manning'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35m (0.1ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1012, 522, 2, '2016-10-08 10:25:53', '2016-10-08 10:25:53')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.7ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'e-Commerce product classification: our participation at cDiscount 2015 challenge'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('e-Commerce product classification: our participation at cDiscount 2015 challenge', 'This report describes our participation in the cDiscount 2015 challenge where the goal was to classify product items in a predefined taxonomy of products. Our best submission yielded an accuracy score of 64.20\\% in the private part of the leaderboard and we were ranked 10th out of 175 participating teams. We followed a text classification approach employing mainly linear models. The final solution was a weighted voting system which combined a variety of trained models.', 'cs.LG', '2016-06-09T08:06:00Z', 'http://arxiv.org/abs/1606.02854v1', '2016-10-08 10:25:53', '2016-10-08 10:25:53')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (1.0ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 523
  [1m[36mAuthor Load (0.7ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Ioannis Partalas'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Ioannis Partalas', '2016-10-08 10:25:53', '2016-10-08 10:25:53')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1395, 523, 0, '2016-10-08 10:25:53', '2016-10-08 10:25:53')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.7ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Georgios Balikas'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Georgios Balikas', '2016-10-08 10:25:53', '2016-10-08 10:25:53')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1396, 523, 1, '2016-10-08 10:25:53', '2016-10-08 10:25:53')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (0.7ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Arbitrage-Free Combinatorial Market Making via Integer Programming'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.4ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Arbitrage-Free Combinatorial Market Making via Integer Programming', 'We present a new combinatorial market maker that operates arbitrage-free combinatorial prediction markets specified by integer programs. Although the problem of arbitrage-free pricing, while maintaining a bound on the subsidy provided by the market maker, is #P-hard in the worst case, we posit that the typical case might be amenable to modern integer programming (IP) solvers. At the crux of our method is the Frank-Wolfe (conditional gradient) algorithm which is used to implement a Bregman projection aligned with the market maker\'s cost function, using an IP solver as an oracle. We demonstrate the tractability and improved accuracy of our approach on real-world prediction market data from combinatorial bets placed on the 2010 NCAA Men\'s Division I Basketball Tournament, where the outcome space is of size 2^63. To our knowledge, this is the first implementation and empirical evaluation of an arbitrage-free combinatorial prediction market on this scale.', 'cs.GT', '2016-06-09T04:59:50Z', 'http://dx.doi.org/10.1145/2940716.2940767', '2016-10-08 10:25:53', '2016-10-08 10:25:53')[0m
  [1m[35m (2.9ms)[0m  COMMIT
  [1m[36mPublish Load (1.3ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 524[0m
  [1m[35mAuthor Load (1.1ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Christian Kroer'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Christian Kroer', '2016-10-08 10:25:53', '2016-10-08 10:25:53')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1397, 524, 0, '2016-10-08 10:25:53', '2016-10-08 10:25:53')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (1.1ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Miroslav Dudík'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Miroslav Dudík', '2016-10-08 10:25:53', '2016-10-08 10:25:53')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1398, 524, 1, '2016-10-08 10:25:53', '2016-10-08 10:25:53')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.1ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Sébastien Lahaie'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.4ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Sébastien Lahaie', '2016-10-08 10:25:53', '2016-10-08 10:25:53')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1399, 524, 2, '2016-10-08 10:25:53', '2016-10-08 10:25:53')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (0.9ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Sivaraman Balakrishnan'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36m (0.1ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (989, 524, 3, '2016-10-08 10:25:53', '2016-10-08 10:25:53')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPaper Load (0.7ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Face valuing: Training user interfaces with facial expressions and reinforcement learning'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Face valuing: Training user interfaces with facial expressions and reinforcement learning', 'An important application of interactive machine learning is extending or amplifying the cognitive and physical capabilities of a human. To accomplish this, machines need to learn about their human users\' intentions and adapt to their preferences. In most current research, a user has conveyed preferences to a machine using explicit corrective or instructive feedback; explicit feedback imposes a cognitive load on the user and is expensive in terms of human effort. The primary objective of the current work is to demonstrate that a learning agent can reduce the amount of explicit feedback required for adapting to the user\'s preferences pertaining to a task by learning to perceive a value of its behavior from the human user, particularly from the user\'s facial expressions---we call this face valuing. We empirically evaluate face valuing on a grip selection task. Our preliminary results suggest that an agent can quickly adapt to a user\'s changing preferences with minimal explicit feedback by learning a value function that maps facial features extracted from a camera image to expected future reward. We believe that an agent learning to perceive a value from the body language of its human user is complementary to existing interactive machine learning approaches and will help in creating successful human-machine interactive applications.', 'cs.HC', '2016-06-09T03:06:46Z', 'http://arxiv.org/abs/1606.02807v1', '2016-10-08 10:25:53', '2016-10-08 10:25:53')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPublish Load (1.2ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 525[0m
  [1m[35mAuthor Load (0.8ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Vivek Veeriah'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Vivek Veeriah', '2016-10-08 10:25:53', '2016-10-08 10:25:53')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1400, 525, 0, '2016-10-08 10:25:53', '2016-10-08 10:25:53')[0m
  [1m[35m (1.1ms)[0m  COMMIT
  [1m[36mAuthor Load (1.0ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Patrick M. Pilarski'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36m (0.1ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1157, 525, 1, '2016-10-08 10:25:53', '2016-10-08 10:25:53')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (1.0ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Richard S. Sutton'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Richard S. Sutton', '2016-10-08 10:25:53', '2016-10-08 10:25:53')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1401, 525, 2, '2016-10-08 10:25:53', '2016-10-08 10:25:53')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.7ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Theoretical Robopsychology: Samu Has Learned Turing Machines'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Theoretical Robopsychology: Samu Has Learned Turing Machines', 'From the point of view of a programmer, the robopsychology is a synonym for the activity is done by developers to implement their machine learning applications. This robopsychological approach raises some fundamental theoretical questions of machine learning. Our discussion of these questions is constrained to Turing machines. Alan Turing had given an algorithm (aka the Turing Machine) to describe algorithms. If it has been applied to describe itself then this brings us to Turing\'s notion of the universal machine. In the present paper, we investigate algorithms to write algorithms. From a pedagogy point of view, this way of writing programs can be considered as a combination of learning by listening and learning by doing due to it is based on applying agent technology and machine learning. As the main result we introduce the problem of learning and then we show that it cannot easily be handled in reality therefore it is reasonable to use machine learning algorithm for learning Turing machines.', 'cs.AI', '2016-06-08T21:46:20Z', 'http://arxiv.org/abs/1606.02767v2', '2016-10-08 10:25:53', '2016-10-08 10:25:53')
  [1m[36m (3.0ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (1.3ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 526
  [1m[36mAuthor Load (1.1ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Norbert Bátfai'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Norbert Bátfai', '2016-10-08 10:25:53', '2016-10-08 10:25:53')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1402, 526, 0, '2016-10-08 10:25:53', '2016-10-08 10:25:53')
  [1m[36m (1.2ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.8ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Safe and Efficient Off-Policy Reinforcement Learning'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.4ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Safe and Efficient Off-Policy Reinforcement Learning', 'In this work, we take a fresh look at some old and new algorithms for off-policy, return-based reinforcement learning. Expressing these in a common form, we derive a novel algorithm, Retrace($\\lambda$), with three desired properties: (1) low variance; (2) safety, as it safely uses samples collected from any behaviour policy, whatever its degree of \"off-policyness\"; and (3) efficiency, as it makes the best use of samples collected from near on-policy behaviour policies. We analyse the contractive nature of the related operator under both off-policy policy evaluation and control settings and derive online sample-based algorithms. To our knowledge, this is the first return-based off-policy control algorithm converging a.s. to $Q^*$ without the GLIE assumption (Greedy in the Limit with Infinite Exploration). As a corollary, we prove the convergence of Watkins\' Q($\\lambda$), which was still an open problem. We illustrate the benefits of Retrace($\\lambda$) on a standard suite of Atari 2600 games.', 'cs.LG', '2016-06-08T17:34:13Z', 'http://arxiv.org/abs/1606.02647v1', '2016-10-08 10:25:53', '2016-10-08 10:25:53')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (1.0ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 527
  [1m[36mAuthor Load (0.8ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Rémi Munos'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36m (0.2ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1234, 527, 0, '2016-10-08 10:25:53', '2016-10-08 10:25:53')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.9ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Tom Stepleton'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Tom Stepleton', '2016-10-08 10:25:53', '2016-10-08 10:25:53')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1403, 527, 1, '2016-10-08 10:25:53', '2016-10-08 10:25:53')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.0ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Anna Harutyunyan'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Anna Harutyunyan', '2016-10-08 10:25:53', '2016-10-08 10:25:53')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1404, 527, 2, '2016-10-08 10:25:53', '2016-10-08 10:25:53')[0m
  [1m[35m (0.3ms)[0m  COMMIT
  [1m[36mAuthor Load (1.1ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Marc G. Bellemare'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Marc G. Bellemare', '2016-10-08 10:25:53', '2016-10-08 10:25:53')[0m
  [1m[35m (0.8ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1405, 527, 3, '2016-10-08 10:25:53', '2016-10-08 10:25:53')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.7ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Simplified Boardgames'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Simplified Boardgames', 'We formalize Simplified Boardgames language, which describes a subclass of arbitrary board games. The language structure is based on the regular expressions, which makes the rules easily machine-processable while keeping the rules concise and fairly human-readable.', 'cs.AI', '2016-06-08T17:29:17Z', 'http://arxiv.org/abs/1606.02645v2', '2016-10-08 10:25:53', '2016-10-08 10:25:53')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (1.1ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 528
  [1m[36mAuthor Load (0.7ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Jakub Kowalski'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Jakub Kowalski', '2016-10-08 10:25:53', '2016-10-08 10:25:53')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1406, 528, 0, '2016-10-08 10:25:53', '2016-10-08 10:25:53')
  [1m[36m (0.3ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.9ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Jakub Sutowicz'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.6ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Jakub Sutowicz', '2016-10-08 10:25:53', '2016-10-08 10:25:53')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1407, 528, 1, '2016-10-08 10:25:53', '2016-10-08 10:25:53')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.8ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Marek Szykuła'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Marek Szykuła', '2016-10-08 10:25:53', '2016-10-08 10:25:53')[0m
  [1m[35m (2.9ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.4ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1408, 528, 2, '2016-10-08 10:25:53', '2016-10-08 10:25:53')
  [1m[36m (1.1ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.9ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'The Dark Side of Ethical Robots'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('The Dark Side of Ethical Robots', 'Concerns over the risks associated with advances in Artificial Intelligence have prompted calls for greater efforts toward robust and beneficial AI, including machine ethics. Recently, roboticists have responded by initiating the development of so-called ethical robots. These robots would, ideally, evaluate the consequences of their actions and morally justify their choices. This emerging field promises to develop extensively over the next years. However, in this paper, we point out an inherent limitation of the emerging field of ethical robots. We show that building ethical robots also necessarily facilitates the construction of unethical robots. In three experiments, we show that it is remarkably easy to modify an ethical robot so that it behaves competitively, or even aggressively. The reason for this is that the specific AI, required to make an ethical robot, can always be exploited to make unethical robots. Hence, the development of ethical robots will not guarantee the responsible deployment of AI. While advocating for ethical robots, we conclude that preventing the misuse of robots is beyond the scope of engineering, and requires instead governance frameworks underpinned by legislation. Without this, the development of ethical robots will serve to increase the risks of robotic malpractice instead of diminishing it.', 'cs.RO', '2016-06-08T14:47:35Z', 'http://arxiv.org/abs/1606.02583v1', '2016-10-08 10:25:54', '2016-10-08 10:25:54')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (1.0ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 529
  [1m[36mAuthor Load (0.9ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Dieter Vanderelst'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Dieter Vanderelst', '2016-10-08 10:25:54', '2016-10-08 10:25:54')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1409, 529, 0, '2016-10-08 10:25:54', '2016-10-08 10:25:54')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.9ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Alan Winfield'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Alan Winfield', '2016-10-08 10:25:54', '2016-10-08 10:25:54')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1410, 529, 1, '2016-10-08 10:25:54', '2016-10-08 10:25:54')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (0.7ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'DialPort: Connecting the Spoken Dialog Research Community to Real User Data'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('DialPort: Connecting the Spoken Dialog Research Community to Real User Data', 'This paper describes a new spoken dialog portal that connects systems produced by the spoken dialog academic research community and gives them access to real users. We introduce a distributed, multi-modal, multi-agent prototype dialog framework that affords easy integration with various remote resources, ranging from end-to-end dialog systems to external knowledge APIs. To date, the DialPort portal has successfully connected to the multi-domain spoken dialog system at Cambridge University, the NOAA (National Oceanic and Atmospheric Administration) weather API and the Yelp API.', 'cs.AI', '2016-06-08T14:08:21Z', 'http://arxiv.org/abs/1606.02562v1', '2016-10-08 10:25:54', '2016-10-08 10:25:54')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPublish Load (1.1ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 530[0m
  [1m[35mAuthor Load (0.9ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Tiancheng Zhao'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Tiancheng Zhao', '2016-10-08 10:25:54', '2016-10-08 10:25:54')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1411, 530, 0, '2016-10-08 10:25:54', '2016-10-08 10:25:54')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (1.0ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Kyusong Lee'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Kyusong Lee', '2016-10-08 10:25:54', '2016-10-08 10:25:54')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1412, 530, 1, '2016-10-08 10:25:54', '2016-10-08 10:25:54')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.1ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Maxine Eskenazi'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Maxine Eskenazi', '2016-10-08 10:25:54', '2016-10-08 10:25:54')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1413, 530, 2, '2016-10-08 10:25:54', '2016-10-08 10:25:54')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (0.7ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Towards End-to-End Learning for Dialog State Tracking and Management using Deep Reinforcement Learning'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Towards End-to-End Learning for Dialog State Tracking and Management using Deep Reinforcement Learning', 'This paper presents an end-to-end framework for task-oriented dialog systems using a variant of Deep Recurrent Q-Networks (DRQN). The model is able to interface with a relational database and jointly learn policies for both language understanding and dialog strategy. Moreover, we propose a hybrid algorithm that combines the strength of reinforcement learning and supervised learning to achieve faster learning speed. We evaluated the proposed model on a 20 Question Game conversational game simulator. Results show that the proposed method outperforms the modular-based baseline and learns a distributed representation of the latent dialog state.', 'cs.AI', '2016-06-08T14:03:25Z', 'http://arxiv.org/abs/1606.02560v1', '2016-10-08 10:25:54', '2016-10-08 10:25:54')[0m
  [1m[35m (3.0ms)[0m  COMMIT
  [1m[36mPublish Load (1.3ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 531[0m
  [1m[35mAuthor Load (0.9ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Tiancheng Zhao'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35m (0.2ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1411, 531, 0, '2016-10-08 10:25:54', '2016-10-08 10:25:54')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.9ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Maxine Eskenazi'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35m (0.2ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1413, 531, 1, '2016-10-08 10:25:54', '2016-10-08 10:25:54')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.8ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'DISCO Nets: DISsimilarity COefficient Networks'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('DISCO Nets: DISsimilarity COefficient Networks', 'We present a new type of probabilistic model which we call DISsimilarity COefficient Networks (DISCO Nets). DISCO Nets allow us to efficiently sample from a posterior distribution parametrised by a neural network. During training, DISCO Nets are learned by minimising the dissimilarity coefficient between the true distribution and the estimated distribution. This allows us to tailor the training to the loss related to the task at hand. We empirically show that (i) by modeling uncertainty on the output value, DISCO Nets outperform equivalent non-probabilistic predictive networks and (ii) DISCO Nets accurately model the uncertainty of the output, outperforming existing probabilistic models based on deep neural networks.', 'cs.CV', '2016-06-08T13:57:44Z', 'http://arxiv.org/abs/1606.02556v4', '2016-10-08 10:25:54', '2016-10-08 10:25:54')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (1.0ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 532
  [1m[36mAuthor Load (0.8ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Diane Bouchacourt'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Diane Bouchacourt', '2016-10-08 10:25:54', '2016-10-08 10:25:54')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1414, 532, 0, '2016-10-08 10:25:54', '2016-10-08 10:25:54')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.7ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'M. Pawan Kumar'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('M. Pawan Kumar', '2016-10-08 10:25:54', '2016-10-08 10:25:54')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1415, 532, 1, '2016-10-08 10:25:54', '2016-10-08 10:25:54')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.9ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Sebastian Nowozin'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Sebastian Nowozin', '2016-10-08 10:25:54', '2016-10-08 10:25:54')[0m
  [1m[35m (2.4ms)[0m  COMMIT
  [1m[36m (0.3ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1416, 532, 2, '2016-10-08 10:25:54', '2016-10-08 10:25:54')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.8ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Symbolic Music Data Version 1.0'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Symbolic Music Data Version 1.0', 'In this document, we introduce a new dataset designed for training machine learning models of symbolic music data. Five datasets are provided, one of which is from a newly collected corpus of 20K midi files. We describe our preprocessing and cleaning pipeline, which includes the exclusion of a number of files based on scores from a previously developed probabilistic machine learning model. We also define training, testing and validation splits for the new dataset, based on a clustering scheme which we also describe. Some simple histograms are included.', 'cs.SD', '2016-06-08T13:19:01Z', 'http://arxiv.org/abs/1606.02542v1', '2016-10-08 10:25:54', '2016-10-08 10:25:54')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (1.1ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 533
  [1m[36mAuthor Load (0.8ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Christian Walder'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Christian Walder', '2016-10-08 10:25:54', '2016-10-08 10:25:54')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1417, 533, 0, '2016-10-08 10:25:54', '2016-10-08 10:25:54')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.8ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'A Modified Vortex Search Algorithm for Numerical Function Optimization'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('A Modified Vortex Search Algorithm for Numerical Function Optimization', 'The Vortex Search (VS) algorithm is one of the recently proposed metaheuristic algorithms which was inspired from the vortical flow of the stirred fluids. Although the VS algorithm is shown to be a good candidate for the solution of certain optimization problems, it also has some drawbacks. In the VS algorithm, candidate solutions are generated around the current best solution by using a Gaussian distribution at each iteration pass. This provides simplicity to the algorithm but it also leads to some problems along. Especially, for the functions those have a number of local minimum points, to select a single point to generate candidate solutions leads the algorithm to being trapped into a local minimum point. Due to the adaptive step-size adjustment scheme used in the VS algorithm, the locality of the created candidate solutions is increased at each iteration pass. Therefore, if the algorithm cannot escape a local point as quickly as possible, it becomes much more difficult for the algorithm to escape from that point in the latter iterations. In this study, a modified Vortex Search algorithm (MVS) is proposed to overcome above mentioned drawback of the existing VS algorithm. In the MVS algorithm, the candidate solutions are generated around a number of points at each iteration pass. Computational results showed that with the help of this modification the global search ability of the existing VS algorithm is improved and the MVS algorithm outperformed the existing VS algorithm, PSO2011 and ABC algorithms for the benchmark numerical function set.', 'cs.AI', '2016-06-08T12:00:28Z', 'http://dx.doi.org/10.5121/ijaia.2016.7304', '2016-10-08 10:25:54', '2016-10-08 10:25:54')
  [1m[36m (3.0ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (1.4ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 534
  [1m[36mAuthor Load (1.0ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Berat Doğan'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Berat Doğan', '2016-10-08 10:25:54', '2016-10-08 10:25:54')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1418, 534, 0, '2016-10-08 10:25:54', '2016-10-08 10:25:54')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.7ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Exploring Implicit Human Responses to Robot Mistakes in a Learning from Demonstration Task'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Exploring Implicit Human Responses to Robot Mistakes in a Learning from Demonstration Task', 'As robots enter human environments, they will be expected to accomplish a tremendous range of tasks. It is not feasible for robot designers to pre-program these behaviors or know them in advance, so one way to address this is through end-user programming, such as via learning from demonstration (LfD). While significant work has been done on the mechanics of enabling robot learning from human teachers, one unexplored aspect is enabling mutual feedback between both the human teacher and robot during the learning process, i.e., implicit learning. In this paper, we explore one aspect of this mutual understanding, grounding sequences, where both a human and robot provide non-verbal feedback to signify their mutual understanding during interaction. We conducted a study where people taught an autonomous humanoid robot a dance, and performed gesture analysis to measure people\'s responses to the robot during correct and incorrect demonstrations.', 'cs.RO', '2016-06-08T10:07:01Z', 'http://arxiv.org/abs/1606.02485v1', '2016-10-08 10:25:54', '2016-10-08 10:25:54')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (1.2ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 535
  [1m[36mAuthor Load (0.7ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Cory J. Hayes'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Cory J. Hayes', '2016-10-08 10:25:54', '2016-10-08 10:25:54')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1419, 535, 0, '2016-10-08 10:25:54', '2016-10-08 10:25:54')
  [1m[36m (0.3ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.8ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Maryam Moosaei'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Maryam Moosaei', '2016-10-08 10:25:54', '2016-10-08 10:25:54')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1420, 535, 1, '2016-10-08 10:25:54', '2016-10-08 10:25:54')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.9ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Laurel D. Riek'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Laurel D. Riek', '2016-10-08 10:25:54', '2016-10-08 10:25:54')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1421, 535, 2, '2016-10-08 10:25:54', '2016-10-08 10:25:54')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.7ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Learning Language Games through Interaction'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Learning Language Games through Interaction', 'We introduce a new language learning setting relevant to building adaptive natural language interfaces. It is inspired by Wittgenstein\'s language games: a human wishes to accomplish some task (e.g., achieving a certain configuration of blocks), but can only communicate with a computer, who performs the actual actions (e.g., removing all red blocks). The computer initially knows nothing about language and therefore must learn it from scratch through interaction, while the human adapts to the computer\'s capabilities. We created a game in a blocks world and collected interactions from 100 people playing it. First, we analyze the humans\' strategies, showing that using compositionality and avoiding synonyms correlates positively with task performance. Second, we compare computer strategies, showing how to quickly learn a semantic parsing model from scratch, and that modeling pragmatics further accelerates learning for successful players.', 'cs.CL', '2016-06-08T08:27:09Z', 'http://arxiv.org/abs/1606.02447v1', '2016-10-08 10:25:54', '2016-10-08 10:25:54')
  [1m[36m (3.0ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (1.4ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 536
  [1m[36mAuthor Load (1.1ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Sida I. Wang'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Sida I. Wang', '2016-10-08 10:25:54', '2016-10-08 10:25:54')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1422, 536, 0, '2016-10-08 10:25:54', '2016-10-08 10:25:54')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.9ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Percy Liang'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35m (0.1ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1159, 536, 1, '2016-10-08 10:25:54', '2016-10-08 10:25:54')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.8ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Christopher D. Manning'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35m (0.1ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1012, 536, 2, '2016-10-08 10:25:54', '2016-10-08 10:25:54')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.7ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Structured Convolution Matrices for Energy-efficient Deep learning'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Structured Convolution Matrices for Energy-efficient Deep learning', 'We derive a relationship between network representation in energy-efficient neuromorphic architectures and block Toplitz convolutional matrices. Inspired by this connection, we develop deep convolutional networks using a family of structured convolutional matrices and achieve state-of-the-art trade-off between energy efficiency and classification accuracy for well-known image recognition tasks. We also put forward a novel method to train binary convolutional networks by utilising an existing connection between noisy-rectified linear units and binary activations.', 'cs.NE', '2016-06-08T05:31:43Z', 'http://arxiv.org/abs/1606.02407v1', '2016-10-08 10:25:54', '2016-10-08 10:25:54')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (1.1ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 537
  [1m[36mAuthor Load (0.9ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Rathinakumar Appuswamy'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Rathinakumar Appuswamy', '2016-10-08 10:25:54', '2016-10-08 10:25:54')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1423, 537, 0, '2016-10-08 10:25:54', '2016-10-08 10:25:54')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.1ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Tapan Nayak'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Tapan Nayak', '2016-10-08 10:25:54', '2016-10-08 10:25:54')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1424, 537, 1, '2016-10-08 10:25:54', '2016-10-08 10:25:54')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.8ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'John Arthur'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('John Arthur', '2016-10-08 10:25:54', '2016-10-08 10:25:54')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1425, 537, 2, '2016-10-08 10:25:54', '2016-10-08 10:25:54')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.0ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Steven Esser'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Steven Esser', '2016-10-08 10:25:54', '2016-10-08 10:25:54')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1426, 537, 3, '2016-10-08 10:25:54', '2016-10-08 10:25:54')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (1.0ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Paul Merolla'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Paul Merolla', '2016-10-08 10:25:54', '2016-10-08 10:25:54')[0m
  [1m[35m (0.3ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1427, 537, 4, '2016-10-08 10:25:54', '2016-10-08 10:25:54')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.0ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Jeffrey Mckinstry'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Jeffrey Mckinstry', '2016-10-08 10:25:54', '2016-10-08 10:25:54')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1428, 537, 5, '2016-10-08 10:25:54', '2016-10-08 10:25:54')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (0.9ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Timothy Melano'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Timothy Melano', '2016-10-08 10:25:54', '2016-10-08 10:25:54')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1429, 537, 6, '2016-10-08 10:25:54', '2016-10-08 10:25:54')
  [1m[36m (2.8ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.3ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Myron Flickner'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.4ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Myron Flickner', '2016-10-08 10:25:54', '2016-10-08 10:25:54')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1430, 537, 7, '2016-10-08 10:25:54', '2016-10-08 10:25:54')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (1.1ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Dharmendra Modha'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Dharmendra Modha', '2016-10-08 10:25:54', '2016-10-08 10:25:54')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1431, 537, 8, '2016-10-08 10:25:54', '2016-10-08 10:25:54')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.8ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Deep Successor Reinforcement Learning'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Deep Successor Reinforcement Learning', 'Learning robust value functions given raw observations and rewards is now possible with model-free and model-based deep reinforcement learning algorithms. There is a third alternative, called Successor Representations (SR), which decomposes the value function into two components -- a reward predictor and a successor map. The successor map represents the expected future state occupancy from any given state and the reward predictor maps states to scalar rewards. The value function of a state can be computed as the inner product between the successor map and the reward weights. In this paper, we present DSR, which generalizes SR within an end-to-end deep reinforcement learning framework. DSR has several appealing properties including: increased sensitivity to distal reward changes due to factorization of reward and world dynamics, and the ability to extract bottleneck states (subgoals) given successor maps trained under a random policy. We show the efficacy of our approach on two diverse environments given raw pixel observations -- simple grid-world domains (MazeBase) and the Doom game engine.', 'stat.ML', '2016-06-08T04:48:49Z', 'http://arxiv.org/abs/1606.02396v1', '2016-10-08 10:25:54', '2016-10-08 10:25:54')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (0.8ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 538
  [1m[36mAuthor Load (0.7ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Tejas D. Kulkarni'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Tejas D. Kulkarni', '2016-10-08 10:25:54', '2016-10-08 10:25:54')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1432, 538, 0, '2016-10-08 10:25:54', '2016-10-08 10:25:54')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.8ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Ardavan Saeedi'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Ardavan Saeedi', '2016-10-08 10:25:54', '2016-10-08 10:25:54')
  [1m[36m (0.3ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.4ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1433, 538, 1, '2016-10-08 10:25:54', '2016-10-08 10:25:54')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (1.2ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Simanta Gautam'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Simanta Gautam', '2016-10-08 10:25:54', '2016-10-08 10:25:54')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1434, 538, 2, '2016-10-08 10:25:54', '2016-10-08 10:25:54')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.1ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Samuel J. Gershman'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Samuel J. Gershman', '2016-10-08 10:25:54', '2016-10-08 10:25:54')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1435, 538, 3, '2016-10-08 10:25:54', '2016-10-08 10:25:54')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPaper Load (0.7ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Deep Learning Convolutional Networks for Multiphoton Microscopy Vasculature Segmentation'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Deep Learning Convolutional Networks for Multiphoton Microscopy Vasculature Segmentation', 'Recently there has been an increasing trend to use deep learning frameworks for both 2D consumer images and for 3D medical images. However, there has been little effort to use deep frameworks for volumetric vascular segmentation. We wanted to address this by providing a freely available dataset of 12 annotated two-photon vasculature microscopy stacks. We demonstrated the use of deep learning framework consisting both 2D and 3D convolutional filters (ConvNet). Our hybrid 2D-3D architecture produced promising segmentation result. We derived the architectures from Lee et al. who used the ZNN framework initially designed for electron microscope image segmentation. We hope that by sharing our volumetric vasculature datasets, we will inspire other researchers to experiment with vasculature dataset and improve the used network architectures.', 'cs.CV', '2016-06-08T02:57:00Z', 'http://arxiv.org/abs/1606.02382v1', '2016-10-08 10:25:54', '2016-10-08 10:25:54')[0m
  [1m[35m (2.9ms)[0m  COMMIT
  [1m[36mPublish Load (1.4ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 539[0m
  [1m[35mAuthor Load (1.0ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Petteri Teikari'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Petteri Teikari', '2016-10-08 10:25:54', '2016-10-08 10:25:54')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1436, 539, 0, '2016-10-08 10:25:54', '2016-10-08 10:25:54')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.9ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Marc Santos'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Marc Santos', '2016-10-08 10:25:54', '2016-10-08 10:25:54')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1437, 539, 1, '2016-10-08 10:25:54', '2016-10-08 10:25:54')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.1ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Charissa Poon'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Charissa Poon', '2016-10-08 10:25:54', '2016-10-08 10:25:54')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1438, 539, 2, '2016-10-08 10:25:54', '2016-10-08 10:25:54')[0m
  [1m[35m (0.3ms)[0m  COMMIT
  [1m[36mAuthor Load (0.8ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Kullervo Hynynen'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Kullervo Hynynen', '2016-10-08 10:25:54', '2016-10-08 10:25:54')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1439, 539, 3, '2016-10-08 10:25:54', '2016-10-08 10:25:54')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.7ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'SE3-Nets: Learning Rigid Body Motion using Deep Neural Networks'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('SE3-Nets: Learning Rigid Body Motion using Deep Neural Networks', 'We introduce SE3-Nets, which are deep networks designed to model rigid body motion from raw point cloud data. Based only on pairs of depth images along with an action vector and point wise data associations, SE3-Nets learn to segment effected object parts and predict their motion resulting from the applied force. Rather than learning point wise flow vectors, SE3-Nets predict SE3 transformations for different parts of the scene. Using simulated depth data of a table top scene and a robot manipulator, we show that the structure underlying SE3-Nets enables them to generate a far more consistent prediction of object motion than traditional flow based networks.', 'cs.LG', '2016-06-08T02:36:11Z', 'http://arxiv.org/abs/1606.02378v2', '2016-10-08 10:25:54', '2016-10-08 10:25:54')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (1.0ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 540
  [1m[36mAuthor Load (0.7ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Arunkumar Byravan'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Arunkumar Byravan', '2016-10-08 10:25:54', '2016-10-08 10:25:54')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1440, 540, 0, '2016-10-08 10:25:54', '2016-10-08 10:25:54')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.8ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Dieter Fox'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Dieter Fox', '2016-10-08 10:25:54', '2016-10-08 10:25:54')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1441, 540, 1, '2016-10-08 10:25:54', '2016-10-08 10:25:54')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (0.7ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Active Long Term Memory Networks'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Active Long Term Memory Networks', 'Continual Learning in artificial neural networks suffers from interference and forgetting when different tasks are learned sequentially. This paper introduces the Active Long Term Memory Networks (A-LTM), a model of sequential multi-task deep learning that is able to maintain previously learned association between sensory input and behavioral output while acquiring knew knowledge. A-LTM exploits the non-convex nature of deep neural networks and actively maintains knowledge of previously learned, inactive tasks using a distillation loss. Distortions of the learned input-output map are penalized but hidden layers are free to transverse towards new local optima that are more favorable for the multi-task objective. We re-frame the McClelland\'s seminal Hippocampal theory with respect to Catastrophic Inference (CI) behavior exhibited by modern deep architectures trained with back-propagation and inhomogeneous sampling of latent factors across epochs. We present empirical results of non-trivial CI during continual learning in Deep Linear Networks trained on the same task, in Convolutional Neural Networks when the task shifts from predicting semantic to graphical factors and during domain adaptation from simple to complex environments. We present results of the A-LTM model\'s ability to maintain viewpoint recognition learned in the highly controlled iLab-20M dataset with 10 object categories and 88 camera viewpoints, while adapting to the unstructured domain of Imagenet with 1,000 object categories.', 'cs.LG', '2016-06-07T23:43:42Z', 'http://arxiv.org/abs/1606.02355v1', '2016-10-08 10:25:54', '2016-10-08 10:25:54')[0m
  [1m[35m (3.0ms)[0m  COMMIT
  [1m[36mPublish Load (1.6ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 541[0m
  [1m[35mAuthor Load (1.0ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Tommaso Furlanello'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Tommaso Furlanello', '2016-10-08 10:25:54', '2016-10-08 10:25:54')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1442, 541, 0, '2016-10-08 10:25:54', '2016-10-08 10:25:54')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (1.1ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Jiaping Zhao'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Jiaping Zhao', '2016-10-08 10:25:54', '2016-10-08 10:25:54')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1443, 541, 1, '2016-10-08 10:25:54', '2016-10-08 10:25:54')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.9ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Andrew M. Saxe'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Andrew M. Saxe', '2016-10-08 10:25:54', '2016-10-08 10:25:54')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1444, 541, 2, '2016-10-08 10:25:54', '2016-10-08 10:25:54')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (1.0ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Laurent Itti'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Laurent Itti', '2016-10-08 10:25:54', '2016-10-08 10:25:54')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1445, 541, 3, '2016-10-08 10:25:54', '2016-10-08 10:25:54')
  [1m[36m (1.3ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.1ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Bosco S. Tjan'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Bosco S. Tjan', '2016-10-08 10:25:54', '2016-10-08 10:25:54')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1446, 541, 4, '2016-10-08 10:25:54', '2016-10-08 10:25:54')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPaper Load (0.7ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Emotional Intensity analysis in Bipolar subjects'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Emotional Intensity analysis in Bipolar subjects', 'The massive availability of digital repositories of human thought opens radical novel way of studying the human mind. Natural language processing tools and computational models have evolved such that many mental conditions are predicted by analysing speech. Transcription of interviews and discourses are analyzed using syntactic, grammatical or sentiment analysis to infer the mental state. Here we set to investigate if classification of Bipolar and control subjects is possible. We develop the Emotion Intensity Index based on the Dictionary of Affect, and find that subjects categories are distinguishable. Using classical classification techniques we get more than 75\\% of labeling performance. These results sumed to previous studies show that current automated speech analysis is capable of identifying altered mental states towards a quantitative psychiatry.', 'cs.AI', '2016-06-07T17:44:44Z', 'http://arxiv.org/abs/1606.02231v1', '2016-10-08 10:25:54', '2016-10-08 10:25:54')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPublish Load (1.2ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 542[0m
  [1m[35mAuthor Load (0.7ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Facundo Carrillo'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Facundo Carrillo', '2016-10-08 10:25:54', '2016-10-08 10:25:54')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1447, 542, 0, '2016-10-08 10:25:54', '2016-10-08 10:25:54')[0m
  [1m[35m (0.3ms)[0m  COMMIT
  [1m[36mAuthor Load (0.9ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Natalia Mota'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Natalia Mota', '2016-10-08 10:25:54', '2016-10-08 10:25:54')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1448, 542, 1, '2016-10-08 10:25:54', '2016-10-08 10:25:54')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.1ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Mauro Copelli'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Mauro Copelli', '2016-10-08 10:25:54', '2016-10-08 10:25:54')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1449, 542, 2, '2016-10-08 10:25:54', '2016-10-08 10:25:54')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (1.0ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Sidarta Ribeiro'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Sidarta Ribeiro', '2016-10-08 10:25:54', '2016-10-08 10:25:54')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1450, 542, 3, '2016-10-08 10:25:54', '2016-10-08 10:25:54')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.1ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Mariano Sigman'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Mariano Sigman', '2016-10-08 10:25:54', '2016-10-08 10:25:54')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1451, 542, 4, '2016-10-08 10:25:54', '2016-10-08 10:25:54')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (1.1ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Guillermo Cecchi'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Guillermo Cecchi', '2016-10-08 10:25:54', '2016-10-08 10:25:54')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1452, 542, 5, '2016-10-08 10:25:54', '2016-10-08 10:25:54')
  [1m[36m (3.0ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.3ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Diego Fernandez Slezak'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Diego Fernandez Slezak', '2016-10-08 10:25:54', '2016-10-08 10:25:54')
  [1m[36m (0.9ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1453, 542, 6, '2016-10-08 10:25:54', '2016-10-08 10:25:54')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (0.8ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Multi-resource defensive strategies for patrolling games with alarm systems'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Multi-resource defensive strategies for patrolling games with alarm systems', 'Security Games employ game theoretical tools to derive resource allocation strategies in security domains. Recent works considered the presence of alarm systems, even suffering various forms of uncertainty, and showed that disregarding alarm signals may lead to arbitrarily bad strategies. The central problem with an alarm system, unexplored in other Security Games, is finding the best strategy to respond to alarm signals for each mobile defensive resource. The literature provides results for the basic single-resource case, showing that even in that case the problem is computationally hard. In this paper, we focus on the challenging problem of designing algorithms scaling with multiple resources. First, we focus on finding the minimum number of resources assuring non-null protection to every target. Then, we deal with the computation of multi-resource strategies with different degrees of coordination among resources. For each considered problem, we provide a computational analysis and propose algorithmic methods.', 'cs.AI', '2016-06-07T17:10:16Z', 'http://arxiv.org/abs/1606.02221v1', '2016-10-08 10:25:54', '2016-10-08 10:25:54')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPublish Load (0.8ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 543[0m
  [1m[35mAuthor Load (0.7ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Nicola Basilico'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Nicola Basilico', '2016-10-08 10:25:54', '2016-10-08 10:25:54')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1454, 543, 0, '2016-10-08 10:25:54', '2016-10-08 10:25:54')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (1.1ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Giuseppe De Nittis'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Giuseppe De Nittis', '2016-10-08 10:25:54', '2016-10-08 10:25:54')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1455, 543, 1, '2016-10-08 10:25:54', '2016-10-08 10:25:54')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.9ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Nicola Gatti'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Nicola Gatti', '2016-10-08 10:25:54', '2016-10-08 10:25:54')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1456, 543, 2, '2016-10-08 10:25:54', '2016-10-08 10:25:54')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (0.7ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Towards Playlist Generation Algorithms Using RNNs Trained on Within-Track Transitions'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Towards Playlist Generation Algorithms Using RNNs Trained on Within-Track Transitions', 'We introduce a novel playlist generation algorithm that focuses on the quality of transitions using a recurrent neural network (RNN). The proposed model assumes that optimal transitions between tracks can be modelled and predicted by internal transitions within music tracks. We introduce modelling sequences of high-level music descriptors using RNNs and discuss an experiment involving different similarity functions, where the sequences are provided by a musical structural analysis algorithm. Qualitative observations show that the proposed approach can effectively model transitions of music tracks in playlists.', 'cs.AI', '2016-06-07T11:07:56Z', 'http://arxiv.org/abs/1606.02096v1', '2016-10-08 10:25:54', '2016-10-08 10:25:54')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPublish Load (0.8ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 544[0m
  [1m[35mAuthor Load (0.5ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Keunwoo Choi'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35m (0.1ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (377, 544, 0, '2016-10-08 10:25:54', '2016-10-08 10:25:54')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.6ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'George Fazekas'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35m (0.2ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (378, 544, 1, '2016-10-08 10:25:54', '2016-10-08 10:25:54')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.5ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Mark Sandler'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35m (0.1ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (379, 544, 2, '2016-10-08 10:25:54', '2016-10-08 10:25:54')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.7ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Sorting out symptoms: design and evaluation of the \'babylon check\' automated triage system'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Sorting out symptoms: design and evaluation of the \'babylon check\' automated triage system', 'Prior to seeking professional medical care it is increasingly common for patients to use online resources such as automated symptom checkers. Many such systems attempt to provide a differential diagnosis based on the symptoms elucidated from the user, which may lead to anxiety if life or limb-threatening conditions are part of the list, a phenomenon termed \'cyberchondria\' [1]. Systems that provide advice on where to seek help, rather than a diagnosis, are equally popular, and in our view provide the most useful information. In this technical report we describe how such a triage system can be modelled computationally, how medical insights can be translated into triage flows, and how such systems can be validated and tested. We present babylon check, our commercially deployed automated triage system, as a case study, and illustrate its performance in a large, semi-naturalistic deployment study.', 'cs.AI', '2016-06-07T06:55:42Z', 'http://arxiv.org/abs/1606.02041v1', '2016-10-08 10:25:54', '2016-10-08 10:25:54')
  [1m[36m (4.9ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (1.4ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 545
  [1m[36mAuthor Load (1.2ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Katherine Middleton'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Katherine Middleton', '2016-10-08 10:25:54', '2016-10-08 10:25:54')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1457, 545, 0, '2016-10-08 10:25:54', '2016-10-08 10:25:54')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.8ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Mobasher Butt'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Mobasher Butt', '2016-10-08 10:25:54', '2016-10-08 10:25:54')
  [1m[36m (0.3ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1458, 545, 1, '2016-10-08 10:25:54', '2016-10-08 10:25:54')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.8ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Nils Hammerla'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Nils Hammerla', '2016-10-08 10:25:54', '2016-10-08 10:25:54')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1459, 545, 2, '2016-10-08 10:25:54', '2016-10-08 10:25:54')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.8ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Steven Hamblin'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Steven Hamblin', '2016-10-08 10:25:54', '2016-10-08 10:25:54')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1460, 545, 3, '2016-10-08 10:25:54', '2016-10-08 10:25:54')[0m
  [1m[35m (0.3ms)[0m  COMMIT
  [1m[36mAuthor Load (0.9ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Karan Mehta'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Karan Mehta', '2016-10-08 10:25:54', '2016-10-08 10:25:54')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1461, 545, 4, '2016-10-08 10:25:54', '2016-10-08 10:25:54')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.1ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Ali Parsa'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Ali Parsa', '2016-10-08 10:25:54', '2016-10-08 10:25:54')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1462, 545, 5, '2016-10-08 10:25:54', '2016-10-08 10:25:54')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (0.7ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Human vs. Computer Go: Review and Prospect'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Human vs. Computer Go: Review and Prospect', 'The Google DeepMind challenge match in March 2016 was a historic achievement for computer Go development. This article discusses the development of computational intelligence (CI) and its relative strength in comparison with human intelligence for the game of Go. We first summarize the milestones achieved for computer Go from 1998 to 2016. Then, the computer Go programs that have participated in previous IEEE CIS competitions as well as methods and techniques used in AlphaGo are briefly introduced. Commentaries from three high-level professional Go players on the five AlphaGo versus Lee Sedol games are also included. We conclude that AlphaGo beating Lee Sedol is a huge achievement in artificial intelligence (AI) based largely on CI methods. In the future, powerful computer Go programs such as AlphaGo are expected to be instrumental in promoting Go education and AI real-world applications.', 'cs.AI', '2016-06-07T05:13:37Z', 'http://arxiv.org/abs/1606.02032v1', '2016-10-08 10:25:54', '2016-10-08 10:25:54')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPublish Load (0.9ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 546[0m
  [1m[35mAuthor Load (0.9ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Chang-Shing Lee'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Chang-Shing Lee', '2016-10-08 10:25:54', '2016-10-08 10:25:54')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1463, 546, 0, '2016-10-08 10:25:54', '2016-10-08 10:25:54')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (1.1ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Mei-Hui Wang'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Mei-Hui Wang', '2016-10-08 10:25:54', '2016-10-08 10:25:54')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1464, 546, 1, '2016-10-08 10:25:54', '2016-10-08 10:25:54')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.0ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Shi-Jim Yen'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Shi-Jim Yen', '2016-10-08 10:25:54', '2016-10-08 10:25:54')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1465, 546, 2, '2016-10-08 10:25:54', '2016-10-08 10:25:54')[0m
  [1m[35m (2.9ms)[0m  COMMIT
  [1m[36mAuthor Load (1.4ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Ting-Han Wei'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Ting-Han Wei', '2016-10-08 10:25:54', '2016-10-08 10:25:54')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1466, 546, 3, '2016-10-08 10:25:54', '2016-10-08 10:25:54')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.1ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'I-Chen Wu'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('I-Chen Wu', '2016-10-08 10:25:54', '2016-10-08 10:25:54')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1467, 546, 4, '2016-10-08 10:25:54', '2016-10-08 10:25:54')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (1.2ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Ping-Chiang Chou'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Ping-Chiang Chou', '2016-10-08 10:25:54', '2016-10-08 10:25:54')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1468, 546, 5, '2016-10-08 10:25:54', '2016-10-08 10:25:54')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.0ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Chun-Hsun Chou'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Chun-Hsun Chou', '2016-10-08 10:25:54', '2016-10-08 10:25:54')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1469, 546, 6, '2016-10-08 10:25:54', '2016-10-08 10:25:54')[0m
  [1m[35m (0.3ms)[0m  COMMIT
  [1m[36mAuthor Load (0.8ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Ming-Wan Wang'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Ming-Wan Wang', '2016-10-08 10:25:54', '2016-10-08 10:25:54')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1470, 546, 7, '2016-10-08 10:25:54', '2016-10-08 10:25:54')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.0ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Tai-Hsiung Yang'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Tai-Hsiung Yang', '2016-10-08 10:25:54', '2016-10-08 10:25:54')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1471, 546, 8, '2016-10-08 10:25:54', '2016-10-08 10:25:54')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (0.7ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Assisted Energy Management in Smart Microgrids'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Assisted Energy Management in Smart Microgrids', 'Demand response provides utilities with a mechanism to share with end users the stochasticity resulting from the use of renewable sources. Pricing is accordingly used to reflect energy availability, to allocate such a limited resource to those loads that value it most. However, the strictly competitive mechanism can result in service interruption in presence of competing demand. To solve this issue we investigate on the use of forward contracts, i.e., service level agreements priced to reflect the expectation of future supply and demand curves. Given the limited resources of microgrids, service interruption is an opposite objective to the one of service availability. We firstly design policy-based brokers and identify then a learning broker based on artificial neural networks. We show the latter being progressively minimizing the reimbursement costs and maximizing the overall profit.', 'cs.AI', '2016-06-06T21:36:02Z', 'http://arxiv.org/abs/1606.01949v1', '2016-10-08 10:25:54', '2016-10-08 10:25:54')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPublish Load (0.8ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 547[0m
  [1m[35mAuthor Load (0.7ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Andrea Monacchi'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Andrea Monacchi', '2016-10-08 10:25:54', '2016-10-08 10:25:54')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1472, 547, 0, '2016-10-08 10:25:54', '2016-10-08 10:25:54')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.8ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Wilfried Elmenreich'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Wilfried Elmenreich', '2016-10-08 10:25:54', '2016-10-08 10:25:54')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1473, 547, 1, '2016-10-08 10:25:54', '2016-10-08 10:25:54')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.8ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Consistency and Trust in Peer Data Exchange Systems'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Consistency and Trust in Peer Data Exchange Systems', 'We propose and investigate a semantics for \"peer data exchange systems\" where different peers are related by data exchange constraints and trust relationships. These two elements plus the data at the peers\' sites and their local integrity constraints are made compatible via a semantics that characterizes sets of \"solution instances\" for the peers. They are the intended -possibly virtual- instances for a peer that are obtained through a data repair semantics that we introduce and investigate. The semantically correct answers from a peer to a query, the so-called \"peer consistent answers\", are defined as those answers that are invariant under all its different solution instances. We show that solution instances can be specified as the models of logic programs with a stable model semantics. The repair semantics is based on null values as used in SQL databases, and is also of independent interest for repairs of single databases with respect to integrity constraints.', 'cs.DB', '2016-06-06T20:26:42Z', 'http://dx.doi.org/10.1017/S147106841600017X', '2016-10-08 10:25:54', '2016-10-08 10:25:54')
  [1m[36m (3.0ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (1.4ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 548
  [1m[36mAuthor Load (0.8ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Leopoldo Bertossi'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36m (0.2ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (853, 548, 0, '2016-10-08 10:25:54', '2016-10-08 10:25:54')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (1.3ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Loreto Bravo'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Loreto Bravo', '2016-10-08 10:25:54', '2016-10-08 10:25:54')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1474, 548, 1, '2016-10-08 10:25:54', '2016-10-08 10:25:54')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.8ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Learning to Optimize'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Learning to Optimize', 'Algorithm design is a laborious process and often requires many iterations of ideation and validation. In this paper, we explore automating algorithm design and present a method to learn an optimization algorithm, which we believe to be the first method that can automatically discover a better algorithm. We approach this problem from a reinforcement learning perspective and represent any particular optimization algorithm as a policy. We learn an optimization algorithm using guided policy search and demonstrate that the resulting algorithm outperforms existing hand-engineered algorithms in terms of convergence speed and/or the final objective value.', 'cs.LG', '2016-06-06T19:50:47Z', 'http://arxiv.org/abs/1606.01885v1', '2016-10-08 10:25:54', '2016-10-08 10:25:54')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (1.0ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 549
  [1m[36mAuthor Load (0.7ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Ke Li'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Ke Li', '2016-10-08 10:25:54', '2016-10-08 10:25:54')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1475, 549, 0, '2016-10-08 10:25:54', '2016-10-08 10:25:54')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.9ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Jitendra Malik'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35m (0.1ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1125, 549, 1, '2016-10-08 10:25:54', '2016-10-08 10:25:54')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.7ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Unifying Count-Based Exploration and Intrinsic Motivation'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Unifying Count-Based Exploration and Intrinsic Motivation', 'We consider an agent\'s uncertainty about its environment and the problem of generalizing this uncertainty across observations. Specifically, we focus on the problem of exploration in non-tabular reinforcement learning. Drawing inspiration from the intrinsic motivation literature, we use sequential density models to measure uncertainty, and propose a novel algorithm for deriving a pseudo-count from an arbitrary sequential density model. This technique enables us to generalize count-based exploration algorithms to the non-tabular case. We apply our ideas to Atari 2600 games, providing sensible pseudo-counts from raw pixels. We transform these pseudo-counts into intrinsic rewards and obtain significantly improved exploration in a number of hard games, including the infamously difficult Montezuma\'s Revenge.', 'cs.AI', '2016-06-06T19:21:32Z', 'http://arxiv.org/abs/1606.01868v1', '2016-10-08 10:25:54', '2016-10-08 10:25:54')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (1.4ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 550
  [1m[36mAuthor Load (0.8ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Marc G. Bellemare'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36m (0.1ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1405, 550, 0, '2016-10-08 10:25:54', '2016-10-08 10:25:54')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.7ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Sriram Srinivasan'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Sriram Srinivasan', '2016-10-08 10:25:54', '2016-10-08 10:25:54')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1476, 550, 1, '2016-10-08 10:25:54', '2016-10-08 10:25:54')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.9ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Georg Ostrovski'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Georg Ostrovski', '2016-10-08 10:25:54', '2016-10-08 10:25:54')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1477, 550, 2, '2016-10-08 10:25:54', '2016-10-08 10:25:54')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.8ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Tom Schaul'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36m (0.1ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1235, 550, 3, '2016-10-08 10:25:54', '2016-10-08 10:25:54')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (1.0ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'David Saxton'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('David Saxton', '2016-10-08 10:25:54', '2016-10-08 10:25:54')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1478, 550, 4, '2016-10-08 10:25:54', '2016-10-08 10:25:54')
  [1m[36m (2.9ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.2ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Remi Munos'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35m (0.1ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1234, 550, 5, '2016-10-08 10:25:54', '2016-10-08 10:25:54')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.8ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Bayesian Poisson Tucker Decomposition for Learning the Structure of International Relations'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Bayesian Poisson Tucker Decomposition for Learning the Structure of International Relations', 'We introduce Bayesian Poisson Tucker decomposition (BPTD) for modeling country--country interaction event data. These data consist of interaction events of the form \"country $i$ took action $a$ toward country $j$ at time $t$.\" BPTD discovers overlapping country--community memberships, including the number of latent communities. In addition, it discovers directed community--community interaction networks that are specific to \"topics\" of action types and temporal \"regimes.\" We show that BPTD yields an efficient MCMC inference algorithm and achieves better predictive performance than related models. We also demonstrate that it discovers interpretable latent structure that agrees with our knowledge of international relations.', 'stat.ML', '2016-06-06T18:34:56Z', 'http://arxiv.org/abs/1606.01855v1', '2016-10-08 10:25:54', '2016-10-08 10:25:54')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (0.9ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 551
  [1m[36mAuthor Load (0.9ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Aaron Schein'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Aaron Schein', '2016-10-08 10:25:54', '2016-10-08 10:25:54')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1479, 551, 0, '2016-10-08 10:25:54', '2016-10-08 10:25:54')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.0ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Mingyuan Zhou'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Mingyuan Zhou', '2016-10-08 10:25:54', '2016-10-08 10:25:54')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1480, 551, 1, '2016-10-08 10:25:54', '2016-10-08 10:25:54')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.7ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'David M. Blei'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36m (0.1ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1315, 551, 2, '2016-10-08 10:25:54', '2016-10-08 10:25:54')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.9ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Hanna Wallach'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Hanna Wallach', '2016-10-08 10:25:54', '2016-10-08 10:25:54')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1481, 551, 3, '2016-10-08 10:25:54', '2016-10-08 10:25:54')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.7ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Multimodal Compact Bilinear Pooling for Visual Question Answering and Visual Grounding'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Multimodal Compact Bilinear Pooling for Visual Question Answering and Visual Grounding', 'Modeling textual or visual information with vector representations trained from large language or visual datasets has been successfully explored in recent years. However, tasks such as visual question answering require combining these vector representations with each other. Approaches to multimodal pooling include element-wise multiplication or addition, as well as concatenation of the visual and textual representations. We hypothesize that these methods are not as expressive as an outer product of the visual and textual vectors. As the outer product is typically infeasible due to its high dimensionality, we instead propose utilizing Multimodal Compact Bilinear pooling (MCB) to efficiently and expressively combine multimodal features. We extensively evaluate MCB on the visual question answering and grounding tasks. We consistently show the benefit of MCB over ablations without MCB. For visual question answering, we present an architecture which uses MCB twice, once for predicting attention over spatial features and again to combine the attended representation with the question representation. This model outperforms the state-of-the-art on the Visual7W dataset and the VQA challenge.', 'cs.CV', '2016-06-06T17:59:56Z', 'http://arxiv.org/abs/1606.01847v2', '2016-10-08 10:25:54', '2016-10-08 10:25:54')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (1.0ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 552
  [1m[36mAuthor Load (0.9ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Akira Fukui'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Akira Fukui', '2016-10-08 10:25:54', '2016-10-08 10:25:54')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1482, 552, 0, '2016-10-08 10:25:54', '2016-10-08 10:25:54')
  [1m[36m (0.3ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.3ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Dong Huk Park'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Dong Huk Park', '2016-10-08 10:25:54', '2016-10-08 10:25:54')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1483, 552, 1, '2016-10-08 10:25:54', '2016-10-08 10:25:54')[0m
  [1m[35m (2.9ms)[0m  COMMIT
  [1m[36mAuthor Load (1.4ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Daylen Yang'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Daylen Yang', '2016-10-08 10:25:54', '2016-10-08 10:25:54')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1484, 552, 2, '2016-10-08 10:25:54', '2016-10-08 10:25:54')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.1ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Anna Rohrbach'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Anna Rohrbach', '2016-10-08 10:25:54', '2016-10-08 10:25:54')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1485, 552, 3, '2016-10-08 10:25:54', '2016-10-08 10:25:54')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (1.1ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Trevor Darrell'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Trevor Darrell', '2016-10-08 10:25:54', '2016-10-08 10:25:54')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1486, 552, 4, '2016-10-08 10:25:54', '2016-10-08 10:25:54')
  [1m[36m (0.3ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.0ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Marcus Rohrbach'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Marcus Rohrbach', '2016-10-08 10:25:54', '2016-10-08 10:25:54')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1487, 552, 5, '2016-10-08 10:25:54', '2016-10-08 10:25:54')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (0.7ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Position-Indexed Formulations for Kidney Exchange'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Position-Indexed Formulations for Kidney Exchange', 'A kidney exchange is an organized barter market where patients in need of a kidney swap willing but incompatible donors. Determining an optimal set of exchanges is theoretically and empirically hard. Traditionally, exchanges took place in cycles, with each participating patient-donor pair both giving and receiving a kidney. The recent introduction of chains, where a donor without a paired patient triggers a sequence of donations without requiring a kidney in return, increased the efficacy of fielded kidney exchanges---while also dramatically raising the empirical computational hardness of clearing the market in practice. While chains can be quite long, unbounded-length chains are not desirable: planned donations can fail before transplant for a variety of reasons, and the failure of a single donation causes the rest of that chain to fail, so parallel shorter chains are better in practice. In this paper, we address the tractable clearing of kidney exchanges with short cycles and chains that are long but bounded. This corresponds to the practice at most modern fielded kidney exchanges. We introduce three new integer programming formulations, two of which are compact. Furthermore, one of these models has a linear programming relaxation that is exactly as tight as the previous tightest formulation (which was not compact) for instances in which each donor has a paired patient. On real data from the UNOS nationwide exchange in the United States and the NLDKSS nationwide exchange in the United Kingdom, as well as on generated realistic large-scale data, we show that our new models are competitive with all existing solvers---in many cases outperforming all other solvers by orders of magnitude.', 'cs.DS', '2016-06-06T06:16:36Z', 'http://arxiv.org/abs/1606.01623v2', '2016-10-08 10:25:54', '2016-10-08 10:25:54')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPublish Load (1.2ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 553[0m
  [1m[35mAuthor Load (0.8ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'John P. Dickerson'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('John P. Dickerson', '2016-10-08 10:25:54', '2016-10-08 10:25:54')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1488, 553, 0, '2016-10-08 10:25:54', '2016-10-08 10:25:54')[0m
  [1m[35m (0.3ms)[0m  COMMIT
  [1m[36mAuthor Load (0.8ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'David F. Manlove'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('David F. Manlove', '2016-10-08 10:25:54', '2016-10-08 10:25:54')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1489, 553, 1, '2016-10-08 10:25:54', '2016-10-08 10:25:54')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.2ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Benjamin Plaut'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Benjamin Plaut', '2016-10-08 10:25:54', '2016-10-08 10:25:54')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1490, 553, 2, '2016-10-08 10:25:54', '2016-10-08 10:25:54')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (0.4ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Tuomas Sandholm'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36m (0.2ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (76, 553, 3, '2016-10-08 10:25:54', '2016-10-08 10:25:54')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.8ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'James Trimble'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('James Trimble', '2016-10-08 10:25:54', '2016-10-08 10:25:54')[0m
  [1m[35m (3.0ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1491, 553, 4, '2016-10-08 10:25:54', '2016-10-08 10:25:54')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.8ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'OpenAI Gym'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('OpenAI Gym', 'OpenAI Gym is a toolkit for reinforcement learning research. It includes a growing collection of benchmark problems that expose a common interface, and a website where people can share their results and compare the performance of algorithms. This whitepaper discusses the components of OpenAI Gym and the design decisions that went into the software.', 'cs.LG', '2016-06-05T17:54:48Z', 'http://arxiv.org/abs/1606.01540v1', '2016-10-08 10:25:54', '2016-10-08 10:25:54')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (1.1ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 554
  [1m[36mAuthor Load (0.8ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Greg Brockman'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Greg Brockman', '2016-10-08 10:25:54', '2016-10-08 10:25:54')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1492, 554, 0, '2016-10-08 10:25:54', '2016-10-08 10:25:54')
  [1m[36m (0.3ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.9ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Vicki Cheung'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Vicki Cheung', '2016-10-08 10:25:54', '2016-10-08 10:25:54')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1493, 554, 1, '2016-10-08 10:25:54', '2016-10-08 10:25:54')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (1.2ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Ludwig Pettersson'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Ludwig Pettersson', '2016-10-08 10:25:54', '2016-10-08 10:25:54')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1494, 554, 2, '2016-10-08 10:25:54', '2016-10-08 10:25:54')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.9ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Jonas Schneider'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Jonas Schneider', '2016-10-08 10:25:54', '2016-10-08 10:25:54')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1495, 554, 3, '2016-10-08 10:25:54', '2016-10-08 10:25:54')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.7ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'John Schulman'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36m (0.1ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1169, 554, 4, '2016-10-08 10:25:54', '2016-10-08 10:25:54')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (1.0ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Jie Tang'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Jie Tang', '2016-10-08 10:25:54', '2016-10-08 10:25:54')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1496, 554, 5, '2016-10-08 10:25:54', '2016-10-08 10:25:54')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.9ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Wojciech Zaremba'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Wojciech Zaremba', '2016-10-08 10:25:54', '2016-10-08 10:25:54')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1497, 554, 6, '2016-10-08 10:25:54', '2016-10-08 10:25:54')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (0.8ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Coordination in Categorical Compositional Distributional Semantics'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Coordination in Categorical Compositional Distributional Semantics', 'An open problem with categorical compositional distributional semantics is the representation of words that are considered semantically vacuous from a distributional perspective, such as determiners, prepositions, relative pronouns or coordinators. This paper deals with the topic of coordination between identical syntactic types, which accounts for the majority of coordination cases in language. By exploiting the compact closed structure of the underlying category and Frobenius operators canonically induced over the fixed basis of finite-dimensional vector spaces, we provide a morphism as representation of a coordinator tensor, and we show how it lifts from atomic types to compound types. Linguistic intuitions are provided, and the importance of the Frobenius operators as an addition to the compact closed setting with regard to language is discussed.', 'cs.CL', '2016-06-05T14:26:56Z', 'http://dx.doi.org/10.4204/EPTCS.221.4', '2016-10-08 10:25:54', '2016-10-08 10:25:54')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPublish Load (0.8ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 555[0m
  [1m[35mAuthor Load (0.8ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Dimitri Kartsaklis'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Dimitri Kartsaklis', '2016-10-08 10:25:54', '2016-10-08 10:25:54')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1498, 555, 0, '2016-10-08 10:25:54', '2016-10-08 10:25:54')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPaper Load (0.8ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Distance Metric Ensemble Learning and the Andrews-Curtis Conjecture'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Distance Metric Ensemble Learning and the Andrews-Curtis Conjecture', 'Motivated by the search for a counterexample to the Poincar\\\'e conjecture in three and four dimensions, the Andrews-Curtis conjecture was proposed in 1965. It is now generally suspected that the Andrews-Curtis conjecture is false, but small potential counterexamples are not so numerous, and previous work has attempted to eliminate some via combinatorial search. Progress has however been limited, with the most successful approach (breadth-first-search using secondary storage) being neither scalable nor heuristically-informed. A previous empirical analysis of problem structure examined several heuristic measures of search progress and determined that none of them provided any useful guidance for search. In this article, we induce new quality measures directly from the problem structure and combine them to produce a more effective search driver via ensemble machine learning. By this means, we eliminate 19 potential counterexamples, the status of which had been unknown for some years.', 'cs.AI', '2016-06-04T20:06:03Z', 'http://arxiv.org/abs/1606.01412v1', '2016-10-08 10:25:54', '2016-10-08 10:25:54')[0m
  [1m[35m (3.0ms)[0m  COMMIT
  [1m[36mPublish Load (1.4ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 556[0m
  [1m[35mAuthor Load (1.0ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Krzysztof Krawiec'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Krzysztof Krawiec', '2016-10-08 10:25:54', '2016-10-08 10:25:54')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1499, 556, 0, '2016-10-08 10:25:54', '2016-10-08 10:25:54')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.8ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Jerry Swan'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Jerry Swan', '2016-10-08 10:25:54', '2016-10-08 10:25:54')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1500, 556, 1, '2016-10-08 10:25:54', '2016-10-08 10:25:54')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.7ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Generating Natural Language Inference Chains'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Generating Natural Language Inference Chains', 'The ability to reason with natural language is a fundamental prerequisite for many NLP tasks such as information extraction, machine translation and question answering. To quantify this ability, systems are commonly tested whether they can recognize textual entailment, i.e., whether one sentence can be inferred from another one. However, in most NLP applications only single source sentences instead of sentence pairs are available. Hence, we propose a new task that measures how well a model can generate an entailed sentence from a source sentence. We take entailment-pairs of the Stanford Natural Language Inference corpus and train an LSTM with attention. On a manually annotated test set we found that 82% of generated sentences are correct, an improvement of 10.3% over an LSTM baseline. A qualitative analysis shows that this model is not only capable of shortening input sentences, but also inferring new statements via paraphrasing and phrase entailment. We then apply this model recursively to input-output pairs, thereby generating natural language inference chains that can be used to automatically construct an entailment graph from source sentences. Finally, by swapping source and target sentences we can also train a model that given an input sentence invents additional information to generate a new sentence.', 'cs.CL', '2016-06-04T18:34:51Z', 'http://arxiv.org/abs/1606.01404v1', '2016-10-08 10:25:54', '2016-10-08 10:25:54')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (1.0ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 557
  [1m[36mAuthor Load (1.1ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Vladyslav Kolesnyk'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Vladyslav Kolesnyk', '2016-10-08 10:25:54', '2016-10-08 10:25:54')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1501, 557, 0, '2016-10-08 10:25:54', '2016-10-08 10:25:54')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.7ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Tim Rocktäschel'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35m (0.1ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1055, 557, 1, '2016-10-08 10:25:54', '2016-10-08 10:25:54')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.9ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Sebastian Riedel'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35m (0.2ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1056, 557, 2, '2016-10-08 10:25:54', '2016-10-08 10:25:54')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.7ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Effective Multi-Robot Spatial Task Allocation using Model Approximations'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Effective Multi-Robot Spatial Task Allocation using Model Approximations', 'Real-world multi-agent planning problems cannot be solved using decision-theoretic planning methods due to the exponential complexity. We approximate firefighting in rescue simulation as a spatially distributed task and model with multi-agent Markov decision process. We use recent approximation methods for spatial task problems to reduce the model complexity. Our approximations are single-agent, static task, shortest path pruning, dynamic planning horizon, and task clustering. We create scenarios from RoboCup Rescue Simulation maps and evaluate our methods on these graph worlds. The results show that our approach is faster and better than comparable methods and has negligible performance loss compared to the optimal policy. We also show that our method has a similar performance as DCOP methods on example RCRS scenarios.', 'cs.AI', '2016-06-04T14:12:32Z', 'http://arxiv.org/abs/1606.01380v1', '2016-10-08 10:25:54', '2016-10-08 10:25:54')
  [1m[36m (3.0ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (1.4ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 558
  [1m[36mAuthor Load (1.0ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Okan Aşık'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Okan Aşık', '2016-10-08 10:25:54', '2016-10-08 10:25:54')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1502, 558, 0, '2016-10-08 10:25:54', '2016-10-08 10:25:54')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.2ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'H. Levent Akın'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('H. Levent Akın', '2016-10-08 10:25:54', '2016-10-08 10:25:54')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1503, 558, 1, '2016-10-08 10:25:54', '2016-10-08 10:25:54')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (0.7ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Scalable Algorithms for Tractable Schatten Quasi-Norm Minimization'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Scalable Algorithms for Tractable Schatten Quasi-Norm Minimization', 'The Schatten-p quasi-norm $(0<p<1)$ is usually used to replace the standard nuclear norm in order to approximate the rank function more accurately. However, existing Schatten-p quasi-norm minimization algorithms involve singular value decomposition (SVD) or eigenvalue decomposition (EVD) in each iteration, and thus may become very slow and impractical for large-scale problems. In this paper, we first define two tractable Schatten quasi-norms, i.e., the Frobenius/nuclear hybrid and bi-nuclear quasi-norms, and then prove that they are in essence the Schatten-2/3 and 1/2 quasi-norms, respectively, which lead to the design of very efficient algorithms that only need to update two much smaller factor matrices. We also design two efficient proximal alternating linearized minimization algorithms for solving representative matrix completion problems. Finally, we provide the global convergence and performance guarantees for our algorithms, which have better convergence properties than existing algorithms. Experimental results on synthetic and real-world data show that our algorithms are more accurate than the state-of-the-art methods, and are orders of magnitude faster.', 'cs.NA', '2016-06-04T03:28:41Z', 'http://arxiv.org/abs/1606.01245v1', '2016-10-08 10:25:55', '2016-10-08 10:25:55')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPublish Load (0.8ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 559[0m
  [1m[35mAuthor Load (0.7ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Fanhua Shang'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Fanhua Shang', '2016-10-08 10:25:55', '2016-10-08 10:25:55')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1504, 559, 0, '2016-10-08 10:25:55', '2016-10-08 10:25:55')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (1.2ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Yuanyuan Liu'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Yuanyuan Liu', '2016-10-08 10:25:55', '2016-10-08 10:25:55')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1505, 559, 1, '2016-10-08 10:25:55', '2016-10-08 10:25:55')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.9ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'James Cheng'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('James Cheng', '2016-10-08 10:25:55', '2016-10-08 10:25:55')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1506, 559, 2, '2016-10-08 10:25:55', '2016-10-08 10:25:55')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (0.7ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Scene Grammars, Factor Graphs, and Belief Propagation'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Scene Grammars, Factor Graphs, and Belief Propagation', 'We consider a class of probabilistic grammars for generating scenes with multiple objects. Probabilistic scene grammars capture relationships between objects using compositional rules that provide important contextual cues for inference with ambiguous data. We show how to represent the distribution defined by a probabilistic scene grammar using a factor graph. We also show how to efficiently perform message passing in this factor graph. This leads to an efficient approach for inference with a grammar model using belief propagation as the underlying computational engine. Inference with belief propagation naturally combines bottom-up and top-down contextual information and leads to a robust algorithm for aggregating evidence. We show experiments on two different applications to demonstrate the generality of the framework. The first application involves detecting curves in noisy images, and we address this problem using a grammar that generates a collection of curves using a first-order Markov process. The second application involves localizing faces and parts of faces in images. In this case, we use a grammar that captures spatial relationships between the parts of a face. In both applications the same framework leads to robust inference algorithms that can effectively combine weak local information to reason about a scene.', 'cs.CV', '2016-06-03T23:49:02Z', 'http://arxiv.org/abs/1606.01307v1', '2016-10-08 10:25:55', '2016-10-08 10:25:55')[0m
  [1m[35m (2.9ms)[0m  COMMIT
  [1m[36mPublish Load (1.4ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 560[0m
  [1m[35mAuthor Load (1.1ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Jeroen Chua'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Jeroen Chua', '2016-10-08 10:25:55', '2016-10-08 10:25:55')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1507, 560, 0, '2016-10-08 10:25:55', '2016-10-08 10:25:55')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (1.1ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Pedro F. Felzenszwalb'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Pedro F. Felzenszwalb', '2016-10-08 10:25:55', '2016-10-08 10:25:55')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1508, 560, 1, '2016-10-08 10:25:55', '2016-10-08 10:25:55')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.8ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'End-to-end LSTM-based dialog control optimized with supervised and reinforcement learning'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('End-to-end LSTM-based dialog control optimized with supervised and reinforcement learning', 'This paper presents a model for end-to-end learning of task-oriented dialog systems. The main component of the model is a recurrent neural network (an LSTM), which maps from raw dialog history directly to a distribution over system actions. The LSTM automatically infers a representation of dialog history, which relieves the system developer of much of the manual feature engineering of dialog state. In addition, the developer can provide software that expresses business rules and provides access to programmatic APIs, enabling the LSTM to take actions in the real world on behalf of the user. The LSTM can be optimized using supervised learning (SL), where a domain expert provides example dialogs which the LSTM should imitate; or using reinforcement learning (RL), where the system improves by interacting directly with end users. Experiments show that SL and RL are complementary: SL alone can derive a reasonable initial policy from a small number of training dialogs; and starting RL optimization with a policy trained with SL substantially accelerates the learning rate of RL.', 'cs.CL', '2016-06-03T20:32:52Z', 'http://arxiv.org/abs/1606.01269v1', '2016-10-08 10:25:55', '2016-10-08 10:25:55')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (1.2ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 561
  [1m[36mAuthor Load (0.8ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Jason D. Williams'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Jason D. Williams', '2016-10-08 10:25:55', '2016-10-08 10:25:55')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1509, 561, 0, '2016-10-08 10:25:55', '2016-10-08 10:25:55')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.8ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Geoffrey Zweig'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Geoffrey Zweig', '2016-10-08 10:25:55', '2016-10-08 10:25:55')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1510, 561, 1, '2016-10-08 10:25:55', '2016-10-08 10:25:55')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (0.7ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'The belief noisy-or model applied to network reliability analysis'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('The belief noisy-or model applied to network reliability analysis', 'One difficulty faced in knowledge engineering for Bayesian Network (BN) is the quan-tification step where the Conditional Probability Tables (CPTs) are determined. The number of parameters included in CPTs increases exponentially with the number of parent variables. The most common solution is the application of the so-called canonical gates. The Noisy-OR (NOR) gate, which takes advantage of the independence of causal interactions, provides a logarithmic reduction of the number of parameters required to specify a CPT. In this paper, an extension of NOR model based on the theory of belief functions, named Belief Noisy-OR (BNOR), is proposed. BNOR is capable of dealing with both aleatory and epistemic uncertainty of the network. Compared with NOR, more rich information which is of great value for making decisions can be got when the available knowledge is uncertain. Specially, when there is no epistemic uncertainty, BNOR degrades into NOR. Additionally, different structures of BNOR are presented in this paper in order to meet various needs of engineers. The application of BNOR model on the reliability evaluation problem of networked systems demonstrates its effectiveness.', 'cs.AI', '2016-06-03T14:47:12Z', 'http://arxiv.org/abs/1606.01116v1', '2016-10-08 10:25:55', '2016-10-08 10:25:55')[0m
  [1m[35m (3.0ms)[0m  COMMIT
  [1m[36mPublish Load (1.5ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 562[0m
  [1m[35mAuthor Load (0.8ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Kuang Zhou'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35m (0.1ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (585, 562, 0, '2016-10-08 10:25:55', '2016-10-08 10:25:55')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.6ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Arnaud Martin'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35m (0.2ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (586, 562, 1, '2016-10-08 10:25:55', '2016-10-08 10:25:55')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.5ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Quan Pan'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35m (0.1ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (587, 562, 2, '2016-10-08 10:25:55', '2016-10-08 10:25:55')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.7ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'ECMdd: Evidential c-medoids clustering with multiple prototypes'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.4ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('ECMdd: Evidential c-medoids clustering with multiple prototypes', 'In this work, a new prototype-based clustering method named Evidential C-Medoids (ECMdd), which belongs to the family of medoid-based clustering for proximity data, is proposed as an extension of Fuzzy C-Medoids (FCMdd) on the theoretical framework of belief functions. In the application of FCMdd and original ECMdd, a single medoid (prototype), which is supposed to belong to the object set, is utilized to represent one class. For the sake of clarity, this kind of ECMdd using a single medoid is denoted by sECMdd. In real clustering applications, using only one pattern to capture or interpret a class may not adequately model different types of group structure and hence limits the clustering performance. In order to address this problem, a variation of ECMdd using multiple weighted medoids, denoted by wECMdd, is presented. Unlike sECMdd, in wECMdd objects in each cluster carry various weights describing their degree of representativeness for that class. This mechanism enables each class to be represented by more than one object. Experimental results in synthetic and real data sets clearly demonstrate the superiority of sECMdd and wECMdd. Moreover, the clustering results by wECMdd can provide richer information for the inner structure of the detected classes with the help of prototype weights.', 'cs.AI', '2016-06-03T14:44:15Z', 'http://dx.doi.org/10.1016/j.patcog.2016.05.005', '2016-10-08 10:25:55', '2016-10-08 10:25:55')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (1.1ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 563
  [1m[36mAuthor Load (0.5ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Kuang Zhou'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36m (0.1ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (585, 563, 0, '2016-10-08 10:25:55', '2016-10-08 10:25:55')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.5ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Arnaud Martin'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36m (0.1ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (586, 563, 1, '2016-10-08 10:25:55', '2016-10-08 10:25:55')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.6ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Quan Pan'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36m (0.1ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (587, 563, 2, '2016-10-08 10:25:55', '2016-10-08 10:25:55')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (0.8ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Zhun-Ga Liu'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36m (0.1ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1316, 563, 3, '2016-10-08 10:25:55', '2016-10-08 10:25:55')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPaper Load (0.7ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Selecting the Best Player Formation for Corner-Kick Situations Based on Bayes\' Estimation'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Selecting the Best Player Formation for Corner-Kick Situations Based on Bayes\' Estimation', 'In the domain of the Soccer simulation 2D league of the RoboCup project, appropriate player positioning against a given opponent team is an important factor of soccer team performance. This work proposes a model which decides the strategy that should be applied regarding a particular opponent team. This task can be realized by applying preliminary a learning phase where the model determines the most effective strategies against clusters of opponent teams. The model determines the best strategies by using sequential Bayes\' estimators. As a first trial of the system, the proposed model is used to determine the association of player formations against opponent teams in the particular situation of corner-kick. The implemented model shows satisfying abilities to compare player formations that are similar to each other in terms of performance and determines the right ranking even by running a decent number of simulation games.', 'cs.AI', '2016-06-03T09:31:13Z', 'http://arxiv.org/abs/1606.01015v1', '2016-10-08 10:25:55', '2016-10-08 10:25:55')[0m
  [1m[35m (2.9ms)[0m  COMMIT
  [1m[36mPublish Load (1.4ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 564[0m
  [1m[35mAuthor Load (1.0ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Jordan Henrio'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Jordan Henrio', '2016-10-08 10:25:55', '2016-10-08 10:25:55')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1511, 564, 0, '2016-10-08 10:25:55', '2016-10-08 10:25:55')[0m
  [1m[35m (0.6ms)[0m  COMMIT
  [1m[36mAuthor Load (1.2ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Thomas Henn'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Thomas Henn', '2016-10-08 10:25:55', '2016-10-08 10:25:55')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1512, 564, 1, '2016-10-08 10:25:55', '2016-10-08 10:25:55')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.9ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Tomoharu Nakashima'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Tomoharu Nakashima', '2016-10-08 10:25:55', '2016-10-08 10:25:55')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1513, 564, 2, '2016-10-08 10:25:55', '2016-10-08 10:25:55')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.9ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Hidehisa Akiyama'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Hidehisa Akiyama', '2016-10-08 10:25:55', '2016-10-08 10:25:55')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1514, 564, 3, '2016-10-08 10:25:55', '2016-10-08 10:25:55')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.7ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Question Answering over Knowledge Base with Neural Attention Combining Global Knowledge Information'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Question Answering over Knowledge Base with Neural Attention Combining Global Knowledge Information', 'With the rapid growth of knowledge bases (KBs) on the web, how to take full advantage of them becomes increasingly important. Knowledge base-based question answering (KB-QA) is one of the most promising approaches to access the substantial knowledge. Meantime, as the neural network-based (NN-based) methods develop, NN-based KB-QA has already achieved impressive results. However, previous work did not put emphasis on question representation, and the question is converted into a fixed vector regardless of its candidate answers. This simple representation strategy is unable to express the proper information of the question. Hence, we present a neural attention-based model to represent the questions dynamically according to the different focuses of various candidate answer aspects. In addition, we leverage the global knowledge inside the underlying KB, aiming at integrating the rich KB information into the representation of the answers. And it also alleviates the out of vocabulary (OOV) problem, which helps the attention model to represent the question more precisely. The experimental results on WEBQUESTIONS demonstrate the effectiveness of the proposed approach.', 'cs.IR', '2016-06-03T06:40:14Z', 'http://arxiv.org/abs/1606.00979v1', '2016-10-08 10:25:55', '2016-10-08 10:25:55')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (1.1ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 565
  [1m[36mAuthor Load (0.8ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Yuanzhe Zhang'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Yuanzhe Zhang', '2016-10-08 10:25:55', '2016-10-08 10:25:55')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1515, 565, 0, '2016-10-08 10:25:55', '2016-10-08 10:25:55')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.9ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Kang Liu'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Kang Liu', '2016-10-08 10:25:55', '2016-10-08 10:25:55')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1516, 565, 1, '2016-10-08 10:25:55', '2016-10-08 10:25:55')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.8ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Shizhu He'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Shizhu He', '2016-10-08 10:25:55', '2016-10-08 10:25:55')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1517, 565, 2, '2016-10-08 10:25:55', '2016-10-08 10:25:55')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.0ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Guoliang Ji'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Guoliang Ji', '2016-10-08 10:25:55', '2016-10-08 10:25:55')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1518, 565, 3, '2016-10-08 10:25:55', '2016-10-08 10:25:55')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.8ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Zhanyi Liu'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Zhanyi Liu', '2016-10-08 10:25:55', '2016-10-08 10:25:55')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1519, 565, 4, '2016-10-08 10:25:55', '2016-10-08 10:25:55')
  [1m[36m (2.9ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.4ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Hua Wu'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Hua Wu', '2016-10-08 10:25:55', '2016-10-08 10:25:55')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1520, 565, 5, '2016-10-08 10:25:55', '2016-10-08 10:25:55')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (1.1ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Jun Zhao'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Jun Zhao', '2016-10-08 10:25:55', '2016-10-08 10:25:55')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1521, 565, 6, '2016-10-08 10:25:55', '2016-10-08 10:25:55')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.7ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'An interactive fuzzy goal programming algorithm to solve decentralized bi-level multiobjective fractional programming problem'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('An interactive fuzzy goal programming algorithm to solve decentralized bi-level multiobjective fractional programming problem', 'This paper proposes a fuzzy goal programming based on Taylor series for solving decentralized bi-level multiobjective fractional programming (DBLMOFP) problem. In the proposed approach, all of the membership functions are associated with the fuzzy goals of each objective at the both levels and also the fractional membership functions are converted to linear functions using the Taylor series approach. Then a fuzzy goal programming is proposed to reach the highest degree of each of the membership goals by taking the most satisfactory solution for all decision makers at the both levels. Finally, a numerical example is presented to illustrate the effectiveness of the proposed approach.', 'math.OC', '2016-06-02T22:47:57Z', 'http://arxiv.org/abs/1606.00927v1', '2016-10-08 10:25:55', '2016-10-08 10:25:55')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (1.2ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 566
  [1m[36mAuthor Load (1.0ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Hasan Dalman'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Hasan Dalman', '2016-10-08 10:25:55', '2016-10-08 10:25:55')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1522, 566, 0, '2016-10-08 10:25:55', '2016-10-08 10:25:55')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.7ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Towards a Job Title Classification System'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Towards a Job Title Classification System', 'Document classification for text, images and other applicable entities has long been a focus of research in academia and also finds application in many industrial settings. Amidst a plethora of approaches to solve such problems, machine-learning techniques have found success in a variety of scenarios. In this paper we discuss the design of a machine learning-based semi-supervised job title classification system for the online job recruitment domain currently in production at CareerBuilder.com and propose enhancements to it. The system leverages a varied collection of classification as well clustering algorithms. These algorithms are encompassed in an architecture that facilitates leveraging existing off-the-shelf machine learning tools and techniques while keeping into consideration the challenges of constructing a scalable classification system for a large taxonomy of categories. As a continuously evolving system that is still under development we first discuss the existing semi-supervised classification system which is composed of both clustering and classification components in a proximity-based classifier setup and results of which are already used across numerous products at CareerBuilder. We then elucidate our long-term goals for job title classification and propose enhancements to the existing system in the form of a two-stage coarse and fine level classifier augmentation to construct a cascade of hierarchical vertical classifiers. Preliminary results are presented using experimental evaluation on real world industrial data.', 'cs.LG', '2016-06-02T22:01:50Z', 'http://arxiv.org/abs/1606.00917v1', '2016-10-08 10:25:55', '2016-10-08 10:25:55')
  [1m[36m (1.9ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (1.1ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 567
  [1m[36mAuthor Load (0.9ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Faizan Javed'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Faizan Javed', '2016-10-08 10:25:55', '2016-10-08 10:25:55')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1523, 567, 0, '2016-10-08 10:25:55', '2016-10-08 10:25:55')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.2ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Matt McNair'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Matt McNair', '2016-10-08 10:25:55', '2016-10-08 10:25:55')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1524, 567, 1, '2016-10-08 10:25:55', '2016-10-08 10:25:55')[0m
  [1m[35m (3.0ms)[0m  COMMIT
  [1m[36mAuthor Load (1.4ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Ferosh Jacob'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Ferosh Jacob', '2016-10-08 10:25:55', '2016-10-08 10:25:55')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1525, 567, 2, '2016-10-08 10:25:55', '2016-10-08 10:25:55')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.1ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Meng Zhao'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Meng Zhao', '2016-10-08 10:25:55', '2016-10-08 10:25:55')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1526, 567, 3, '2016-10-08 10:25:55', '2016-10-08 10:25:55')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (0.7ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Preliminaries of a Space Situational Awareness Ontology'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Preliminaries of a Space Situational Awareness Ontology', 'Space situational awareness (SSA) is vital for international safety and security, and the future of space travel. By improving SSA data-sharing we improve global SSA. Computational ontology may provide one means toward that goal. This paper develops the ontology of the SSA domain and takes steps in the creation of the space situational awareness ontology. Ontology objectives, requirements and desiderata are outlined; and both the SSA domain and the discipline of ontology are described. The purposes of the ontology include: exploring the potential for ontology development and engineering to (i) represent SSA data, general domain knowledge, objects and relationships (ii) annotate and express the meaning of that data, and (iii) foster SSA data-exchange and integration among SSA actors, orbital debris databases, space object catalogs and other SSA data repositories. By improving SSA via data- and knowledge-sharing, we can (iv) expand our scientific knowledge of the space environment, (v) advance our capacity for planetary defense from near-Earth objects, and (vi) ensure the future of safe space flight for generations to come.', 'cs.AI', '2016-06-02T19:37:14Z', 'http://arxiv.org/abs/1606.01924v2', '2016-10-08 10:25:55', '2016-10-08 10:25:55')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPublish Load (0.9ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 568[0m
  [1m[35mAuthor Load (0.9ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Robert John Rovetto'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Robert John Rovetto', '2016-10-08 10:25:55', '2016-10-08 10:25:55')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1527, 568, 0, '2016-10-08 10:25:55', '2016-10-08 10:25:55')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (1.1ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'T. S. Kelso'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('T. S. Kelso', '2016-10-08 10:25:55', '2016-10-08 10:25:55')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1528, 568, 1, '2016-10-08 10:25:55', '2016-10-08 10:25:55')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.7ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Prior Swapping for Data-Independent Inference'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Prior Swapping for Data-Independent Inference', 'While Bayesian methods are praised for their ability to incorporate useful prior knowledge, in practice, priors that allow for computationally convenient or tractable inference are more commonly used. In this paper, we investigate the following question: for a given model, is it possible to use any convenient prior to infer a false posterior, and afterwards, given some true prior of interest, quickly transform this result into the true posterior? We present a procedure to carry out this task: given an inferred false posterior and true prior, our algorithm generates samples from the true posterior. This transformation procedure, which we call \"prior swapping\" works for arbitrary priors. Notably, its cost is independent of data size. It therefore allows us, in some cases, to apply significantly less-costly inference procedures to more-sophisticated models than previously possible. It also lets us quickly perform any additional inferences, such as with updated priors or for many different hyperparameter settings, without touching the data. We prove that our method can generate asymptotically exact samples, and demonstrate it empirically on a number of models and priors.', 'stat.ML', '2016-06-02T18:20:35Z', 'http://arxiv.org/abs/1606.00787v1', '2016-10-08 10:25:55', '2016-10-08 10:25:55')
  [1m[36m (1.8ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (1.2ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 569
  [1m[36mAuthor Load (1.0ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Willie Neiswanger'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Willie Neiswanger', '2016-10-08 10:25:55', '2016-10-08 10:25:55')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.3ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1529, 569, 0, '2016-10-08 10:25:55', '2016-10-08 10:25:55')
  [1m[36m (2.9ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.4ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Eric Xing'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Eric Xing', '2016-10-08 10:25:55', '2016-10-08 10:25:55')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1530, 569, 1, '2016-10-08 10:25:55', '2016-10-08 10:25:55')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPaper Load (0.9ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Multiresolution Recurrent Neural Networks: An Application to Dialogue Response Generation'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.4ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Multiresolution Recurrent Neural Networks: An Application to Dialogue Response Generation', 'We introduce the multiresolution recurrent neural network, which extends the sequence-to-sequence framework to model natural language generation as two parallel discrete stochastic processes: a sequence of high-level coarse tokens, and a sequence of natural language tokens. There are many ways to estimate or learn the high-level coarse tokens, but we argue that a simple extraction procedure is sufficient to capture a wealth of high-level discourse semantics. Such procedure allows training the multiresolution recurrent neural network by maximizing the exact joint log-likelihood over both sequences. In contrast to the standard log- likelihood objective w.r.t. natural language tokens (word perplexity), optimizing the joint log-likelihood biases the model towards modeling high-level abstractions. We apply the proposed model to the task of dialogue response generation in two challenging domains: the Ubuntu technical support domain, and Twitter conversations. On Ubuntu, the model outperforms competing approaches by a substantial margin, achieving state-of-the-art results according to both automatic evaluation metrics and a human evaluation study. On Twitter, the model appears to generate more relevant and on-topic responses according to automatic evaluation metrics. Finally, our experiments demonstrate that the proposed model is more adept at overcoming the sparsity of natural language and is better able to capture long-term structure.', 'cs.CL', '2016-06-02T17:37:31Z', 'http://arxiv.org/abs/1606.00776v2', '2016-10-08 10:25:55', '2016-10-08 10:25:55')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPublish Load (1.0ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 570[0m
  [1m[35mAuthor Load (0.9ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Iulian Vlad Serban'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Iulian Vlad Serban', '2016-10-08 10:25:55', '2016-10-08 10:25:55')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1531, 570, 0, '2016-10-08 10:25:55', '2016-10-08 10:25:55')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (1.0ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Tim Klinger'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Tim Klinger', '2016-10-08 10:25:55', '2016-10-08 10:25:55')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1532, 570, 1, '2016-10-08 10:25:55', '2016-10-08 10:25:55')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.9ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Gerald Tesauro'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Gerald Tesauro', '2016-10-08 10:25:55', '2016-10-08 10:25:55')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1533, 570, 2, '2016-10-08 10:25:55', '2016-10-08 10:25:55')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (1.1ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Kartik Talamadupula'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Kartik Talamadupula', '2016-10-08 10:25:55', '2016-10-08 10:25:55')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1534, 570, 3, '2016-10-08 10:25:55', '2016-10-08 10:25:55')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.8ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Bowen Zhou'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Bowen Zhou', '2016-10-08 10:25:55', '2016-10-08 10:25:55')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1535, 570, 4, '2016-10-08 10:25:55', '2016-10-08 10:25:55')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (1.1ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Yoshua Bengio'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Yoshua Bengio', '2016-10-08 10:25:55', '2016-10-08 10:25:55')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1536, 570, 5, '2016-10-08 10:25:55', '2016-10-08 10:25:55')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.0ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Aaron Courville'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Aaron Courville', '2016-10-08 10:25:55', '2016-10-08 10:25:55')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1537, 570, 6, '2016-10-08 10:25:55', '2016-10-08 10:25:55')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (0.8ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Death and Suicide in Universal Artificial Intelligence'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Death and Suicide in Universal Artificial Intelligence', 'Reinforcement learning (RL) is a general paradigm for studying intelligent behaviour, with applications ranging from artificial intelligence to psychology and economics. AIXI is a universal solution to the RL problem; it can learn any computable environment. A technical subtlety of AIXI is that it is defined using a mixture over semimeasures that need not sum to 1, rather than over proper probability measures. In this work we argue that the shortfall of a semimeasure can naturally be interpreted as the agent\'s estimate of the probability of its death. We formally define death for generally intelligent agents like AIXI, and prove a number of related theorems about their behaviour. Notable discoveries include that agent behaviour can change radically under positive linear transformations of the reward signal (from suicidal to dogmatically self-preserving), and that the agent\'s posterior belief that it will survive increases over time.', 'cs.AI', '2016-06-02T12:48:39Z', 'http://arxiv.org/abs/1606.00652v1', '2016-10-08 10:25:55', '2016-10-08 10:25:55')[0m
  [1m[35m (3.0ms)[0m  COMMIT
  [1m[36mPublish Load (1.4ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 571[0m
  [1m[35mAuthor Load (1.2ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Jarryd Martin'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Jarryd Martin', '2016-10-08 10:25:55', '2016-10-08 10:25:55')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1538, 571, 0, '2016-10-08 10:25:55', '2016-10-08 10:25:55')[0m
  [1m[35m (1.8ms)[0m  COMMIT
  [1m[36mAuthor Load (0.6ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Tom Everitt'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36m (0.2ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (395, 571, 1, '2016-10-08 10:25:55', '2016-10-08 10:25:55')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (0.7ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Marcus Hutter'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36m (0.1ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (397, 571, 2, '2016-10-08 10:25:55', '2016-10-08 10:25:55')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPaper Load (0.8ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'The Challenge of Non-Technical Loss Detection using Artificial Intelligence: A Survey'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('The Challenge of Non-Technical Loss Detection using Artificial Intelligence: A Survey', 'Detection of non-technical losses (NTL) which include electricity theft, faulty meters or billing errors has attracted increasing attention from researchers in electrical engineering and computer science. NTLs cause significant harm to the economy, as in some countries they may range up to 40% of the total electricity distributed. The predominant research direction is employing artificial intelligence (AI) to solve this problem. Promising approaches have been reported falling into two categories: expert systems incorporating hand-crafted expert knowledge or machine learning, also called pattern recognition or data mining, which learns fraudulent consumption patterns from examples without being explicitly programmed. This paper first provides an overview about how NTLs are defined and their impact on economies. Next, it covers the fundamental pillars of AI relevant to this domain. It then surveys these research efforts in a comprehensive review of algorithms, features and data sets used. It finally identifies the key scientific and engineering challenges in NTL detection and suggests how they could be solved. We believe that those challenges have not sufficiently been addressed in past contributions and that covering those is necessary in order to advance NTL detection.', 'cs.AI', '2016-06-02T11:14:47Z', 'http://arxiv.org/abs/1606.00626v1', '2016-10-08 10:25:55', '2016-10-08 10:25:55')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPublish Load (1.2ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 572[0m
  [1m[35mAuthor Load (0.6ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Patrick Glauner'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35m (0.1ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (940, 572, 0, '2016-10-08 10:25:55', '2016-10-08 10:25:55')
  [1m[36m (0.3ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.9ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Andre Boechat'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Andre Boechat', '2016-10-08 10:25:55', '2016-10-08 10:25:55')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1539, 572, 1, '2016-10-08 10:25:55', '2016-10-08 10:25:55')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (0.8ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Lautaro Dolberg'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36m (0.1ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (942, 572, 2, '2016-10-08 10:25:55', '2016-10-08 10:25:55')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (0.8ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Jorge Meira'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36m (0.2ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (941, 572, 3, '2016-10-08 10:25:55', '2016-10-08 10:25:55')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (0.9ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Radu State'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36m (0.1ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (943, 572, 4, '2016-10-08 10:25:55', '2016-10-08 10:25:55')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (0.8ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Franck Bettinger'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36m (0.1ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (944, 572, 5, '2016-10-08 10:25:55', '2016-10-08 10:25:55')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (0.8ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Yves Rangoni'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36m (0.1ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (945, 572, 6, '2016-10-08 10:25:55', '2016-10-08 10:25:55')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (0.9ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Diogo Duarte'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36m (0.2ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (946, 572, 7, '2016-10-08 10:25:55', '2016-10-08 10:25:55')[0m
  [1m[35m (3.0ms)[0m  COMMIT
  [1m[36mPaper Load (1.1ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Mining Software Components from Object-Oriented APIs'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Mining Software Components from Object-Oriented APIs', 'Object-oriented Application Programing Interfaces (APIs) support software reuse by providing pre-implemented functionalities. Due to the huge number of included classes, reusing and understanding large APIs is a complex task. Otherwise, software components are admitted to be more reusable and understandable entities than object-oriented ones. Thus, in this paper, we propose an approach for reengineering object-oriented APIs into component-based ones. We mine components as a group of classes based on the frequency they are used together and their ability to form a quality-centric component. To validate our approach, we experimented on 100 Java applications that used Android APIs.', 'cs.SE', '2016-06-02T07:08:01Z', 'http://dx.doi.org/10.1007/978-3-319-14130-5_23', '2016-10-08 10:25:55', '2016-10-08 10:25:55')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPublish Load (1.0ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 573[0m
  [1m[35mAuthor Load (0.9ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Anas Shatnawi'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Anas Shatnawi', '2016-10-08 10:25:55', '2016-10-08 10:25:55')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1540, 573, 0, '2016-10-08 10:25:55', '2016-10-08 10:25:55')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (1.2ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Abdelhak Seriai'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Abdelhak Seriai', '2016-10-08 10:25:55', '2016-10-08 10:25:55')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1541, 573, 1, '2016-10-08 10:25:55', '2016-10-08 10:25:55')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.8ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Houari Sahraoui'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Houari Sahraoui', '2016-10-08 10:25:55', '2016-10-08 10:25:55')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1542, 573, 2, '2016-10-08 10:25:55', '2016-10-08 10:25:55')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.9ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Zakarea Al-Shara'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Zakarea Al-Shara', '2016-10-08 10:25:55', '2016-10-08 10:25:55')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1543, 573, 3, '2016-10-08 10:25:55', '2016-10-08 10:25:55')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.7ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'On the equivalence between Kolmogorov-Smirnov and ROC curve metrics for binary classification'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('On the equivalence between Kolmogorov-Smirnov and ROC curve metrics for binary classification', 'Binary decisions are very common in artificial intelligence. Applying a threshold on the continuous score gives the human decider the power to control the operating point to separate the two classes. The classifier,s discriminating power is measured along the continuous range of the score by the Area Under the ROC curve (AUC_ROC) in most application fields. Only finances uses the poor single point metric maximum Kolmogorov-Smirnov (KS) distance. This paper proposes the Area Under the KS curve (AUC_KS) for performance assessment and proves AUC_ROC = 0.5 + AUC_KS, as a simpler way to calculate the AUC_ROC. That is even more important for ROC averaging in ensembles of classifiers or n fold cross-validation. The proof is geometrically inspired on rotating all KS curve to make it lie on the top of the ROC chance diagonal. On the practical side, the independent variable on the abscissa on the KS curve simplifies the calculation of the AUC_ROC. On the theoretical side, this research gives insights on probabilistic interpretations of classifiers assessment and integrates the existing body of knowledge of the information theoretical ROC approach with the proposed statistical approach based on the thoroughly known KS distribution.', 'cs.AI', '2016-06-01T23:12:53Z', 'http://arxiv.org/abs/1606.00496v1', '2016-10-08 10:25:55', '2016-10-08 10:25:55')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (1.1ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 574
  [1m[36mAuthor Load (0.8ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Paulo J. L. Adeodato'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Paulo J. L. Adeodato', '2016-10-08 10:25:55', '2016-10-08 10:25:55')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1544, 574, 0, '2016-10-08 10:25:55', '2016-10-08 10:25:55')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.0ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Sílvio B. Melo'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Sílvio B. Melo', '2016-10-08 10:25:55', '2016-10-08 10:25:55')
  [1m[36m (2.9ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1545, 574, 1, '2016-10-08 10:25:55', '2016-10-08 10:25:55')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPaper Load (0.9ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'How to advance general game playing artificial intelligence by player modelling'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('How to advance general game playing artificial intelligence by player modelling', 'General game playing artificial intelligence has recently seen important advances due to the various techniques known as \'deep learning\'. However the advances conceal equally important limitations in their reliance on: massive data sets; fortuitously constructed problems; and absence of any human-level complexity, including other human opponents. On the other hand, deep learning systems which do beat human champions, such as in Go, do not generalise well. The power of deep learning simultaneously exposes its weakness. Given that deep learning is mostly clever reconfigurations of well-established methods, moving beyond the state of art calls for forward-thinking visionary solutions, not just more of the same. I present the argument that general game playing artificial intelligence will require a generalised player model. This is because games are inherently human artefacts which therefore, as a class of problems, contain cases which require a human-style problem solving approach. I relate this argument to the performance of state of art general game playing agents. I then describe a concept for a formal category theoretic basis to a generalised player model. This formal model approach integrates my existing \'Behavlets\' method for psychologically-derived player modelling: Cowley, B., Charles, D. (2016). Behavlets: a Method for Practical Player Modelling using Psychology-Based Player Traits and Domain Specific Features. User Modeling and User-Adapted Interaction, 26(2), 257-306.', 'cs.HC', '2016-06-01T19:07:48Z', 'http://arxiv.org/abs/1606.00401v3', '2016-10-08 10:25:55', '2016-10-08 10:25:55')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPublish Load (0.9ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 575[0m
  [1m[35mAuthor Load (0.8ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Benjamin Ultan Cowley'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Benjamin Ultan Cowley', '2016-10-08 10:25:55', '2016-10-08 10:25:55')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1546, 575, 0, '2016-10-08 10:25:55', '2016-10-08 10:25:55')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (0.7ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'A structured argumentation framework for detaching conditional obligations'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('A structured argumentation framework for detaching conditional obligations', 'We present a general formal argumentation system for dealing with the detachment of conditional obligations. Given a set of facts, constraints, and conditional obligations, we answer the question whether an unconditional obligation is detachable by considering reasons for and against its detachment. For the evaluation of arguments in favor of detaching obligations we use a Dung-style argumentation-theoretical semantics. We illustrate the modularity of the general framework by considering some extensions, and we compare the framework to some related approaches from the literature.', 'cs.AI', '2016-06-01T16:04:47Z', 'http://arxiv.org/abs/1606.00339v1', '2016-10-08 10:25:55', '2016-10-08 10:25:55')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPublish Load (1.1ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 576[0m
  [1m[35mAuthor Load (0.9ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Mathieu Beirlaen'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Mathieu Beirlaen', '2016-10-08 10:25:55', '2016-10-08 10:25:55')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1547, 576, 0, '2016-10-08 10:25:55', '2016-10-08 10:25:55')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.9ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Christian Straßer'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Christian Straßer', '2016-10-08 10:25:55', '2016-10-08 10:25:55')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1548, 576, 1, '2016-10-08 10:25:55', '2016-10-08 10:25:55')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.7ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'A Survey of Qualitative Spatial and Temporal Calculi -- Algebraic and Computational Properties'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('A Survey of Qualitative Spatial and Temporal Calculi -- Algebraic and Computational Properties', 'Qualitative Spatial and Temporal Reasoning (QSTR) is concerned with symbolic knowledge representation, typically over infinite domains. The motivations for employing QSTR techniques range from exploiting computational properties that allow efficient reasoning to capture human cognitive concepts in a computational framework. The notion of a qualitative calculus is one of the most prominent QSTR formalisms. This article presents the first overview of all qualitative calculi developed to date and their computational properties, together with generalized definitions of the fundamental concepts and methods, which now encompass all existing calculi. Moreover, we provide a classification of calculi according to their algebraic properties.', 'cs.AI', '2016-06-01T06:46:51Z', 'http://arxiv.org/abs/1606.00133v1', '2016-10-08 10:25:55', '2016-10-08 10:25:55')
  [1m[36m (2.9ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (1.4ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 577
  [1m[36mAuthor Load (0.9ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Frank Dylla'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Frank Dylla', '2016-10-08 10:25:55', '2016-10-08 10:25:55')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1549, 577, 0, '2016-10-08 10:25:55', '2016-10-08 10:25:55')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.2ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Jae Hee Lee'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Jae Hee Lee', '2016-10-08 10:25:55', '2016-10-08 10:25:55')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1550, 577, 1, '2016-10-08 10:25:55', '2016-10-08 10:25:55')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.9ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Till Mossakowski'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Till Mossakowski', '2016-10-08 10:25:55', '2016-10-08 10:25:55')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1551, 577, 2, '2016-10-08 10:25:55', '2016-10-08 10:25:55')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.9ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Thomas Schneider'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Thomas Schneider', '2016-10-08 10:25:55', '2016-10-08 10:25:55')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1552, 577, 3, '2016-10-08 10:25:55', '2016-10-08 10:25:55')[0m
  [1m[35m (1.4ms)[0m  COMMIT
  [1m[36mAuthor Load (1.2ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'André Van Delden'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('André Van Delden', '2016-10-08 10:25:55', '2016-10-08 10:25:55')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1553, 577, 4, '2016-10-08 10:25:55', '2016-10-08 10:25:55')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.2ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Jasper Van De Ven'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Jasper Van De Ven', '2016-10-08 10:25:55', '2016-10-08 10:25:55')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1554, 577, 5, '2016-10-08 10:25:55', '2016-10-08 10:25:55')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.9ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Diedrich Wolter'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Diedrich Wolter', '2016-10-08 10:25:55', '2016-10-08 10:25:55')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1555, 577, 6, '2016-10-08 10:25:55', '2016-10-08 10:25:55')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.7ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Hardness of the Pricing Problem for Chains in Barter Exchanges'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Hardness of the Pricing Problem for Chains in Barter Exchanges', 'Kidney exchange is a barter market where patients trade willing but medically incompatible donors. These trades occur via cycles, where each patient-donor pair both gives and receives a kidney, and via chains, which begin with an altruistic donor who does not require a kidney in return. For logistical reasons, the maximum length of a cycle is typically limited to a small constant, while chains can be much longer. Given a compatibility graph of patient-donor pairs, altruists, and feasible potential transplants between them, finding even a maximum-cardinality set of vertex-disjoint cycles and chains is NP-hard. There has been much work on developing provably optimal solvers that are efficient in practice. One of the leading techniques has been branch and price, where column generation is used to incrementally bring cycles and chains into the optimization model on an as-needed basis. In particular, only positive-price columns need to be brought into the model. We prove that finding a positive-price chain is NP-complete. This shows incorrectness of two leading branch-and-price solvers that suggested polynomial-time chain pricing algorithms.', 'cs.DS', '2016-06-01T04:49:08Z', 'http://arxiv.org/abs/1606.00117v1', '2016-10-08 10:25:55', '2016-10-08 10:25:55')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (1.2ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 578
  [1m[36mAuthor Load (0.8ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Benjamin Plaut'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36m (0.1ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1490, 578, 0, '2016-10-08 10:25:55', '2016-10-08 10:25:55')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (0.8ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'John P. Dickerson'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36m (0.1ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1488, 578, 1, '2016-10-08 10:25:55', '2016-10-08 10:25:55')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.3ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Tuomas Sandholm'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36m (0.2ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (76, 578, 2, '2016-10-08 10:25:55', '2016-10-08 10:25:55')[0m
  [1m[35m (2.9ms)[0m  COMMIT
  [1m[36mPaper Load (1.1ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Applications of Probabilistic Programming (Master\'s thesis, 2015)'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Applications of Probabilistic Programming (Master\'s thesis, 2015)', 'This thesis describes work on two applications of probabilistic programming: the learning of probabilistic program code given specifications, in particular program code of one-dimensional samplers; and the facilitation of sequential Monte Carlo inference with help of data-driven proposals. The latter is presented with experimental results on a linear Gaussian model and a non-parametric dependent Dirichlet process mixture of objects model for object recognition and tracking. In Chapter 1 we provide a brief introduction to probabilistic programming. In Chapter 3 we present an approach to automatic discovery of samplers in the form of probabilistic programs. We formulate a Bayesian approach to this problem by specifying a grammar-based prior over probabilistic program code. We use an approximate Bayesian computation method to learn the programs, whose executions generate samples that statistically match observed data or analytical characteristics of distributions of interest. In our experiments we leverage different probabilistic programming systems to perform Markov chain Monte Carlo sampling over the space of programs. Experimental results have demonstrated that, using the proposed methodology, we can learn approximate and even some exact samplers. Finally, we show that our results are competitive with regard to genetic programming methods. In Chapter 3, we describe a way to facilitate sequential Monte Carlo inference in probabilistic programming using data-driven proposals. In particular, we develop a distance-based proposal for the non-parametric dependent Dirichlet process mixture of objects model. We implement this approach in the probabilistic programming system Anglican, and show that for that model data-driven proposals provide significant performance improvements. We also explore the possibility of using neural networks to improve data-driven proposals.', 'cs.AI', '2016-05-31T23:48:55Z', 'http://arxiv.org/abs/1606.00075v1', '2016-10-08 10:25:55', '2016-10-08 10:25:55')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPublish Load (1.0ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 579[0m
  [1m[35mAuthor Load (1.0ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Yura N Perov'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Yura N Perov', '2016-10-08 10:25:55', '2016-10-08 10:25:55')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1556, 579, 0, '2016-10-08 10:25:55', '2016-10-08 10:25:55')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (0.7ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Quantifying the probable approximation error of probabilistic inference programs'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Quantifying the probable approximation error of probabilistic inference programs', 'This paper introduces a new technique for quantifying the approximation error of a broad class of probabilistic inference programs, including ones based on both variational and Monte Carlo approaches. The key idea is to derive a subjective bound on the symmetrized KL divergence between the distribution achieved by an approximate inference program and its true target distribution. The bound\'s validity (and subjectivity) rests on the accuracy of two auxiliary probabilistic programs: (i) a \"reference\" inference program that defines a gold standard of accuracy and (ii) a \"meta-inference\" program that answers the question \"what internal random choices did the original approximate inference program probably make given that it produced a particular result?\" The paper includes empirical results on inference problems drawn from linear regression, Dirichlet process mixture modeling, HMMs, and Bayesian networks. The experiments show that the technique is robust to the quality of the reference inference program and that it can detect implementation bugs that are not apparent from predictive performance.', 'cs.AI', '2016-05-31T22:37:43Z', 'http://arxiv.org/abs/1606.00068v1', '2016-10-08 10:25:55', '2016-10-08 10:25:55')[0m
  [1m[35m (0.9ms)[0m  COMMIT
  [1m[36mPublish Load (1.1ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 580[0m
  [1m[35mAuthor Load (0.9ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Marco F Cusumano-Towner'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Marco F Cusumano-Towner', '2016-10-08 10:25:55', '2016-10-08 10:25:55')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1557, 580, 0, '2016-10-08 10:25:55', '2016-10-08 10:25:55')[0m
  [1m[35m (2.9ms)[0m  COMMIT
  [1m[36mAuthor Load (1.4ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Vikash K Mansinghka'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Vikash K Mansinghka', '2016-10-08 10:25:55', '2016-10-08 10:25:55')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1558, 580, 1, '2016-10-08 10:25:55', '2016-10-08 10:25:55')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.9ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'How to avoid ethically relevant Machine Consciousness'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('How to avoid ethically relevant Machine Consciousness', 'This paper discusses the root cause of systems perceiving the self experience and how to exploit adaptive and learning features without introducing ethically problematic system properties.', 'cs.AI', '2016-05-31T21:52:13Z', 'http://arxiv.org/abs/1606.00058v2', '2016-10-08 10:25:55', '2016-10-08 10:25:55')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (1.2ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 581
  [1m[36mAuthor Load (0.7ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Aleksander Lodwich'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36m (0.1ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1030, 581, 0, '2016-10-08 10:25:55', '2016-10-08 10:25:55')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (0.7ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Uncertain programming model for multi-item solid transportation problem'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Uncertain programming model for multi-item solid transportation problem', 'In this paper, an uncertain Multi-objective Multi-item Solid Transportation Problem (MMSTP) based on uncertainty theory is presented. In the model, transportation costs, supplies, demands and conveyances parameters are taken to be uncertain parameters. There are restrictions on some items and conveyances of the model. Therefore, some particular items cannot be transported by some exceptional conveyances. Using the advantage of uncertainty theory, the MMSTP is first converted into an equivalent deterministic MMSTP. By applying convex combination method and minimizing distance function method, the deterministic MMSTP is reduced into single objective programming problems. Thus, both single objective programming problems are solved using Maple 18.02 optimization toolbox. Finally, a numerical example is given to illustrate the performance of the models.', 'math.OC', '2016-05-31T21:32:48Z', 'http://dx.doi.org/10.1007/s13042-016-0538-7', '2016-10-08 10:25:55', '2016-10-08 10:25:55')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPublish Load (1.3ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 582[0m
  [1m[35mAuthor Load (1.0ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Hasan Dalman'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35m (0.1ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1522, 582, 0, '2016-10-08 10:25:55', '2016-10-08 10:25:55')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.7ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Adversarial Feature Learning'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Adversarial Feature Learning', 'The ability of the Generative Adversarial Networks (GANs) framework to learn generative models mapping from simple latent distributions to arbitrarily complex data distributions has been demonstrated empirically, with compelling results showing generators learn to \"linearize semantics\" in the latent space of such models. Intuitively, such latent spaces may serve as useful feature representations for auxiliary problems where semantics are relevant. However, in their existing form, GANs have no means of learning the inverse mapping -- projecting data back into the latent space. We propose Bidirectional Generative Adversarial Networks (BiGANs) as a means of learning this inverse mapping, and demonstrate that the resulting learned feature representation is useful for auxiliary supervised discrimination tasks, competitive with contemporary approaches to unsupervised and self-supervised feature learning.', 'cs.LG', '2016-05-31T19:37:29Z', 'http://arxiv.org/abs/1605.09782v3', '2016-10-08 10:25:55', '2016-10-08 10:25:55')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (0.9ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 583
  [1m[36mAuthor Load (1.1ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Jeff Donahue'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Jeff Donahue', '2016-10-08 10:25:55', '2016-10-08 10:25:55')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1559, 583, 0, '2016-10-08 10:25:55', '2016-10-08 10:25:55')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.2ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Philipp Krähenbühl'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Philipp Krähenbühl', '2016-10-08 10:25:55', '2016-10-08 10:25:55')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1560, 583, 1, '2016-10-08 10:25:55', '2016-10-08 10:25:55')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.8ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Trevor Darrell'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36m (0.1ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1486, 583, 2, '2016-10-08 10:25:55', '2016-10-08 10:25:55')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (0.8ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Technical Report: Directed Controller Synthesis of Discrete Event Systems'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Technical Report: Directed Controller Synthesis of Discrete Event Systems', 'This paper presents a Directed Controller Synthesis (DCS) technique for discrete event systems. The DCS method explores the solution space for reactive controllers guided by a domain-independent heuristic. The heuristic is derived from an efficient abstraction of the environment based on the componentized way in which complex environments are described. Then by building the composition of the components on-the-fly DCS obtains a solution by exploring a reduced portion of the state space. This work focuses on untimed discrete event systems with safety and co-safety (i.e. reachability) goals. An evaluation for the technique is presented comparing it to other well-known approaches to controller synthesis (based on symbolic representation and compositional analyses).', 'cs.SY', '2016-05-31T19:12:41Z', 'http://arxiv.org/abs/1605.09772v1', '2016-10-08 10:25:55', '2016-10-08 10:25:55')[0m
  [1m[35m (3.0ms)[0m  COMMIT
  [1m[36mPublish Load (1.5ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 584[0m
  [1m[35mAuthor Load (1.0ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Daniel Ciolek'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Daniel Ciolek', '2016-10-08 10:25:55', '2016-10-08 10:25:55')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1561, 584, 0, '2016-10-08 10:25:55', '2016-10-08 10:25:55')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (1.0ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Victor Braberman'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Victor Braberman', '2016-10-08 10:25:55', '2016-10-08 10:25:55')[0m
  [1m[35m (1.3ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1562, 584, 1, '2016-10-08 10:25:55', '2016-10-08 10:25:55')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.9ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Nicolás D\'Ippolito'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Nicolás D\'Ippolito', '2016-10-08 10:25:55', '2016-10-08 10:25:55')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1563, 584, 2, '2016-10-08 10:25:55', '2016-10-08 10:25:55')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (1.0ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Sebastián Uchitel'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Sebastián Uchitel', '2016-10-08 10:25:55', '2016-10-08 10:25:55')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1564, 584, 3, '2016-10-08 10:25:55', '2016-10-08 10:25:55')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.7ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Towards ontology driven learning of visual concept detectors'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Towards ontology driven learning of visual concept detectors', 'The maturity of deep learning techniques has led in recent years to a breakthrough in object recognition in visual media. While for some specific benchmarks, neural techniques seem to match if not outperform human judgement, challenges are still open for detecting arbitrary concepts in arbitrary videos. In this paper, we propose a system that combines neural techniques, a large scale visual concepts ontology, and an active learning loop, to provide on the fly model learning of arbitrary concepts. We give an overview of the system as a whole, and focus on the central role of the ontology for guiding and bootstrapping the learning of new concepts, improving the recall of concept detection, and, on the user end, providing semantic search on a library of annotated videos.', 'cs.IR', '2016-05-31T18:35:44Z', 'http://arxiv.org/abs/1605.09757v1', '2016-10-08 10:25:55', '2016-10-08 10:25:55')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (1.1ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 585
  [1m[36mAuthor Load (0.8ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Sanchit Arora'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Sanchit Arora', '2016-10-08 10:25:55', '2016-10-08 10:25:55')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1565, 585, 0, '2016-10-08 10:25:55', '2016-10-08 10:25:55')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.9ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Chuck Cho'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Chuck Cho', '2016-10-08 10:25:55', '2016-10-08 10:25:55')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1566, 585, 1, '2016-10-08 10:25:55', '2016-10-08 10:25:55')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (1.1ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Paul Fitzpatrick'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Paul Fitzpatrick', '2016-10-08 10:25:55', '2016-10-08 10:25:55')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1567, 585, 2, '2016-10-08 10:25:55', '2016-10-08 10:25:55')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.0ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Francois Scharffe'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Francois Scharffe', '2016-10-08 10:25:55', '2016-10-08 10:25:55')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1568, 585, 3, '2016-10-08 10:25:55', '2016-10-08 10:25:55')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPaper Load (0.9ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Information Theoretically Aided Reinforcement Learning for Embodied Agents'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Information Theoretically Aided Reinforcement Learning for Embodied Agents', 'Reinforcement learning for embodied agents is a challenging problem. The accumulated reward to be optimized is often a very rugged function, and gradient methods are impaired by many local optimizers. We demonstrate, in an experimental setting, that incorporating an intrinsic reward can smoothen the optimization landscape while preserving the global optimizers of interest. We show that policy gradient optimization for locomotion in a complex morphology is significantly improved when supplementing the extrinsic reward by an intrinsic reward defined in terms of the mutual information of time consecutive sensor readings.', 'cs.AI', '2016-05-31T17:30:54Z', 'http://arxiv.org/abs/1605.09735v1', '2016-10-08 10:25:55', '2016-10-08 10:25:55')[0m
  [1m[35m (3.0ms)[0m  COMMIT
  [1m[36mPublish Load (1.3ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 586[0m
  [1m[35mAuthor Load (1.1ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Guido Montufar'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Guido Montufar', '2016-10-08 10:25:55', '2016-10-08 10:25:55')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1569, 586, 0, '2016-10-08 10:25:55', '2016-10-08 10:25:55')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.8ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Keyan Ghazi-Zahedi'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Keyan Ghazi-Zahedi', '2016-10-08 10:25:55', '2016-10-08 10:25:55')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1570, 586, 1, '2016-10-08 10:25:55', '2016-10-08 10:25:55')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.9ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Nihat Ay'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Nihat Ay', '2016-10-08 10:25:55', '2016-10-08 10:25:55')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1571, 586, 2, '2016-10-08 10:25:55', '2016-10-08 10:25:55')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (0.8ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Variational Information Maximizing Exploration'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Variational Information Maximizing Exploration', 'Scalable and effective exploration remains a key challenge in reinforcement learning (RL). While there are methods with optimality guarantees in the setting of discrete state and action spaces, these methods cannot be applied in high-dimensional deep RL scenarios. As such, most contemporary RL relies on simple heuristics such as epsilon-greedy exploration or adding Gaussian noise to the controls. This paper introduces Variational Information Maximizing Exploration (VIME), an exploration strategy based on maximization of information gain about the agent\'s belief of environment dynamics. We propose a practical implementation, using variational inference in Bayesian neural networks which efficiently handles continuous state and action spaces. VIME modifies the MDP reward function, and can be applied with several different underlying RL algorithms. We demonstrate that VIME achieves significantly better performance compared to heuristic exploration methods across a variety of continuous control tasks and algorithms, including tasks with very sparse rewards.', 'cs.LG', '2016-05-31T15:34:36Z', 'http://arxiv.org/abs/1605.09674v2', '2016-10-08 10:25:55', '2016-10-08 10:25:55')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPublish Load (0.9ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 587[0m
  [1m[35mAuthor Load (0.8ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Rein Houthooft'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Rein Houthooft', '2016-10-08 10:25:55', '2016-10-08 10:25:55')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1572, 587, 0, '2016-10-08 10:25:55', '2016-10-08 10:25:55')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (1.1ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Xi Chen'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Xi Chen', '2016-10-08 10:25:55', '2016-10-08 10:25:55')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1573, 587, 1, '2016-10-08 10:25:55', '2016-10-08 10:25:55')
  [1m[36m (0.3ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.9ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Yan Duan'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Yan Duan', '2016-10-08 10:25:55', '2016-10-08 10:25:55')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1574, 587, 2, '2016-10-08 10:25:55', '2016-10-08 10:25:55')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (1.0ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'John Schulman'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36m (0.2ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1169, 587, 3, '2016-10-08 10:25:55', '2016-10-08 10:25:55')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (1.1ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Filip De Turck'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Filip De Turck', '2016-10-08 10:25:55', '2016-10-08 10:25:55')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1575, 587, 4, '2016-10-08 10:25:55', '2016-10-08 10:25:55')
  [1m[36m (2.9ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.1ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Pieter Abbeel'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35m (0.2ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1124, 587, 5, '2016-10-08 10:25:55', '2016-10-08 10:25:55')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.9ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Controlling Exploration Improves Training for Deep Neural Networks'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Controlling Exploration Improves Training for Deep Neural Networks', 'Stochastic optimization methods are widely used for training of deep neural networks. However, it is still a challenging research problem to achieve effective training by using stochastic optimization methods. This is due to the difficulties in finding good parameters on a loss function that have many saddle points. In this paper, we propose a stochastic optimization method called STDProp for effective training of deep neural networks. Its key idea is to effectively explore parameters on a complex surface of a loss function. We additionally develop momentum version of STDProp. While our approaches are easy to implement with high memory efficiency, it is more effective than other practical stochastic optimization methods for deep neural networks.', 'cs.LG', '2016-05-31T12:11:51Z', 'http://arxiv.org/abs/1605.09593v1', '2016-10-08 10:25:55', '2016-10-08 10:25:55')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (1.0ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 588
  [1m[36mAuthor Load (1.0ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Yasutoshi Ida'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Yasutoshi Ida', '2016-10-08 10:25:55', '2016-10-08 10:25:55')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1576, 588, 0, '2016-10-08 10:25:55', '2016-10-08 10:25:55')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.1ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Yasuhiro Fujiwara'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Yasuhiro Fujiwara', '2016-10-08 10:25:55', '2016-10-08 10:25:55')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1577, 588, 1, '2016-10-08 10:25:55', '2016-10-08 10:25:55')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (0.9ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Sotetsu Iwamura'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Sotetsu Iwamura', '2016-10-08 10:25:55', '2016-10-08 10:25:55')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1578, 588, 2, '2016-10-08 10:25:55', '2016-10-08 10:25:55')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.7ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Determining the Characteristic Vocabulary for a Specialized Dictionary using Word2vec and a Directed Crawler'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Determining the Characteristic Vocabulary for a Specialized Dictionary using Word2vec and a Directed Crawler', 'Specialized dictionaries are used to understand concepts in specific domains, especially where those concepts are not part of the general vocabulary, or having meanings that differ from ordinary languages. The first step in creating a specialized dictionary involves detecting the characteristic vocabulary of the domain in question. Classical methods for detecting this vocabulary involve gathering a domain corpus, calculating statistics on the terms found there, and then comparing these statistics to a background or general language corpus. Terms which are found significantly more often in the specialized corpus than in the background corpus are candidates for the characteristic vocabulary of the domain. Here we present two tools, a directed crawler, and a distributional semantics package, that can be used together, circumventing the need of a background corpus. Both tools are available on the web.', 'cs.CL', '2016-05-31T10:31:16Z', 'http://arxiv.org/abs/1605.09564v1', '2016-10-08 10:25:55', '2016-10-08 10:25:55')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (1.2ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 589
  [1m[36mAuthor Load (0.9ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Gregory Grefenstette'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Gregory Grefenstette', '2016-10-08 10:25:55', '2016-10-08 10:25:55')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1579, 589, 0, '2016-10-08 10:25:55', '2016-10-08 10:25:55')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.0ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Lawrence Muchemi'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Lawrence Muchemi', '2016-10-08 10:25:55', '2016-10-08 10:25:55')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.6ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1580, 589, 1, '2016-10-08 10:25:55', '2016-10-08 10:25:55')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (0.8ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Psychologically based Virtual-Suspect for Interrogative Interview Training'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.4ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Psychologically based Virtual-Suspect for Interrogative Interview Training', 'In this paper, we present a Virtual-Suspect system which can be used to train inexperienced law enforcement personnel in interrogation strategies. The system supports different scenario configurations based on historical data. The responses presented by the Virtual-Suspect are selected based on the psychological state of the suspect, which can be configured as well. Furthermore, each interrogator\'s statement affects the Virtual-Suspect\'s current psychological state, which may lead the interrogation in different directions. In addition, the model takes into account the context in which the statements are made. Experiments with 24 subjects demonstrate that the Virtual-Suspect\'s behavior is similar to that of a human who plays the role of the suspect.', 'cs.AI', '2016-05-31T06:43:51Z', 'http://arxiv.org/abs/1605.09505v1', '2016-10-08 10:25:55', '2016-10-08 10:25:55')[0m
  [1m[35m (2.9ms)[0m  COMMIT
  [1m[36mPublish Load (1.5ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 590[0m
  [1m[35mAuthor Load (1.2ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Moshe Bitan'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Moshe Bitan', '2016-10-08 10:25:55', '2016-10-08 10:25:55')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1581, 590, 0, '2016-10-08 10:25:55', '2016-10-08 10:25:55')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (1.1ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Galit Nahari'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Galit Nahari', '2016-10-08 10:25:55', '2016-10-08 10:25:55')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1582, 590, 1, '2016-10-08 10:25:55', '2016-10-08 10:25:55')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.9ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Zvi Nisin'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Zvi Nisin', '2016-10-08 10:25:55', '2016-10-08 10:25:55')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1583, 590, 2, '2016-10-08 10:25:55', '2016-10-08 10:25:55')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.9ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Ariel Roth'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Ariel Roth', '2016-10-08 10:25:55', '2016-10-08 10:25:55')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1584, 590, 3, '2016-10-08 10:25:55', '2016-10-08 10:25:55')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.7ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Sarit Kraus'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35m (0.1ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1110, 590, 4, '2016-10-08 10:25:55', '2016-10-08 10:25:55')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.9ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Interdependent Scheduling Games'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Interdependent Scheduling Games', 'We propose a model of interdependent scheduling games in which each player controls a set of services that they schedule independently. A player is free to schedule his own services at any time; however, each of these services only begins to accrue reward for the player when all predecessor services, which may or may not be controlled by the same player, have been activated. This model, where players have interdependent services, is motivated by the problems faced in planning and coordinating large-scale infrastructures, e.g., restoring electricity and gas to residents after a natural disaster or providing medical care in a crisis when different agencies are responsible for the delivery of staff, equipment, and medicine. We undertake a game-theoretic analysis of this setting and in particular consider the issues of welfare maximization, computing best responses, Nash dynamics, and existence and computation of Nash equilibria.', 'cs.GT', '2016-05-31T04:54:46Z', 'http://arxiv.org/abs/1605.09497v1', '2016-10-08 10:25:55', '2016-10-08 10:25:55')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (1.1ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 591
  [1m[36mAuthor Load (0.6ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Andres Abeliuk'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36m (0.2ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (933, 591, 0, '2016-10-08 10:25:55', '2016-10-08 10:25:55')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.8ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Haris Aziz'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Haris Aziz', '2016-10-08 10:25:55', '2016-10-08 10:25:55')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1585, 591, 1, '2016-10-08 10:25:55', '2016-10-08 10:25:55')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.0ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Gerardo Berbeglia'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Gerardo Berbeglia', '2016-10-08 10:25:55', '2016-10-08 10:25:55')
  [1m[36m (0.6ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1586, 591, 2, '2016-10-08 10:25:55', '2016-10-08 10:25:55')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (1.3ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Serge Gaspers'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Serge Gaspers', '2016-10-08 10:25:55', '2016-10-08 10:25:55')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1587, 591, 3, '2016-10-08 10:25:55', '2016-10-08 10:25:55')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.3ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Petr Kalina'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Petr Kalina', '2016-10-08 10:25:56', '2016-10-08 10:25:56')
  [1m[36m (3.0ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1588, 591, 4, '2016-10-08 10:25:56', '2016-10-08 10:25:56')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.6ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Nicholas Mattei'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36m (0.1ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (543, 591, 5, '2016-10-08 10:25:56', '2016-10-08 10:25:56')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (1.2ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Dominik Peters'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Dominik Peters', '2016-10-08 10:25:56', '2016-10-08 10:25:56')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1589, 591, 6, '2016-10-08 10:25:56', '2016-10-08 10:25:56')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.0ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Paul Stursberg'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Paul Stursberg', '2016-10-08 10:25:56', '2016-10-08 10:25:56')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1590, 591, 7, '2016-10-08 10:25:56', '2016-10-08 10:25:56')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (0.8ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Pascal Van Hentenryck'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36m (0.1ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1172, 591, 8, '2016-10-08 10:25:56', '2016-10-08 10:25:56')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (0.6ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Toby Walsh'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36m (0.1ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (544, 591, 9, '2016-10-08 10:25:56', '2016-10-08 10:25:56')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPaper Load (1.1ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Unsupervised Discovery of El Nino Using Causal Feature Learning on Microlevel Climate Data'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Unsupervised Discovery of El Nino Using Causal Feature Learning on Microlevel Climate Data', 'We show that the climate phenomena of El Nino and La Nina arise naturally as states of macro-variables when our recent causal feature learning framework (Chalupka 2015, Chalupka 2016) is applied to micro-level measures of zonal wind (ZW) and sea surface temperatures (SST) taken over the equatorial band of the Pacific Ocean. The method identifies these unusual climate states on the basis of the relation between ZW and SST patterns without any input about past occurrences of El Nino or La Nina. The simpler alternatives of (i) clustering the SST fields while disregarding their relationship with ZW patterns, or (ii) clustering the joint ZW-SST patterns, do not discover El Nino. We discuss the degree to which our method supports a causal interpretation and use a low-dimensional toy example to explain its success over other clustering approaches. Finally, we propose a new robust and scalable alternative to our original algorithm (Chalupka 2016), which circumvents the need for high-dimensional density learning.', 'stat.ML', '2016-05-30T19:57:56Z', 'http://arxiv.org/abs/1605.09370v1', '2016-10-08 10:25:56', '2016-10-08 10:25:56')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPublish Load (1.0ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 592[0m
  [1m[35mAuthor Load (0.9ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Krzysztof Chalupka'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Krzysztof Chalupka', '2016-10-08 10:25:56', '2016-10-08 10:25:56')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1591, 592, 0, '2016-10-08 10:25:56', '2016-10-08 10:25:56')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.8ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Tobias Bischoff'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Tobias Bischoff', '2016-10-08 10:25:56', '2016-10-08 10:25:56')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1592, 592, 1, '2016-10-08 10:25:56', '2016-10-08 10:25:56')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.0ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Pietro Perona'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Pietro Perona', '2016-10-08 10:25:56', '2016-10-08 10:25:56')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1593, 592, 2, '2016-10-08 10:25:56', '2016-10-08 10:25:56')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.9ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Frederick Eberhardt'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Frederick Eberhardt', '2016-10-08 10:25:56', '2016-10-08 10:25:56')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1594, 592, 3, '2016-10-08 10:25:56', '2016-10-08 10:25:56')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (1.5ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Synthesizing the preferred inputs for neurons in neural networks via deep generator networks'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Synthesizing the preferred inputs for neurons in neural networks via deep generator networks', 'Deep neural networks (DNNs) have demonstrated state-of-the-art results on many pattern recognition tasks, especially vision classification problems. Understanding the inner workings of such computational brains is both fascinating basic science that is interesting in its own right - similar to why we study the human brain - and will enable researchers to further improve DNNs. One path to understanding how a neural network functions internally is to study what each of its neurons has learned to detect. One such method is called activation maximization (AM), which synthesizes an input (e.g. an image) that highly activates a neuron. Here we dramatically improve the qualitative state of the art of activation maximization by harnessing a powerful, learned prior: a deep generator network (DGN). The algorithm (1) generates qualitatively state-of-the-art synthetic images that look almost real, (2) reveals the features learned by each neuron in an interpretable way, (3) generalizes well to new datasets and somewhat well to different network architectures without requiring the prior to be relearned, and (4) can be considered as a high-quality generative method (in this case, by generating novel, creative, interesting, recognizable images).', 'cs.NE', '2016-05-30T16:22:54Z', 'http://arxiv.org/abs/1605.09304v3', '2016-10-08 10:25:56', '2016-10-08 10:25:56')
  [1m[36m (3.0ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (1.3ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 593
  [1m[36mAuthor Load (1.0ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Anh Nguyen'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Anh Nguyen', '2016-10-08 10:25:56', '2016-10-08 10:25:56')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1595, 593, 0, '2016-10-08 10:25:56', '2016-10-08 10:25:56')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.4ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Alexey Dosovitskiy'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Alexey Dosovitskiy', '2016-10-08 10:25:56', '2016-10-08 10:25:56')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1596, 593, 1, '2016-10-08 10:25:56', '2016-10-08 10:25:56')[0m
  [1m[35m (2.5ms)[0m  COMMIT
  [1m[36mAuthor Load (1.4ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Jason Yosinski'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Jason Yosinski', '2016-10-08 10:25:56', '2016-10-08 10:25:56')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1597, 593, 2, '2016-10-08 10:25:56', '2016-10-08 10:25:56')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.1ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Thomas Brox'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Thomas Brox', '2016-10-08 10:25:56', '2016-10-08 10:25:56')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1598, 593, 3, '2016-10-08 10:25:56', '2016-10-08 10:25:56')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.9ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Jeff Clune'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Jeff Clune', '2016-10-08 10:25:56', '2016-10-08 10:25:56')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1599, 593, 4, '2016-10-08 10:25:56', '2016-10-08 10:25:56')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.8ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Internal Guidance for Satallax'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Internal Guidance for Satallax', 'We propose a new internal guidance method for automated theorem provers based on the given-clause algorithm. Our method influences the choice of unprocessed clauses using positive and negative examples from previous proofs. To this end, we present an efficient scheme for Naive Bayesian classification by generalising label occurrences to types with monoid structure. This makes it possible to extend existing fast classifiers, which consider only positive examples, with negative ones. We implement the method in the higher-order logic prover Satallax, where we modify the delay with which propositions are processed. We evaluated our method on a simply-typed higher-order logic version of the Flyspeck project, where it solves 26% more problems than Satallax without internal guidance.', 'cs.LO', '2016-05-30T16:01:51Z', 'http://arxiv.org/abs/1605.09293v1', '2016-10-08 10:25:56', '2016-10-08 10:25:56')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (1.0ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 594
  [1m[36mAuthor Load (0.8ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Michael Färber'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Michael Färber', '2016-10-08 10:25:56', '2016-10-08 10:25:56')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1600, 594, 0, '2016-10-08 10:25:56', '2016-10-08 10:25:56')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.1ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Chad Brown'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Chad Brown', '2016-10-08 10:25:56', '2016-10-08 10:25:56')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.4ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1601, 594, 1, '2016-10-08 10:25:56', '2016-10-08 10:25:56')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (0.7ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Control of Memory, Active Perception, and Action in Minecraft'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Control of Memory, Active Perception, and Action in Minecraft', 'In this paper, we introduce a new set of reinforcement learning (RL) tasks in Minecraft (a flexible 3D world). We then use these tasks to systematically compare and contrast existing deep reinforcement learning (DRL) architectures with our new memory-based DRL architectures. These tasks are designed to emphasize, in a controllable manner, issues that pose challenges for RL methods including partial observability (due to first-person visual observations), delayed rewards, high-dimensional visual observations, and the need to use active perception in a correct manner so as to perform well in the tasks. While these tasks are conceptually simple to describe, by virtue of having all of these challenges simultaneously they are difficult for current DRL architectures. Additionally, we evaluate the generalization performance of the architectures on environments not used during training. The experimental results show that our new architectures generalize to unseen environments better than existing DRL architectures.', 'cs.AI', '2016-05-30T07:40:13Z', 'http://arxiv.org/abs/1605.09128v1', '2016-10-08 10:25:56', '2016-10-08 10:25:56')[0m
  [1m[35m (2.9ms)[0m  COMMIT
  [1m[36mPublish Load (1.5ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 595[0m
  [1m[35mAuthor Load (1.1ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Junhyuk Oh'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Junhyuk Oh', '2016-10-08 10:25:56', '2016-10-08 10:25:56')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1602, 595, 0, '2016-10-08 10:25:56', '2016-10-08 10:25:56')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (0.9ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Valliappa Chockalingam'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Valliappa Chockalingam', '2016-10-08 10:25:56', '2016-10-08 10:25:56')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1603, 595, 1, '2016-10-08 10:25:56', '2016-10-08 10:25:56')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.1ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Satinder Singh'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Satinder Singh', '2016-10-08 10:25:56', '2016-10-08 10:25:56')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1604, 595, 2, '2016-10-08 10:25:56', '2016-10-08 10:25:56')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.9ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Honglak Lee'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Honglak Lee', '2016-10-08 10:25:56', '2016-10-08 10:25:56')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1605, 595, 3, '2016-10-08 10:25:56', '2016-10-08 10:25:56')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.8ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Understanding Convolutional Neural Networks'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Understanding Convolutional Neural Networks', 'Convoulutional Neural Networks (CNNs) exhibit extraordinary performance on a variety of machine learning tasks. However, their mathematical properties and behavior are quite poorly understood. There is some work, in the form of a framework, for analyzing the operations that they perform. The goal of this project is to present key results from this theory, and provide intuition for why CNNs work.', 'stat.ML', '2016-05-30T00:50:39Z', 'http://arxiv.org/abs/1605.09081v1', '2016-10-08 10:25:56', '2016-10-08 10:25:56')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (1.0ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 596
  [1m[36mAuthor Load (1.4ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Jayanth Koushik'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Jayanth Koushik', '2016-10-08 10:25:56', '2016-10-08 10:25:56')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1606, 596, 0, '2016-10-08 10:25:56', '2016-10-08 10:25:56')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.8ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'MCMC assisted by Belief Propagaion'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('MCMC assisted by Belief Propagaion', 'Markov Chain Monte Carlo (MCMC) and Belief Propagation (BP) are the most popular algorithms for computational inference in Graphical Models (GM). In principle, MCMC is an exact probabilistic method which, however, often suffers from exponentially slow mixing. In contrast, BP is a deterministic method, which is typically fast, empirically very successful, however in general lacking control of accuracy over loopy graphs. In this paper, we introduce MCMC algorithms correcting the approximation error of BP, i.e., we provide a way to compensate for BP errors via a consecutive BP-aware MCMC. Our framework is based on the Loop Calculus (LC) approach which allows to express the BP error as a sum of weighted generalized loops. Although the full series is computationally intractable, it is known that a truncated series, summing up all 2-regular loops, is computable in polynomial-time for planar pair-wise binary GMs and it also provides a highly accurate approximation empirically. Motivated by this, we first propose a polynomial-time approximation MCMC scheme for the truncated series of general (non-planar) pair-wise binary models. Our main idea here is to use the Worm algorithm, known to provide fast mixing in other (related) problems, and then design an appropriate rejection scheme to sample 2-regular loops. Furthermore, we also design an efficient rejection-free MCMC scheme for approximating the full series. The main novelty underlying our design is in utilizing the concept of cycle basis, which provides an efficient decomposition of the generalized loops. In essence, the proposed MCMC schemes run on transformed GM built upon the non-trivial BP solution, and our experiments show that this synthesis of BP and MCMC outperforms both direct MCMC and bare BP schemes.', 'stat.ML', '2016-05-29T18:24:45Z', 'http://arxiv.org/abs/1605.09042v2', '2016-10-08 10:25:56', '2016-10-08 10:25:56')
  [1m[36m (2.9ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (1.6ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 597
  [1m[36mAuthor Load (1.4ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Sungsoo Ahn'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Sungsoo Ahn', '2016-10-08 10:25:56', '2016-10-08 10:25:56')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1607, 597, 0, '2016-10-08 10:25:56', '2016-10-08 10:25:56')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.9ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Michael Chertkov'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35m (0.3ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1173, 597, 1, '2016-10-08 10:25:56', '2016-10-08 10:25:56')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.9ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Jinwoo Shin'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Jinwoo Shin', '2016-10-08 10:25:56', '2016-10-08 10:25:56')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1608, 597, 2, '2016-10-08 10:25:56', '2016-10-08 10:25:56')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPaper Load (0.8ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Computational Estimate Visualisation and Evaluation of Agent Classified Rules Learning System'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Computational Estimate Visualisation and Evaluation of Agent Classified Rules Learning System', 'Student modelling and agent classified rules learning as applied in the development of the intelligent Preassessment System has been presented in [10],[11]. In this paper, we now demystify the theory behind the development of the pre-assessment system followed by some computational experimentation and graph visualisation of the agent classified rules learning algorithm in the estimation and prediction of classified rules. In addition, we present some preliminary results of the pre-assessment system evaluation. From the results, it is gathered that the system has performed according to its design specification.', 'cs.CY', '2016-05-28T11:29:09Z', 'http://arxiv.org/abs/1605.08878v1', '2016-10-08 10:25:56', '2016-10-08 10:25:56')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPublish Load (1.3ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 598[0m
  [1m[35mAuthor Load (0.8ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Kennedy E. Ehimwenma'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Kennedy E. Ehimwenma', '2016-10-08 10:25:56', '2016-10-08 10:25:56')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1609, 598, 0, '2016-10-08 10:25:56', '2016-10-08 10:25:56')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.9ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Martin Beer'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Martin Beer', '2016-10-08 10:25:56', '2016-10-08 10:25:56')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1610, 598, 1, '2016-10-08 10:25:56', '2016-10-08 10:25:56')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.0ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Paul Crowther'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Paul Crowther', '2016-10-08 10:25:56', '2016-10-08 10:25:56')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1611, 598, 2, '2016-10-08 10:25:56', '2016-10-08 10:25:56')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (1.2ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Density estimation using Real NVP'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Density estimation using Real NVP', 'Unsupervised learning of probabilistic models is a central yet challenging problem in machine learning. Specifically, designing models with tractable learning, sampling, inference and evaluation is crucial in solving this task. We extend the space of such models using real-valued non-volume preserving (real NVP) transformations, a set of powerful invertible and learnable transformations, resulting in an unsupervised learning algorithm with exact log-likelihood computation, exact sampling, exact inference of latent variables, and an interpretable latent space. We demonstrate its ability to model natural images on four datasets through sampling, log-likelihood evaluation and latent variable manipulations.', 'cs.LG', '2016-05-27T21:24:32Z', 'http://arxiv.org/abs/1605.08803v1', '2016-10-08 10:25:56', '2016-10-08 10:25:56')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPublish Load (0.9ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 599[0m
  [1m[35mAuthor Load (0.8ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Laurent Dinh'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Laurent Dinh', '2016-10-08 10:25:56', '2016-10-08 10:25:56')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.4ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1612, 599, 0, '2016-10-08 10:25:56', '2016-10-08 10:25:56')[0m
  [1m[35m (2.9ms)[0m  COMMIT
  [1m[36mAuthor Load (1.3ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Jascha Sohl-Dickstein'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.3ms)[0m  BEGIN
  [1m[36m (0.2ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1232, 599, 1, '2016-10-08 10:25:56', '2016-10-08 10:25:56')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (1.0ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Samy Bengio'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Samy Bengio', '2016-10-08 10:25:56', '2016-10-08 10:25:56')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1613, 599, 2, '2016-10-08 10:25:56', '2016-10-08 10:25:56')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.8ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'TensorFlow: A system for large-scale machine learning'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('TensorFlow: A system for large-scale machine learning', 'TensorFlow is a machine learning system that operates at large scale and in heterogeneous environments. TensorFlow uses dataflow graphs to represent computation, shared state, and the operations that mutate that state. It maps the nodes of a dataflow graph across many machines in a cluster, and within a machine across multiple computational devices, including multicore CPUs, general-purpose GPUs, and custom designed ASICs known as Tensor Processing Units (TPUs). This architecture gives flexibility to the application developer: whereas in previous \"parameter server\" designs the management of shared state is built into the system, TensorFlow enables developers to experiment with novel optimizations and training algorithms. TensorFlow supports a variety of applications, with particularly strong support for training and inference on deep neural networks. Several Google services use TensorFlow in production, we have released it as an open-source project, and it has become widely used for machine learning research. In this paper, we describe the TensorFlow dataflow model in contrast to existing systems, and demonstrate the compelling performance that TensorFlow achieves for several real-world applications.', 'cs.DC', '2016-05-27T15:49:50Z', 'http://arxiv.org/abs/1605.08695v2', '2016-10-08 10:25:56', '2016-10-08 10:25:56')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (0.9ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 600
  [1m[36mAuthor Load (0.9ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Martín Abadi'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Martín Abadi', '2016-10-08 10:25:56', '2016-10-08 10:25:56')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.4ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1614, 600, 0, '2016-10-08 10:25:56', '2016-10-08 10:25:56')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.9ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Paul Barham'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Paul Barham', '2016-10-08 10:25:56', '2016-10-08 10:25:56')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1615, 600, 1, '2016-10-08 10:25:56', '2016-10-08 10:25:56')[0m
  [1m[35m (0.9ms)[0m  COMMIT
  [1m[36mAuthor Load (0.9ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Jianmin Chen'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Jianmin Chen', '2016-10-08 10:25:56', '2016-10-08 10:25:56')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1616, 600, 2, '2016-10-08 10:25:56', '2016-10-08 10:25:56')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.2ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Zhifeng Chen'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Zhifeng Chen', '2016-10-08 10:25:56', '2016-10-08 10:25:56')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1617, 600, 3, '2016-10-08 10:25:56', '2016-10-08 10:25:56')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (1.0ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Andy Davis'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.4ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Andy Davis', '2016-10-08 10:25:56', '2016-10-08 10:25:56')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1618, 600, 4, '2016-10-08 10:25:56', '2016-10-08 10:25:56')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.9ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Jeffrey Dean'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Jeffrey Dean', '2016-10-08 10:25:56', '2016-10-08 10:25:56')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1619, 600, 5, '2016-10-08 10:25:56', '2016-10-08 10:25:56')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (0.9ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Matthieu Devin'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Matthieu Devin', '2016-10-08 10:25:56', '2016-10-08 10:25:56')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1620, 600, 6, '2016-10-08 10:25:56', '2016-10-08 10:25:56')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.1ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Sanjay Ghemawat'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Sanjay Ghemawat', '2016-10-08 10:25:56', '2016-10-08 10:25:56')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1621, 600, 7, '2016-10-08 10:25:56', '2016-10-08 10:25:56')[0m
  [1m[35m (2.9ms)[0m  COMMIT
  [1m[36mAuthor Load (1.1ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Geoffrey Irving'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36m (0.2ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1269, 600, 8, '2016-10-08 10:25:56', '2016-10-08 10:25:56')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (1.1ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Michael Isard'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Michael Isard', '2016-10-08 10:25:56', '2016-10-08 10:25:56')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1622, 600, 9, '2016-10-08 10:25:56', '2016-10-08 10:25:56')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.3ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Manjunath Kudlur'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Manjunath Kudlur', '2016-10-08 10:25:56', '2016-10-08 10:25:56')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1623, 600, 10, '2016-10-08 10:25:56', '2016-10-08 10:25:56')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.8ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Josh Levenberg'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Josh Levenberg', '2016-10-08 10:25:56', '2016-10-08 10:25:56')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1624, 600, 11, '2016-10-08 10:25:56', '2016-10-08 10:25:56')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.9ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Rajat Monga'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Rajat Monga', '2016-10-08 10:25:56', '2016-10-08 10:25:56')
  [1m[36m (0.3ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1625, 600, 12, '2016-10-08 10:25:56', '2016-10-08 10:25:56')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.9ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Sherry Moore'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Sherry Moore', '2016-10-08 10:25:56', '2016-10-08 10:25:56')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1626, 600, 13, '2016-10-08 10:25:56', '2016-10-08 10:25:56')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.0ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Derek G. Murray'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Derek G. Murray', '2016-10-08 10:25:56', '2016-10-08 10:25:56')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1627, 600, 14, '2016-10-08 10:25:56', '2016-10-08 10:25:56')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (1.0ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Benoit Steiner'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Benoit Steiner', '2016-10-08 10:25:56', '2016-10-08 10:25:56')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1628, 600, 15, '2016-10-08 10:25:56', '2016-10-08 10:25:56')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.9ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Paul Tucker'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Paul Tucker', '2016-10-08 10:25:56', '2016-10-08 10:25:56')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1629, 600, 16, '2016-10-08 10:25:56', '2016-10-08 10:25:56')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (1.1ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Vijay Vasudevan'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Vijay Vasudevan', '2016-10-08 10:25:56', '2016-10-08 10:25:56')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1630, 600, 17, '2016-10-08 10:25:56', '2016-10-08 10:25:56')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.0ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Pete Warden'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Pete Warden', '2016-10-08 10:25:56', '2016-10-08 10:25:56')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1631, 600, 18, '2016-10-08 10:25:56', '2016-10-08 10:25:56')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (1.0ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Martin Wicke'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Martin Wicke', '2016-10-08 10:25:56', '2016-10-08 10:25:56')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.3ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1632, 600, 19, '2016-10-08 10:25:56', '2016-10-08 10:25:56')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.9ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Yuan Yu'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Yuan Yu', '2016-10-08 10:25:56', '2016-10-08 10:25:56')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1633, 600, 20, '2016-10-08 10:25:56', '2016-10-08 10:25:56')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (0.9ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Xiaoqiang Zheng'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Xiaoqiang Zheng', '2016-10-08 10:25:56', '2016-10-08 10:25:56')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1634, 600, 21, '2016-10-08 10:25:56', '2016-10-08 10:25:56')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.8ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Model-Free Imitation Learning with Policy Optimization'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Model-Free Imitation Learning with Policy Optimization', 'In imitation learning, an agent learns how to behave in an environment with an unknown cost function by mimicking expert demonstrations. Existing imitation learning algorithms typically involve solving a sequence of planning or reinforcement learning problems. Such algorithms are therefore not directly applicable to large, high-dimensional environments, and their performance can significantly degrade if the planning problems are not solved to optimality. Under the apprenticeship learning formalism, we develop alternative model-free algorithms for finding a parameterized stochastic policy that performs at least as well as an expert policy on an unknown cost function, based on sample trajectories from the expert. Our approach, based on policy gradients, scales to large continuous environments with guaranteed convergence to local minima.', 'cs.LG', '2016-05-26T23:43:32Z', 'http://arxiv.org/abs/1605.08478v1', '2016-10-08 10:25:56', '2016-10-08 10:25:56')
  [1m[36m (2.9ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (1.5ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 601
  [1m[36mAuthor Load (1.0ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Jonathan Ho'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36m (0.1ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.4ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1338, 601, 0, '2016-10-08 10:25:56', '2016-10-08 10:25:56')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.9ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Jayesh K. Gupta'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Jayesh K. Gupta', '2016-10-08 10:25:56', '2016-10-08 10:25:56')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1635, 601, 1, '2016-10-08 10:25:56', '2016-10-08 10:25:56')
  [1m[36m (0.3ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.9ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Stefano Ermon'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35m (0.2ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1339, 601, 2, '2016-10-08 10:25:56', '2016-10-08 10:25:56')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.7ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Low-Cost Scene Modeling using a Density Function Improves Segmentation Performance'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Low-Cost Scene Modeling using a Density Function Improves Segmentation Performance', 'We propose a low cost and effective way to combine a free simulation software and free CAD models for modeling human-object interaction in order to improve human & object segmentation. It is intended for research scenarios related to safe human-robot collaboration (SHRC) and interaction (SHRI) in the industrial domain. The task of human and object modeling has been used for detecting activity, and for inferring and predicting actions, different from those works, we do human and object modeling in order to learn interactions in RGB-D data for improving segmentation. For this purpose, we define a novel density function to model a three dimensional (3D) scene in a virtual environment (VREP). This density function takes into account various possible configurations of human-object and object-object relationships and interactions governed by their affordances. Using this function, we synthesize a large, realistic and highly varied synthetic RGB-D dataset that we use for training. We train a random forest classifier, and the pixelwise predictions obtained is integrated as a unary term in a pairwise conditional random fields (CRF). Our evaluation shows that modeling these interactions improves segmentation performance by ~7\\% in mean average precision and recall over state-of-the-art methods that ignore these interactions in real-world data. Our approach is computationally efficient, robust and can run real-time on consumer hardware.', 'cs.CV', '2016-05-26T22:34:37Z', 'http://arxiv.org/abs/1605.08464v1', '2016-10-08 10:25:56', '2016-10-08 10:25:56')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (0.9ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 602
  [1m[36mAuthor Load (0.8ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Vivek Sharma'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Vivek Sharma', '2016-10-08 10:25:56', '2016-10-08 10:25:56')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1636, 602, 0, '2016-10-08 10:25:56', '2016-10-08 10:25:56')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.2ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Sule Yildirim-Yayilgan'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Sule Yildirim-Yayilgan', '2016-10-08 10:25:56', '2016-10-08 10:25:56')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1637, 602, 1, '2016-10-08 10:25:56', '2016-10-08 10:25:56')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (1.2ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Luc Van Gool'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Luc Van Gool', '2016-10-08 10:25:56', '2016-10-08 10:25:56')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1638, 602, 2, '2016-10-08 10:25:56', '2016-10-08 10:25:56')
  [1m[36m (0.3ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.8ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'CITlab ARGUS for historical handwritten documents'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('CITlab ARGUS for historical handwritten documents', 'We describe CITlab\'s recognition system for the HTRtS competition attached to the 13. International Conference on Document Analysis and Recognition, ICDAR 2015. The task comprises the recognition of historical handwritten documents. The core algorithms of our system are based on multi-dimensional recurrent neural networks (MDRNN) and connectionist temporal classification (CTC). The software modules behind that as well as the basic utility technologies are essentially powered by PLANET\'s ARGUS framework for intelligent text recognition and image processing.', 'cs.CV', '2016-05-26T19:19:43Z', 'http://arxiv.org/abs/1605.08412v1', '2016-10-08 10:25:56', '2016-10-08 10:25:56')
  [1m[36m (3.0ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (1.2ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 603
  [1m[36mAuthor Load (1.2ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Gundram Leifert'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Gundram Leifert', '2016-10-08 10:25:56', '2016-10-08 10:25:56')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.3ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1639, 603, 0, '2016-10-08 10:25:56', '2016-10-08 10:25:56')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.0ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Tobias Strauß'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Tobias Strauß', '2016-10-08 10:25:56', '2016-10-08 10:25:56')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1640, 603, 1, '2016-10-08 10:25:56', '2016-10-08 10:25:56')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (1.0ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Tobias Grüning'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Tobias Grüning', '2016-10-08 10:25:56', '2016-10-08 10:25:56')[0m
  [1m[35m (0.7ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1641, 603, 2, '2016-10-08 10:25:56', '2016-10-08 10:25:56')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.3ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Roger Labahn'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Roger Labahn', '2016-10-08 10:25:56', '2016-10-08 10:25:56')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1642, 603, 3, '2016-10-08 10:25:56', '2016-10-08 10:25:56')[0m
  [1m[35m (0.3ms)[0m  COMMIT
  [1m[36mPaper Load (0.8ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Kronecker Determinantal Point Processes'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Kronecker Determinantal Point Processes', 'Determinantal Point Processes (DPPs) are probabilistic models over all subsets a ground set of $N$ items. They have recently gained prominence in several applications that rely on \"diverse\" subsets. However, their applicability to large problems is still limited due to the $\\mathcal O(N^3)$ complexity of core tasks such as sampling and learning. We enable efficient sampling and learning for DPPs by introducing KronDPP, a DPP model whose kernel matrix decomposes as a tensor product of multiple smaller kernel matrices. This decomposition immediately enables fast exact sampling. But contrary to what one may expect, leveraging the Kronecker product structure for speeding up DPP learning turns out to be more difficult. We overcome this challenge, and derive batch and stochastic optimization algorithms for efficiently learning the parameters of a KronDPP.', 'cs.LG', '2016-05-26T17:33:31Z', 'http://arxiv.org/abs/1605.08374v1', '2016-10-08 10:25:56', '2016-10-08 10:25:56')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPublish Load (1.3ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 604[0m
  [1m[35mAuthor Load (1.0ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Zelda Mariet'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Zelda Mariet', '2016-10-08 10:25:56', '2016-10-08 10:25:56')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1643, 604, 0, '2016-10-08 10:25:56', '2016-10-08 10:25:56')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.9ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Suvrit Sra'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Suvrit Sra', '2016-10-08 10:25:56', '2016-10-08 10:25:56')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1644, 604, 1, '2016-10-08 10:25:56', '2016-10-08 10:25:56')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.7ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Probabilistic Inference Modulo Theories'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Probabilistic Inference Modulo Theories', 'We present SGDPLL(T), an algorithm that solves (among many other problems) probabilistic inference modulo theories, that is, inference problems over probabilistic models defined via a logic theory provided as a parameter (currently, propositional, equalities on discrete sorts, and inequalities, more specifically difference arithmetic, on bounded integers). While many solutions to probabilistic inference over logic representations have been proposed, SGDPLL(T) is simultaneously (1) lifted, (2) exact and (3) modulo theories, that is, parameterized by a background logic theory. This offers a foundation for extending it to rich logic languages such as data structures and relational data. By lifted, we mean algorithms with constant complexity in the domain size (the number of values that variables can take). We also detail a solver for summations with difference arithmetic and show experimental results from a scenario in which SGDPLL(T) is much faster than a state-of-the-art probabilistic solver.', 'cs.AI', '2016-05-26T17:10:10Z', 'http://arxiv.org/abs/1605.08367v2', '2016-10-08 10:25:56', '2016-10-08 10:25:56')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (0.9ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 605
  [1m[36mAuthor Load (1.1ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Rodrigo de Salvo Braz'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Rodrigo de Salvo Braz', '2016-10-08 10:25:56', '2016-10-08 10:25:56')[0m
  [1m[35m (2.9ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1645, 605, 0, '2016-10-08 10:25:56', '2016-10-08 10:25:56')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.1ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Ciaran O\'Reilly'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Ciaran O\'Reilly', '2016-10-08 10:25:56', '2016-10-08 10:25:56')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1646, 605, 1, '2016-10-08 10:25:56', '2016-10-08 10:25:56')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (0.7ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Vibhav Gogate'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36m (0.1ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (987, 605, 2, '2016-10-08 10:25:56', '2016-10-08 10:25:56')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.4ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Rina Dechter'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36m (0.1ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (367, 605, 3, '2016-10-08 10:25:56', '2016-10-08 10:25:56')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (0.7ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'The Symbolic Interior Point Method'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('The Symbolic Interior Point Method', 'A recent trend in probabilistic inference emphasizes the codification of models in a formal syntax, with suitable high-level features such as individuals, relations, and connectives, enabling descriptive clarity, succinctness and circumventing the need for the modeler to engineer a custom solver. Unfortunately, bringing these linguistic and pragmatic benefits to numerical optimization has proven surprisingly challenging. In this paper, we turn to these challenges: we introduce a rich modeling language, for which an interior-point method computes approximate solutions in a generic way. While logical features easily complicates the underlying model, often yielding intricate dependencies, we exploit and cache local structure using algebraic decision diagrams (ADDs). Indeed, standard matrix-vector algebra is efficiently realizable in ADDs, but we argue and show that well-known optimization methods are not ideal for ADDs. Our engine, therefore, invokes a sophisticated matrix-free approach. We demonstrate the flexibility of the resulting symbolic-numeric optimizer on decision making and compressed sensing tasks with millions of non-zero entries.', 'cs.AI', '2016-05-26T08:26:34Z', 'http://arxiv.org/abs/1605.08187v3', '2016-10-08 10:25:56', '2016-10-08 10:25:56')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPublish Load (1.7ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 606[0m
  [1m[35mAuthor Load (0.8ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Martin Mladenov'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35m (0.1ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1264, 606, 0, '2016-10-08 10:25:56', '2016-10-08 10:25:56')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.2ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Vaishak Belle'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Vaishak Belle', '2016-10-08 10:25:56', '2016-10-08 10:25:56')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1647, 606, 1, '2016-10-08 10:25:56', '2016-10-08 10:25:56')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (0.8ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Kristian Kersting'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36m (0.1ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1266, 606, 2, '2016-10-08 10:25:56', '2016-10-08 10:25:56')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (1.0ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Cognitive Dynamic Systems: A Technical Review of Cognitive Radar'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Cognitive Dynamic Systems: A Technical Review of Cognitive Radar', 'We start with the history of cognitive radar, where origins of the PAC, Fuster research on cognition and principals of cognition are provided. Fuster describes five cognitive functions: perception, memory, attention, language, and intelligence. We describe the Perception-Action Cyclec as it applies to cognitive radar, and then discuss long-term memory, memory storage, memory retrieval and working memory. A comparison between memory in human cognition and cognitive radar is given as well. Attention is another function described by Fuster, and we have given the comparison of attention in human cognition and cognitive radar. We talk about the four functional blocks from the PAC: Bayesian filter, feedback information, dynamic programming and state-space model for the radar environment. Then, to show that the PAC improves the tracking accuracy of Cognitive Radar over Traditional Active Radar, we have provided simulation results. In the simulation, three nonlinear filters: Cubature Kalman Filter, Unscented Kalman Filter and Extended Kalman Filter are compared. Based on the results, radars implemented with CKF perform better than the radars implemented with UKF or radars implemented with EKF. Further, radar with EKF has the worst accuracy and has the biggest computation load because of derivation and evaluation of Jacobian matrices. We suggest using the concept of risk management to better control parameters and improve performance in cognitive radar. We believe, spectrum sensing can be seen as a potential interest to be used in cognitive radar and we propose a new approach Probabilistic ICA which will presumably reduce noise based on estimation error in cognitive radar. Parallel computing is a concept based on divide and conquers mechanism, and we suggest using the parallel computing approach in cognitive radar by doing complicated calculations or tasks to reduce processing time.', 'cs.AI', '2016-05-26T05:49:25Z', 'http://arxiv.org/abs/1605.08150v1', '2016-10-08 10:25:56', '2016-10-08 10:25:56')[0m
  [1m[35m (2.9ms)[0m  COMMIT
  [1m[36mPublish Load (1.3ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 607[0m
  [1m[35mAuthor Load (0.8ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Krishanth Krishnan'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Krishanth Krishnan', '2016-10-08 10:25:56', '2016-10-08 10:25:56')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1648, 607, 0, '2016-10-08 10:25:56', '2016-10-08 10:25:56')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.9ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Taralyn Schwering'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Taralyn Schwering', '2016-10-08 10:25:56', '2016-10-08 10:25:56')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1649, 607, 1, '2016-10-08 10:25:56', '2016-10-08 10:25:56')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.6ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Saman Sarraf'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35m (0.2ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (709, 607, 2, '2016-10-08 10:25:56', '2016-10-08 10:25:56')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (1.1ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Deep Predictive Coding Networks for Video Prediction and Unsupervised Learning'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.4ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Deep Predictive Coding Networks for Video Prediction and Unsupervised Learning', 'While great strides have been made in using deep learning algorithms to solve supervised learning tasks, the problem of unsupervised learning - leveraging unlabeled examples to learn about the structure of a domain - remains a difficult unsolved challenge. Here, we explore prediction of future frames in a video sequence as an unsupervised learning rule for learning about the structure of the visual world. We describe a predictive neural network (\"PredNet\") architecture that is inspired by the concept of \"predictive coding\" from the neuroscience literature. These networks learn to predict future frames in a video sequence, with each layer in the network making local predictions and only forwarding deviations from those predictions to subsequent network layers. We show that these networks are able to robustly learn to predict the movement of synthetic (rendered) objects, and that in doing so, the networks learn internal representations that are useful for decoding latent object parameters (e.g. pose) that support object recognition with fewer training views. We also show that these networks can scale to complex natural image streams (car-mounted camera videos), capturing key aspects of both egocentric movement and the movement of objects in the visual scene, and generalizing across video datasets. These results suggest that prediction represents a powerful framework for unsupervised learning, allowing for implicit learning of object and scene structure.', 'cs.LG', '2016-05-25T23:58:55Z', 'http://arxiv.org/abs/1605.08104v4', '2016-10-08 10:25:56', '2016-10-08 10:25:56')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (1.0ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 608
  [1m[36mAuthor Load (1.1ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'William Lotter'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('William Lotter', '2016-10-08 10:25:56', '2016-10-08 10:25:56')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1650, 608, 0, '2016-10-08 10:25:56', '2016-10-08 10:25:56')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.5ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Gabriel Kreiman'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Gabriel Kreiman', '2016-10-08 10:25:56', '2016-10-08 10:25:56')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1651, 608, 1, '2016-10-08 10:25:56', '2016-10-08 10:25:56')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (0.5ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'David Cox'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36m (0.3ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (474, 608, 2, '2016-10-08 10:25:56', '2016-10-08 10:25:56')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (0.8ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'A PAC RL Algorithm for Episodic POMDPs'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('A PAC RL Algorithm for Episodic POMDPs', 'Many interesting real world domains involve reinforcement learning (RL) in partially observable environments. Efficient learning in such domains is important, but existing sample complexity bounds for partially observable RL are at least exponential in the episode length. We give, to our knowledge, the first partially observable RL algorithm with a polynomial bound on the number of episodes on which the algorithm may not achieve near-optimal performance. Our algorithm is suitable for an important class of episodic POMDPs. Our approach builds on recent advances in method of moments for latent variable model estimation.', 'cs.LG', '2016-05-25T20:15:38Z', 'http://arxiv.org/abs/1605.08062v2', '2016-10-08 10:25:56', '2016-10-08 10:25:56')[0m
  [1m[35m (3.0ms)[0m  COMMIT
  [1m[36mPublish Load (1.6ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 609[0m
  [1m[35mAuthor Load (1.3ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Zhaohan Daniel Guo'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Zhaohan Daniel Guo', '2016-10-08 10:25:56', '2016-10-08 10:25:56')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1652, 609, 0, '2016-10-08 10:25:56', '2016-10-08 10:25:56')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (1.2ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Shayan Doroudi'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Shayan Doroudi', '2016-10-08 10:25:56', '2016-10-08 10:25:56')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1653, 609, 1, '2016-10-08 10:25:56', '2016-10-08 10:25:56')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.9ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Emma Brunskill'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Emma Brunskill', '2016-10-08 10:25:56', '2016-10-08 10:25:56')
  [1m[36m (1.7ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1654, 609, 2, '2016-10-08 10:25:56', '2016-10-08 10:25:56')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (1.0ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Toward a general, scaleable framework for Bayesian teaching with applications to topic models'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.4ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Toward a general, scaleable framework for Bayesian teaching with applications to topic models', 'Machines, not humans, are the world\'s dominant knowledge accumulators but humans remain the dominant decision makers. Interpreting and disseminating the knowledge accumulated by machines requires expertise, time, and is prone to failure. The problem of how best to convey accumulated knowledge from computers to humans is a critical bottleneck in the broader application of machine learning. We propose an approach based on human teaching where the problem is formalized as selecting a small subset of the data that will, with high probability, lead the human user to the correct inference. This approach, though successful for modeling human learning in simple laboratory experiments, has failed to achieve broader relevance due to challenges in formulating general and scalable algorithms. We propose general-purpose teaching via pseudo-marginal sampling and demonstrate the algorithm by teaching topic models. Simulation results show our sampling-based approach: effectively approximates the probability where ground-truth is possible via enumeration, results in data that are markedly different from those expected by random sampling, and speeds learning especially for small amounts of data. Application to movie synopsis data illustrates differences between teaching and random sampling for teaching distributions and specific topics, and demonstrates gains in scalability and applicability to real-world problems.', 'cs.LG', '2016-05-25T18:33:10Z', 'http://arxiv.org/abs/1605.07999v1', '2016-10-08 10:25:56', '2016-10-08 10:25:56')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPublish Load (1.2ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 610[0m
  [1m[35mAuthor Load (1.0ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Baxter S. Eaves Jr'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Baxter S. Eaves Jr', '2016-10-08 10:25:56', '2016-10-08 10:25:56')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1655, 610, 0, '2016-10-08 10:25:56', '2016-10-08 10:25:56')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (1.1ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Patrick Shafto'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Patrick Shafto', '2016-10-08 10:25:56', '2016-10-08 10:25:56')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1656, 610, 1, '2016-10-08 10:25:56', '2016-10-08 10:25:56')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.7ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Compliant Conditions for Polynomial Time Approximation of Operator Counts'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Compliant Conditions for Polynomial Time Approximation of Operator Counts', 'In this paper, we develop a computationally simpler version of the operator count heuristic for a particular class of domains. The contribution of this abstract is threefold, we (1) propose an efficient closed form approximation to the operator count heuristic using the Lagrangian dual; (2) leverage compressed sensing techniques to obtain an integer approximation for operator counts in polynomial time; and (3) discuss the relationship of the proposed formulation to existing heuristics and investigate properties of domains where such approaches appear to be useful.', 'cs.AI', '2016-05-25T18:10:48Z', 'http://arxiv.org/abs/1605.07989v2', '2016-10-08 10:25:56', '2016-10-08 10:25:56')
  [1m[36m (3.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (1.5ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 611
  [1m[36mAuthor Load (1.3ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Tathagata Chakraborti'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.3ms)[0m  BEGIN
  [1m[36m (0.2ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1076, 611, 0, '2016-10-08 10:25:56', '2016-10-08 10:25:56')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (1.3ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Sarath Sreedharan'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Sarath Sreedharan', '2016-10-08 10:25:56', '2016-10-08 10:25:56')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1657, 611, 1, '2016-10-08 10:25:56', '2016-10-08 10:25:56')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.2ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Sailik Sengupta'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Sailik Sengupta', '2016-10-08 10:25:56', '2016-10-08 10:25:56')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1658, 611, 2, '2016-10-08 10:25:56', '2016-10-08 10:25:56')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (1.1ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'T. K. Satish Kumar'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('T. K. Satish Kumar', '2016-10-08 10:25:56', '2016-10-08 10:25:56')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1659, 611, 3, '2016-10-08 10:25:56', '2016-10-08 10:25:56')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.7ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Subbarao Kambhampati'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35m (0.1ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1078, 611, 4, '2016-10-08 10:25:56', '2016-10-08 10:25:56')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (1.0ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Adaptive Neural Compilation'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Adaptive Neural Compilation', 'This paper proposes an adaptive neural-compilation framework to address the problem of efficient program learning. Traditional code optimisation strategies used in compilers are based on applying pre-specified set of transformations that make the code faster to execute without changing its semantics. In contrast, our work involves adapting programs to make them more efficient while considering correctness only on a target input distribution. Our approach is inspired by the recent works on differentiable representations of programs. We show that it is possible to compile programs written in a low-level language to a differentiable representation. We also show how programs in this representation can be optimised to make them efficient on a target distribution of inputs. Experimental results demonstrate that our approach enables learning specifically-tuned algorithms for given data distributions with a high success rate.', 'cs.AI', '2016-05-25T17:17:21Z', 'http://arxiv.org/abs/1605.07969v2', '2016-10-08 10:25:56', '2016-10-08 10:25:56')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (1.0ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 612
  [1m[36mAuthor Load (0.9ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Rudy Bunel'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Rudy Bunel', '2016-10-08 10:25:56', '2016-10-08 10:25:56')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1660, 612, 0, '2016-10-08 10:25:56', '2016-10-08 10:25:56')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.1ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Alban Desmaison'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.4ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Alban Desmaison', '2016-10-08 10:25:56', '2016-10-08 10:25:56')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1661, 612, 1, '2016-10-08 10:25:56', '2016-10-08 10:25:56')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (0.7ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Pushmeet Kohli'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36m (0.2ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (402, 612, 2, '2016-10-08 10:25:56', '2016-10-08 10:25:56')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (1.0ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Philip H. S. Torr'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Philip H. S. Torr', '2016-10-08 10:25:56', '2016-10-08 10:25:56')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1662, 612, 3, '2016-10-08 10:25:56', '2016-10-08 10:25:56')
  [1m[36m (0.3ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.9ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'M. Pawan Kumar'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35m (0.1ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1415, 612, 4, '2016-10-08 10:25:56', '2016-10-08 10:25:56')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (1.4ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Automatic Open Knowledge Acquisition via Long Short-Term Memory Networks with Feedback Negative Sampling'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Automatic Open Knowledge Acquisition via Long Short-Term Memory Networks with Feedback Negative Sampling', 'Previous studies in Open Information Extraction (Open IE) are mainly based on extraction patterns. They manually define patterns or automatically learn them from a large corpus. However, these approaches are limited when grasping the context of a sentence, and they fail to capture implicit relations. In this paper, we address this problem with the following methods. First, we exploit long short-term memory (LSTM) networks to extract higher-level features along the shortest dependency paths, connecting headwords of relations and arguments. The path-level features from LSTM networks provide useful clues regarding contextual information and the validity of arguments. Second, we constructed samples to train LSTM networks without the need for manual labeling. In particular, feedback negative sampling picks highly negative samples among non-positive samples through a model trained with positive samples. The experimental results show that our approach produces more precise and abundant extractions than state-of-the-art open IE systems. To the best of our knowledge, this is the first work to apply deep learning to Open IE.', 'cs.CL', '2016-05-25T14:59:46Z', 'http://arxiv.org/abs/1605.07918v1', '2016-10-08 10:25:56', '2016-10-08 10:25:56')
  [1m[36m (3.0ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (1.6ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 613
  [1m[36mAuthor Load (1.1ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Byungsoo Kim'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Byungsoo Kim', '2016-10-08 10:25:56', '2016-10-08 10:25:56')[0m
  [1m[35m (0.6ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1663, 613, 0, '2016-10-08 10:25:56', '2016-10-08 10:25:56')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.1ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Hwanjo Yu'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Hwanjo Yu', '2016-10-08 10:25:56', '2016-10-08 10:25:56')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1664, 613, 1, '2016-10-08 10:25:56', '2016-10-08 10:25:56')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (1.1ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Gary Geunbae Lee'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Gary Geunbae Lee', '2016-10-08 10:25:56', '2016-10-08 10:25:56')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1665, 613, 2, '2016-10-08 10:25:56', '2016-10-08 10:25:56')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (1.0ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Automatic Extraction of Causal Relations from Natural Language Texts: A Comprehensive Survey'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Automatic Extraction of Causal Relations from Natural Language Texts: A Comprehensive Survey', 'Automatic extraction of cause-effect relationships from natural language texts is a challenging open problem in Artificial Intelligence. Most of the early attempts at its solution used manually constructed linguistic and syntactic rules on small and domain-specific data sets. However, with the advent of big data, the availability of affordable computing power and the recent popularization of machine learning, the paradigm to tackle this problem has slowly shifted. Machines are now expected to learn generic causal extraction rules from labelled data with minimal supervision, in a domain independent-manner. In this paper, we provide a comprehensive survey of causal relation extraction techniques from both paradigms, and analyse their relative strengths and weaknesses, with recommendations for future work.', 'cs.AI', '2016-05-25T14:23:21Z', 'http://arxiv.org/abs/1605.07895v1', '2016-10-08 10:25:56', '2016-10-08 10:25:56')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (1.1ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 614
  [1m[36mAuthor Load (0.8ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Nabiha Asghar'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Nabiha Asghar', '2016-10-08 10:25:56', '2016-10-08 10:25:56')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1666, 614, 0, '2016-10-08 10:25:56', '2016-10-08 10:25:56')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.7ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Dimension Projection among Languages based on Pseudo-relevant Documents for Query Translation'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Dimension Projection among Languages based on Pseudo-relevant Documents for Query Translation', 'Taking advantage of top-ranked documents in response to a query for improving quality of query translation has been shown to be an effective approach for cross-language information retrieval. In this paper, we propose a new method for query translation based on dimension projection of embedded vectors from the pseudo-relevant documents in the source language to their equivalents in the target language. To this end, first we learn low-dimensional representations of the words in the pseudo-relevant collections separately and then aim at finding a query-dependent transformation matrix between the vectors of translation pairs. At the next step, representation of each query term is projected to the target language and then, after using a softmax function, a query-dependent translation model is built. Finally, the model is used for query translation. Our experiments on four CLEF collections in French, Spanish, German, and Persian demonstrate that the proposed method outperforms all competitive baselines in language modelling, particularly when it is combined with a collection-dependent translation model.', 'cs.IR', '2016-05-25T12:04:43Z', 'http://arxiv.org/abs/1605.07844v1', '2016-10-08 10:25:56', '2016-10-08 10:25:56')
  [1m[36m (4.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (1.3ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 615
  [1m[36mAuthor Load (1.1ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Javid Dadashkarimi'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Javid Dadashkarimi', '2016-10-08 10:25:56', '2016-10-08 10:25:56')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1667, 615, 0, '2016-10-08 10:25:56', '2016-10-08 10:25:56')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.0ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Mahsa S. Shahshahani'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Mahsa S. Shahshahani', '2016-10-08 10:25:56', '2016-10-08 10:25:56')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1668, 615, 1, '2016-10-08 10:25:56', '2016-10-08 10:25:56')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (1.0ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Amirhossein Tebbifakhr'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Amirhossein Tebbifakhr', '2016-10-08 10:25:56', '2016-10-08 10:25:56')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1669, 615, 2, '2016-10-08 10:25:56', '2016-10-08 10:25:56')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.9ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Heshaam Faili'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Heshaam Faili', '2016-10-08 10:25:56', '2016-10-08 10:25:56')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1670, 615, 3, '2016-10-08 10:25:56', '2016-10-08 10:25:56')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (1.4ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Azadeh Shakery'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Azadeh Shakery', '2016-10-08 10:25:56', '2016-10-08 10:25:56')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1671, 615, 4, '2016-10-08 10:25:56', '2016-10-08 10:25:56')
  [1m[36m (0.3ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.8ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Learning Multiagent Communication with Backpropagation'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Learning Multiagent Communication with Backpropagation', 'Many tasks in AI require the collaboration of multiple agents. Typically, the communication protocol between agents is manually specified and not altered during training. In this paper we explore a simple neural model, called CommNN, that uses continuous communication for fully cooperative tasks. The model consists of multiple agents and the communication between them is learned alongside their policy. We apply this model to a diverse set of tasks, demonstrating the ability of the agents to learn to communicate amongst themselves, yielding improved performance over non-communicative agents and baselines. In some cases, it is possible to interpret the language devised by the agents, revealing simple but effective strategies for solving the task at hand.', 'cs.LG', '2016-05-25T05:33:21Z', 'http://arxiv.org/abs/1605.07736v1', '2016-10-08 10:25:56', '2016-10-08 10:25:56')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (0.9ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 616
  [1m[36mAuthor Load (1.2ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Sainbayar Sukhbaatar'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.5ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Sainbayar Sukhbaatar', '2016-10-08 10:25:56', '2016-10-08 10:25:56')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1672, 616, 0, '2016-10-08 10:25:56', '2016-10-08 10:25:56')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.0ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Arthur Szlam'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Arthur Szlam', '2016-10-08 10:25:56', '2016-10-08 10:25:56')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1673, 616, 1, '2016-10-08 10:25:56', '2016-10-08 10:25:56')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (1.1ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Rob Fergus'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Rob Fergus', '2016-10-08 10:25:56', '2016-10-08 10:25:56')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1674, 616, 2, '2016-10-08 10:25:56', '2016-10-08 10:25:56')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.8ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Small Representations of Big Kidney Exchange Graphs'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Small Representations of Big Kidney Exchange Graphs', 'Kidney exchanges are organized markets where patients swap willing but incompatible donors. In the last decade, kidney exchanges grew from small and regional to large and national---and soon, international. This growth results in more lives saved, but exacerbates the empirical hardness of the $\\mathcal{NP}$-complete problem of optimally matching patients to donors. State-of-the-art matching engines use integer programming techniques to clear fielded kidney exchanges, but these methods must be tailored to specific models and objective functions, and may fail to scale to larger exchanges. In this paper, we observe that if the kidney exchange compatibility graph can be encoded by a constant number of patient and donor attributes, the clearing problem is solvable in polynomial time. We give necessary and sufficient conditions for losslessly shrinking the representation of an arbitrary compatibility graph. Then, using real compatibility graphs from the UNOS nationwide kidney exchange, we show how many attributes are needed to encode real compatibility graphs. The experiments show that, indeed, small numbers of attributes suffice.', 'cs.AI', '2016-05-25T04:33:41Z', 'http://arxiv.org/abs/1605.07728v1', '2016-10-08 10:25:56', '2016-10-08 10:25:56')
  [1m[36m (3.0ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (1.1ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 617
  [1m[36mAuthor Load (1.2ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'John P. Dickerson'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36m (0.2ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.3ms)[0m  BEGIN
  [1m[36mSQL (0.4ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1488, 617, 0, '2016-10-08 10:25:56', '2016-10-08 10:25:56')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.9ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Aleksandr M. Kazachkov'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Aleksandr M. Kazachkov', '2016-10-08 10:25:56', '2016-10-08 10:25:56')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1675, 617, 1, '2016-10-08 10:25:56', '2016-10-08 10:25:56')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.2ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Ariel D. Procaccia'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Ariel D. Procaccia', '2016-10-08 10:25:56', '2016-10-08 10:25:56')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1676, 617, 2, '2016-10-08 10:25:56', '2016-10-08 10:25:56')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.4ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Tuomas Sandholm'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36m (0.2ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (76, 617, 3, '2016-10-08 10:25:56', '2016-10-08 10:25:56')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPaper Load (0.9ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Data Programming: Creating Large Training Sets, Quickly'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.4ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Data Programming: Creating Large Training Sets, Quickly', 'Large labeled training sets are the critical building blocks of supervised learning methods and are key enablers of deep learning techniques. For some applications, creating labeled training sets is the most time-consuming and expensive part of applying machine learning. We therefore propose a paradigm for the programmatic creation of training sets called data programming in which users provide a set of labeling functions, which are programs that heuristically label large subsets of data points, albeit noisily. By viewing these labeling functions as implicitly describing a generative model for this noise, we show that we can recover the parameters of this model to \"denoise\" the training set. Then, we show how to modify a discriminative loss function to make it noise-aware. We demonstrate our method over a range of discriminative models including logistic regression and LSTMs. We establish theoretically that we can recover the parameters of these generative models in a handful of settings. Experimentally, on the 2014 TAC-KBP relation extraction challenge, we show that data programming would have obtained a winning score, and also show that applying data programming to an LSTM model leads to a TAC-KBP score almost 6 F1 points over a supervised LSTM baseline (and into second place in the competition). Additionally, in initial user studies we observed that data programming may be an easier way to create machine learning models for non-experts.', 'stat.ML', '2016-05-25T04:14:59Z', 'http://arxiv.org/abs/1605.07723v1', '2016-10-08 10:25:56', '2016-10-08 10:25:56')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPublish Load (1.1ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 618[0m
  [1m[35mAuthor Load (1.1ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Alexander Ratner'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Alexander Ratner', '2016-10-08 10:25:56', '2016-10-08 10:25:56')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1677, 618, 0, '2016-10-08 10:25:56', '2016-10-08 10:25:56')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.8ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Christopher De Sa'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36m (0.2ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1344, 618, 1, '2016-10-08 10:25:57', '2016-10-08 10:25:57')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.9ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Sen Wu'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Sen Wu', '2016-10-08 10:25:57', '2016-10-08 10:25:57')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1678, 618, 2, '2016-10-08 10:25:57', '2016-10-08 10:25:57')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.1ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Daniel Selsam'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Daniel Selsam', '2016-10-08 10:25:57', '2016-10-08 10:25:57')
  [1m[36m (3.0ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1679, 618, 3, '2016-10-08 10:25:57', '2016-10-08 10:25:57')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (1.0ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Christopher Ré'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36m (0.2ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1346, 618, 4, '2016-10-08 10:25:57', '2016-10-08 10:25:57')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPaper Load (0.9ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Yum-me: Personalized Healthy Meal Recommender System'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Yum-me: Personalized Healthy Meal Recommender System', 'Many ubiquitous computing projects have addressed health and wellness behaviors such as healthy eating. Healthy meal recommendations have the potential to help individuals prevent or manage conditions such as diabetes and obesity. However, learning people\'s food preferences and making healthy recommendations that appeal to their palate is challenging. Existing approaches either only learn high-level preferences or require a prolonged learning period. We propose Yum-me, a personalized healthy meal recommender system designed to meet individuals\' health goals, dietary restrictions, and fine-grained food preferences. Marrying ideas from user preference learning and healthy eating promotion, Yum-me enables a simple and accurate food preference profiling procedure via an image-based online learning framework, and projects the learned profile into the domain of healthy food options to find ones that will appeal to the user. We present the design and implementation of Yum-me, and further discuss the most critical component of it: FoodDist, a state-of-the-art food image analysis model. We demonstrate FoodDist\'s superior performance through careful benchmarking, and discuss its applicability across a wide array of dietary applications. We validate the feasibility and effectiveness of Yum-me through a 60-person user study, in which Yum-me improves the recommendation acceptance rate by 42.63% over the traditional food preference survey.', 'cs.HC', '2016-05-25T04:13:49Z', 'http://arxiv.org/abs/1605.07722v1', '2016-10-08 10:25:57', '2016-10-08 10:25:57')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPublish Load (1.1ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 619[0m
  [1m[35mAuthor Load (1.0ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Longqi Yang'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Longqi Yang', '2016-10-08 10:25:57', '2016-10-08 10:25:57')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1680, 619, 0, '2016-10-08 10:25:57', '2016-10-08 10:25:57')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (1.1ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Cheng-Kang Hsieh'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Cheng-Kang Hsieh', '2016-10-08 10:25:57', '2016-10-08 10:25:57')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1681, 619, 1, '2016-10-08 10:25:57', '2016-10-08 10:25:57')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.8ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Hongjian Yang'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Hongjian Yang', '2016-10-08 10:25:57', '2016-10-08 10:25:57')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1682, 619, 2, '2016-10-08 10:25:57', '2016-10-08 10:25:57')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.9ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Nicola Dell'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Nicola Dell', '2016-10-08 10:25:57', '2016-10-08 10:25:57')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1683, 619, 3, '2016-10-08 10:25:57', '2016-10-08 10:25:57')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.1ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Serge Belongie'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Serge Belongie', '2016-10-08 10:25:57', '2016-10-08 10:25:57')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1684, 619, 4, '2016-10-08 10:25:57', '2016-10-08 10:25:57')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (1.2ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Deborah Estrin'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Deborah Estrin', '2016-10-08 10:25:57', '2016-10-08 10:25:57')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1685, 619, 5, '2016-10-08 10:25:57', '2016-10-08 10:25:57')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.8ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Learning Purposeful Behaviour in the Absence of Rewards'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Learning Purposeful Behaviour in the Absence of Rewards', 'Artificial intelligence is commonly defined as the ability to achieve goals in the world. In the reinforcement learning framework, goals are encoded as reward functions that guide agent behaviour, and the sum of observed rewards provide a notion of progress. However, some domains have no such reward signal, or have a reward signal so sparse as to appear absent. Without reward feedback, agent behaviour is typically random, often dithering aimlessly and lacking intentionality. In this paper we present an algorithm capable of learning purposeful behaviour in the absence of rewards. The algorithm proceeds by constructing temporally extended actions (options), through the identification of purposes that are \"just out of reach\" of the agent\'s current behaviour. These purposes establish intrinsic goals for the agent to learn, ultimately resulting in a suite of behaviours that encourage the agent to visit different parts of the state space. Moreover, the approach is particularly suited for settings where rewards are very sparse, and such behaviours can help in the exploration of the environment until reward is observed.', 'cs.LG', '2016-05-25T01:33:34Z', 'http://arxiv.org/abs/1605.07700v1', '2016-10-08 10:25:57', '2016-10-08 10:25:57')
  [1m[36m (3.0ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (1.5ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 620
  [1m[36mAuthor Load (0.8ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Marlos C. Machado'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36m (0.1ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1214, 620, 0, '2016-10-08 10:25:57', '2016-10-08 10:25:57')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (1.5ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Michael Bowling'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Michael Bowling', '2016-10-08 10:25:57', '2016-10-08 10:25:57')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1686, 620, 1, '2016-10-08 10:25:57', '2016-10-08 10:25:57')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.7ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Posterior Dispersion Indices'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Posterior Dispersion Indices', 'Probabilistic modeling is cyclical: we specify a model, infer its posterior, and evaluate its performance. Evaluation drives the cycle, as we revise our model based on how it performs. This requires a metric. Traditionally, predictive accuracy prevails. Yet, predictive accuracy does not tell the whole story. We propose to evaluate a model through posterior dispersion. The idea is to analyze how each datapoint fares in relation to posterior uncertainty around the hidden structure. We propose a family of posterior dispersion indices (PDI) that capture this idea. A PDI identifies rich patterns of model mismatch in three real data examples: voting preferences, supermarket shopping, and population genetics.', 'stat.ML', '2016-05-24T19:58:02Z', 'http://arxiv.org/abs/1605.07604v1', '2016-10-08 10:25:57', '2016-10-08 10:25:57')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (1.4ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 621
  [1m[36mAuthor Load (0.9ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Alp Kucukelbir'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36m (0.1ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1314, 621, 0, '2016-10-08 10:25:57', '2016-10-08 10:25:57')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (1.0ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'David M. Blei'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36m (0.1ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1315, 621, 1, '2016-10-08 10:25:57', '2016-10-08 10:25:57')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (0.8ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Towards Bin Packing (preliminary problem survey, models with multiset estimates)'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Towards Bin Packing (preliminary problem survey, models with multiset estimates)', 'The paper described a generalized integrated glance to bin packing problems including a brief literature survey and some new problem formulations for the cases of multiset estimates of items. A new systemic viewpoint to bin packing problems is suggested: (a) basic element sets (item set, bin set, item subset assigned to bin), (b) binary relation over the sets: relation over item set as compatibility, precedence, dominance; relation over items and bins (i.e., correspondence of items to bins). A special attention is targeted to the following versions of bin packing problems: (a) problem with multiset estimates of items, (b) problem with colored items (and some close problems). Applied examples of bin packing problems are considered: (i) planning in paper industry (framework of combinatorial problems), (ii) selection of information messages, (iii) packing of messages/information packages in WiMAX communication system (brief description).', 'cs.AI', '2016-05-24T18:28:54Z', 'http://arxiv.org/abs/1605.07574v1', '2016-10-08 10:25:57', '2016-10-08 10:25:57')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPublish Load (1.2ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 622[0m
  [1m[35mAuthor Load (0.9ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Mark Sh. Levin'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Mark Sh. Levin', '2016-10-08 10:25:57', '2016-10-08 10:25:57')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1687, 622, 0, '2016-10-08 10:25:57', '2016-10-08 10:25:57')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPaper Load (0.8ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'A note on privacy preserving iteratively reweighted least squares'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('A note on privacy preserving iteratively reweighted least squares', 'Iteratively reweighted least squares (IRLS) is a widely-used method in machine learning to estimate the parameters in the generalised linear models. In particular, IRLS for L1 minimisation under the linear model provides a closed-form solution in each step, which is a simple multiplication between the inverse of the weighted second moment matrix and the weighted first moment vector. When dealing with privacy sensitive data, however, developing a privacy preserving IRLS algorithm faces two challenges. First, due to the inversion of the second moment matrix, the usual sensitivity analysis in differential privacy incorporating a single datapoint perturbation gets complicated and often requires unrealistic assumptions. Second, due to its iterative nature, a significant cumulative privacy loss occurs. However, adding a high level of noise to compensate for the privacy loss hinders from getting accurate estimates. Here, we develop a practical algorithm that overcomes these challenges and outputs privatised and accurate IRLS solutions. In our method, we analyse the sensitivity of each moments separately and treat the matrix inversion and multiplication as a post-processing step, which simplifies the sensitivity analysis. Furthermore, we apply the {\\it{concentrated differential privacy}} formalism, a more relaxed version of differential privacy, which requires adding a significantly less amount of noise for the same level of privacy guarantee, compared to the conventional and advanced compositions of differentially private mechanisms.', 'cs.CR', '2016-05-24T15:50:26Z', 'http://arxiv.org/abs/1605.07511v1', '2016-10-08 10:25:57', '2016-10-08 10:25:57')[0m
  [1m[35m (2.9ms)[0m  COMMIT
  [1m[36mPublish Load (1.2ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 623[0m
  [1m[35mAuthor Load (1.0ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Mijung Park'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Mijung Park', '2016-10-08 10:25:57', '2016-10-08 10:25:57')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1688, 623, 0, '2016-10-08 10:25:57', '2016-10-08 10:25:57')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (1.3ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Max Welling'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Max Welling', '2016-10-08 10:25:57', '2016-10-08 10:25:57')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1689, 623, 1, '2016-10-08 10:25:57', '2016-10-08 10:25:57')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.8ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Alternating Optimisation and Quadrature for Robust Reinforcement Learning'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Alternating Optimisation and Quadrature for Robust Reinforcement Learning', 'Bayesian optimisation has been successfully applied to a variety of reinforcement learning problems. However, the traditional approach for learning optimal policies in simulators does not utilise the opportunity to improve learning by adjusting certain environment variables - state features that are randomly determined by the environment in a physical setting but are controllable in a simulator. This paper considers the problem of finding an optimal policy while taking into account the impact of environment variables. We present the alternating optimisation and quadrature algorithm which uses Bayesian optimisation and Bayesian quadrature to address such settings and is robust to the presence of significant rare events, which may not be observable under random sampling but have a considerable impact on determining the optimal policy. Our experimental results show that our approach learns better and faster than existing methods.', 'cs.LG', '2016-05-24T15:15:57Z', 'http://arxiv.org/abs/1605.07496v1', '2016-10-08 10:25:57', '2016-10-08 10:25:57')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (1.4ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 624
  [1m[36mAuthor Load (1.4ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Supratik Paul'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.9ms)[0m  BEGIN
  [1m[36mSQL (0.4ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Supratik Paul', '2016-10-08 10:25:57', '2016-10-08 10:25:57')[0m
  [1m[35m (6.1ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1690, 624, 0, '2016-10-08 10:25:57', '2016-10-08 10:25:57')
  [1m[36m (5.6ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.2ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Kamil Ciosek'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Kamil Ciosek', '2016-10-08 10:25:57', '2016-10-08 10:25:57')
  [1m[36m (11.3ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1691, 624, 1, '2016-10-08 10:25:57', '2016-10-08 10:25:57')[0m
  [1m[35m (0.3ms)[0m  COMMIT
  [1m[36mAuthor Load (1.1ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Michael A. Osborne'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Michael A. Osborne', '2016-10-08 10:25:57', '2016-10-08 10:25:57')[0m
  [1m[35m (0.7ms)[0m  COMMIT
  [1m[36m (0.3ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1692, 624, 2, '2016-10-08 10:25:57', '2016-10-08 10:25:57')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.0ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Shimon Whiteson'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Shimon Whiteson', '2016-10-08 10:25:57', '2016-10-08 10:25:57')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1693, 624, 3, '2016-10-08 10:25:57', '2016-10-08 10:25:57')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (1.0ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Non-Gaussian Random Generators in Bacteria Foraging Algorithm for Multiobjective Optimization'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.3ms)[0m  BEGIN
  [1m[36mSQL (0.9ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Non-Gaussian Random Generators in Bacteria Foraging Algorithm for Multiobjective Optimization', 'Random generators or stochastic engines are a key component in the structure of metaheuristic algorithms. This work investigates the effects of non-Gaussian stochastic engines on the performance of metaheuristics when solving a real-world optimization problem. In this work, the bacteria foraging algorithm (BFA) was employed in tandem with four random generators (stochastic engines). The stochastic engines operate using the Weibull distribution, Gamma distribution, Gaussian distribution and a chaotic mechanism. The two non-Gaussian distributions are the Weibull and Gamma distributions. In this work, the approaches developed were implemented on the real-world multi-objective resin bonded sand mould problem. The Pareto frontiers obtained were benchmarked using two metrics; the hyper volume indicator (HVI) and the proposed Average Explorative Rate (AER) metric. Detail discussions from various perspectives on the effects of non-Gaussian random generators in metaheuristics are provided.', 'cs.AI', '2016-05-24T10:27:17Z', 'http://dx.doi.org/10.4172/2169-0316.1000182', '2016-10-08 10:25:57', '2016-10-08 10:25:57')[0m
  [1m[35m (0.3ms)[0m  COMMIT
  [1m[36mPublish Load (1.5ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 625[0m
  [1m[35mAuthor Load (0.8ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Timothy Ganesan'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Timothy Ganesan', '2016-10-08 10:25:57', '2016-10-08 10:25:57')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1694, 625, 0, '2016-10-08 10:25:57', '2016-10-08 10:25:57')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (1.0ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Pandian Vasant'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Pandian Vasant', '2016-10-08 10:25:57', '2016-10-08 10:25:57')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1695, 625, 1, '2016-10-08 10:25:57', '2016-10-08 10:25:57')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.9ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Irraivan Elamvazuthi'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Irraivan Elamvazuthi', '2016-10-08 10:25:57', '2016-10-08 10:25:57')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1696, 625, 2, '2016-10-08 10:25:57', '2016-10-08 10:25:57')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (0.9ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Differences between Industrial Models of Autonomy and Systemic Models of Autonomy'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Differences between Industrial Models of Autonomy and Systemic Models of Autonomy', 'This paper discusses the idea of levels of autonomy of systems - be this technical or organic - and compares the insights with models employed by industries used to describe maturity and capability of their products.', 'cs.AI', '2016-05-24T08:49:36Z', 'http://arxiv.org/abs/1605.07335v3', '2016-10-08 10:25:57', '2016-10-08 10:25:57')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPublish Load (1.3ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 626[0m
  [1m[35mAuthor Load (0.7ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Aleksander Lodwich'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35m (0.1ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1030, 626, 0, '2016-10-08 10:25:57', '2016-10-08 10:25:57')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.7ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Near-optimal Bayesian Active Learning with Correlated and Noisy Tests'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Near-optimal Bayesian Active Learning with Correlated and Noisy Tests', 'We consider the Bayesian active learning and experimental design problem, where the goal is to learn the value of some unknown target variable through a sequence of informative, noisy tests. In contrast to prior work, we focus on the challenging, yet practically relevant setting where test outcomes can be conditionally dependent given the hidden target variable. Under such assumptions, common heuristics, such as greedily performing tests that maximize the reduction in uncertainty of the target, often perform poorly. In this paper, we propose ECED, a novel, computationally efficient active learning algorithm, and prove strong theoretical guarantees that hold with correlated, noisy tests. Rather than directly optimizing the prediction error, at each step, ECED picks the test that maximizes the gain in a surrogate objective, which takes into account the dependencies between tests. Our analysis relies on an information-theoretic auxiliary function to track the progress of ECED, and utilizes adaptive submodularity to attain the near-optimal bound. We demonstrate strong empirical performance of ECED on two problem instances, including a Bayesian experimental design task intended to distinguish among economic theories of how people make risky decisions, and an active preference learning task via pairwise comparisons.', 'cs.LG', '2016-05-24T08:25:27Z', 'http://arxiv.org/abs/1605.07334v2', '2016-10-08 10:25:57', '2016-10-08 10:25:57')
  [1m[36m (0.7ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (1.2ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 627
  [1m[36mAuthor Load (0.8ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Yuxin Chen'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Yuxin Chen', '2016-10-08 10:25:57', '2016-10-08 10:25:57')[0m
  [1m[35m (0.3ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1697, 627, 0, '2016-10-08 10:25:57', '2016-10-08 10:25:57')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.9ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'S. Hamed Hassani'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('S. Hamed Hassani', '2016-10-08 10:25:57', '2016-10-08 10:25:57')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1698, 627, 1, '2016-10-08 10:25:57', '2016-10-08 10:25:57')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.9ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Andreas Krause'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36m (0.2ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1247, 627, 2, '2016-10-08 10:25:57', '2016-10-08 10:25:57')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (0.8ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Diagnosing editorial strategies of Chilean media on Twitter using an automatic news classifier'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Diagnosing editorial strategies of Chilean media on Twitter using an automatic news classifier', 'In Chile, does not exist an independent entity that publishes quantitative or qualitative surveys to understand the traditional media environment and its adaptation on the Social Web. Nowadays, Chilean newsreaders are increasingly using social web platforms as their primary source of information, among which Twitter plays a central role. Historical media and pure players are developing different strategies to increase their audience and influence on this platform. In this article, we propose a methodology based on data mining techniques to provide a first level of analysis of the new Chilean media environment. We use a crawling technique to mine news streams of 37 different Chilean media actively presents on Twitter and propose several indicators to compare them. We analyze their volumes of production, their potential audience, and using NLP techniques, we explore the content of their production: their editorial line and their geographic coverage.', 'cs.AI', '2016-05-24T02:05:09Z', 'http://arxiv.org/abs/1605.07260v1', '2016-10-08 10:25:57', '2016-10-08 10:25:57')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPublish Load (1.0ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 628[0m
  [1m[35mAuthor Load (0.9ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Matthieu Vernier'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Matthieu Vernier', '2016-10-08 10:25:57', '2016-10-08 10:25:57')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1699, 628, 0, '2016-10-08 10:25:57', '2016-10-08 10:25:57')[0m
  [1m[35m (0.3ms)[0m  COMMIT
  [1m[36mAuthor Load (0.8ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Luis Carcamo'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Luis Carcamo', '2016-10-08 10:25:57', '2016-10-08 10:25:57')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1700, 628, 1, '2016-10-08 10:25:57', '2016-10-08 10:25:57')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.3ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Eliana Scheihing'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Eliana Scheihing', '2016-10-08 10:25:57', '2016-10-08 10:25:57')
  [1m[36m (0.3ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1701, 628, 2, '2016-10-08 10:25:57', '2016-10-08 10:25:57')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (0.9ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Adaptive ADMM with Spectral Penalty Parameter Selection'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Adaptive ADMM with Spectral Penalty Parameter Selection', 'The alternating direction method of multipliers (ADMM) is a versatile tool for solving a wide range of constrained optimization problems, with differentiable or non-differentiable objective functions. Unfortunately, its performance is highly sensitive to a penalty parameter, which makes ADMM often unreliable and hard to automate for a non-expert user. We tackle this weakness of ADMM by proposing a method to adaptively tune the penalty parameters to achieve fast convergence. The resulting adaptive ADMM (AADMM) algorithm, inspired by the successful Barzilai-Borwein spectral method for gradient descent, yields fast convergence and relative insensitivity to the initial stepsize and problem scaling.', 'cs.LG', '2016-05-24T00:48:28Z', 'http://arxiv.org/abs/1605.07246v3', '2016-10-08 10:25:57', '2016-10-08 10:25:57')[0m
  [1m[35m (0.8ms)[0m  COMMIT
  [1m[36mPublish Load (1.1ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 629[0m
  [1m[35mAuthor Load (0.9ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Zheng Xu'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Zheng Xu', '2016-10-08 10:25:57', '2016-10-08 10:25:57')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1702, 629, 0, '2016-10-08 10:25:57', '2016-10-08 10:25:57')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (1.2ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Mario A. T. Figueiredo'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Mario A. T. Figueiredo', '2016-10-08 10:25:57', '2016-10-08 10:25:57')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1703, 629, 1, '2016-10-08 10:25:57', '2016-10-08 10:25:57')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.0ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Tom Goldstein'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Tom Goldstein', '2016-10-08 10:25:57', '2016-10-08 10:25:57')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1704, 629, 2, '2016-10-08 10:25:57', '2016-10-08 10:25:57')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (0.7ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Unsupervised Learning for Physical Interaction through Video Prediction'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Unsupervised Learning for Physical Interaction through Video Prediction', 'A core challenge for an agent learning to interact with the world is to predict how its actions affect objects in its environment. Many existing methods for learning the dynamics of physical interactions require labeled object information. However, to scale real-world interaction learning to a variety of scenes and objects, acquiring labeled data becomes increasingly impractical. To learn about physical object motion without labels, we develop an action-conditioned video prediction model that explicitly models pixel motion, by predicting a distribution over pixel motion from previous frames. Because our model explicitly predicts motion, it is partially invariant to object appearance, enabling it to generalize to previously unseen objects. To explore video prediction for real-world interactive agents, we also introduce a dataset of 50,000 robot interactions involving pushing motions, including a test set with novel objects. In this dataset, accurate prediction of videos conditioned on the robot\'s future actions amounts to learning a \"visual imagination\" of different futures based on different courses of action. Our experiments show that our proposed method not only produces more accurate video predictions, but also more accurately predicts object motion, when compared to prior methods.', 'cs.LG', '2016-05-23T19:45:55Z', 'http://arxiv.org/abs/1605.07157v3', '2016-10-08 10:25:57', '2016-10-08 10:25:57')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPublish Load (1.0ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 630[0m
  [1m[35mAuthor Load (0.9ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Chelsea Finn'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Chelsea Finn', '2016-10-08 10:25:57', '2016-10-08 10:25:57')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1705, 630, 0, '2016-10-08 10:25:57', '2016-10-08 10:25:57')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (1.0ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Ian Goodfellow'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Ian Goodfellow', '2016-10-08 10:25:57', '2016-10-08 10:25:57')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1706, 630, 1, '2016-10-08 10:25:57', '2016-10-08 10:25:57')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.9ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Sergey Levine'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35m (0.2ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1126, 630, 2, '2016-10-08 10:25:57', '2016-10-08 10:25:57')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.8ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Genetic Architect: Discovering Genomic Structure with Learned Neural Architectures'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Genetic Architect: Discovering Genomic Structure with Learned Neural Architectures', 'Each human genome is a 3 billion base pair set of encoding instructions. Decoding the genome using deep learning fundamentally differs from most tasks, as we do not know the full structure of the data and therefore cannot design architectures to suit it. As such, architectures that fit the structure of genomics should be learned not prescribed. Here, we develop a novel search algorithm, applicable across domains, that discovers an optimal architecture which simultaneously learns general genomic patterns and identifies the most important sequence motifs in predicting functional genomic outcomes. The architectures we find using this algorithm succeed at using only RNA expression data to predict gene regulatory structure, learn human-interpretable visualizations of key sequence motifs, and surpass state-of-the-art results on benchmark genomics challenges.', 'cs.LG', '2016-05-23T19:43:08Z', 'http://arxiv.org/abs/1605.07156v1', '2016-10-08 10:25:57', '2016-10-08 10:25:57')
  [1m[36m (0.9ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (1.3ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 631
  [1m[36mAuthor Load (0.8ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Laura Deming'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Laura Deming', '2016-10-08 10:25:57', '2016-10-08 10:25:57')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1707, 631, 0, '2016-10-08 10:25:57', '2016-10-08 10:25:57')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.2ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Sasha Targ'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Sasha Targ', '2016-10-08 10:25:57', '2016-10-08 10:25:57')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1708, 631, 1, '2016-10-08 10:25:57', '2016-10-08 10:25:57')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (1.5ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Nate Sauder'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Nate Sauder', '2016-10-08 10:25:57', '2016-10-08 10:25:57')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1709, 631, 2, '2016-10-08 10:25:57', '2016-10-08 10:25:57')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.2ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Diogo Almeida'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Diogo Almeida', '2016-10-08 10:25:57', '2016-10-08 10:25:57')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1710, 631, 3, '2016-10-08 10:25:57', '2016-10-08 10:25:57')[0m
  [1m[35m (0.3ms)[0m  COMMIT
  [1m[36mAuthor Load (1.1ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Chun Jimmie Ye'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Chun Jimmie Ye', '2016-10-08 10:25:57', '2016-10-08 10:25:57')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1711, 631, 4, '2016-10-08 10:25:57', '2016-10-08 10:25:57')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.7ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Backprop KF: Learning Discriminative Deterministic State Estimators'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Backprop KF: Learning Discriminative Deterministic State Estimators', 'Generative state estimators based on probabilistic filters and smoothers are one of the most popular classes of state estimators for robots and autonomous vehicles. However, generative models have limited capacity to handle rich sensory observations, such as camera images, since they must model the entire distribution over sensor readings. Discriminative models do not suffer from this limitation, but are typically more complex to train as latent variable models for state estimation. We present an alternative approach where the parameters of the latent state distribution are directly optimized as a deterministic computation graph, resulting in a simple and effective gradient descent algorithm for training discriminative state estimators. We show that this procedure can be used to train state estimators that use complex input, such as raw camera images, which must be processed using expressive nonlinear function approximators such as convolutional neural networks. Our model can be viewed as a type of recurrent neural network, and the connection to probabilistic filtering allows us to design a network architecture that is particularly well suited for state estimation. We evaluate our approach on synthetic tracking task with raw image inputs and on the visual odometry task in the KITTI dataset. The results show significant improvement over both standard generative approaches and regular recurrent neural networks.', 'cs.LG', '2016-05-23T19:28:21Z', 'http://arxiv.org/abs/1605.07148v2', '2016-10-08 10:25:57', '2016-10-08 10:25:57')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (0.9ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 632
  [1m[36mAuthor Load (0.8ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Tuomas Haarnoja'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Tuomas Haarnoja', '2016-10-08 10:25:57', '2016-10-08 10:25:57')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1712, 632, 0, '2016-10-08 10:25:57', '2016-10-08 10:25:57')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.3ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Anurag Ajay'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Anurag Ajay', '2016-10-08 10:25:57', '2016-10-08 10:25:57')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1713, 632, 1, '2016-10-08 10:25:57', '2016-10-08 10:25:57')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.7ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Sergey Levine'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36m (0.1ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1126, 632, 2, '2016-10-08 10:25:57', '2016-10-08 10:25:57')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.7ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Pieter Abbeel'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36m (0.1ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1124, 632, 3, '2016-10-08 10:25:57', '2016-10-08 10:25:57')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (0.9ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Fast Bayesian Optimization of Machine Learning Hyperparameters on Large Datasets'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Fast Bayesian Optimization of Machine Learning Hyperparameters on Large Datasets', 'Bayesian optimization has become a successful tool for hyperparameter optimization of machine learning algorithms, such as support vector machines or deep neural networks. But it is still costly if each evaluation of the objective requires training and validating the algorithm being optimized, which, for large datasets, often takes hours, days, or even weeks. To accelerate hyperparameter optimization, we propose a generative model for the validation error as a function of training set size, which is learned during the optimization process and allows exploration of preliminary configurations on small subsets, by extrapolating to the full dataset. We construct a Bayesian optimization procedure, dubbed FABOLAS, which models loss and training time as a function of dataset size and automatically trades off high information gain about the global optimum against computational cost. Experiments optimizing support vector machines and deep neural networks show that FABOLAS often finds high-quality solutions 10 to 100 times faster than other state-of-the-art Bayesian optimization methods.', 'cs.LG', '2016-05-23T16:29:51Z', 'http://arxiv.org/abs/1605.07079v1', '2016-10-08 10:25:57', '2016-10-08 10:25:57')[0m
  [1m[35m (3.0ms)[0m  COMMIT
  [1m[36mPublish Load (1.6ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 633[0m
  [1m[35mAuthor Load (1.5ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Aaron Klein'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Aaron Klein', '2016-10-08 10:25:57', '2016-10-08 10:25:57')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1714, 633, 0, '2016-10-08 10:25:57', '2016-10-08 10:25:57')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (1.3ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Stefan Falkner'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Stefan Falkner', '2016-10-08 10:25:57', '2016-10-08 10:25:57')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1715, 633, 1, '2016-10-08 10:25:57', '2016-10-08 10:25:57')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.9ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Simon Bartels'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Simon Bartels', '2016-10-08 10:25:57', '2016-10-08 10:25:57')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1716, 633, 2, '2016-10-08 10:25:57', '2016-10-08 10:25:57')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (1.1ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Philipp Hennig'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Philipp Hennig', '2016-10-08 10:25:57', '2016-10-08 10:25:57')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1717, 633, 3, '2016-10-08 10:25:57', '2016-10-08 10:25:57')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.5ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Frank Hutter'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35m (0.2ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (161, 633, 4, '2016-10-08 10:25:57', '2016-10-08 10:25:57')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.7ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Spontaneous vs. Posed smiles - can we tell the difference?'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Spontaneous vs. Posed smiles - can we tell the difference?', 'Smile is an irrefutable expression that shows the physical state of the mind in both true and deceptive ways. Generally, it shows happy state of the mind, however, `smiles\' can be deceptive, for example people can give a smile when they feel happy and sometimes they might also give a smile (in a different way) when they feel pity for others. This work aims to distinguish spontaneous (felt) smile expressions from posed (deliberate) smiles by extracting and analyzing both global (macro) motion of the face and subtle (micro) changes in the facial expression features through both tracking a series of facial fiducial markers as well as using dense optical flow. Specifically the eyes and lips features are captured and used for analysis. It aims to automatically classify all smiles into either `spontaneous\' or `posed\' categories, by using support vector machines (SVM). Experimental results on large database show promising results as compared to other relevant methods.', 'cs.CV', '2016-05-23T14:21:30Z', 'http://arxiv.org/abs/1605.07026v1', '2016-10-08 10:25:57', '2016-10-08 10:25:57')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (1.0ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 634
  [1m[36mAuthor Load (0.8ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Bappaditya Mandal'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Bappaditya Mandal', '2016-10-08 10:25:57', '2016-10-08 10:25:57')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1718, 634, 0, '2016-10-08 10:25:57', '2016-10-08 10:25:57')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.1ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Nizar Ouarti'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Nizar Ouarti', '2016-10-08 10:25:57', '2016-10-08 10:25:57')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1719, 634, 1, '2016-10-08 10:25:57', '2016-10-08 10:25:57')[0m
  [1m[35m (5.4ms)[0m  COMMIT
  [1m[36mPaper Load (1.3ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Extracting Higher-Order Goals from the Mizar Mathematical Library'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Extracting Higher-Order Goals from the Mizar Mathematical Library', 'Certain constructs allowed in Mizar articles cannot be represented in first-order logic but can be represented in higher-order logic. We describe a way to obtain higher-order theorem proving problems from Mizar articles that make use of these constructs. In particular, higher-order logic is used to represent schemes, a global choice construct and set level binders. The higher-order automated theorem provers Satallax and LEO-II have been run on collections of these problems and the results are discussed.', 'cs.LO', '2016-05-23T12:37:54Z', 'http://arxiv.org/abs/1605.06996v1', '2016-10-08 10:25:57', '2016-10-08 10:25:57')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPublish Load (1.2ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 635[0m
  [1m[35mAuthor Load (1.1ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Chad Brown'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35m (0.3ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1601, 635, 0, '2016-10-08 10:25:57', '2016-10-08 10:25:57')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.9ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Josef Urban'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35m (0.1ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1271, 635, 1, '2016-10-08 10:25:57', '2016-10-08 10:25:57')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.9ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Practical Privacy For Expectation Maximization'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Practical Privacy For Expectation Maximization', 'Expectation maximization (EM) is an iterative algorithm that computes maximum likelihood and maximum a posteriori estimates for models with unobserved variables. While widely used, the iterative nature of EM presents challenges for privacy-preserving estimation. Multiple iterations are required to obtain accurate parameter estimates, yet each iteration increases the amount of noise that must be added to achieve a reasonable degree of privacy. We propose a practical algorithm that overcomes this challenge and outputs EM parameter estimates that are both accurate and private. Our algorithm focuses on the frequent use case of models whose joint distribution over observed and unobserved variables remains in the exponential family. For these models, the EM parameters are functions of moments of the data. Our algorithm leverages this to preserve privacy by perturbing the moments, for which the amount of additive noise scales naturally with the data. In addition, our algorithm uses a relaxed notion of the differential privacy (DP) gold standard, called concentrated differential privacy (CDP). Rather than focusing on single-query loss, CDP provides high probability bounds for cumulative privacy loss, which is well suited for iterative algorithms. For mixture models, we show that our method requires a significantly smaller privacy budget for the same estimation accuracy compared to both DP and its (epsilon, delta)-DP relaxation. Our general approach of moment perturbation equipped with CDP can be readily extended to many iterative machine learning algorithms, which opens up various exciting future directions.', 'cs.LG', '2016-05-23T12:36:55Z', 'http://arxiv.org/abs/1605.06995v1', '2016-10-08 10:25:57', '2016-10-08 10:25:57')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (1.3ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 636
  [1m[36mAuthor Load (0.8ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Mijung Park'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36m (0.1ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1688, 636, 0, '2016-10-08 10:25:57', '2016-10-08 10:25:57')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (1.1ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Jimmy Foulds'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Jimmy Foulds', '2016-10-08 10:25:57', '2016-10-08 10:25:57')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1720, 636, 1, '2016-10-08 10:25:57', '2016-10-08 10:25:57')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.0ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Kamalika Chaudhuri'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.7ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Kamalika Chaudhuri', '2016-10-08 10:25:57', '2016-10-08 10:25:57')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1721, 636, 2, '2016-10-08 10:25:57', '2016-10-08 10:25:57')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (1.1ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Max Welling'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36m (0.1ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1689, 636, 3, '2016-10-08 10:25:57', '2016-10-08 10:25:57')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (1.4ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Elastic Solver: Balancing Solution Time and Energy Consumption'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.4ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Elastic Solver: Balancing Solution Time and Energy Consumption', 'Combinatorial decision problems arise in many different domains such as scheduling, routing, packing, bioinformatics, and many more. Despite recent advances in developing scalable solvers, there are still many problems which are often very hard to solve. Typically the most advanced solvers include elements which are stochastic in nature. If a same instance is solved many times using different seeds then depending on the inherent characteristics of a problem instance and the solver, one can observe a highly-variant distribution of times spanning multiple orders of magnitude. Therefore, to solve a problem instance efficiently it is often useful to solve the same instance in parallel with different seeds. With the proliferation of cloud computing, it is natural to think about an elastic solver which can scale up by launching searches in parallel on thousands of machines (or cores). However, this could result in consuming a lot of energy. Moreover, not every instance would require thousands of machines. The challenge is to resolve the tradeoff between solution time and energy consumption optimally for a given problem instance. We analyse the impact of the number of machines (or cores) on not only solution time but also on energy consumption. We highlight that although solution time always drops as the number of machines increases, the relation between the number of machines and energy consumption is more complicated. In many cases, the optimal energy consumption may be achieved by a middle ground, we analyse this relationship in detail. The tradeoff between solution time and energy consumption is studied further, showing that the energy consumption of a solver can be reduced drastically if we increase the solution time marginally. We also develop a prediction model, demonstrating that such insights can be exploited to achieve faster solutions times in a more energy efficient manor.', 'cs.AI', '2016-05-23T08:54:27Z', 'http://arxiv.org/abs/1605.06940v1', '2016-10-08 10:25:57', '2016-10-08 10:25:57')[0m
  [1m[35m (4.1ms)[0m  COMMIT
  [1m[36mPublish Load (2.0ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 637[0m
  [1m[35mAuthor Load (1.3ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Barry Hurley'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.4ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Barry Hurley', '2016-10-08 10:25:57', '2016-10-08 10:25:57')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1722, 637, 0, '2016-10-08 10:25:57', '2016-10-08 10:25:57')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (1.0ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Deepak Mehta'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Deepak Mehta', '2016-10-08 10:25:57', '2016-10-08 10:25:57')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1723, 637, 1, '2016-10-08 10:25:57', '2016-10-08 10:25:57')
  [1m[36m (0.3ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.1ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Barry O\'Sullivan'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Barry O\'Sullivan', '2016-10-08 10:25:57', '2016-10-08 10:25:57')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1724, 637, 2, '2016-10-08 10:25:57', '2016-10-08 10:25:57')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (0.9ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Generative Choreography using Deep Learning'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Generative Choreography using Deep Learning', 'Recent advances in deep learning have enabled the extraction of high-level features from raw sensor data which has opened up new possibilities in many different fields, including computer generated choreography. In this paper we present a system chor-rnn for generating novel choreographic material in the nuanced choreographic language and style of an individual choreographer. It also shows promising results in producing a higher level compositional cohesion, rather than just generating sequences of movement. At the core of chor-rnn is a deep recurrent neural network trained on raw motion capture data and that can generate new dance sequences for a solo dancer. Chor-rnn can be used for collaborative human-machine choreography or as a creative catalyst, serving as inspiration for a choreographer.', 'cs.AI', '2016-05-23T07:36:49Z', 'http://arxiv.org/abs/1605.06921v1', '2016-10-08 10:25:57', '2016-10-08 10:25:57')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPublish Load (1.3ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 638[0m
  [1m[35mAuthor Load (1.2ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Luka Crnkovic-Friis'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Luka Crnkovic-Friis', '2016-10-08 10:25:57', '2016-10-08 10:25:57')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1725, 638, 0, '2016-10-08 10:25:57', '2016-10-08 10:25:57')[0m
  [1m[35m (4.8ms)[0m  COMMIT
  [1m[36mAuthor Load (1.5ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Louise Crnkovic-Friis'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Louise Crnkovic-Friis', '2016-10-08 10:25:57', '2016-10-08 10:25:57')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1726, 638, 1, '2016-10-08 10:25:57', '2016-10-08 10:25:57')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (1.2ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Stochastic Patching Process'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Stochastic Patching Process', 'Stochastic partition models tailor a product space into a number of rectangular regions such that the data within each region exhibit certain types of homogeneity. Due to constraints of partition strategy, existing models may cause unnecessary dissections in sparse regions when fitting data in dense regions. To alleviate this limitation, we propose a parsimonious partition model, named Stochastic Patching Process (SPP), to deal with multi-dimensional arrays. SPP adopts an \"enclosing\" strategy to attach rectangular patches to dense regions. SPP is self-consistent such that it can be extended to infinite arrays. We apply SPP to relational modeling and the experimental results validate its merit compared to the state-of-the-arts.', 'cs.AI', '2016-05-23T03:43:01Z', 'http://arxiv.org/abs/1605.06886v1', '2016-10-08 10:25:57', '2016-10-08 10:25:57')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (1.2ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 639
  [1m[36mAuthor Load (1.0ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Xuhui Fan'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Xuhui Fan', '2016-10-08 10:25:57', '2016-10-08 10:25:57')[0m
  [1m[35m (0.3ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1727, 639, 0, '2016-10-08 10:25:57', '2016-10-08 10:25:57')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.9ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Bin Li'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Bin Li', '2016-10-08 10:25:57', '2016-10-08 10:25:57')
  [1m[36m (1.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1728, 639, 1, '2016-10-08 10:25:57', '2016-10-08 10:25:57')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.9ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Yi Wang'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36m (0.2ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1032, 639, 2, '2016-10-08 10:25:57', '2016-10-08 10:25:57')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (1.0ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Yang Wang'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Yang Wang', '2016-10-08 10:25:57', '2016-10-08 10:25:57')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.3ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1729, 639, 3, '2016-10-08 10:25:57', '2016-10-08 10:25:57')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.1ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Fang Chen'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Fang Chen', '2016-10-08 10:25:57', '2016-10-08 10:25:57')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.4ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1730, 639, 4, '2016-10-08 10:25:57', '2016-10-08 10:25:57')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (0.9ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Causality on Longitudinal Data: Stable Specification Search in Constrained Structural Equation Modeling'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Causality on Longitudinal Data: Stable Specification Search in Constrained Structural Equation Modeling', 'Developing causal models from observational longitudinal studies is an important, ubiquitous problem in many disciplines. In the medical domain, especially in the case of rare diseases, revealing causal relationships from a given data set may lead to improvement of clinical practice, e.g., development of treatment and medication. Many causal discovery methods have been introduced in the past decades. A disadvantage of these causal discovery algorithms, however, is the inherent instability in structure estimation. With finite data samples small changes in the data can lead to completely different optimal structures. The present work presents a new causal discovery algorithm for longitudinal data that is robust for finite data samples. The method works as follows. We model causal models using structural equation models. Models are scored along two objectives: the model fit and the model complexity. Since both objectives are often conflicting we use a multi-objective evolutionary algorithm to search for Pareto optimal models. To handle the instability of small finite data samples, we repeatedly subsample the data and select those substructures (from optimal models) that are both stable and parsimonious which are then used to infer a causal model. In order to validate, we compare our method with the state-of-the-art PC algorithm on a simulated data set with the known ground truth model. Furthermore, we present the results of our discovery algorithm on three real-world longitudinal data sets about chronic fatigue syndrome, Alzheimer disease and chronic kidney disease that have been corroborated by medical experts and literature.', 'stat.ML', '2016-05-22T19:28:25Z', 'http://arxiv.org/abs/1605.06838v1', '2016-10-08 10:25:57', '2016-10-08 10:25:57')[0m
  [1m[35m (5.5ms)[0m  COMMIT
  [1m[36mPublish Load (1.6ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 640[0m
  [1m[35mAuthor Load (1.5ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Ridho Rahmadi'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Ridho Rahmadi', '2016-10-08 10:25:57', '2016-10-08 10:25:57')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1731, 640, 0, '2016-10-08 10:25:57', '2016-10-08 10:25:57')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (1.0ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Perry Groot'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Perry Groot', '2016-10-08 10:25:57', '2016-10-08 10:25:57')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1732, 640, 1, '2016-10-08 10:25:57', '2016-10-08 10:25:57')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.5ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Marieke MHC van Rijn'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Marieke MHC van Rijn', '2016-10-08 10:25:57', '2016-10-08 10:25:57')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1733, 640, 2, '2016-10-08 10:25:57', '2016-10-08 10:25:57')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (1.2ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Jan AJG van den Brand'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Jan AJG van den Brand', '2016-10-08 10:25:57', '2016-10-08 10:25:57')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1734, 640, 3, '2016-10-08 10:25:57', '2016-10-08 10:25:57')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.0ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Marianne Heins'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Marianne Heins', '2016-10-08 10:25:57', '2016-10-08 10:25:57')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1735, 640, 4, '2016-10-08 10:25:57', '2016-10-08 10:25:57')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (1.3ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Hans Knoop'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Hans Knoop', '2016-10-08 10:25:57', '2016-10-08 10:25:57')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1736, 640, 5, '2016-10-08 10:25:57', '2016-10-08 10:25:57')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.3ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Tom Heskes'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Tom Heskes', '2016-10-08 10:25:57', '2016-10-08 10:25:57')
  [1m[36m (0.6ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1737, 640, 6, '2016-10-08 10:25:57', '2016-10-08 10:25:57')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (1.1ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'the Alzheimer\'s Disease Neuroimaging Initiatives'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('the Alzheimer\'s Disease Neuroimaging Initiatives', '2016-10-08 10:25:57', '2016-10-08 10:25:57')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.4ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1738, 640, 7, '2016-10-08 10:25:57', '2016-10-08 10:25:57')
  [1m[36m (0.8ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.1ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'the MASTERPLAN Study Group'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('the MASTERPLAN Study Group', '2016-10-08 10:25:57', '2016-10-08 10:25:57')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1739, 640, 8, '2016-10-08 10:25:57', '2016-10-08 10:25:57')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (1.0ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'the OPTIMISTIC Consortium'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('the OPTIMISTIC Consortium', '2016-10-08 10:25:57', '2016-10-08 10:25:57')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1740, 640, 9, '2016-10-08 10:25:57', '2016-10-08 10:25:57')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.9ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Learning to Communicate with Deep Multi-Agent Reinforcement Learning'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Learning to Communicate with Deep Multi-Agent Reinforcement Learning', 'We consider the problem of multiple agents sensing and acting in environments with the goal of maximising their shared utility. In these environments, agents must learn communication protocols in order to share information that is needed to solve the tasks. By embracing deep neural networks, we are able to demonstrate end-to-end learning of protocols in complex environments inspired by communication riddles and multi-agent computer vision problems with partial observability. We propose two approaches for learning in these domains: Reinforced Inter-Agent Learning (RIAL) and Differentiable Inter-Agent Learning (DIAL). The former uses deep Q-learning, while the latter exploits the fact that, during learning, agents can backpropagate error derivatives through (noisy) communication channels. Hence, this approach uses centralised learning but decentralised execution. Our experiments introduce new environments for studying the learning of communication protocols and present a set of engineering innovations that are essential for success in these domains.', 'cs.AI', '2016-05-21T17:20:04Z', 'http://arxiv.org/abs/1605.06676v2', '2016-10-08 10:25:57', '2016-10-08 10:25:57')
  [1m[36m (2.9ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (1.6ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 641
  [1m[36mAuthor Load (1.1ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Jakob N. Foerster'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Jakob N. Foerster', '2016-10-08 10:25:57', '2016-10-08 10:25:57')[0m
  [1m[35m (0.6ms)[0m  COMMIT
  [1m[36m (0.3ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1741, 641, 0, '2016-10-08 10:25:57', '2016-10-08 10:25:57')
  [1m[36m (0.3ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.9ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Yannis M. Assael'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Yannis M. Assael', '2016-10-08 10:25:57', '2016-10-08 10:25:57')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1742, 641, 1, '2016-10-08 10:25:57', '2016-10-08 10:25:57')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (1.0ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Nando de Freitas'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Nando de Freitas', '2016-10-08 10:25:57', '2016-10-08 10:25:57')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1743, 641, 2, '2016-10-08 10:25:57', '2016-10-08 10:25:57')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.1ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Shimon Whiteson'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35m (0.2ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1693, 641, 3, '2016-10-08 10:25:57', '2016-10-08 10:25:57')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.8ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Programming with a Differentiable Forth Interpreter'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Programming with a Differentiable Forth Interpreter', 'There are families of neural networks that can learn to compute any function, provided sufficient training data. However, given that in practice training data is scarce for all but a small set of problems, a core question is how to incorporate prior knowledge into a model. Here we consider the case of prior procedural knowledge such as knowing the overall recursive structure of a sequence transduction program or the fact that a program will likely use arithmetic operations on real numbers to solve a task. To this end we present a differentiable interpreter for the programming language Forth. Through a neural implementation of the dual stack machine that underlies Forth, programmers can write program sketches with slots that can be filled with learnable behaviour. As the program interpreter is end-to-end differentiable, we can optimize this behaviour directly through gradient descent techniques on user specified objectives, and also integrate the program into any larger neural computation graph. We show empirically that our interpreter is able to effectively leverage different levels of prior program structure and learn complex transduction tasks such as sequence sorting or addition with substantially less data and better generalisation over problem sizes. In addition, we introduce neural program optimisations based on symbolic computation and parallel branching that lead to significant speed improvements.', 'cs.NE', '2016-05-21T13:24:14Z', 'http://arxiv.org/abs/1605.06640v1', '2016-10-08 10:25:57', '2016-10-08 10:25:57')
  [1m[36m (1.6ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (1.3ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 642
  [1m[36mAuthor Load (1.0ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Sebastian Riedel'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36m (0.1ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1056, 642, 0, '2016-10-08 10:25:57', '2016-10-08 10:25:57')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (1.3ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Matko Bošnjak'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Matko Bošnjak', '2016-10-08 10:25:57', '2016-10-08 10:25:57')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1744, 642, 1, '2016-10-08 10:25:57', '2016-10-08 10:25:57')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.7ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Tim Rocktäschel'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35m (0.1ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1055, 642, 2, '2016-10-08 10:25:57', '2016-10-08 10:25:57')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.9ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Optimal Number of Choices in Rating Contexts'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Optimal Number of Choices in Rating Contexts', 'In many settings people must give numerical scores to entities from a small discrete set. For instance, rating physical attractiveness from 1-5 on dating sites, or papers from 1-10 for conference reviewing. We study the problem of understanding when using a different number of options is optimal. For concreteness we assume the true underlying scores are integers from 1-100. We consider the case when scores are uniform random and Gaussian. We study when using 2, 3, 4, 5, and 10 options is optimal in these models. One may expect that using more options would always improve performance in this model, but we show that this is not necessarily the case, and that using fewer choices -- even just two -- can surprisingly be optimal in certain situations. While in theory for this setting it would be optimal to use all 100 options, in practice this is prohibitive, and it is preferable to utilize a smaller number of options due to humans\' limited computational resources. Our results suggest that using a smaller number of options than is typical could be optimal in certain situations. This would have many potential applications, as settings requiring entities to be ranked by humans are ubiquitous.', 'cs.AI', '2016-05-21T05:09:11Z', 'http://arxiv.org/abs/1605.06588v2', '2016-10-08 10:25:57', '2016-10-08 10:25:57')
  [1m[36m (3.0ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (1.6ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 643
  [1m[36mAuthor Load (1.5ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Sam Ganzfried'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Sam Ganzfried', '2016-10-08 10:25:57', '2016-10-08 10:25:57')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1745, 643, 0, '2016-10-08 10:25:57', '2016-10-08 10:25:57')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (1.0ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'TensorLog: A Differentiable Deductive Database'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('TensorLog: A Differentiable Deductive Database', 'Large knowledge bases (KBs) are useful in many tasks, but it is unclear how to integrate this sort of knowledge into \"deep\" gradient-based learning systems. To address this problem, we describe a probabilistic deductive database, called TensorLog, in which reasoning uses a differentiable process. In TensorLog, each clause in a logical theory is first converted into certain type of factor graph. Then, for each type of query to the factor graph, the message-passing steps required to perform belief propagation (BP) are \"unrolled\" into a function, which is differentiable. We show that these functions can be composed recursively to perform inference in non-trivial logical theories containing multiple interrelated clauses and predicates. Both compilation and inference in TensorLog are efficient: compilation is linear in theory size and proof depth, and inference is linear in database size and the number of message-passing steps used in BP. We also present experimental results with TensorLog and discuss its relationship to other first-order probabilistic logics.', 'cs.AI', '2016-05-20T20:10:46Z', 'http://arxiv.org/abs/1605.06523v2', '2016-10-08 10:25:57', '2016-10-08 10:25:57')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (1.3ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 644
  [1m[36mAuthor Load (1.0ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'William W. Cohen'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('William W. Cohen', '2016-10-08 10:25:57', '2016-10-08 10:25:57')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1746, 644, 0, '2016-10-08 10:25:57', '2016-10-08 10:25:57')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.8ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Anomaly Detection in XML-Structured SOAP Messages Using Tree-Based Association Rule Mining'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Anomaly Detection in XML-Structured SOAP Messages Using Tree-Based Association Rule Mining', 'Web services are software systems designed for supporting interoperable dynamic cross-enterprise interactions. The result of attacks to Web services can be catastrophic and causing the disclosure of enterprises\' confidential data. As new approaches of attacking arise every day, anomaly detection systems seem to be invaluable tools in this context. The aim of this work has been to target the attacks that reside in the Web service layer and the extensible markup language (XML)-structured simple object access protocol (SOAP) messages. After studying the shortcomings of the existing solutions, a new approach for detecting anomalies in Web services is outlined. More specifically, the proposed technique illustrates how to identify anomalies by employing mining methods on XML-structured SOAP messages. This technique also takes the advantages of tree-based association rule mining to extract knowledge in the training phase, which is used in the test phase to detect anomalies. In addition, this novel composition of techniques brings nearly low false alarm rate while maintaining the detection rate reasonably high, which is shown by a case study.', 'cs.CR', '2016-05-20T18:43:44Z', 'http://arxiv.org/abs/1605.06466v1', '2016-10-08 10:25:57', '2016-10-08 10:25:57')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (1.2ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 645
  [1m[36mAuthor Load (0.9ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Reyhaneh Ghassem Esfahani'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Reyhaneh Ghassem Esfahani', '2016-10-08 10:25:57', '2016-10-08 10:25:57')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.3ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1747, 645, 0, '2016-10-08 10:25:57', '2016-10-08 10:25:57')
  [1m[36m (3.0ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.2ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Mohammad Abadollahi Azgomi'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Mohammad Abadollahi Azgomi', '2016-10-08 10:25:57', '2016-10-08 10:25:57')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1748, 645, 1, '2016-10-08 10:25:57', '2016-10-08 10:25:57')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (1.0ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Reza Fathi'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Reza Fathi', '2016-10-08 10:25:57', '2016-10-08 10:25:57')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1749, 645, 2, '2016-10-08 10:25:57', '2016-10-08 10:25:57')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (1.0ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Query-Efficient Imitation Learning for End-to-End Autonomous Driving'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.4ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Query-Efficient Imitation Learning for End-to-End Autonomous Driving', 'One way to approach end-to-end autonomous driving is to learn a policy function that maps from a sensory input, such as an image frame from a front-facing camera, to a driving action, by imitating an expert driver, or a reference policy. This can be done by supervised learning, where a policy function is tuned to minimize the difference between the predicted and ground-truth actions. A policy function trained in this way however is known to suffer from unexpected behaviours due to the mismatch between the states reachable by the reference policy and trained policy functions. More advanced algorithms for imitation learning, such as DAgger, addresses this issue by iteratively collecting training examples from both reference and trained policies. These algorithms often requires a large number of queries to a reference policy, which is undesirable as the reference policy is often expensive. In this paper, we propose an extension of the DAgger, called SafeDAgger, that is query-efficient and more suitable for end-to-end autonomous driving. We evaluate the proposed SafeDAgger in a car racing simulator and show that it indeed requires less queries to a reference policy. We observe a significant speed up in convergence, which we conjecture to be due to the effect of automated curriculum learning.', 'cs.LG', '2016-05-20T17:40:16Z', 'http://arxiv.org/abs/1605.06450v1', '2016-10-08 10:25:57', '2016-10-08 10:25:57')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (1.1ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 646
  [1m[36mAuthor Load (1.0ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Jiakai Zhang'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Jiakai Zhang', '2016-10-08 10:25:57', '2016-10-08 10:25:57')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1750, 646, 0, '2016-10-08 10:25:57', '2016-10-08 10:25:57')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.9ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Kyunghyun Cho'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Kyunghyun Cho', '2016-10-08 10:25:57', '2016-10-08 10:25:57')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1751, 646, 1, '2016-10-08 10:25:57', '2016-10-08 10:25:57')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (0.8ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Residual Networks are Exponential Ensembles of Relatively Shallow Networks'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Residual Networks are Exponential Ensembles of Relatively Shallow Networks', 'In this work, we introduce a novel interpretation of residual networks showing they are exponential ensembles. This observation is supported by a large-scale lesion study that demonstrates they behave just like ensembles at test time. Subsequently, we perform an analysis showing these ensembles mostly consist of networks that are each relatively shallow. For example, contrary to our expectations, most of the gradient in a residual network with 110 layers comes from an ensemble of very short networks, i.e., only 10-34 layers deep. This suggests that in addition to describing neural networks in terms of width and depth, there is a third dimension: multiplicity, the size of the implicit ensemble. Ultimately, residual networks do not resolve the vanishing gradient problem by preserving gradient flow throughout the entire depth of the network - rather, they avoid the problem simply by ensembling many short networks together. This insight reveals that depth is still an open research question and invites the exploration of the related notion of multiplicity.', 'cs.CV', '2016-05-20T16:44:03Z', 'http://arxiv.org/abs/1605.06431v1', '2016-10-08 10:25:57', '2016-10-08 10:25:57')[0m
  [1m[35m (2.9ms)[0m  COMMIT
  [1m[36mPublish Load (1.6ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 647[0m
  [1m[35mAuthor Load (1.4ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Andreas Veit'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Andreas Veit', '2016-10-08 10:25:57', '2016-10-08 10:25:57')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1752, 647, 0, '2016-10-08 10:25:57', '2016-10-08 10:25:57')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (1.2ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Michael Wilber'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Michael Wilber', '2016-10-08 10:25:57', '2016-10-08 10:25:57')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1753, 647, 1, '2016-10-08 10:25:57', '2016-10-08 10:25:57')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.0ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Serge Belongie'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35m (0.1ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1684, 647, 2, '2016-10-08 10:25:57', '2016-10-08 10:25:57')
  [1m[36m (0.3ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (1.0ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Towards Automation of Knowledge Understanding: An Approach for Probabilistic Generative Classifiers'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Towards Automation of Knowledge Understanding: An Approach for Probabilistic Generative Classifiers', 'After data selection, pre-processing, transformation, and feature extraction, knowledge extraction is not the final step in a data mining process. It is then necessary to understand this knowledge in order to apply it efficiently and effectively. Up to now, there is a lack of appropriate techniques that support this significant step. This is partly due to the fact that the assessment of knowledge is often highly subjective, e.g., regarding aspects such as novelty or usefulness. These aspects depend on the specific knowledge and requirements of the data miner. There are, however, a number of aspects that are objective and for which it is possible to provide appropriate measures. In this article we focus on classification problems and use probabilistic generative classifiers based on mixture density models that are quite common in data mining applications. We define objective measures to assess the informativeness, uniqueness, importance, discrimination, representativity, uncertainty, and distinguishability of rules contained in these classifiers numerically. These measures not only support a data miner in evaluating results of a data mining process based on such classifiers. As we will see in illustrative case studies, they may also be used to improve the data mining process itself or to support the later application of the extracted knowledge.', 'cs.LG', '2016-05-20T14:34:49Z', 'http://arxiv.org/abs/1605.06377v1', '2016-10-08 10:25:57', '2016-10-08 10:25:57')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (1.5ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 648
  [1m[36mAuthor Load (1.0ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Dominik Fisch'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Dominik Fisch', '2016-10-08 10:25:57', '2016-10-08 10:25:57')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1754, 648, 0, '2016-10-08 10:25:57', '2016-10-08 10:25:57')
  [1m[36m (0.3ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.9ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Christian Gruhl'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Christian Gruhl', '2016-10-08 10:25:57', '2016-10-08 10:25:57')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1755, 648, 1, '2016-10-08 10:25:57', '2016-10-08 10:25:57')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (1.2ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Edgar Kalkowski'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Edgar Kalkowski', '2016-10-08 10:25:58', '2016-10-08 10:25:58')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1756, 648, 2, '2016-10-08 10:25:58', '2016-10-08 10:25:58')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.0ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Bernhard Sick'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Bernhard Sick', '2016-10-08 10:25:58', '2016-10-08 10:25:58')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1757, 648, 3, '2016-10-08 10:25:58', '2016-10-08 10:25:58')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (1.3ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Seppo J. Ovaska'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Seppo J. Ovaska', '2016-10-08 10:25:58', '2016-10-08 10:25:58')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1758, 648, 4, '2016-10-08 10:25:58', '2016-10-08 10:25:58')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.9ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'As Cool as a Cucumber: Towards a Corpus of Contemporary Similes in Serbian'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('As Cool as a Cucumber: Towards a Corpus of Contemporary Similes in Serbian', 'Similes are natural language expressions used to compare unlikely things, where the comparison is not taken literally. They are often used in everyday communication and are an important part of cultural heritage. Having an up-to-date corpus of similes is challenging, as they are constantly coined and/or adapted to the contemporary times. In this paper we present a methodology for semi-automated collection of similes from the world wide web using text mining techniques. We expanded an existing corpus of traditional similes (containing 333 similes) by collecting 446 additional expressions. We, also, explore how crowdsourcing can be used to extract and curate new similes.', 'cs.CL', '2016-05-20T12:20:27Z', 'http://arxiv.org/abs/1605.06319v1', '2016-10-08 10:25:58', '2016-10-08 10:25:58')
  [1m[36m (3.0ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (1.7ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 649
  [1m[36mAuthor Load (1.7ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Nikola Milosevic'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Nikola Milosevic', '2016-10-08 10:25:58', '2016-10-08 10:25:58')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1759, 649, 0, '2016-10-08 10:25:58', '2016-10-08 10:25:58')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.2ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Goran Nenadic'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Goran Nenadic', '2016-10-08 10:25:58', '2016-10-08 10:25:58')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.4ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1760, 649, 1, '2016-10-08 10:25:58', '2016-10-08 10:25:58')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (0.8ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Adversarial Delays in Online Strongly-Convex Optimization'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Adversarial Delays in Online Strongly-Convex Optimization', 'We consider the problem of strongly-convex online optimization in presence of adversarial delays; in a T-iteration online game, the feedback of the player\'s query at time t is arbitrarily delayed by an adversary for d_t rounds and delivered before the game ends, at iteration t+d_t-1. Specifically for \\algo{online-gradient-descent} algorithm we show it has a simple regret bound of \\Oh{\\sum_{t=1}^T \\log (1+ \\frac{d_t}{t})}. This gives a clear and simple bound without resorting any distributional and limiting assumptions on the delays. We further show how this result encompasses and generalizes several of the existing known results in the literature. Specifically it matches the celebrated logarithmic regret \\Oh{\\log T} when there are no delays (i.e. d_t = 1) and regret bound of \\Oh{\\tau \\log T} for constant delays d_t = \\tau.', 'cs.LG', '2016-05-20T02:55:59Z', 'http://arxiv.org/abs/1605.06201v1', '2016-10-08 10:25:58', '2016-10-08 10:25:58')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPublish Load (1.2ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 650[0m
  [1m[35mAuthor Load (0.8ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Daniel Khashabi'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Daniel Khashabi', '2016-10-08 10:25:58', '2016-10-08 10:25:58')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1761, 650, 0, '2016-10-08 10:25:58', '2016-10-08 10:25:58')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (1.1ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Kent Quanrud'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Kent Quanrud', '2016-10-08 10:25:58', '2016-10-08 10:25:58')[0m
  [1m[35m (1.3ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1762, 650, 1, '2016-10-08 10:25:58', '2016-10-08 10:25:58')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.0ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Amirhossein Taghvaei'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Amirhossein Taghvaei', '2016-10-08 10:25:58', '2016-10-08 10:25:58')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1763, 650, 2, '2016-10-08 10:25:58', '2016-10-08 10:25:58')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPaper Load (0.9ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Variational hybridization and transformation for large inaccurate noisy-or networks'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Variational hybridization and transformation for large inaccurate noisy-or networks', 'Variational inference provides approximations to the computationally intractable posterior distribution in Bayesian networks. A prominent medical application of noisy-or Bayesian network is to infer potential diseases given observed symptoms. Previous studies focus on approximating a handful of complicated pathological cases using variational transformation. Our goal is to use variational transformation as part of a novel hybridized inference for serving reliable and real time diagnosis at web scale. We propose a hybridized inference that allows variational parameters to be estimated without disease posteriors or priors, making the inference faster and much of its computation recyclable. In addition, we propose a transformation ranking algorithm that is very stable to large variances in network prior probabilities, a common issue that arises in medical applications of Bayesian networks. In experiments, we perform comparative study on a large real life medical network and scalability study on a much larger (36,000x) synthesized network.', 'cs.LG', '2016-05-20T00:31:07Z', 'http://arxiv.org/abs/1605.06181v1', '2016-10-08 10:25:58', '2016-10-08 10:25:58')[0m
  [1m[35m (3.0ms)[0m  COMMIT
  [1m[36mPublish Load (1.4ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 651[0m
  [1m[35mAuthor Load (1.4ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Yusheng Xie'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Yusheng Xie', '2016-10-08 10:25:58', '2016-10-08 10:25:58')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.3ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1764, 651, 0, '2016-10-08 10:25:58', '2016-10-08 10:25:58')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (1.1ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Nan Du'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Nan Du', '2016-10-08 10:25:58', '2016-10-08 10:25:58')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1765, 651, 1, '2016-10-08 10:25:58', '2016-10-08 10:25:58')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.0ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Wei Fan'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Wei Fan', '2016-10-08 10:25:58', '2016-10-08 10:25:58')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1766, 651, 2, '2016-10-08 10:25:58', '2016-10-08 10:25:58')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (1.5ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Jing Zhai'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Jing Zhai', '2016-10-08 10:25:58', '2016-10-08 10:25:58')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1767, 651, 3, '2016-10-08 10:25:58', '2016-10-08 10:25:58')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.1ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Weicheng Zhu'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Weicheng Zhu', '2016-10-08 10:25:58', '2016-10-08 10:25:58')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1768, 651, 4, '2016-10-08 10:25:58', '2016-10-08 10:25:58')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (0.8ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'A Hierarchical Latent Variable Encoder-Decoder Model for Generating Dialogues'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('A Hierarchical Latent Variable Encoder-Decoder Model for Generating Dialogues', 'Sequential data often possesses a hierarchical structure with complex dependencies between subsequences, such as found between the utterances in a dialogue. In an effort to model this kind of generative process, we propose a neural network-based generative architecture, with latent stochastic variables that span a variable number of time steps. We apply the proposed model to the task of dialogue response generation and compare it with recent neural network architectures. We evaluate the model performance through automatic evaluation metrics and by carrying out a human evaluation. The experiments demonstrate that our model improves upon recently proposed models and that the latent variables facilitate the generation of long outputs and maintain the context.', 'cs.CL', '2016-05-19T17:59:02Z', 'http://arxiv.org/abs/1605.06069v3', '2016-10-08 10:25:58', '2016-10-08 10:25:58')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPublish Load (0.9ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 652[0m
  [1m[35mAuthor Load (0.8ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Iulian Vlad Serban'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35m (0.1ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1531, 652, 0, '2016-10-08 10:25:58', '2016-10-08 10:25:58')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.0ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Alessandro Sordoni'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Alessandro Sordoni', '2016-10-08 10:25:58', '2016-10-08 10:25:58')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1769, 652, 1, '2016-10-08 10:25:58', '2016-10-08 10:25:58')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (1.0ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Ryan Lowe'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Ryan Lowe', '2016-10-08 10:25:58', '2016-10-08 10:25:58')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1770, 652, 2, '2016-10-08 10:25:58', '2016-10-08 10:25:58')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.1ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Laurent Charlin'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Laurent Charlin', '2016-10-08 10:25:58', '2016-10-08 10:25:58')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1771, 652, 3, '2016-10-08 10:25:58', '2016-10-08 10:25:58')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (0.3ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Joelle Pineau'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36m (0.2ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (13, 652, 4, '2016-10-08 10:25:58', '2016-10-08 10:25:58')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (1.1ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Aaron Courville'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36m (0.2ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1537, 652, 5, '2016-10-08 10:25:58', '2016-10-08 10:25:58')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.9ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Yoshua Bengio'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36m (0.2ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1536, 652, 6, '2016-10-08 10:25:58', '2016-10-08 10:25:58')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (0.9ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Philosophy in the Face of Artificial Intelligence'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Philosophy in the Face of Artificial Intelligence', 'In this article, I discuss how the AI community views concerns about the emergence of superintelligent AI and related philosophical issues.', 'cs.AI', '2016-05-19T16:45:12Z', 'http://arxiv.org/abs/1605.06048v1', '2016-10-08 10:25:58', '2016-10-08 10:25:58')[0m
  [1m[35m (3.0ms)[0m  COMMIT
  [1m[36mPublish Load (1.4ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 653[0m
  [1m[35mAuthor Load (1.1ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Vincent Conitzer'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Vincent Conitzer', '2016-10-08 10:25:58', '2016-10-08 10:25:58')
  [1m[36m (0.6ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1772, 653, 0, '2016-10-08 10:25:58', '2016-10-08 10:25:58')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPaper Load (0.8ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'AMSOM: Adaptive Moving Self-organizing Map for Clustering and Visualization'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('AMSOM: Adaptive Moving Self-organizing Map for Clustering and Visualization', 'Self-Organizing Map (SOM) is a neural network model which is used to obtain a topology-preserving mapping from the (usually high dimensional) input/feature space to an output/map space of fewer dimensions (usually two or three in order to facilitate visualization). Neurons in the output space are connected with each other but this structure remains fixed throughout training and learning is achieved through the updating of neuron reference vectors in feature space. Despite the fact that growing variants of SOM overcome the fixed structure limitation they increase computational cost and also do not allow the removal of a neuron after its introduction. In this paper, a variant of SOM is proposed called AMSOM (Adaptive Moving Self-Organizing Map) that on the one hand creates a more flexible structure where neuron positions are dynamically altered during training and on the other hand tackles the drawback of having a predefined grid by allowing neuron addition and/or removal during training. Experiments using multiple literature datasets show that the proposed method improves training performance of SOM, leads to a better visualization of the input dataset and provides a framework for determining the optimal number and structure of neurons.', 'cs.AI', '2016-05-19T16:41:00Z', 'http://dx.doi.org/10.5220/0005704801290140', '2016-10-08 10:25:58', '2016-10-08 10:25:58')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPublish Load (1.1ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 654[0m
  [1m[35mAuthor Load (1.0ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Gerasimos Spanakis'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Gerasimos Spanakis', '2016-10-08 10:25:58', '2016-10-08 10:25:58')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1773, 654, 0, '2016-10-08 10:25:58', '2016-10-08 10:25:58')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (1.1ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Gerhard Weiss'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Gerhard Weiss', '2016-10-08 10:25:58', '2016-10-08 10:25:58')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1774, 654, 1, '2016-10-08 10:25:58', '2016-10-08 10:25:58')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.9ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Dynamic Bayesian Networks to simulate occupant behaviours in office buildings related to indoor air quality'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Dynamic Bayesian Networks to simulate occupant behaviours in office buildings related to indoor air quality', 'This paper proposes a new general approach based on Bayesian networks to model the human behaviour. This approach represents human behaviour with probabilistic cause-effect relations based on knowledge, but also with conditional probabilities coming either from knowledge or deduced from observations. This approach has been applied to the co-simulation of the CO2 concentration in an office coupled with human behaviour.', 'cs.AI', '2016-05-19T14:16:39Z', 'http://arxiv.org/abs/1605.05966v1', '2016-10-08 10:25:58', '2016-10-08 10:25:58')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (0.9ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 655
  [1m[36mAuthor Load (0.9ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Khadija Tijani'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Khadija Tijani', '2016-10-08 10:25:58', '2016-10-08 10:25:58')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1775, 655, 0, '2016-10-08 10:25:58', '2016-10-08 10:25:58')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.2ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Stephane Ploix'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Stephane Ploix', '2016-10-08 10:25:58', '2016-10-08 10:25:58')
  [1m[36m (0.6ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.3ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1776, 655, 1, '2016-10-08 10:25:58', '2016-10-08 10:25:58')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (1.3ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Benjamin Haas'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Benjamin Haas', '2016-10-08 10:25:58', '2016-10-08 10:25:58')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1777, 655, 2, '2016-10-08 10:25:58', '2016-10-08 10:25:58')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.6ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Julie Dugdale'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Julie Dugdale', '2016-10-08 10:25:58', '2016-10-08 10:25:58')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.4ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1778, 655, 3, '2016-10-08 10:25:58', '2016-10-08 10:25:58')[0m
  [1m[35m (2.9ms)[0m  COMMIT
  [1m[36mAuthor Load (1.2ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Quoc Dung Ngo'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Quoc Dung Ngo', '2016-10-08 10:25:58', '2016-10-08 10:25:58')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1779, 655, 4, '2016-10-08 10:25:58', '2016-10-08 10:25:58')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.8ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Interactive Debugging of Knowledge Bases'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Interactive Debugging of Knowledge Bases', 'Many AI applications rely on knowledge about a relevant real-world domain that is encoded by means of some logical knowledge base (KB). The most essential benefit of logical KBs is the opportunity to perform automatic reasoning to derive implicit knowledge or to answer complex queries about the modeled domain. The feasibility of meaningful reasoning requires KBs to meet some minimal quality criteria such as logical consistency. Without adequate tool assistance, the task of resolving violated quality criteria in KBs can be extremely tough even for domain experts, especially when the problematic KB includes a large number of logical formulas or comprises complicated logical formalisms. Published non-interactive debugging systems often cannot localize all possible faults (incompleteness), suggest the deletion or modification of unnecessarily large parts of the KB (non-minimality), return incorrect solutions which lead to a repaired KB not satisfying the imposed quality requirements (unsoundness) or suffer from poor scalability due to the inherent complexity of the KB debugging problem. Even if a system is complete and sound and considers only minimal solutions, there are generally exponentially many solution candidates to select one from. However, any two repaired KBs obtained from these candidates differ in their semantics in terms of entailments and non-entailments. Selection of just any of these repaired KBs might result in unexpected entailments, the loss of desired entailments or unwanted changes to the KB. This work proposes complete, sound and optimal methods for the interactive debugging of KBs that suggest the one (minimally invasive) error correction of the faulty KB that yields a repaired KB with exactly the intended semantics. Users, e.g. domain experts, are involved in the debugging process by answering automatically generated queries about the intended domain.', 'cs.AI', '2016-05-19T13:40:01Z', 'http://arxiv.org/abs/1605.05950v1', '2016-10-08 10:25:58', '2016-10-08 10:25:58')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (2.2ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 656
  [1m[36mAuthor Load (0.3ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Patrick Rodler'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36m (0.1ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (103, 656, 0, '2016-10-08 10:25:58', '2016-10-08 10:25:58')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (1.0ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Heuristics for Planning, Plan Recognition and Parsing'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Heuristics for Planning, Plan Recognition and Parsing', 'In a recent paper, we have shown that Plan Recognition over STRIPS can be formulated and solved using Classical Planning heuristics and algorithms. In this work, we show that this formulation subsumes the standard formulation of Plan Recognition over libraries through a compilation of libraries into STRIPS theories. The libraries correspond to AND/OR graphs that may be cyclic and where children of AND nodes may be partially ordered. These libraries include Context-Free Grammars as a special case, where the Plan Recognition problem becomes a parsing with missing tokens problem. Plan Recognition over the standard libraries become Planning problems that can be easily solved by any modern planner, while recognition over more complex libraries, including Context-Free Grammars (CFGs), illustrate limitations of current Planning heuristics and suggest improvements that may be relevant in other Planning problems too.', 'cs.AI', '2016-05-19T04:22:35Z', 'http://arxiv.org/abs/1605.05807v2', '2016-10-08 10:25:58', '2016-10-08 10:25:58')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPublish Load (1.3ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 657[0m
  [1m[35mAuthor Load (0.8ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Miquel Ramirez'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Miquel Ramirez', '2016-10-08 10:25:58', '2016-10-08 10:25:58')
  [1m[36m (0.6ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1780, 657, 0, '2016-10-08 10:25:58', '2016-10-08 10:25:58')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.9ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Hector Geffner'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Hector Geffner', '2016-10-08 10:25:58', '2016-10-08 10:25:58')[0m
  [1m[35m (2.9ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1781, 657, 1, '2016-10-08 10:25:58', '2016-10-08 10:25:58')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.8ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'The Information-Collecting Vehicle Routing Problem: Stochastic Optimization for Emergency Storm Response'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('The Information-Collecting Vehicle Routing Problem: Stochastic Optimization for Emergency Storm Response', 'Utilities face the challenge of responding to power outages due to storms and ice damage, but most power grids are not equipped with sensors to pinpoint the precise location of the faults causing the outage. Instead, utilities have to depend primarily on phone calls (trouble calls) from customers who have lost power to guide the dispatching of utility trucks. In this paper, we develop a policy that routes a utility truck to restore outages in the power grid as quickly as possible, using phone calls to create beliefs about outages, but also using utility trucks as a mechanism for collecting additional information. This means that routing decisions change not only the physical state of the truck (as it moves from one location to another) and the grid (as the truck performs repairs), but also our belief about the network, creating the first stochastic vehicle routing problem that explicitly models information collection and belief modeling. We address the problem of managing a single utility truck, which we start by formulating as a sequential stochastic optimization model which captures our belief about the state of the grid. We propose a stochastic lookahead policy, and use Monte Carlo tree search (MCTS) to produce a practical policy that is asymptotically optimal. Simulation results show that the developed policy restores the power grid much faster compared to standard industry heuristics.', 'math.OC', '2016-05-18T19:23:43Z', 'http://arxiv.org/abs/1605.05711v1', '2016-10-08 10:25:58', '2016-10-08 10:25:58')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (1.1ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 658
  [1m[36mAuthor Load (0.8ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Lina Al-Kanj'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Lina Al-Kanj', '2016-10-08 10:25:58', '2016-10-08 10:25:58')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1782, 658, 0, '2016-10-08 10:25:58', '2016-10-08 10:25:58')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.1ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Warren B. Powell'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Warren B. Powell', '2016-10-08 10:25:58', '2016-10-08 10:25:58')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1783, 658, 1, '2016-10-08 10:25:58', '2016-10-08 10:25:58')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (1.0ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Belgacem Bouzaiene-Ayari'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Belgacem Bouzaiene-Ayari', '2016-10-08 10:25:58', '2016-10-08 10:25:58')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1784, 658, 2, '2016-10-08 10:25:58', '2016-10-08 10:25:58')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (1.1ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Towards information based spatiotemporal patterns as a foundation for agent representation in dynamical systems'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Towards information based spatiotemporal patterns as a foundation for agent representation in dynamical systems', 'We present some arguments why existing methods for representing agents fall short in applications crucial to artificial life. Using a thought experiment involving a fictitious dynamical systems model of the biosphere we argue that the metabolism, motility, and the concept of counterfactual variation should be compatible with any agent representation in dynamical systems. We then propose an information-theoretic notion of \\emph{integrated spatiotemporal patterns} which we believe can serve as the basic building block of an agent definition. We argue that these patterns are capable of solving the problems mentioned before. We also test this in some preliminary experiments.', 'cs.AI', '2016-05-18T18:18:38Z', 'http://arxiv.org/abs/1605.05676v1', '2016-10-08 10:25:58', '2016-10-08 10:25:58')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (1.3ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 659
  [1m[36mAuthor Load (0.4ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Martin Biehl'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36m (0.2ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (173, 659, 0, '2016-10-08 10:25:58', '2016-10-08 10:25:58')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (1.0ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Takashi Ikegami'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Takashi Ikegami', '2016-10-08 10:25:58', '2016-10-08 10:25:58')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1785, 659, 1, '2016-10-08 10:25:58', '2016-10-08 10:25:58')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.3ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Daniel Polani'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Daniel Polani', '2016-10-08 10:25:58', '2016-10-08 10:25:58')
  [1m[36m (3.3ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.4ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1786, 659, 2, '2016-10-08 10:25:58', '2016-10-08 10:25:58')[0m
  [1m[35m (0.6ms)[0m  COMMIT
  [1m[36mPaper Load (1.2ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'The Bees Algorithm for the Vehicle Routing Problem'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('The Bees Algorithm for the Vehicle Routing Problem', 'In this thesis we present a new algorithm for the Vehicle Routing Problem called the Enhanced Bees Algorithm. It is adapted from a fairly recent algorithm, the Bees Algorithm, which was developed for continuous optimisation problems. We show that the results obtained by the Enhanced Bees Algorithm are competitive with the best meta-heuristics available for the Vehicle Routing Problem (within 0.5% of the optimal solution for common benchmark problems). We show that the algorithm has good runtime performance, producing results within 2% of the optimal solution within 60 seconds, making it suitable for use within real world dispatch scenarios.', 'cs.NE', '2016-05-18T05:53:44Z', 'http://arxiv.org/abs/1605.05448v1', '2016-10-08 10:25:58', '2016-10-08 10:25:58')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPublish Load (1.1ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 660[0m
  [1m[35mAuthor Load (1.2ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Aish Fenton'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Aish Fenton', '2016-10-08 10:25:58', '2016-10-08 10:25:58')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1787, 660, 0, '2016-10-08 10:25:58', '2016-10-08 10:25:58')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (0.8ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Relations such as Hypernymy: Identifying and Exploiting Hearst Patterns in Distributional Vectors for Lexical Entailment'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Relations such as Hypernymy: Identifying and Exploiting Hearst Patterns in Distributional Vectors for Lexical Entailment', 'We consider the task of predicting lexical entailment using distributional vectors. We focus experiments on one previous classifier which was shown to only learn to detect prototypicality of a word pair. Analysis shows that the model single-mindedly learns to detect Hearst Patterns, which are well known to be predictive of lexical relations. We present a new model which exploits this Hearst Detector functionality, matching or outperforming prior work on multiple data sets.', 'cs.CL', '2016-05-18T04:10:41Z', 'http://arxiv.org/abs/1605.05433v1', '2016-10-08 10:25:58', '2016-10-08 10:25:58')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPublish Load (1.2ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 661[0m
  [1m[35mAuthor Load (1.1ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Stephen Roller'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Stephen Roller', '2016-10-08 10:25:58', '2016-10-08 10:25:58')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1788, 661, 0, '2016-10-08 10:25:58', '2016-10-08 10:25:58')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (1.0ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Katrin Erk'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Katrin Erk', '2016-10-08 10:25:58', '2016-10-08 10:25:58')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1789, 661, 1, '2016-10-08 10:25:58', '2016-10-08 10:25:58')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.9ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Dynamic Frame skip Deep Q Network'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Dynamic Frame skip Deep Q Network', 'Deep Reinforcement Learning methods have achieved state of the art performance in learning control policies for the games in the Atari 2600 domain. One of the important parameters in the Arcade Learning Environment (ALE) is the frame skip rate. It decides the granularity at which agents can control game play. A frame skip value of $k$ allows the agent to repeat a selected action $k$ number of times. The current state of the art architectures like Deep Q-Network (DQN) and Dueling Network Architectures (DuDQN) consist of a framework with a static frame skip rate, where the action output from the network is repeated for a fixed number of frames regardless of the current state. In this paper, we propose a new architecture, Dynamic Frame skip Deep Q-Network (DFDQN) which makes the frame skip rate a dynamic learnable parameter. This allows us to choose the number of times an action is to be repeated based on the current state. We show empirically that such a setting improves the performance on relatively harder games like Seaquest.', 'cs.LG', '2016-05-17T20:58:41Z', 'http://arxiv.org/abs/1605.05365v2', '2016-10-08 10:25:58', '2016-10-08 10:25:58')
  [1m[36m (3.0ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (1.4ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 662
  [1m[36mAuthor Load (1.2ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Aravind S. Lakshminarayanan'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Aravind S. Lakshminarayanan', '2016-10-08 10:25:58', '2016-10-08 10:25:58')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1790, 662, 0, '2016-10-08 10:25:58', '2016-10-08 10:25:58')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.0ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Sahil Sharma'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35m (0.2ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1041, 662, 1, '2016-10-08 10:25:58', '2016-10-08 10:25:58')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.3ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Balaraman Ravindran'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.4ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Balaraman Ravindran', '2016-10-08 10:25:58', '2016-10-08 10:25:58')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1791, 662, 2, '2016-10-08 10:25:58', '2016-10-08 10:25:58')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPaper Load (1.5ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Hierarchical Reinforcement Learning using Spatio-Temporal Abstractions and Deep Neural Networks'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Hierarchical Reinforcement Learning using Spatio-Temporal Abstractions and Deep Neural Networks', 'This paper introduces an automated skill acquisition framework in reinforcement learning which involves identifying a hierarchical description of the given task in terms of abstract states and extended actions between abstract states. Identifying such structures present in the task provides ways to simplify and speed up reinforcement learning learning algorithms. These structures also help to generalize such algorithms over multiple tasks without relearning policies from scratch. We use ideas from dynamical systems to find metastable regions in the state space and associate them with abstract states. The spectral clustering algorithm PCCA+ is used to identify suitable abstractions aligned to the underlying structure. Skills are defined in terms of the transitions between such abstract states. The connectivity information from PCCA+ is used to generate these skills or options. The skills are independent of the learning task and can be efficiently reused across a variety of tasks defined over a common state space. Another major advantage of the approach is that it does not need a prior model of the MDP and can work well even when the MDPs are constructed from sampled trajectories. Finally, we present our attempts to extend the automated skills acquisition framework to complex tasks such as learning to play video games where we use deep learning techniques for representation learning to aid our spatio-temporal abstraction framework.', 'cs.LG', '2016-05-17T20:44:19Z', 'http://arxiv.org/abs/1605.05359v1', '2016-10-08 10:25:58', '2016-10-08 10:25:58')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPublish Load (1.4ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 663[0m
  [1m[35mAuthor Load (0.8ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Ramnandan Krishnamurthy'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Ramnandan Krishnamurthy', '2016-10-08 10:25:58', '2016-10-08 10:25:58')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1792, 663, 0, '2016-10-08 10:25:58', '2016-10-08 10:25:58')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (1.0ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Aravind S. Lakshminarayanan'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36m (0.1ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1790, 663, 1, '2016-10-08 10:25:58', '2016-10-08 10:25:58')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.9ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Peeyush Kumar'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Peeyush Kumar', '2016-10-08 10:25:58', '2016-10-08 10:25:58')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1793, 663, 2, '2016-10-08 10:25:58', '2016-10-08 10:25:58')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.3ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Balaraman Ravindran'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35m (0.2ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1791, 663, 3, '2016-10-08 10:25:58', '2016-10-08 10:25:58')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.9ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Combat Models for RTS Games'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Combat Models for RTS Games', 'Game tree search algorithms, such as Monte Carlo Tree Search (MCTS), require access to a forward model (or \"simulator\") of the game at hand. However, in some games such forward model is not readily available. This paper presents three forward models for two-player attrition games, which we call \"combat models\", and show how they can be used to simulate combat in RTS games. We also show how these combat models can be learned from replay data. We use StarCraft as our application domain. We report experiments comparing our combat models predicting a combat output and their impact when used for tactical decisions during a real game.', 'cs.AI', '2016-05-17T19:47:13Z', 'http://arxiv.org/abs/1605.05305v1', '2016-10-08 10:25:58', '2016-10-08 10:25:58')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (1.3ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 664
  [1m[36mAuthor Load (1.2ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Alberto Uriarte'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Alberto Uriarte', '2016-10-08 10:25:58', '2016-10-08 10:25:58')[0m
  [1m[35m (3.0ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1794, 664, 0, '2016-10-08 10:25:58', '2016-10-08 10:25:58')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.9ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Santiago Ontañón'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35m (0.1ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1117, 664, 1, '2016-10-08 10:25:58', '2016-10-08 10:25:58')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (1.1ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Fuzzy Sets Across the Natural Language Generation Pipeline'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Fuzzy Sets Across the Natural Language Generation Pipeline', 'We explore the implications of using fuzzy techniques (mainly those commonly used in the linguistic description/summarization of data discipline) from a natural language generation perspective. For this, we provide an extensive discussion of some general convergence points and an exploration of the relationship between the different tasks involved in the standard NLG system pipeline architecture and the most common fuzzy approaches used in linguistic summarization/description of data, such as fuzzy quantified statements, evaluation criteria or aggregation operators. Each individual discussion is illustrated with a related use case. Recent work made in the context of cross-fertilization of both research fields is also referenced. This paper encompasses general ideas that emerged as part of the PhD thesis \"Application of fuzzy sets in data-to-text systems\". It does not present a specific application or a formal approach, but rather discusses current high-level issues and potential usages of fuzzy sets (focused on linguistic summarization of data) in natural language generation.', 'cs.AI', '2016-05-17T19:45:49Z', 'http://arxiv.org/abs/1605.05303v1', '2016-10-08 10:25:58', '2016-10-08 10:25:58')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (1.1ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 665
  [1m[36mAuthor Load (0.9ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'A. Ramos-Soto'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('A. Ramos-Soto', '2016-10-08 10:25:58', '2016-10-08 10:25:58')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1795, 665, 0, '2016-10-08 10:25:58', '2016-10-08 10:25:58')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.1ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'A. Bugarín'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('A. Bugarín', '2016-10-08 10:25:58', '2016-10-08 10:25:58')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1796, 665, 1, '2016-10-08 10:25:58', '2016-10-08 10:25:58')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (1.2ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'S. Barro'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('S. Barro', '2016-10-08 10:25:58', '2016-10-08 10:25:58')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1797, 665, 2, '2016-10-08 10:25:58', '2016-10-08 10:25:58')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.8ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Learning Convolutional Neural Networks for Graphs'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Learning Convolutional Neural Networks for Graphs', 'Numerous important problems can be framed as learning from graph data. We propose a framework for learning convolutional neural networks for arbitrary graphs. These graphs may be undirected, directed, and with both discrete and continuous node and edge attributes. Analogous to image-based convolutional networks that operate on locally connected regions of the input, we present a general approach to extracting locally connected regions from graphs. Using established benchmark data sets, we demonstrate that the learned feature representations are competitive with state of the art graph kernels and that their computation is highly efficient.', 'cs.LG', '2016-05-17T18:13:13Z', 'http://arxiv.org/abs/1605.05273v4', '2016-10-08 10:25:58', '2016-10-08 10:25:58')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (1.1ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 666
  [1m[36mAuthor Load (1.3ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Mathias Niepert'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Mathias Niepert', '2016-10-08 10:25:58', '2016-10-08 10:25:58')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.3ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1798, 666, 0, '2016-10-08 10:25:58', '2016-10-08 10:25:58')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.3ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Mohamed Ahmed'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Mohamed Ahmed', '2016-10-08 10:25:58', '2016-10-08 10:25:58')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.4ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1799, 666, 1, '2016-10-08 10:25:58', '2016-10-08 10:25:58')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.9ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Konstantin Kutzkov'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Konstantin Kutzkov', '2016-10-08 10:25:58', '2016-10-08 10:25:58')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1800, 666, 2, '2016-10-08 10:25:58', '2016-10-08 10:25:58')
  [1m[36m (2.9ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (1.0ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Enhanced Twitter Sentiment Classification Using Contextual Information'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Enhanced Twitter Sentiment Classification Using Contextual Information', 'The rise in popularity and ubiquity of Twitter has made sentiment analysis of tweets an important and well-covered area of research. However, the 140 character limit imposed on tweets makes it hard to use standard linguistic methods for sentiment classification. On the other hand, what tweets lack in structure they make up with sheer volume and rich metadata. This metadata includes geolocation, temporal and author information. We hypothesize that sentiment is dependent on all these contextual factors. Different locations, times and authors have different emotional valences. In this paper, we explored this hypothesis by utilizing distant supervision to collect millions of labelled tweets from different locations, times and authors. We used this data to analyse the variation of tweet sentiments across different authors, times and locations. Once we explored and understood the relationship between these variables and sentiment, we used a Bayesian approach to combine these variables with more standard linguistic features such as n-grams to create a Twitter sentiment classifier. This combined classifier outperforms the purely linguistic classifier, showing that integrating the rich contextual information available on Twitter into sentiment classification is a promising direction of research.', 'cs.SI', '2016-05-17T14:51:54Z', 'http://arxiv.org/abs/1605.05195v1', '2016-10-08 10:25:58', '2016-10-08 10:25:58')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (1.0ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 667
  [1m[36mAuthor Load (0.5ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Soroush Vosoughi'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36m (0.1ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (668, 667, 0, '2016-10-08 10:25:58', '2016-10-08 10:25:58')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (1.1ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Helen Zhou'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Helen Zhou', '2016-10-08 10:25:58', '2016-10-08 10:25:58')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1801, 667, 1, '2016-10-08 10:25:58', '2016-10-08 10:25:58')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.6ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Deb Roy'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35m (0.1ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (670, 667, 2, '2016-10-08 10:25:58', '2016-10-08 10:25:58')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.8ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Digital Stylometry: Linking Profiles Across Social Networks'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.4ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Digital Stylometry: Linking Profiles Across Social Networks', 'There is an ever growing number of users with accounts on multiple social media and networking sites. Consequently, there is increasing interest in matching user accounts and profiles across different social networks in order to create aggregate profiles of users. In this paper, we present models for Digital Stylometry, which is a method for matching users through stylometry inspired techniques. We experimented with linguistic, temporal, and combined temporal-linguistic models for matching user accounts, using standard and novel techniques. Using publicly available data, our best model, a combined temporal-linguistic one, was able to correctly match the accounts of 31% of 5,612 distinct users across Twitter and Facebook.', 'cs.SI', '2016-05-17T13:47:24Z', 'http://arxiv.org/abs/1605.05166v1', '2016-10-08 10:25:58', '2016-10-08 10:25:58')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (1.2ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 668
  [1m[36mAuthor Load (0.5ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Soroush Vosoughi'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36m (0.2ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (668, 668, 0, '2016-10-08 10:25:58', '2016-10-08 10:25:58')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (1.0ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Helen Zhou'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36m (0.1ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1801, 668, 1, '2016-10-08 10:25:58', '2016-10-08 10:25:58')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (0.6ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Deb Roy'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36m (0.1ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (670, 668, 2, '2016-10-08 10:25:58', '2016-10-08 10:25:58')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPaper Load (0.8ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Self-Reflective Risk-Aware Artificial Cognitive Modeling for Robot Response to Human Behaviors'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Self-Reflective Risk-Aware Artificial Cognitive Modeling for Robot Response to Human Behaviors', 'In order for cooperative robots (\"co-robots\") to respond to human behaviors accurately and efficiently in human-robot collaboration, interpretation of human actions, awareness of new situations, and appropriate decision making are all crucial abilities for co-robots. For this purpose, the human behaviors should be interpreted by co-robots in the same manner as human peers. To address this issue, a novel interpretability indicator is introduced so that robot actions are appropriate to the current human behaviors. In addition, the complete consideration of all potential situations of a robot\'s environment is nearly impossible in real-world applications, making it difficult for the co-robot to act appropriately and safely in new scenarios. This is true even when the pretrained model is highly accurate in a known situation. For effective and safe teaming with humans, we introduce a new generalizability indicator that allows a co-robot to self-reflect and reason about when an observation falls outside the co-robot\'s learned model. Based on topic modeling and two novel indicators, we propose a new Self-reflective Risk-aware Artificial Cognitive (SRAC) model. The co-robots are able to consider action risks and identify new situations so that better decisions can be made. Experiments both using real-world datasets and on physical robots suggest that our SRAC model significantly outperforms the traditional methodology and enables better decision making in response to human activities.', 'cs.RO', '2016-05-16T20:22:30Z', 'http://arxiv.org/abs/1605.04934v1', '2016-10-08 10:25:58', '2016-10-08 10:25:58')[0m
  [1m[35m (2.9ms)[0m  COMMIT
  [1m[36mPublish Load (1.4ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 669[0m
  [1m[35mAuthor Load (1.2ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Fei Han'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Fei Han', '2016-10-08 10:25:58', '2016-10-08 10:25:58')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1802, 669, 0, '2016-10-08 10:25:58', '2016-10-08 10:25:58')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (1.0ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Christopher Reardon'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Christopher Reardon', '2016-10-08 10:25:58', '2016-10-08 10:25:58')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1803, 669, 1, '2016-10-08 10:25:58', '2016-10-08 10:25:58')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.2ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Lynne E. Parker'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Lynne E. Parker', '2016-10-08 10:25:58', '2016-10-08 10:25:58')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1804, 669, 2, '2016-10-08 10:25:58', '2016-10-08 10:25:58')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (1.0ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Hao Zhang'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Hao Zhang', '2016-10-08 10:25:58', '2016-10-08 10:25:58')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1805, 669, 3, '2016-10-08 10:25:58', '2016-10-08 10:25:58')
  [1m[36m (0.3ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.9ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Off-policy evaluation for slate recommendation'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Off-policy evaluation for slate recommendation', 'This paper studies the evaluation of policies that recommend an ordered set of items (e.g., a ranking) based on some context---a common scenario in web search, ads and recommender systems. We develop the first practical technique for evaluating page-level metrics of such policies offline using logged past data, alleviating the need for online A/B tests. Our method models the observed quality of the recommended set (e.g., time to success in web search) as an additive decomposition across items. Crucially, the per-item quality is not directly observed or easily modeled from the item\'s features. A thorough empirical evaluation reveals that this model fits many realistic measures of quality and theoretical analysis shows exponential savings in the amount of required data compared with prior off-policy evaluation approaches.', 'cs.LG', '2016-05-16T15:47:21Z', 'http://arxiv.org/abs/1605.04812v2', '2016-10-08 10:25:58', '2016-10-08 10:25:58')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (1.5ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 670
  [1m[36mAuthor Load (1.1ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Adith Swaminathan'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Adith Swaminathan', '2016-10-08 10:25:58', '2016-10-08 10:25:58')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1806, 670, 0, '2016-10-08 10:25:58', '2016-10-08 10:25:58')
  [1m[36m (0.3ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.1ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Akshay Krishnamurthy'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Akshay Krishnamurthy', '2016-10-08 10:25:58', '2016-10-08 10:25:58')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1807, 670, 1, '2016-10-08 10:25:58', '2016-10-08 10:25:58')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (1.0ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Alekh Agarwal'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Alekh Agarwal', '2016-10-08 10:25:58', '2016-10-08 10:25:58')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1808, 670, 2, '2016-10-08 10:25:58', '2016-10-08 10:25:58')
  [1m[36m (3.0ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.3ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Miroslav Dudík'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35m (0.1ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1398, 670, 3, '2016-10-08 10:25:58', '2016-10-08 10:25:58')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.0ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'John Langford'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('John Langford', '2016-10-08 10:25:58', '2016-10-08 10:25:58')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1809, 670, 4, '2016-10-08 10:25:58', '2016-10-08 10:25:58')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (1.1ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Damien Jose'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Damien Jose', '2016-10-08 10:25:58', '2016-10-08 10:25:58')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1810, 670, 5, '2016-10-08 10:25:58', '2016-10-08 10:25:58')
  [1m[36m (1.9ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.3ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Imed Zitouni'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Imed Zitouni', '2016-10-08 10:25:58', '2016-10-08 10:25:58')
  [1m[36m (0.6ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1811, 670, 6, '2016-10-08 10:25:58', '2016-10-08 10:25:58')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (1.0ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'On the Complexity of Connection Games'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.4ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('On the Complexity of Connection Games', 'In this paper, we study three connection games among the most widely played: Havannah, Twixt, and Slither. We show that determining the outcome of an arbitrary input position is PSPACE-complete in all three cases. Our reductions are based on the popular graph problem Generalized Geography and on Hex itself. We also consider the complexity of generalizations of Hex parameterized by the length of the solution and establish that while Short Generalized Hex is W[1]-hard, Short Hex is FPT. Finally, we prove that the ultra-weak solution to the empty starting position in hex cannot be fully adapted to any of these three games.', 'cs.CC', '2016-05-16T10:26:38Z', 'http://arxiv.org/abs/1605.04715v1', '2016-10-08 10:25:58', '2016-10-08 10:25:58')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPublish Load (1.0ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 671[0m
  [1m[35mAuthor Load (0.8ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Édouard Bonnet'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Édouard Bonnet', '2016-10-08 10:25:58', '2016-10-08 10:25:58')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1812, 671, 0, '2016-10-08 10:25:58', '2016-10-08 10:25:58')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.9ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Florian Jamain'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Florian Jamain', '2016-10-08 10:25:58', '2016-10-08 10:25:58')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1813, 671, 1, '2016-10-08 10:25:58', '2016-10-08 10:25:58')
  [1m[36m (0.3ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.0ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Abdallah Saffidine'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Abdallah Saffidine', '2016-10-08 10:25:58', '2016-10-08 10:25:58')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1814, 671, 2, '2016-10-08 10:25:58', '2016-10-08 10:25:58')[0m
  [1m[35m (0.3ms)[0m  COMMIT
  [1m[36mPaper Load (1.1ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'On Avoidance Learning with Partial Observability'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('On Avoidance Learning with Partial Observability', 'We study a framework where agents have to avoid aversive signals. The agents are given only partial information, in the form of features that are projections of task states. Additionally, the agents have to cope with non-determinism, defined as unpredictability on the way that actions are executed. The goal of each agent is to define its behavior based on feature-action pairs that reliably avoid aversive signals. We study a learning algorithm, called A-learning, that exhibits fixpoint convergence, where the belief of the allowed feature-action pairs eventually becomes fixed. A-learning is parameter-free and easy to implement.', 'cs.AI', '2016-05-16T09:26:53Z', 'http://arxiv.org/abs/1605.04691v1', '2016-10-08 10:25:58', '2016-10-08 10:25:58')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPublish Load (1.2ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 672[0m
  [1m[35mAuthor Load (1.1ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Tom J. Ameloot'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Tom J. Ameloot', '2016-10-08 10:25:58', '2016-10-08 10:25:58')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1815, 672, 0, '2016-10-08 10:25:58', '2016-10-08 10:25:58')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (0.8ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'High-Performance Computing for Scheduling Decision Support: A Parallel Depth-First Search Heuristic'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('High-Performance Computing for Scheduling Decision Support: A Parallel Depth-First Search Heuristic', 'Many academic disciplines - including information systems, computer science, and operations management - face scheduling problems as important decision making tasks. Since many scheduling problems are NP-hard in the strong sense, there is a need for developing solution heuristics. For scheduling problems with setup times on unrelated parallel machines, there is limited research on solution methods and to the best of our knowledge, parallel computer architectures have not yet been taken advantage of. We address this gap by proposing and implementing a new solution heuristic and by testing different parallelization strategies. In our computational experiments, we show that our heuristic calculates near-optimal solutions even for large instances and that computing time can be reduced substantially by our parallelization approach.', 'cs.DC', '2016-05-16T09:11:08Z', 'http://arxiv.org/abs/1605.04682v1', '2016-10-08 10:25:58', '2016-10-08 10:25:58')[0m
  [1m[35m (2.9ms)[0m  COMMIT
  [1m[36mPublish Load (1.6ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 673[0m
  [1m[35mAuthor Load (1.1ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Gerhard Rauchecker'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.4ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Gerhard Rauchecker', '2016-10-08 10:25:58', '2016-10-08 10:25:58')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1816, 673, 0, '2016-10-08 10:25:58', '2016-10-08 10:25:58')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (1.2ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Guido Schryen'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Guido Schryen', '2016-10-08 10:25:58', '2016-10-08 10:25:58')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1817, 673, 1, '2016-10-08 10:25:58', '2016-10-08 10:25:58')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.8ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'A Critical Examination of RESCAL for Completion of Knowledge Bases with Transitive Relations'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('A Critical Examination of RESCAL for Completion of Knowledge Bases with Transitive Relations', 'Link prediction in large knowledge graphs has received a lot of attention recently because of its importance for inferring missing relations and for completing and improving noisily extracted knowledge graphs. Over the years a number of machine learning researchers have presented various models for predicting the presence of missing relations in a knowledge base. Although all the previous methods are presented with empirical results that show high performance on select datasets, there is almost no previous work on understanding the connection between properties of a knowledge base and the performance of a model. In this paper we analyze the RESCAL method and prove that it can not encode asymmetric transitive relations in knowledge bases.', 'stat.ML', '2016-05-16T07:43:28Z', 'http://arxiv.org/abs/1605.04672v1', '2016-10-08 10:25:58', '2016-10-08 10:25:58')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (1.4ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 674
  [1m[36mAuthor Load (0.9ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Pushpendre Rastogi'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Pushpendre Rastogi', '2016-10-08 10:25:58', '2016-10-08 10:25:58')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1818, 674, 0, '2016-10-08 10:25:58', '2016-10-08 10:25:58')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.0ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Benjamin Van Durme'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Benjamin Van Durme', '2016-10-08 10:25:58', '2016-10-08 10:25:58')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1819, 674, 1, '2016-10-08 10:25:58', '2016-10-08 10:25:58')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (0.8ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Generalized Linear Models for Aggregated Data'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Generalized Linear Models for Aggregated Data', 'Databases in domains such as healthcare are routinely released to the public in aggregated form. Unfortunately, naive modeling with aggregated data may significantly diminish the accuracy of inferences at the individual level. This paper addresses the scenario where features are provided at the individual level, but the target variables are only available as histogram aggregates or order statistics. We consider a limiting case of generalized linear modeling when the target variables are only known up to permutation, and explore how this relates to permutation testing; a standard technique for assessing statistical dependency. Based on this relationship, we propose a simple algorithm to estimate the model parameters and individual level inferences via alternating imputation and standard generalized linear model fitting. Our results suggest the effectiveness of the proposed approach when, in the original data, permutation testing accurately ascertains the veracity of the linear relationship. The framework is extended to general histogram data with larger bins - with order statistics such as the median as a limiting case. Our experimental results on simulated data and aggregated healthcare data suggest a diminishing returns property with respect to the granularity of the histogram - when a linear relationship holds in the original data, the targets can be predicted accurately given relatively coarse histograms.', 'stat.ML', '2016-05-14T21:09:10Z', 'http://arxiv.org/abs/1605.04466v1', '2016-10-08 10:25:58', '2016-10-08 10:25:58')[0m
  [1m[35m (3.0ms)[0m  COMMIT
  [1m[36mPublish Load (1.6ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 675[0m
  [1m[35mAuthor Load (1.5ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Avradeep Bhowmik'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Avradeep Bhowmik', '2016-10-08 10:25:58', '2016-10-08 10:25:58')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1820, 675, 0, '2016-10-08 10:25:58', '2016-10-08 10:25:58')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (1.3ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Joydeep Ghosh'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Joydeep Ghosh', '2016-10-08 10:25:58', '2016-10-08 10:25:58')[0m
  [1m[35m (0.6ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1821, 675, 1, '2016-10-08 10:25:58', '2016-10-08 10:25:58')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.1ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Oluwasanmi Koyejo'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Oluwasanmi Koyejo', '2016-10-08 10:25:58', '2016-10-08 10:25:58')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1822, 675, 2, '2016-10-08 10:25:58', '2016-10-08 10:25:58')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (0.8ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Monotone Retargeting for Unsupervised Rank Aggregation with Object Features'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Monotone Retargeting for Unsupervised Rank Aggregation with Object Features', 'Learning the true ordering between objects by aggregating a set of expert opinion rank order lists is an important and ubiquitous problem in many applications ranging from social choice theory to natural language processing and search aggregation. We study the problem of unsupervised rank aggregation where no ground truth ordering information in available, neither about the true preference ordering between any set of objects nor about the quality of individual rank lists. Aggregating the often inconsistent and poor quality rank lists in such an unsupervised manner is a highly challenging problem, and standard consensus-based methods are often ill-defined, and difficult to solve. In this manuscript we propose a novel framework to bypass these issues by using object attributes to augment the standard rank aggregation framework. We design algorithms that learn joint models on both rank lists and object features to obtain an aggregated rank ordering that is more accurate and robust, and also helps weed out rank lists of dubious validity. We validate our techniques on synthetic datasets where our algorithm is able to estimate the true rank ordering even when the rank lists are corrupted. Experiments on three real datasets, MQ2008, MQ2008 and OHSUMED, show that using object features can result in significant improvement in performance over existing rank aggregation methods that do not use object information. Furthermore, when at least some of the rank lists are of high quality, our methods are able to effectively exploit their high expertise to output an aggregated rank ordering of great accuracy.', 'stat.ML', '2016-05-14T20:35:20Z', 'http://arxiv.org/abs/1605.04465v1', '2016-10-08 10:25:58', '2016-10-08 10:25:58')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPublish Load (1.1ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 676[0m
  [1m[35mAuthor Load (0.9ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Avradeep Bhowmik'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35m (0.1ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1820, 676, 0, '2016-10-08 10:25:58', '2016-10-08 10:25:58')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.3ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Joydeep Ghosh'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35m (0.2ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1821, 676, 1, '2016-10-08 10:25:58', '2016-10-08 10:25:58')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (1.0ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'OBDA Constraints for Effective Query Answering (Extended Version)'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.4ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('OBDA Constraints for Effective Query Answering (Extended Version)', 'In Ontology Based Data Access (OBDA) users pose SPARQL queries over an ontology that lies on top of relational datasources. These queries are translated on-the-fly into SQL queries by OBDA systems. Standard SPARQL-to-SQL translation techniques in OBDA often produce SQL queries containing redundant joins and unions, even after a number of semantic and structural optimizations. These redundancies are detrimental to the performance of query answering, especially in complex industrial OBDA scenarios with large enterprise databases. To address this issue, we introduce two novel notions of OBDA constraints and show how to exploit them for efficient query answering. We conduct an extensive set of experiments on large datasets using real world data and queries, showing that these techniques strongly improve the performance of query answering up to orders of magnitude.', 'cs.DB', '2016-05-13T17:29:28Z', 'http://arxiv.org/abs/1605.04263v2', '2016-10-08 10:25:58', '2016-10-08 10:25:58')
  [1m[36m (3.0ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (1.8ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 677
  [1m[36mAuthor Load (1.2ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Dag Hovland'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Dag Hovland', '2016-10-08 10:25:58', '2016-10-08 10:25:58')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1823, 677, 0, '2016-10-08 10:25:58', '2016-10-08 10:25:58')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.2ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Davide Lanti'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Davide Lanti', '2016-10-08 10:25:58', '2016-10-08 10:25:58')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1824, 677, 1, '2016-10-08 10:25:58', '2016-10-08 10:25:58')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (1.2ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Martin Rezk'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Martin Rezk', '2016-10-08 10:25:58', '2016-10-08 10:25:58')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.4ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1825, 677, 2, '2016-10-08 10:25:58', '2016-10-08 10:25:58')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.1ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Guohui Xiao'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Guohui Xiao', '2016-10-08 10:25:58', '2016-10-08 10:25:58')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1826, 677, 3, '2016-10-08 10:25:58', '2016-10-08 10:25:58')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPaper Load (0.9ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Anytime Inference in Valuation Algebras'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Anytime Inference in Valuation Algebras', 'Anytime inference is inference performed incrementally, with the accuracy of the inference being controlled by a tunable parameter, usually time. Such anytime inference algorithms are also usually interruptible, gradually converging to the exact inference value until terminated. While anytime inference algorithms for specific domains like probability potentials exist in the literature, our objective in this article is to obtain an anytime inference algorithm which is sufficiently generic to cover a wide range of domains. For this we utilise the theory of generic inference as a basis for constructing an anytime inference algorithm, and in particular, extending work done on ordered valuation algebras. The novel contribution of this work is the construction of anytime algorithms in a generic framework, which automatically gives us instantiations in various useful domains. We also show how to apply this generic framework for anytime inference in semiring induced valuation algebras, an important subclass of valuation algebras, which includes instances like probability potentials, disjunctive normal forms and distributive lattices. Keywords: Approximation; Anytime algorithms; Resource-bounded computation; Generic inference; Valuation algebras; Local computation; Binary join trees.', 'cs.AI', '2016-05-13T15:40:10Z', 'http://arxiv.org/abs/1605.04218v1', '2016-10-08 10:25:58', '2016-10-08 10:25:58')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPublish Load (1.4ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 678[0m
  [1m[35mAuthor Load (0.9ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Abhishek Dasgupta'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Abhishek Dasgupta', '2016-10-08 10:25:58', '2016-10-08 10:25:58')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1827, 678, 0, '2016-10-08 10:25:58', '2016-10-08 10:25:58')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (1.2ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Samson Abramsky'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Samson Abramsky', '2016-10-08 10:25:58', '2016-10-08 10:25:58')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1828, 678, 1, '2016-10-08 10:25:58', '2016-10-08 10:25:58')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.9ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Online Optimization Methods for the Quantification Problem'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Online Optimization Methods for the Quantification Problem', 'The estimation of class prevalence, i.e., the fraction of a population that belongs to a certain class, is a very useful tool in data analytics and learning, and finds applications in many domains such as sentiment analysis, epidemiology, etc. For example, in sentiment analysis, the objective is often not to estimate whether a specific text conveys a positive or a negative sentiment, but rather estimate the overall distribution of positive and negative sentiments during an event window. A popular way of performing the above task, often dubbed quantification, is to use supervised learning to train a prevalence estimator from labeled data. Contemporary literature cites several performance measures used to measure the success of such prevalence estimators. In this paper we propose the first online stochastic algorithms for directly optimizing these quantification-specific performance measures. We also provide algorithms that optimize hybrid performance measures that seek to balance quantification and classification performance. Our algorithms present a significant advancement in the theory of multivariate optimization and we show, by a rigorous theoretical analysis, that they exhibit optimal convergence. We also report extensive experiments on benchmark and real data sets which demonstrate that our methods significantly outperform existing optimization techniques used for these performance measures.', 'stat.ML', '2016-05-13T11:14:58Z', 'http://arxiv.org/abs/1605.04135v3', '2016-10-08 10:25:58', '2016-10-08 10:25:58')
  [1m[36m (2.9ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (1.6ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 679
  [1m[36mAuthor Load (1.1ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Purushottam Kar'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Purushottam Kar', '2016-10-08 10:25:58', '2016-10-08 10:25:58')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1829, 679, 0, '2016-10-08 10:25:58', '2016-10-08 10:25:58')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.5ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Shuai Li'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35m (0.2ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (489, 679, 1, '2016-10-08 10:25:58', '2016-10-08 10:25:58')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.1ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Harikrishna Narasimhan'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Harikrishna Narasimhan', '2016-10-08 10:25:58', '2016-10-08 10:25:58')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1830, 679, 2, '2016-10-08 10:25:58', '2016-10-08 10:25:58')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (1.0ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Sanjay Chawla'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Sanjay Chawla', '2016-10-08 10:25:58', '2016-10-08 10:25:58')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1831, 679, 3, '2016-10-08 10:25:58', '2016-10-08 10:25:58')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.0ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Fabrizio Sebastiani'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Fabrizio Sebastiani', '2016-10-08 10:25:58', '2016-10-08 10:25:58')
  [1m[36m (0.3ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1832, 679, 4, '2016-10-08 10:25:58', '2016-10-08 10:25:58')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (0.8ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Natural Language Semantics and Computability'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Natural Language Semantics and Computability', 'This paper is a reflexion on the computability of natural language semantics. It does not contain a new model or new results in the formal semantics of natural language: it is rather a computational analysis of the logical models and algorithms currently used in natural language semantics, defined as the mapping of a statement to logical formulas - formulas, because a statement can be ambiguous. We argue that as long as possible world semantics is left out, one can compute the semantic representation(s) of a given statement, including aspects of lexical meaning. We also discuss the algorithmic complexity of this process.', 'cs.CL', '2016-05-13T10:46:22Z', 'http://arxiv.org/abs/1605.04122v1', '2016-10-08 10:25:58', '2016-10-08 10:25:58')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPublish Load (1.2ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 680[0m
  [1m[35mAuthor Load (1.0ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Richard Moot'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Richard Moot', '2016-10-08 10:25:58', '2016-10-08 10:25:58')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1833, 680, 0, '2016-10-08 10:25:58', '2016-10-08 10:25:58')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.9ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Christian Retoré'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Christian Retoré', '2016-10-08 10:25:58', '2016-10-08 10:25:58')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1834, 680, 1, '2016-10-08 10:25:58', '2016-10-08 10:25:58')
  [1m[36m (0.3ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.8ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Wisdom of Crowds cluster ensemble'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Wisdom of Crowds cluster ensemble', 'The Wisdom of Crowds is a phenomenon described in social science that suggests four criteria applicable to groups of people. It is claimed that, if these criteria are satisfied, then the aggregate decisions made by a group will often be better than those of its individual members. Inspired by this concept, we present a novel feedback framework for the cluster ensemble problem, which we call Wisdom of Crowds Cluster Ensemble (WOCCE). Although many conventional cluster ensemble methods focusing on diversity have recently been proposed, WOCCE analyzes the conditions necessary for a crowd to exhibit this collective wisdom. These include decentralization criteria for generating primary results, independence criteria for the base algorithms, and diversity criteria for the ensemble members. We suggest appropriate procedures for evaluating these measures, and propose a new measure to assess the diversity. We evaluate the performance of WOCCE against some other traditional base algorithms as well as state-of-the-art ensemble methods. The results demonstrate the efficiency of WOCCE\'s aggregate decision-making compared to other algorithms.', 'stat.ML', '2016-05-13T07:50:50Z', 'http://dx.doi.org/10.3233/IDA-150728', '2016-10-08 10:25:58', '2016-10-08 10:25:58')
  [1m[36m (3.0ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (1.6ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 681
  [1m[36mAuthor Load (1.1ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Hosein Alizadeh'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Hosein Alizadeh', '2016-10-08 10:25:58', '2016-10-08 10:25:58')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1835, 681, 0, '2016-10-08 10:25:58', '2016-10-08 10:25:58')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.1ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Muhammad Yousefnezhad'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Muhammad Yousefnezhad', '2016-10-08 10:25:58', '2016-10-08 10:25:58')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1836, 681, 1, '2016-10-08 10:25:58', '2016-10-08 10:25:58')[0m
  [1m[35m (0.3ms)[0m  COMMIT
  [1m[36mAuthor Load (1.0ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Behrouz Minaei Bidgoli'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Behrouz Minaei Bidgoli', '2016-10-08 10:25:58', '2016-10-08 10:25:58')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1837, 681, 2, '2016-10-08 10:25:58', '2016-10-08 10:25:58')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (1.0ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Towards Empathetic Human-Robot Interactions'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.4ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Towards Empathetic Human-Robot Interactions', 'Since the late 1990s when speech companies began providing their customer-service software in the market, people have gotten used to speaking to machines. As people interact more often with voice and gesture controlled machines, they expect the machines to recognize different emotions, and understand other high level communication features such as humor, sarcasm and intention. In order to make such communication possible, the machines need an empathy module in them which can extract emotions from human speech and behavior and can decide the correct response of the robot. Although research on empathetic robots is still in the early stage, we described our approach using signal processing techniques, sentiment analysis and machine learning algorithms to make robots that can \"understand\" human emotion. We propose Zara the Supergirl as a prototype system of empathetic robots. It is a software based virtual android, with an animated cartoon character to present itself on the screen. She will get \"smarter\" and more empathetic through its deep learning algorithms, and by gathering more data and learning from it. In this paper, we present our work so far in the areas of deep learning of emotion and sentiment recognition, as well as humor recognition. We hope to explore the future direction of android development and how it can help improve people\'s lives.', 'cs.CL', '2016-05-13T07:31:50Z', 'http://arxiv.org/abs/1605.04072v1', '2016-10-08 10:25:58', '2016-10-08 10:25:58')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (1.3ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 682
  [1m[36mAuthor Load (0.9ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Pascale Fung'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Pascale Fung', '2016-10-08 10:25:59', '2016-10-08 10:25:59')[0m
  [1m[35m (0.9ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1838, 682, 0, '2016-10-08 10:25:59', '2016-10-08 10:25:59')
  [1m[36m (0.3ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.0ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Dario Bertero'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Dario Bertero', '2016-10-08 10:25:59', '2016-10-08 10:25:59')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1839, 682, 1, '2016-10-08 10:25:59', '2016-10-08 10:25:59')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (1.2ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Yan Wan'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Yan Wan', '2016-10-08 10:25:59', '2016-10-08 10:25:59')[0m
  [1m[35m (3.0ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.4ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1840, 682, 2, '2016-10-08 10:25:59', '2016-10-08 10:25:59')
  [1m[36m (0.6ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.6ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Anik Dey'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Anik Dey', '2016-10-08 10:25:59', '2016-10-08 10:25:59')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1841, 682, 3, '2016-10-08 10:25:59', '2016-10-08 10:25:59')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (1.2ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Ricky Ho Yin Chan'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Ricky Ho Yin Chan', '2016-10-08 10:25:59', '2016-10-08 10:25:59')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1842, 682, 4, '2016-10-08 10:25:59', '2016-10-08 10:25:59')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.0ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Farhad Bin Siddique'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Farhad Bin Siddique', '2016-10-08 10:25:59', '2016-10-08 10:25:59')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1843, 682, 5, '2016-10-08 10:25:59', '2016-10-08 10:25:59')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (1.3ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Yang Yang'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Yang Yang', '2016-10-08 10:25:59', '2016-10-08 10:25:59')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1844, 682, 6, '2016-10-08 10:25:59', '2016-10-08 10:25:59')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.1ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Chien-Sheng Wu'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Chien-Sheng Wu', '2016-10-08 10:25:59', '2016-10-08 10:25:59')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1845, 682, 7, '2016-10-08 10:25:59', '2016-10-08 10:25:59')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (1.0ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Ruixi Lin'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Ruixi Lin', '2016-10-08 10:25:59', '2016-10-08 10:25:59')[0m
  [1m[35m (0.3ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1846, 682, 8, '2016-10-08 10:25:59', '2016-10-08 10:25:59')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.8ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Bayesian Network Structure Learning with Integer Programming: Polytopes, Facets, and Complexity'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Bayesian Network Structure Learning with Integer Programming: Polytopes, Facets, and Complexity', 'The challenging task of learning structures of probabilistic graphical models is an important problem within modern AI research. Recent years have witnessed several major algorithmic advances in structure learning for Bayesian networks---arguably the most central class of graphical models---especially in what is known as the score-based setting. A successful generic approach to optimal Bayesian network structure learning (BNSL), based on integer programming (IP), is implemented in the GOBNILP system. Despite the recent algorithmic advances, current understanding of foundational aspects underlying the IP based approach to BNSL is still somewhat lacking. Understanding fundamental aspects of cutting planes and the related separation problem( is important not only from a purely theoretical perspective, but also since it holds out the promise of further improving the efficiency of state-of-the-art approaches to solving BNSL exactly. In this paper, we make several theoretical contributions towards these goals: (i) we study the computational complexity of the separation problem, proving that the problem is NP-hard; (ii) we formalise and analyse the relationship between three key polytopes underlying the IP-based approach to BNSL; (iii) we study the facets of the three polytopes both from the theoretical and practical perspective, providing, via exhaustive computation, a complete enumeration of facets for low-dimensional family-variable polytopes; and, furthermore, (iv) we establish a tight connection of the BNSL problem to the acyclic subgraph problem.', 'cs.AI', '2016-05-13T07:27:03Z', 'http://arxiv.org/abs/1605.04071v1', '2016-10-08 10:25:59', '2016-10-08 10:25:59')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (1.4ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 683
  [1m[36mAuthor Load (0.9ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'James Cussens'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('James Cussens', '2016-10-08 10:25:59', '2016-10-08 10:25:59')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1847, 683, 0, '2016-10-08 10:25:59', '2016-10-08 10:25:59')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.1ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Matti Järvisalo'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Matti Järvisalo', '2016-10-08 10:25:59', '2016-10-08 10:25:59')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1848, 683, 1, '2016-10-08 10:25:59', '2016-10-08 10:25:59')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (1.4ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Janne H. Korhonen'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Janne H. Korhonen', '2016-10-08 10:25:59', '2016-10-08 10:25:59')[0m
  [1m[35m (4.8ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.4ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1849, 683, 2, '2016-10-08 10:25:59', '2016-10-08 10:25:59')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.8ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Mark Bartlett'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.5ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Mark Bartlett', '2016-10-08 10:25:59', '2016-10-08 10:25:59')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1850, 683, 3, '2016-10-08 10:25:59', '2016-10-08 10:25:59')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPaper Load (0.9ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Causal Discovery for Manufacturing Domains'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Causal Discovery for Manufacturing Domains', 'Yield and quality improvement is of paramount importance to any manufacturing company. One of the ways of improving yield is through discovery of the root causal factors affecting yield. We propose the use of data-driven interpretable causal models to identify key factors affecting yield. We focus on factors that are measured in different stages of production and testing in the manufacturing cycle of a product. We apply causal structure learning techniques on real data collected from this line. Specifically, the goal of this work is to learn interpretable causal models from observational data produced by manufacturing lines. Emphasis has been given to the interpretability of the models to make them actionable in the field of manufacturing. We highlight the challenges presented by assembly line data and propose ways to alleviate them.We also identify unique characteristics of data originating from assembly lines and how to leverage them in order to improve causal discovery. Standard evaluation techniques for causal structure learning shows that the learned causal models seem to closely represent the underlying latent causal relationship between different factors in the production process. These results were also validated by manufacturing domain experts who found them promising. This work demonstrates how data mining and knowledge discovery can be used for root cause analysis in the domain of manufacturing and connected industry.', 'cs.LG', '2016-05-13T06:17:54Z', 'http://arxiv.org/abs/1605.04056v2', '2016-10-08 10:25:59', '2016-10-08 10:25:59')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPublish Load (1.0ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 684[0m
  [1m[35mAuthor Load (1.0ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Katerina Marazopoulou'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Katerina Marazopoulou', '2016-10-08 10:25:59', '2016-10-08 10:25:59')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1851, 684, 0, '2016-10-08 10:25:59', '2016-10-08 10:25:59')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (1.4ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Rumi Ghosh'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Rumi Ghosh', '2016-10-08 10:25:59', '2016-10-08 10:25:59')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1852, 684, 1, '2016-10-08 10:25:59', '2016-10-08 10:25:59')
  [1m[36m (0.3ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.0ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Prasanth Lade'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Prasanth Lade', '2016-10-08 10:25:59', '2016-10-08 10:25:59')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.7ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1853, 684, 2, '2016-10-08 10:25:59', '2016-10-08 10:25:59')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.4ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'David Jensen'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36m (0.1ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (391, 684, 3, '2016-10-08 10:25:59', '2016-10-08 10:25:59')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (1.1ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Cross-Domain Visual Matching via Generalized Similarity Measure and Feature Learning'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.4ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Cross-Domain Visual Matching via Generalized Similarity Measure and Feature Learning', 'Cross-domain visual data matching is one of the fundamental problems in many real-world vision tasks, e.g., matching persons across ID photos and surveillance videos. Conventional approaches to this problem usually involves two steps: i) projecting samples from different domains into a common space, and ii) computing (dis-)similarity in this space based on a certain distance. In this paper, we present a novel pairwise similarity measure that advances existing models by i) expanding traditional linear projections into affine transformations and ii) fusing affine Mahalanobis distance and Cosine similarity by a data-driven combination. Moreover, we unify our similarity measure with feature representation learning via deep convolutional neural networks. Specifically, we incorporate the similarity measure matrix into the deep architecture, enabling an end-to-end way of model optimization. We extensively evaluate our generalized similarity model in several challenging cross-domain matching tasks: person re-identification under different views and face verification over different modalities (i.e., faces from still images and videos, older and younger faces, and sketch and photo portraits). The experimental results demonstrate superior performance of our model over other state-of-the-art methods.', 'cs.CV', '2016-05-13T03:35:14Z', 'http://arxiv.org/abs/1605.04039v1', '2016-10-08 10:25:59', '2016-10-08 10:25:59')[0m
  [1m[35m (3.0ms)[0m  COMMIT
  [1m[36mPublish Load (1.9ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 685[0m
  [1m[35mAuthor Load (1.1ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Liang Lin'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Liang Lin', '2016-10-08 10:25:59', '2016-10-08 10:25:59')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1854, 685, 0, '2016-10-08 10:25:59', '2016-10-08 10:25:59')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (1.0ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Guangrun Wang'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Guangrun Wang', '2016-10-08 10:25:59', '2016-10-08 10:25:59')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1855, 685, 1, '2016-10-08 10:25:59', '2016-10-08 10:25:59')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.3ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Wangmeng Zuo'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Wangmeng Zuo', '2016-10-08 10:25:59', '2016-10-08 10:25:59')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1856, 685, 2, '2016-10-08 10:25:59', '2016-10-08 10:25:59')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.9ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Xiangchu Feng'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Xiangchu Feng', '2016-10-08 10:25:59', '2016-10-08 10:25:59')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1857, 685, 3, '2016-10-08 10:25:59', '2016-10-08 10:25:59')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.1ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Lei Zhang'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Lei Zhang', '2016-10-08 10:25:59', '2016-10-08 10:25:59')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1858, 685, 4, '2016-10-08 10:25:59', '2016-10-08 10:25:59')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPaper Load (1.0ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Heart Rate Variability and Respiration Signal as Diagnostic Tools for Late Onset Sepsis in Neonatal Intensive Care Units'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Heart Rate Variability and Respiration Signal as Diagnostic Tools for Late Onset Sepsis in Neonatal Intensive Care Units', 'Apnea-bradycardia is one of the major clinical early indicators of late-onset sepsis occurring in approximately 7% to 10% of all neonates and in more than 25% of very low birth weight infants in NICU. The objective of this paper was to determine if HRV, respiration and their relationships help to diagnose infection in premature infants via non-invasive ways in NICU. Therefore, we implement Mono-Channel (MC) and Bi-Channel (BC) Analysis in two groups: sepsis (S) vs. non-sepsis (NS). Firstly, we studied RR series not only by linear methods: time domain and frequency domain, but also by non-linear methods: chaos theory and information theory. The results show that alpha Slow, alpha Fast and Sample Entropy are significant parameters to distinguish S from NS. Secondly, the question about the functional coupling of HRV and nasal respiration is addressed. Local linear correlation coefficient r2t,f has been explored, while non-linear regression coefficient h2 was calculated in two directions. It is obvious that r2t,f within the third frequency band (0.2<f<0.4 Hz) and h2 in two directions were complementary approaches to diagnose sepsis. Thirdly, feasibility study is carried out on the candidate parameters selected from MC and BC respectively. We discovered that the proposed test based on optimal fusion of 6 features shows good performance with the largest AUC and a reduced probability of false alarm (PFA).', 'q-bio.QM', '2016-05-12T23:56:31Z', 'http://arxiv.org/abs/1605.05247v1', '2016-10-08 10:25:59', '2016-10-08 10:25:59')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPublish Load (1.0ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 686[0m
  [1m[35mAuthor Load (1.0ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Yuan Wang'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Yuan Wang', '2016-10-08 10:25:59', '2016-10-08 10:25:59')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1859, 686, 0, '2016-10-08 10:25:59', '2016-10-08 10:25:59')[0m
  [1m[35m (2.9ms)[0m  COMMIT
  [1m[36mAuthor Load (1.7ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Guy Carrault'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Guy Carrault', '2016-10-08 10:25:59', '2016-10-08 10:25:59')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1860, 686, 1, '2016-10-08 10:25:59', '2016-10-08 10:25:59')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.4ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Alain Beuchee'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Alain Beuchee', '2016-10-08 10:25:59', '2016-10-08 10:25:59')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1861, 686, 2, '2016-10-08 10:25:59', '2016-10-08 10:25:59')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (1.0ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Nathalie Costet'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Nathalie Costet', '2016-10-08 10:25:59', '2016-10-08 10:25:59')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1862, 686, 3, '2016-10-08 10:25:59', '2016-10-08 10:25:59')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.0ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Huazhong Shu'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Huazhong Shu', '2016-10-08 10:25:59', '2016-10-08 10:25:59')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.4ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1863, 686, 4, '2016-10-08 10:25:59', '2016-10-08 10:25:59')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.9ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Lotfi Senhadji'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Lotfi Senhadji', '2016-10-08 10:25:59', '2016-10-08 10:25:59')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1864, 686, 5, '2016-10-08 10:25:59', '2016-10-08 10:25:59')
  [1m[36m (0.3ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.9ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Gearbox Fault Detection through PSO Exact Wavelet Analysis and SVM Classifier'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Gearbox Fault Detection through PSO Exact Wavelet Analysis and SVM Classifier', 'Time-frequency methods for vibration-based gearbox faults detection have been considered the most efficient method. Among these methods, continuous wavelet transform (CWT) as one of the best time-frequency method has been used for both stationary and transitory signals. Some deficiencies of CWT are problem of overlapping and distortion ofsignals. In this condition, a large amount of redundant information exists so that it may cause false alarm or misinterpretation of the operator. In this paper a modified method called Exact Wavelet Analysis is used to minimize the effects of overlapping and distortion in case of gearbox faults. To implement exact wavelet analysis, Particle Swarm Optimization (PSO) algorithm has been used for this purpose. This method have been implemented for the acceleration signals from 2D acceleration sensor acquired by Advantech PCI-1710 card from a gearbox test setup in Amirkabir University of Technology. Gearbox has been considered in both healthy and chipped tooth gears conditions. Kernelized Support Vector Machine (SVM) with radial basis functions has used the extracted features from exact wavelet analysis for classification. The efficiency of this classifier is then evaluated with the other signals acquired from the setup test. The results show that in comparison of CWT, PSO Exact Wavelet Transform has better ability in feature extraction in price of more computational effort. In addition, PSO exact wavelet has better speed comparing to Genetic Algorithm (GA) exact wavelet in condition of equal population because of factoring mutation and crossover in PSO algorithm. SVM classifier with the extracted features in gearbox shows very good results and its ability has been proved.', 'cs.LG', '2016-05-12T23:29:29Z', 'http://dx.doi.org/10.13140/RG.2.1.4983.3442', '2016-10-08 10:25:59', '2016-10-08 10:25:59')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (1.4ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 687
  [1m[36mAuthor Load (1.1ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Amir Hosein Zamanian'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Amir Hosein Zamanian', '2016-10-08 10:25:59', '2016-10-08 10:25:59')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1865, 687, 0, '2016-10-08 10:25:59', '2016-10-08 10:25:59')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.2ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Abdolreza Ohadi'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Abdolreza Ohadi', '2016-10-08 10:25:59', '2016-10-08 10:25:59')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1866, 687, 1, '2016-10-08 10:25:59', '2016-10-08 10:25:59')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (0.8ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Optimizing human-interpretable dialog management policy using Genetic Algorithm'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Optimizing human-interpretable dialog management policy using Genetic Algorithm', 'Automatic optimization of spoken dialog management policies that are robust to environmental noise has long been the goal for both academia and industry. Approaches based on reinforcement learning have been proved to be effective. However, the numerical representation of dialog policy is human-incomprehensible and difficult for dialog system designers to verify or modify, which limits its practical application. In this paper we propose a novel framework for optimizing dialog policies specified in domain language using genetic algorithm. The human-interpretable representation of policy makes the method suitable for practical employment. We present learning algorithms using user simulation and real human-machine dialogs respectively.Empirical experimental results are given to show the effectiveness of the proposed approach.', 'cs.HC', '2016-05-12T18:03:38Z', 'http://arxiv.org/abs/1605.03915v2', '2016-10-08 10:25:59', '2016-10-08 10:25:59')[0m
  [1m[35m (3.0ms)[0m  COMMIT
  [1m[36mPublish Load (1.4ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 688[0m
  [1m[35mAuthor Load (1.1ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Hang Ren'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Hang Ren', '2016-10-08 10:25:59', '2016-10-08 10:25:59')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1867, 688, 0, '2016-10-08 10:25:59', '2016-10-08 10:25:59')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.9ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Weiqun Xu'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Weiqun Xu', '2016-10-08 10:25:59', '2016-10-08 10:25:59')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1868, 688, 1, '2016-10-08 10:25:59', '2016-10-08 10:25:59')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.1ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Yonghong Yan'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Yonghong Yan', '2016-10-08 10:25:59', '2016-10-08 10:25:59')
  [1m[36m (0.3ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1869, 688, 2, '2016-10-08 10:25:59', '2016-10-08 10:25:59')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (0.8ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Learning Representations for Counterfactual Inference'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Learning Representations for Counterfactual Inference', 'Observational studies are rising in importance due to the widespread accumulation of data in fields such as healthcare, education, employment and ecology. We consider the task of answering counterfactual questions such as, \"Would this patient have lower blood sugar had she received a different medication?\". We propose a new algorithmic framework for counterfactual inference which brings together ideas from domain adaptation and representation learning. In addition to a theoretical justification, we perform an empirical comparison with previous approaches to causal inference from observational data. Our deep learning algorithm significantly outperforms the previous state-of-the-art.', 'stat.ML', '2016-05-12T02:59:40Z', 'http://arxiv.org/abs/1605.03661v2', '2016-10-08 10:25:59', '2016-10-08 10:25:59')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPublish Load (1.2ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 689[0m
  [1m[35mAuthor Load (0.9ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Fredrik D. Johansson'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Fredrik D. Johansson', '2016-10-08 10:25:59', '2016-10-08 10:25:59')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1870, 689, 0, '2016-10-08 10:25:59', '2016-10-08 10:25:59')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (1.0ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Uri Shalit'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36m (0.1ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1303, 689, 1, '2016-10-08 10:25:59', '2016-10-08 10:25:59')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (1.0ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'David Sontag'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36m (0.1ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1305, 689, 2, '2016-10-08 10:25:59', '2016-10-08 10:25:59')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (0.9ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Review of state-of-the-arts in artificial intelligence with application to AI safety problem'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Review of state-of-the-arts in artificial intelligence with application to AI safety problem', 'Here, I review current state-of-the-arts in many areas of AI to estimate when it\'s reasonable to expect human level AI development. Predictions of prominent AI researchers vary broadly from very pessimistic predictions of Andrew Ng to much more moderate predictions of Geoffrey Hinton and optimistic predictions of Shane Legg, DeepMind cofounder. Given huge rate of progress in recent years and this broad range of predictions of AI experts, AI safety questions are also discussed.', 'cs.AI', '2016-05-11T17:49:24Z', 'http://arxiv.org/abs/1605.04232v1', '2016-10-08 10:25:59', '2016-10-08 10:25:59')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPublish Load (1.2ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 690[0m
  [1m[35mAuthor Load (0.9ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Vladimir Shakirov'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Vladimir Shakirov', '2016-10-08 10:25:59', '2016-10-08 10:25:59')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1871, 690, 0, '2016-10-08 10:25:59', '2016-10-08 10:25:59')[0m
  [1m[35m (3.0ms)[0m  COMMIT
  [1m[36mPaper Load (1.6ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Characterizing Quantifier Fuzzification Mechanisms: a behavioral guide for practical applications'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.4ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Characterizing Quantifier Fuzzification Mechanisms: a behavioral guide for practical applications', 'Important advances have been made in the fuzzy quantification field. Nevertheless, some problems remain when we face the decision of selecting the most convenient model for a specific application. In the literature, several desirable adequacy properties have been proposed, but theoretical limits impede quantification models from simultaneously fulfilling every adequacy property that has been defined. Besides, the complexity of model definitions and adequacy properties makes very difficult for real users to understand the particularities of the different models that have been presented. In this work we will present several criteria conceived to help in the process of selecting the most adequate Quantifier Fuzzification Mechanisms for specific practical applications. In addition, some of the best known well-behaved models will be compared against this list of criteria. Based on this analysis, some guidance to choose fuzzy quantification models for practical applications will be provided.', 'cs.AI', '2016-05-11T16:42:37Z', 'http://arxiv.org/abs/1605.03506v1', '2016-10-08 10:25:59', '2016-10-08 10:25:59')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPublish Load (1.4ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 691[0m
  [1m[35mAuthor Load (1.2ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'F. Diaz-Hermida'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.4ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('F. Diaz-Hermida', '2016-10-08 10:25:59', '2016-10-08 10:25:59')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1872, 691, 0, '2016-10-08 10:25:59', '2016-10-08 10:25:59')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.9ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'M. Pereira-Fariña'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('M. Pereira-Fariña', '2016-10-08 10:25:59', '2016-10-08 10:25:59')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1873, 691, 1, '2016-10-08 10:25:59', '2016-10-08 10:25:59')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.0ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Juan C. Vidal'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Juan C. Vidal', '2016-10-08 10:25:59', '2016-10-08 10:25:59')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1874, 691, 2, '2016-10-08 10:25:59', '2016-10-08 10:25:59')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (1.2ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'A. Ramos-Soto'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36m (0.1ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1795, 691, 3, '2016-10-08 10:25:59', '2016-10-08 10:25:59')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPaper Load (0.8ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Deep Neural Networks Under Stress'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Deep Neural Networks Under Stress', 'In recent years, deep architectures have been used for transfer learning with state-of-the-art performance in many datasets. The properties of their features remain, however, largely unstudied under the transfer perspective. In this work, we present an extensive analysis of the resiliency of feature vectors extracted from deep models, with special focus on the trade-off between performance and compression rate. By introducing perturbations to image descriptions extracted from a deep convolutional neural network, we change their precision and number of dimensions, measuring how it affects the final score. We show that deep features are more robust to these disturbances when compared to classical approaches, achieving a compression rate of 98.4%, while losing only 0.88% of their original score for Pascal VOC 2007.', 'cs.CV', '2016-05-11T16:22:23Z', 'http://arxiv.org/abs/1605.03498v2', '2016-10-08 10:25:59', '2016-10-08 10:25:59')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPublish Load (1.2ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 692[0m
  [1m[35mAuthor Load (1.1ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Micael Carvalho'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Micael Carvalho', '2016-10-08 10:25:59', '2016-10-08 10:25:59')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1875, 692, 0, '2016-10-08 10:25:59', '2016-10-08 10:25:59')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (1.2ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Matthieu Cord'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Matthieu Cord', '2016-10-08 10:25:59', '2016-10-08 10:25:59')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1876, 692, 1, '2016-10-08 10:25:59', '2016-10-08 10:25:59')
  [1m[36m (0.3ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.0ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Sandra Avila'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Sandra Avila', '2016-10-08 10:25:59', '2016-10-08 10:25:59')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1877, 692, 2, '2016-10-08 10:25:59', '2016-10-08 10:25:59')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (1.0ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Nicolas Thome'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Nicolas Thome', '2016-10-08 10:25:59', '2016-10-08 10:25:59')[0m
  [1m[35m (2.9ms)[0m  COMMIT
  [1m[36m (0.3ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1878, 692, 3, '2016-10-08 10:25:59', '2016-10-08 10:25:59')
  [1m[36m (1.7ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.6ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Eduardo Valle'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Eduardo Valle', '2016-10-08 10:25:59', '2016-10-08 10:25:59')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1879, 692, 4, '2016-10-08 10:25:59', '2016-10-08 10:25:59')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPaper Load (1.0ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Concept based Attention'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Concept based Attention', 'Attention endows animals an ability to concentrate on the most relevant information among a deluge of distractors at any given time, either through volitionally \'top-down\' biasing, or driven by automatically \'bottom-up\' saliency of stimuli, in favour of advantageous competition in neural modulations for information processing. Nevertheless, instead of being limited to perceive simple features, human and other advanced animals adaptively learn the world into categories and abstract concepts from experiences, imparting the world meanings. This thesis suggests that the high-level cognitive ability of human is more likely driven by attention basing on abstract perceptions, which is defined as concept based attention (CbA).', 'cs.AI', '2016-05-11T12:51:19Z', 'http://arxiv.org/abs/1605.03416v1', '2016-10-08 10:25:59', '2016-10-08 10:25:59')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPublish Load (1.0ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 693[0m
  [1m[35mAuthor Load (1.0ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Jie You'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Jie You', '2016-10-08 10:25:59', '2016-10-08 10:25:59')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1880, 693, 0, '2016-10-08 10:25:59', '2016-10-08 10:25:59')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (1.1ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Xin Yang'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Xin Yang', '2016-10-08 10:25:59', '2016-10-08 10:25:59')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1881, 693, 1, '2016-10-08 10:25:59', '2016-10-08 10:25:59')
  [1m[36m (1.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.3ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Matthias Hub'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Matthias Hub', '2016-10-08 10:25:59', '2016-10-08 10:25:59')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1882, 693, 2, '2016-10-08 10:25:59', '2016-10-08 10:25:59')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (1.0ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Learning Bounded Treewidth Bayesian Networks with Thousands of Variables'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Learning Bounded Treewidth Bayesian Networks with Thousands of Variables', 'We present a method for learning treewidth-bounded Bayesian networks from data sets containing thousands of variables. Bounding the treewidth of a Bayesian greatly reduces the complexity of inferences. Yet, being a global property of the graph, it considerably increases the difficulty of the learning process. We propose a novel algorithm for this task, able to scale to large domains and large treewidths. Our novel approach consistently outperforms the state of the art on data sets with up to ten thousand variables.', 'cs.AI', '2016-05-11T11:54:26Z', 'http://arxiv.org/abs/1605.03392v1', '2016-10-08 10:25:59', '2016-10-08 10:25:59')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPublish Load (1.2ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 694[0m
  [1m[35mAuthor Load (0.9ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Mauro Scanagatta'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Mauro Scanagatta', '2016-10-08 10:25:59', '2016-10-08 10:25:59')
  [1m[36m (0.3ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1883, 694, 0, '2016-10-08 10:25:59', '2016-10-08 10:25:59')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (1.0ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Giorgio Corani'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Giorgio Corani', '2016-10-08 10:25:59', '2016-10-08 10:25:59')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1884, 694, 1, '2016-10-08 10:25:59', '2016-10-08 10:25:59')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.4ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Cassio P. de Campos'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35m (0.2ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (261, 694, 2, '2016-10-08 10:25:59', '2016-10-08 10:25:59')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.3ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Marco Zaffalon'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Marco Zaffalon', '2016-10-08 10:25:59', '2016-10-08 10:25:59')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1885, 694, 3, '2016-10-08 10:25:59', '2016-10-08 10:25:59')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPaper Load (0.8ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'A Hierarchical Emotion Regulated Sensorimotor Model: Case Studies'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('A Hierarchical Emotion Regulated Sensorimotor Model: Case Studies', 'Inspired by the hierarchical cognitive architecture and the perception-action model (PAM), we propose that the internal status acts as a kind of common-coding representation which affects, mediates and even regulates the sensorimotor behaviours. These regulation can be depicted in the Bayesian framework, that is why cognitive agents are able to generate behaviours with subtle differences according to their emotion or recognize the emotion by perception. A novel recurrent neural network called recurrent neural network with parametric bias units (RNNPB) runs in three modes, constructing a two-level emotion regulated learning model, was further applied to testify this theory in two different cases.', 'cs.RO', '2016-05-11T03:22:13Z', 'http://arxiv.org/abs/1605.03269v1', '2016-10-08 10:25:59', '2016-10-08 10:25:59')[0m
  [1m[35m (3.0ms)[0m  COMMIT
  [1m[36mPublish Load (1.7ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 695[0m
  [1m[35mAuthor Load (1.6ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Junpei Zhong'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Junpei Zhong', '2016-10-08 10:25:59', '2016-10-08 10:25:59')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1886, 695, 0, '2016-10-08 10:25:59', '2016-10-08 10:25:59')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (1.1ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Rony Novianto'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Rony Novianto', '2016-10-08 10:25:59', '2016-10-08 10:25:59')[0m
  [1m[35m (1.0ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1887, 695, 1, '2016-10-08 10:25:59', '2016-10-08 10:25:59')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.2ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Mingjun Dai'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Mingjun Dai', '2016-10-08 10:25:59', '2016-10-08 10:25:59')
  [1m[36m (0.3ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1888, 695, 2, '2016-10-08 10:25:59', '2016-10-08 10:25:59')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (1.1ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Xinzheng Zhang'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Xinzheng Zhang', '2016-10-08 10:25:59', '2016-10-08 10:25:59')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1889, 695, 3, '2016-10-08 10:25:59', '2016-10-08 10:25:59')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.1ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Angelo Cangelosi'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Angelo Cangelosi', '2016-10-08 10:25:59', '2016-10-08 10:25:59')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1890, 695, 4, '2016-10-08 10:25:59', '2016-10-08 10:25:59')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (0.8ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Avoiding Wireheading with Value Reinforcement Learning'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Avoiding Wireheading with Value Reinforcement Learning', 'How can we design good goals for arbitrarily intelligent agents? Reinforcement learning (RL) is a natural approach. Unfortunately, RL does not work well for generally intelligent agents, as RL agents are incentivised to shortcut the reward sensor for maximum reward -- the so-called wireheading problem. In this paper we suggest an alternative to RL called value reinforcement learning (VRL). In VRL, agents use the reward signal to learn a utility function. The VRL setup allows us to remove the incentive to wirehead by placing a constraint on the agent\'s actions. The constraint is defined in terms of the agent\'s belief distributions, and does not require an explicit specification of which actions constitute wireheading.', 'cs.AI', '2016-05-10T18:28:57Z', 'http://arxiv.org/abs/1605.03143v1', '2016-10-08 10:25:59', '2016-10-08 10:25:59')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPublish Load (1.1ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 696[0m
  [1m[35mAuthor Load (0.4ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Tom Everitt'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35m (0.1ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (395, 696, 0, '2016-10-08 10:25:59', '2016-10-08 10:25:59')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.5ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Marcus Hutter'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35m (0.2ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (397, 696, 1, '2016-10-08 10:25:59', '2016-10-08 10:25:59')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.8ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Self-Modification of Policy and Utility Function in Rational Agents'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Self-Modification of Policy and Utility Function in Rational Agents', 'Any agent that is part of the environment it interacts with and has versatile actuators (such as arms and fingers), will in principle have the ability to self-modify -- for example by changing its own source code. As we continue to create more and more intelligent agents, chances increase that they will learn about this ability. The question is: will they want to use it? For example, highly intelligent systems may find ways to change their goals to something more easily achievable, thereby `escaping\' the control of their designers. In an important paper, Omohundro (2008) argued that goal preservation is a fundamental drive of any intelligent system, since a goal is more likely to be achieved if future versions of the agent strive towards the same goal. In this paper, we formalise this argument in general reinforcement learning, and explore situations where it fails. Our conclusion is that the self-modification possibility is harmless if and only if the value function of the agent anticipates the consequences of self-modifications and use the current utility function when evaluating the future.', 'cs.AI', '2016-05-10T18:25:49Z', 'http://arxiv.org/abs/1605.03142v1', '2016-10-08 10:25:59', '2016-10-08 10:25:59')
  [1m[36m (3.0ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (1.7ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 697
  [1m[36mAuthor Load (0.5ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Tom Everitt'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36m (0.2ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (395, 697, 0, '2016-10-08 10:25:59', '2016-10-08 10:25:59')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (1.1ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Daniel Filan'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Daniel Filan', '2016-10-08 10:25:59', '2016-10-08 10:25:59')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1891, 697, 1, '2016-10-08 10:25:59', '2016-10-08 10:25:59')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.2ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Mayank Daswani'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Mayank Daswani', '2016-10-08 10:25:59', '2016-10-08 10:25:59')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1892, 697, 2, '2016-10-08 10:25:59', '2016-10-08 10:25:59')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (0.6ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Marcus Hutter'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36m (0.1ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (397, 697, 3, '2016-10-08 10:25:59', '2016-10-08 10:25:59')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (1.0ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Function-Described Graphs for Structural Pattern Recognition'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Function-Described Graphs for Structural Pattern Recognition', 'We present in this article the model Function-described graph (FDG), which is a type of compact representation of a set of attributed graphs (AGs) that borrow from Random Graphs the capability of probabilistic modelling of structural and attribute information. We define the FDGs, their features and two distance measures between AGs (unclassified patterns) and FDGs (models or classes) and we also explain an efficient matching algorithm. Two applications of FDGs are presented: in the former, FDGs are used for modelling and matching 3D-objects described by multiple views, whereas in the latter, they are used for representing and recognising human faces, described also by several views.', 'cs.AI', '2016-05-10T10:30:06Z', 'http://arxiv.org/abs/1605.02929v1', '2016-10-08 10:25:59', '2016-10-08 10:25:59')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPublish Load (1.4ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 698[0m
  [1m[35mAuthor Load (1.0ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Francesc Serratosa'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Francesc Serratosa', '2016-10-08 10:25:59', '2016-10-08 10:25:59')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1893, 698, 0, '2016-10-08 10:25:59', '2016-10-08 10:25:59')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (0.8ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Unethical Research: How to Create a Malevolent Artificial Intelligence'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Unethical Research: How to Create a Malevolent Artificial Intelligence', 'Cybersecurity research involves publishing papers about malicious exploits as much as publishing information on how to design tools to protect cyber-infrastructure. It is this information exchange between ethical hackers and security experts, which results in a well-balanced cyber-ecosystem. In the blooming domain of AI Safety Engineering, hundreds of papers have been published on different proposals geared at the creation of a safe machine, yet nothing, to our knowledge, has been published on how to design a malevolent machine. Availability of such information would be of great value particularly to computer scientists, mathematicians, and others who have an interest in AI safety, and who are attempting to avoid the spontaneous emergence or the deliberate creation of a dangerous AI, which can negatively affect human activities and in the worst case cause the complete obliteration of the human species. This paper provides some general guidelines for the creation of a Malevolent Artificial Intelligence (MAI).', 'cs.AI', '2016-05-10T01:39:38Z', 'http://arxiv.org/abs/1605.02817v2', '2016-10-08 10:25:59', '2016-10-08 10:25:59')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPublish Load (1.0ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 699[0m
  [1m[35mAuthor Load (0.9ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Federico Pistono'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Federico Pistono', '2016-10-08 10:25:59', '2016-10-08 10:25:59')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1894, 699, 0, '2016-10-08 10:25:59', '2016-10-08 10:25:59')[0m
  [1m[35m (2.9ms)[0m  COMMIT
  [1m[36mAuthor Load (0.6ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Roman V. Yampolskiy'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36m (0.2ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.3ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (162, 699, 1, '2016-10-08 10:25:59', '2016-10-08 10:25:59')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPaper Load (1.0ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Ask Your Neurons: A Deep Learning Approach to Visual Question Answering'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Ask Your Neurons: A Deep Learning Approach to Visual Question Answering', 'We address a question answering task on real-world images that is set up as a Visual Turing Test. By combining latest advances in image representation and natural language processing, we propose Ask Your Neurons, a scalable, jointly trained, end-to-end formulation to this problem. In contrast to previous efforts, we are facing a multi-modal problem where the language output (answer) is conditioned on visual and natural language inputs (image and question). We provide additional insights into the problem by analyzing how much information is contained only in the language part for which we provide a new human baseline. To study human consensus, which is related to the ambiguities inherent in this challenging task, we propose two novel metrics and collect additional answers which extend the original DAQUAR dataset to DAQUAR-Consensus. Moreover, we also extend our analysis to VQA, a large-scale question answering about images dataset, where we investigate some particular design choices and show the importance of stronger visual models. At the same time, we achieve strong performance of our model that still uses a global image representation. Finally, based on such analysis, we refine our Ask Your Neurons on DAQUAR, which also leads to a better performance on this challenging task.', 'cs.CV', '2016-05-09T19:04:23Z', 'http://arxiv.org/abs/1605.02697v1', '2016-10-08 10:25:59', '2016-10-08 10:25:59')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPublish Load (1.0ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 700[0m
  [1m[35mAuthor Load (0.5ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Mateusz Malinowski'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35m (0.2ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (449, 700, 0, '2016-10-08 10:25:59', '2016-10-08 10:25:59')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.2ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Marcus Rohrbach'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35m (0.2ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1487, 700, 1, '2016-10-08 10:25:59', '2016-10-08 10:25:59')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.4ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Mario Fritz'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35m (0.1ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (450, 700, 2, '2016-10-08 10:25:59', '2016-10-08 10:25:59')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (1.0ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Building a Large Scale Dataset for Image Emotion Recognition: The Fine Print and The Benchmark'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Building a Large Scale Dataset for Image Emotion Recognition: The Fine Print and The Benchmark', 'Psychological research results have confirmed that people can have different emotional reactions to different visual stimuli. Several papers have been published on the problem of visual emotion analysis. In particular, attempts have been made to analyze and predict people\'s emotional reaction towards images. To this end, different kinds of hand-tuned features are proposed. The results reported on several carefully selected and labeled small image data sets have confirmed the promise of such features. While the recent successes of many computer vision related tasks are due to the adoption of Convolutional Neural Networks (CNNs), visual emotion analysis has not achieved the same level of success. This may be primarily due to the unavailability of confidently labeled and relatively large image data sets for visual emotion analysis. In this work, we introduce a new data set, which started from 3+ million weakly labeled images of different emotions and ended up 30 times as large as the current largest publicly available visual emotion data set. We hope that this data set encourages further research on visual emotion analysis. We also perform extensive benchmarking analyses on this large data set using the state of the art methods including CNNs.', 'cs.AI', '2016-05-09T18:14:52Z', 'http://arxiv.org/abs/1605.02677v1', '2016-10-08 10:25:59', '2016-10-08 10:25:59')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (1.1ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 701
  [1m[36mAuthor Load (1.1ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Quanzeng You'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Quanzeng You', '2016-10-08 10:25:59', '2016-10-08 10:25:59')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1895, 701, 0, '2016-10-08 10:25:59', '2016-10-08 10:25:59')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.0ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Jiebo Luo'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Jiebo Luo', '2016-10-08 10:25:59', '2016-10-08 10:25:59')
  [1m[36m (3.1ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.4ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1896, 701, 1, '2016-10-08 10:25:59', '2016-10-08 10:25:59')[0m
  [1m[35m (0.7ms)[0m  COMMIT
  [1m[36mAuthor Load (1.0ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Hailin Jin'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Hailin Jin', '2016-10-08 10:25:59', '2016-10-08 10:25:59')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1897, 701, 2, '2016-10-08 10:25:59', '2016-10-08 10:25:59')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.0ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Jianchao Yang'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Jianchao Yang', '2016-10-08 10:25:59', '2016-10-08 10:25:59')
  [1m[36m (0.3ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1898, 701, 3, '2016-10-08 10:25:59', '2016-10-08 10:25:59')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (0.9ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'The GPU-based Parallel Ant Colony System'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('The GPU-based Parallel Ant Colony System', 'The Ant Colony System (ACS) is, next to Ant Colony Optimization (ACO) and the MAX-MIN Ant System (MMAS), one of the most efficient metaheuristic algorithms inspired by the behavior of ants. In this article we present three novel parallel versions of the ACS for the graphics processing units (GPUs). To the best of our knowledge, this is the first such work on the ACS which shares many key elements of the ACO and the MMAS, but differences in the process of building solutions and updating the pheromone trails make obtaining an efficient parallel version for the GPUs a difficult task. The proposed parallel versions of the ACS differ mainly in their implementations of the pheromone memory. The first two use the standard pheromone matrix, and the third uses a novel selective pheromone memory. Computational experiments conducted on several Travelling Salesman Problem (TSP) instances of sizes ranging from 198 to 2392 cities showed that the parallel ACS on Nvidia Kepler GK104 GPU (1536 CUDA cores) is able to obtain a speedup up to 24.29x vs the sequential ACS running on a single core of Intel Xeon E5-2670 CPU. The parallel ACS with the selective pheromone memory achieved speedups up to 16.85x, but in most cases the obtained solutions were of significantly better quality than for the sequential ACS.', 'cs.DC', '2016-05-09T17:41:37Z', 'http://dx.doi.org/10.1016/j.jpdc.2016.04.014', '2016-10-08 10:25:59', '2016-10-08 10:25:59')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPublish Load (1.1ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 702[0m
  [1m[35mAuthor Load (1.1ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Rafał Skinderowicz'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Rafał Skinderowicz', '2016-10-08 10:25:59', '2016-10-08 10:25:59')
  [1m[36m (0.3ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1899, 702, 0, '2016-10-08 10:25:59', '2016-10-08 10:25:59')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (0.9ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'A Counterexample to the Forward Recursion in Fuzzy Critical Path Analysis Under Discrete Fuzzy Sets'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.4ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('A Counterexample to the Forward Recursion in Fuzzy Critical Path Analysis Under Discrete Fuzzy Sets', 'Fuzzy logic is an alternate approach for quantifying uncertainty relating to activity duration. The fuzzy version of the backward recursion has been shown to produce results that incorrectly amplify the level of uncertainty. However, the fuzzy version of the forward recursion has been widely proposed as an approach for determining the fuzzy set of critical path lengths. In this paper, the direct application of the extension principle leads to a proposition that must be satisfied in fuzzy critical path analysis. Using a counterexample it is demonstrated that the fuzzy forward recursion when discrete fuzzy sets are used to represent activity durations produces results that are not consistent with the theory presented. The problem is shown to be the application of the fuzzy maximum. Several methods presented in the literature are described and shown to provide results that are consistent with the extension principle.', 'cs.AI', '2016-05-09T13:35:00Z', 'http://arxiv.org/abs/1607.04583v1', '2016-10-08 10:25:59', '2016-10-08 10:25:59')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPublish Load (1.4ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 703[0m
  [1m[35mAuthor Load (1.0ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Matthew J. Liberatore'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Matthew J. Liberatore', '2016-10-08 10:25:59', '2016-10-08 10:25:59')
  [1m[36m (0.3ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1900, 703, 0, '2016-10-08 10:25:59', '2016-10-08 10:25:59')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (0.9ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Machine Learning Techniques with Ontology for Subjective Answer Evaluation'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Machine Learning Techniques with Ontology for Subjective Answer Evaluation', 'Computerized Evaluation of English Essays is performed using Machine learning techniques like Latent Semantic Analysis (LSA), Generalized LSA, Bilingual Evaluation Understudy and Maximum Entropy. Ontology, a concept map of domain knowledge, can enhance the performance of these techniques. Use of Ontology makes the evaluation process holistic as presence of keywords, synonyms, the right word combination and coverage of concepts can be checked. In this paper, the above mentioned techniques are implemented both with and without Ontology and tested on common input data consisting of technical answers of Computer Science. Domain Ontology of Computer Graphics is designed and developed. The software used for implementation includes Java Programming Language and tools such as MATLAB, Prot\\\'eg\\\'e, etc. Ten questions from Computer Graphics with sixty answers for each question are used for testing. The results are analyzed and it is concluded that the results are more accurate with use of Ontology.', 'cs.AI', '2016-05-09T07:14:52Z', 'http://dx.doi.org/10.5121/ijnlc.2016.5201', '2016-10-08 10:25:59', '2016-10-08 10:25:59')[0m
  [1m[35m (2.8ms)[0m  COMMIT
  [1m[36mPublish Load (1.4ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 704[0m
  [1m[35mAuthor Load (1.0ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'M. Syamala Devi'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('M. Syamala Devi', '2016-10-08 10:25:59', '2016-10-08 10:25:59')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1901, 704, 0, '2016-10-08 10:25:59', '2016-10-08 10:25:59')[0m
  [1m[35m (0.6ms)[0m  COMMIT
  [1m[36mAuthor Load (1.7ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Himani Mittal'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.4ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Himani Mittal', '2016-10-08 10:25:59', '2016-10-08 10:25:59')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1902, 704, 1, '2016-10-08 10:25:59', '2016-10-08 10:25:59')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (1.0ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Audio Event Detection using Weakly Labeled Data'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.4ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Audio Event Detection using Weakly Labeled Data', 'Acoustic event detection is essential for content analysis and description of multimedia recordings. The majority of current literature on the topic learns the detectors through fully-supervised techniques employing strongly labeled data. However, the labels available for majority of multimedia data are generally weak and do not provide sufficient detail for such methods to be employed. In this paper we propose a framework for learning acoustic event detectors using only weakly labeled data. We first show that audio event detection using weak labels can be formulated as an Multiple Instance Learning problem. We then suggest two frameworks for solving multiple-instance learning, one based on support vector machines, and the other on neural networks. The proposed methods can help in removing the time consuming and expensive process of manually annotating data to facilitate fully supervised learning. Moreover, it can not only detect events in a recording but can also provide temporal locations of events in the recording. This helps in obtaining a complete description of the recording and is notable since temporal information was never known in the first place in weakly labeled data.', 'cs.SD', '2016-05-09T02:17:12Z', 'http://dx.doi.org/10.1145/2964284.2964310', '2016-10-08 10:25:59', '2016-10-08 10:25:59')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (1.5ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 705
  [1m[36mAuthor Load (1.6ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Anurag Kumar'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Anurag Kumar', '2016-10-08 10:25:59', '2016-10-08 10:25:59')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1903, 705, 0, '2016-10-08 10:25:59', '2016-10-08 10:25:59')
  [1m[36m (0.3ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.0ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Bhiksha Raj'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Bhiksha Raj', '2016-10-08 10:25:59', '2016-10-08 10:25:59')
  [1m[36m (0.3ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1904, 705, 1, '2016-10-08 10:25:59', '2016-10-08 10:25:59')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (0.9ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Asymmetric Move Selection Strategies in Monte-Carlo Tree Search: Minimizing the Simple Regret at Max Nodes'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Asymmetric Move Selection Strategies in Monte-Carlo Tree Search: Minimizing the Simple Regret at Max Nodes', 'The combination of multi-armed bandit (MAB) algorithms with Monte-Carlo tree search (MCTS) has made a significant impact in various research fields. The UCT algorithm, which combines the UCB bandit algorithm with MCTS, is a good example of the success of this combination. The recent breakthrough made by AlphaGo, which incorporates convolutional neural networks with bandit algorithms in MCTS, also highlights the necessity of bandit algorithms in MCTS. However, despite the various investigations carried out on MCTS, nearly all of them still follow the paradigm of treating every node as an independent instance of the MAB problem, and applying the same bandit algorithm and heuristics on every node. As a result, this paradigm may leave some properties of the game tree unexploited. In this work, we propose that max nodes and min nodes have different concerns regarding their value estimation, and different bandit algorithms should be applied accordingly. We develop the Asymmetric-MCTS algorithm, which is an MCTS variant that applies a simple regret algorithm on max nodes, and the UCB algorithm on min nodes. We will demonstrate the performance of the Asymmetric-MCTS algorithm on the game of $9\\times 9$ Go, $9\\times 9$ NoGo, and Othello.', 'cs.AI', '2016-05-08T13:52:41Z', 'http://arxiv.org/abs/1605.02321v1', '2016-10-08 10:25:59', '2016-10-08 10:25:59')[0m
  [1m[35m (2.6ms)[0m  COMMIT
  [1m[36mPublish Load (1.1ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 706[0m
  [1m[35mAuthor Load (0.9ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Yun-Ching Liu'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Yun-Ching Liu', '2016-10-08 10:25:59', '2016-10-08 10:25:59')
  [1m[36m (0.3ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1905, 706, 0, '2016-10-08 10:25:59', '2016-10-08 10:25:59')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.7ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Yoshimasa Tsuruoka'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36m (0.1ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (975, 706, 1, '2016-10-08 10:25:59', '2016-10-08 10:25:59')[0m
  [1m[35m (0.3ms)[0m  COMMIT
  [1m[36mPaper Load (0.9ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Belief Merging by Source Reliability Assessment'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Belief Merging by Source Reliability Assessment', 'Merging beliefs requires the plausibility of the sources of the information to be merged. They are typically assumed equally reliable in lack of hints indicating otherwise; yet, a recent line of research spun from the idea of deriving this information from the revision process itself. In particular, the history of previous revisions and previous merging examples provide information for performing subsequent mergings. Yet, no examples or previous revisions may be available. In spite of the apparent lack of information, something can still be inferred by a try-and-check approach: a relative reliability ordering is assumed, the merging process is performed based on it, and the result is compared with the original information. The outcome of this check may be incoherent with the initial assumption, like when a completely reliable source is rejected some of the information it provided. In such cases, the reliability ordering assumed in the first place can be excluded from consideration. The first theorem of this article proves that such a scenario is indeed possible. Other results are obtained under various definition of reliability and merging.', 'cs.AI', '2016-05-07T09:09:08Z', 'http://arxiv.org/abs/1605.02160v1', '2016-10-08 10:25:59', '2016-10-08 10:25:59')[0m
  [1m[35m (0.3ms)[0m  COMMIT
  [1m[36mPublish Load (1.1ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 707[0m
  [1m[35mAuthor Load (1.5ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Paolo Liberatore'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Paolo Liberatore', '2016-10-08 10:25:59', '2016-10-08 10:25:59')
  [1m[36m (0.3ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1906, 707, 0, '2016-10-08 10:25:59', '2016-10-08 10:25:59')[0m
  [1m[35m (0.3ms)[0m  COMMIT
  [1m[36mPaper Load (0.9ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Robust Dialog State Tracking for Large Ontologies'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Robust Dialog State Tracking for Large Ontologies', 'The Dialog State Tracking Challenge 4 (DSTC 4) differentiates itself from the previous three editions as follows: the number of slot-value pairs present in the ontology is much larger, no spoken language understanding output is given, and utterances are labeled at the subdialog level. This paper describes a novel dialog state tracking method designed to work robustly under these conditions, using elaborate string matching, coreference resolution tailored for dialogs and a few other improvements. The method can correctly identify many values that are not explicitly present in the utterance. On the final evaluation, our method came in first among 7 competing teams and 24 entries. The F1-score achieved by our method was 9 and 7 percentage points higher than that of the runner-up for the utterance-level evaluation and for the subdialog-level evaluation, respectively.', 'cs.CL', '2016-05-07T02:00:30Z', 'http://arxiv.org/abs/1605.02130v1', '2016-10-08 10:25:59', '2016-10-08 10:25:59')[0m
  [1m[35m (2.8ms)[0m  COMMIT
  [1m[36mPublish Load (1.0ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 708[0m
  [1m[35mAuthor Load (0.8ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Franck Dernoncourt'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.7ms)[0m  [1mBEGIN[0m
  [1m[35m (0.1ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (848, 708, 0, '2016-10-08 10:25:59', '2016-10-08 10:25:59')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.4ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Ji Young Lee'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35m (0.2ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1340, 708, 1, '2016-10-08 10:25:59', '2016-10-08 10:25:59')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.9ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Trung H. Bui'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Trung H. Bui', '2016-10-08 10:25:59', '2016-10-08 10:25:59')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1907, 708, 2, '2016-10-08 10:25:59', '2016-10-08 10:25:59')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (1.0ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Hung H. Bui'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Hung H. Bui', '2016-10-08 10:25:59', '2016-10-08 10:25:59')[0m
  [1m[35m (0.3ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1908, 708, 3, '2016-10-08 10:25:59', '2016-10-08 10:25:59')
  [1m[36m (0.3ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.9ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Adobe-MIT submission to the DSTC 4 Spoken Language Understanding pilot task'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Adobe-MIT submission to the DSTC 4 Spoken Language Understanding pilot task', 'The Dialog State Tracking Challenge 4 (DSTC 4) proposes several pilot tasks. In this paper, we focus on the spoken language understanding pilot task, which consists of tagging a given utterance with speech acts and semantic slots. We compare different classifiers: the best system obtains 0.52 and 0.67 F1-scores on the test set for speech act recognition for the tourist and the guide respectively, and 0.52 F1-score for semantic tagging for both the guide and the tourist.', 'cs.CL', '2016-05-07T01:55:51Z', 'http://arxiv.org/abs/1605.02129v1', '2016-10-08 10:25:59', '2016-10-08 10:25:59')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (1.0ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 709
  [1m[36mAuthor Load (0.5ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Franck Dernoncourt'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36m (0.1ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (848, 709, 0, '2016-10-08 10:25:59', '2016-10-08 10:25:59')[0m
  [1m[35m (0.3ms)[0m  COMMIT
  [1m[36mAuthor Load (0.8ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Ji Young Lee'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36m (0.1ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1340, 709, 1, '2016-10-08 10:25:59', '2016-10-08 10:25:59')[0m
  [1m[35m (0.3ms)[0m  COMMIT
  [1m[36mAuthor Load (1.0ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Trung H. Bui'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36m (0.1ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1907, 709, 2, '2016-10-08 10:25:59', '2016-10-08 10:25:59')[0m
  [1m[35m (0.3ms)[0m  COMMIT
  [1m[36mAuthor Load (0.9ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Hung H. Bui'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36m (0.1ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1908, 709, 3, '2016-10-08 10:25:59', '2016-10-08 10:25:59')[0m
  [1m[35m (0.3ms)[0m  COMMIT
  [1m[36mPaper Load (1.0ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'ViZDoom: A Doom-based AI Research Platform for Visual Reinforcement Learning'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('ViZDoom: A Doom-based AI Research Platform for Visual Reinforcement Learning', 'The recent advances in deep neural networks have led to effective vision-based reinforcement learning methods that have been employed to obtain human-level controllers in Atari 2600 games from pixel data. Atari 2600 games, however, do not resemble real-world tasks since they involve non-realistic 2D environments and the third-person perspective. Here, we propose a novel test-bed platform for reinforcement learning research from raw visual information which employs the first-person perspective in a semi-realistic 3D world. The software, called ViZDoom, is based on the classical first-person shooter video game, Doom. It allows developing bots that play the game using the screen buffer. ViZDoom is lightweight, fast, and highly customizable via a convenient mechanism of user scenarios. In the experimental part, we test the environment by trying to learn bots for two scenarios: a basic move-and-shoot task and a more complex maze-navigation problem. Using convolutional deep neural networks with Q-learning and experience replay, for both scenarios, we were able to train competent bots, which exhibit human-like behaviors. The results confirm the utility of ViZDoom as an AI research platform and imply that visual reinforcement learning in 3D realistic first-person perspective environments is feasible.', 'cs.LG', '2016-05-06T20:46:34Z', 'http://arxiv.org/abs/1605.02097v1', '2016-10-08 10:25:59', '2016-10-08 10:25:59')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPublish Load (1.0ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 710[0m
  [1m[35mAuthor Load (0.9ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Michał Kempka'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Michał Kempka', '2016-10-08 10:25:59', '2016-10-08 10:25:59')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1909, 710, 0, '2016-10-08 10:25:59', '2016-10-08 10:25:59')[0m
  [1m[35m (2.7ms)[0m  COMMIT
  [1m[36mAuthor Load (1.1ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Marek Wydmuch'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Marek Wydmuch', '2016-10-08 10:25:59', '2016-10-08 10:25:59')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1910, 710, 1, '2016-10-08 10:25:59', '2016-10-08 10:25:59')
  [1m[36m (0.3ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.9ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Grzegorz Runc'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Grzegorz Runc', '2016-10-08 10:25:59', '2016-10-08 10:25:59')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1911, 710, 2, '2016-10-08 10:25:59', '2016-10-08 10:25:59')[0m
  [1m[35m (0.3ms)[0m  COMMIT
  [1m[36mAuthor Load (1.1ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Jakub Toczek'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.4ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Jakub Toczek', '2016-10-08 10:25:59', '2016-10-08 10:25:59')[0m
  [1m[35m (0.3ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1912, 710, 3, '2016-10-08 10:25:59', '2016-10-08 10:25:59')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.2ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Wojciech Jaśkowski'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.7ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Wojciech Jaśkowski', '2016-10-08 10:25:59', '2016-10-08 10:25:59')
  [1m[36m (0.6ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1913, 710, 4, '2016-10-08 10:25:59', '2016-10-08 10:25:59')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (0.9ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'The Actias system: supervised multi-strategy learning paradigm using categorical logic'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('The Actias system: supervised multi-strategy learning paradigm using categorical logic', 'One of the most difficult problems in the development of intelligent systems is the construction of the underlying knowledge base. As a consequence, the rate of progress in the development of this type of system is directly related to the speed with which knowledge bases can be assembled, and on its quality. We attempt to solve the knowledge acquisition problem, for a Business Information System, developing a supervised multistrategy learning paradigm. This paradigm is centred on a collaborative data mining strategy, where groups of experts collaborate using data-mining process on the supervised acquisition of new knowledge extracted from heterogeneous machine learning data models. The Actias system is our approach to this paradigm. It is the result of applying the graphic logic based language of sketches to knowledge integration. The system is a data mining collaborative workplace, where the Information System knowledge base is an algebraic structure. It results from the integration of background knowledge with new insights extracted from data models, generated for specific data modelling tasks, and represented as rules using the sketches language.', 'cs.DB', '2016-05-06T20:04:40Z', 'http://arxiv.org/abs/1607.08098v1', '2016-10-08 10:25:59', '2016-10-08 10:25:59')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPublish Load (1.0ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 711[0m
  [1m[35mAuthor Load (0.9ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Carlos Leandro'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Carlos Leandro', '2016-10-08 10:25:59', '2016-10-08 10:25:59')
  [1m[36m (0.9ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1914, 711, 0, '2016-10-08 10:25:59', '2016-10-08 10:25:59')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.9ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Helder Pita'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Helder Pita', '2016-10-08 10:25:59', '2016-10-08 10:25:59')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1915, 711, 1, '2016-10-08 10:25:59', '2016-10-08 10:25:59')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.0ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Luís Monteiro'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Luís Monteiro', '2016-10-08 10:25:59', '2016-10-08 10:25:59')
  [1m[36m (0.3ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1916, 711, 2, '2016-10-08 10:25:59', '2016-10-08 10:25:59')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (1.1ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Low-Complexity Stochastic Generalized Belief Propagation'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Low-Complexity Stochastic Generalized Belief Propagation', 'The generalized belief propagation (GBP), introduced by Yedidia et al., is an extension of the belief propagation (BP) algorithm, which is widely used in different problems involved in calculating exact or approximate marginals of probability distributions. In many problems, it has been observed that the accuracy of GBP considerably outperforms that of BP. However, because in general the computational complexity of GBP is higher than BP, its application is limited in practice. In this paper, we introduce a stochastic version of GBP called stochastic generalized belief propagation (SGBP) that can be considered as an extension to the stochastic BP (SBP) algorithm introduced by Noorshams et al. They have shown that SBP reduces the complexity per iteration of BP by an order of magnitude in alphabet size. In contrast to SBP, SGBP can reduce the computation complexity if certain topological conditions are met by the region graph associated to a graphical model. However, this reduction can be larger than only one order of magnitude in alphabet size. In this paper, we characterize these conditions and the amount of computation gain that we can obtain by using SGBP. Finally, using similar proof techniques employed by Noorshams et al., for general graphical models satisfy contraction conditions, we prove the asymptotic convergence of SGBP to the unique GBP fixed point, as well as providing non-asymptotic upper bounds on the mean square error and on the high probability error.', 'cs.LG', '2016-05-06T19:17:33Z', 'http://arxiv.org/abs/1605.02046v1', '2016-10-08 10:25:59', '2016-10-08 10:25:59')[0m
  [1m[35m (2.8ms)[0m  COMMIT
  [1m[36mPublish Load (1.0ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 712[0m
  [1m[35mAuthor Load (0.9ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Farzin Haddadpour'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Farzin Haddadpour', '2016-10-08 10:25:59', '2016-10-08 10:25:59')
  [1m[36m (0.3ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1917, 712, 0, '2016-10-08 10:25:59', '2016-10-08 10:25:59')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (1.2ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Mahdi Jafari Siavoshani'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Mahdi Jafari Siavoshani', '2016-10-08 10:25:59', '2016-10-08 10:25:59')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1918, 712, 1, '2016-10-08 10:25:59', '2016-10-08 10:25:59')
  [1m[36m (0.3ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.2ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Morteza Noshad'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Morteza Noshad', '2016-10-08 10:25:59', '2016-10-08 10:25:59')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1919, 712, 2, '2016-10-08 10:25:59', '2016-10-08 10:25:59')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (0.9ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Multi-component approach to the bipartite Boolean quadratic programming problem'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Multi-component approach to the bipartite Boolean quadratic programming problem', 'We study the Bipartite Boolean Quadratic Programming Problem (BBQP) which is an extension of the well known Boolean Quadratic Programming Problem (BQP). Applications of the BBQP include mining discrete patterns from binary data, approximating matrices by rank-one binary matrices, computing the cut-norm of a matrix, and solving optimisation problems such as maximum weight biclique, bipartite maximum weight cut, maximum weight induced sub-graph of a bipartite graph, etc. For the BBQP, we first present several algorithmic components, specifically, hillclimbers and mutations, and then show how to combine them in a high-performance metaheuristic. Instead of hand-tuning a standard metaheuristic to test the efficiency of the hybrid of the components, we chose to use an automated generation of a multi-component metaheuristic to save human time, and also improve objectivity in the analysis and comparisons of components. For this we designed a new metaheuristic schema which we call Conditional Markov Chain Search (CMCS). We show that CMCS is flexible enough to model several standard metaheuristics; this flexibility is controlled by multiple numeric parameters, and so is convenient for automated generation. We study the configurations revealed by our approach and show that the best of them outperforms the previous state-of-the-art BBQP algorithm by several orders of magnitude. In our experiments we use benchmark instances introduced in the preliminary version of this paper and described here, which have already become the de facto standard in the BBQP literature.', 'cs.DS', '2016-05-06T19:06:56Z', 'http://arxiv.org/abs/1605.02038v1', '2016-10-08 10:25:59', '2016-10-08 10:25:59')[0m
  [1m[35m (0.3ms)[0m  COMMIT
  [1m[36mPublish Load (1.3ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 713[0m
  [1m[35mAuthor Load (1.5ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Daniel Karapetyan'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Daniel Karapetyan', '2016-10-08 10:25:59', '2016-10-08 10:25:59')
  [1m[36m (0.3ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1920, 713, 0, '2016-10-08 10:25:59', '2016-10-08 10:25:59')[0m
  [1m[35m (0.3ms)[0m  COMMIT
  [1m[36mAuthor Load (1.0ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Abraham P. Punnen'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Abraham P. Punnen', '2016-10-08 10:25:59', '2016-10-08 10:25:59')[0m
  [1m[35m (5.3ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (1.4ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1921, 713, 1, '2016-10-08 10:26:00', '2016-10-08 10:26:00')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.9ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Andrew J. Parkes'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Andrew J. Parkes', '2016-10-08 10:26:00', '2016-10-08 10:26:00')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1922, 713, 2, '2016-10-08 10:26:00', '2016-10-08 10:26:00')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPaper Load (1.2ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Beyond knowing that: a new generation of epistemic logics'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.4ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Beyond knowing that: a new generation of epistemic logics', 'Epistemic logic has become a major field of philosophical logic ever since the groundbreaking work by Hintikka (1962). Despite its various successful applications in theoretical computer science, AI, and game theory, the technical development of the field has been mainly focusing on the propositional part, i.e., the propositional modal logics of \"knowing that\". However, knowledge is expressed in everyday life by using various other locutions such as \"knowing whether\", \"knowing what\", \"knowing how\" and so on (knowing-wh hereafter). Such knowledge expressions are better captured in quantified epistemic logic, as was already discussed by Hintikka (1962) and his sequel works at length. This paper aims to draw the attention back again to such a fascinating but largely neglected topic. We first survey what Hintikka and others did in the literature of quantified epistemic logic, and then advocate a new quantifier-free approach to study the epistemic logics of knowing-wh, which we believe can balance expressivity and complexity, and capture the essential reasoning patterns about knowing-wh. We survey our recent line of work on the epistemic logics of \"knowing whether\", \"knowing what\" and \"knowing how\" to demonstrate the use of this new approach.', 'cs.AI', '2016-05-06T16:24:03Z', 'http://arxiv.org/abs/1605.01995v2', '2016-10-08 10:26:00', '2016-10-08 10:26:00')[0m
  [1m[35m (0.6ms)[0m  COMMIT
  [1m[36mPublish Load (1.6ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 714[0m
  [1m[35mAuthor Load (0.7ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Yanjing Wang'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35m (0.1ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1059, 714, 0, '2016-10-08 10:26:00', '2016-10-08 10:26:00')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (2.1ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Energy Disaggregation for Real-Time Building Flexibility Detection'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Energy Disaggregation for Real-Time Building Flexibility Detection', 'Energy is a limited resource which has to be managed wisely, taking into account both supply-demand matching and capacity constraints in the distribution grid. One aspect of the smart energy management at the building level is given by the problem of real-time detection of flexible demand available. In this paper we propose the use of energy disaggregation techniques to perform this task. Firstly, we investigate the use of existing classification methods to perform energy disaggregation. A comparison is performed between four classifiers, namely Naive Bayes, k-Nearest Neighbors, Support Vector Machine and AdaBoost. Secondly, we propose the use of Restricted Boltzmann Machine to automatically perform feature extraction. The extracted features are then used as inputs to the four classifiers and consequently shown to improve their accuracy. The efficiency of our approach is demonstrated on a real database consisting of detailed appliance-level measurements with high temporal resolution, which has been used for energy disaggregation in previous studies, namely the REDD. The results show robustness and good generalization capabilities to newly presented buildings with at least 96% accuracy.', 'stat.ML', '2016-05-06T13:52:45Z', 'http://arxiv.org/abs/1605.01939v1', '2016-10-08 10:26:00', '2016-10-08 10:26:00')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (1.1ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 715
  [1m[36mAuthor Load (1.1ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Elena Mocanu'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Elena Mocanu', '2016-10-08 10:26:00', '2016-10-08 10:26:00')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1923, 715, 0, '2016-10-08 10:26:00', '2016-10-08 10:26:00')
  [1m[36m (0.3ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.0ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Phuong H. Nguyen'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Phuong H. Nguyen', '2016-10-08 10:26:00', '2016-10-08 10:26:00')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1924, 715, 1, '2016-10-08 10:26:00', '2016-10-08 10:26:00')[0m
  [1m[35m (3.1ms)[0m  COMMIT
  [1m[36mAuthor Load (1.2ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Madeleine Gibescu'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Madeleine Gibescu', '2016-10-08 10:26:00', '2016-10-08 10:26:00')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1925, 715, 2, '2016-10-08 10:26:00', '2016-10-08 10:26:00')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (2.0ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'The KB paradigm and its application to interactive configuration'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('The KB paradigm and its application to interactive configuration', 'The knowledge base paradigm aims to express domain knowledge in a rich formal language, and to use this domain knowledge as a knowledge base to solve various problems and tasks that arise in the domain by applying multiple forms of inference. As such, the paradigm applies a strict separation of concerns between information and problem solving. In this paper, we analyze the principles and feasibility of the knowledge base paradigm in the context of an important class of applications: interactive configuration problems. In interactive configuration problems, a configuration of interrelated objects under constraints is searched, where the system assists the user in reaching an intended configuration. It is widely recognized in industry that good software solutions for these problems are very difficult to develop. We investigate such problems from the perspective of the KB paradigm. We show that multiple functionalities in this domain can be achieved by applying different forms of logical inferences on a formal specification of the configuration domain. We report on a proof of concept of this approach in a real-life application with a banking company. To appear in Theory and Practice of Logic Programming (TPLP).', 'cs.AI', '2016-05-06T07:39:19Z', 'http://dx.doi.org/10.1017/S1471068416000156', '2016-10-08 10:26:00', '2016-10-08 10:26:00')
  [1m[36m (0.3ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (1.1ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 716
  [1m[36mAuthor Load (0.9ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Pieter Van Hertum'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Pieter Van Hertum', '2016-10-08 10:26:00', '2016-10-08 10:26:00')[0m
  [1m[35m (0.3ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1926, 716, 0, '2016-10-08 10:26:00', '2016-10-08 10:26:00')
  [1m[36m (0.3ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.9ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Ingmar Dasseville'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Ingmar Dasseville', '2016-10-08 10:26:00', '2016-10-08 10:26:00')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1927, 716, 1, '2016-10-08 10:26:00', '2016-10-08 10:26:00')[0m
  [1m[35m (0.3ms)[0m  COMMIT
  [1m[36mAuthor Load (0.3ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Gerda Janssens'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36m (0.1ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (192, 716, 2, '2016-10-08 10:26:00', '2016-10-08 10:26:00')[0m
  [1m[35m (0.3ms)[0m  COMMIT
  [1m[36mAuthor Load (0.4ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Marc Denecker'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36m (0.1ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (354, 716, 3, '2016-10-08 10:26:00', '2016-10-08 10:26:00')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (0.9ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Combinatorial Aspects of the Distribution of Rough Objects'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Combinatorial Aspects of the Distribution of Rough Objects', 'The inverse problem of general rough sets, considered by the present author in some of her earlier papers, in one of its manifestations is essentially the question of when an agent\'s view about crisp and non crisp objects over a set of objects has a rough evolution. In this research the nature of the problem is examined from number-theoretic and combinatorial perspectives under very few assumptions about the nature of data and some necessary conditions are proved.', 'cs.AI', '2016-05-05T22:20:00Z', 'http://arxiv.org/abs/1605.01778v1', '2016-10-08 10:26:00', '2016-10-08 10:26:00')[0m
  [1m[35m (0.3ms)[0m  COMMIT
  [1m[36mPublish Load (1.0ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 717[0m
  [1m[35mAuthor Load (0.9ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'A. Mani'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('A. Mani', '2016-10-08 10:26:00', '2016-10-08 10:26:00')
  [1m[36m (0.3ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1928, 717, 0, '2016-10-08 10:26:00', '2016-10-08 10:26:00')[0m
  [1m[35m (0.3ms)[0m  COMMIT
  [1m[36mPaper Load (1.0ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'A note on adjusting $R^2$ for using with cross-validation'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('A note on adjusting $R^2$ for using with cross-validation', 'We show how to adjust the coefficient of determination ($R^2$) when used for measuring predictive accuracy via leave-one-out cross-validation.', 'cs.LG', '2016-05-05T19:34:08Z', 'http://arxiv.org/abs/1605.01703v1', '2016-10-08 10:26:00', '2016-10-08 10:26:00')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPublish Load (1.0ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 718[0m
  [1m[35mAuthor Load (0.9ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Indre Zliobaite'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Indre Zliobaite', '2016-10-08 10:26:00', '2016-10-08 10:26:00')
  [1m[36m (2.7ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1929, 718, 0, '2016-10-08 10:26:00', '2016-10-08 10:26:00')[0m
  [1m[35m (0.3ms)[0m  COMMIT
  [1m[36mAuthor Load (1.0ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Nikolaj Tatti'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Nikolaj Tatti', '2016-10-08 10:26:00', '2016-10-08 10:26:00')[0m
  [1m[35m (0.3ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1930, 718, 1, '2016-10-08 10:26:00', '2016-10-08 10:26:00')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.9ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Brain Emotional Learning-Based Prediction Model (For Long-Term Chaotic Prediction Applications)'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Brain Emotional Learning-Based Prediction Model (For Long-Term Chaotic Prediction Applications)', 'This study suggests a new prediction model for chaotic time series inspired by the brain emotional learning of mammals. We describe the structure and function of this model, which is referred to as BELPM (Brain Emotional Learning-Based Prediction Model). Structurally, the model mimics the connection between the regions of the limbic system, and functionally it uses weighted k nearest neighbors to imitate the roles of those regions. The learning algorithm of BELPM is defined using steepest descent (SD) and the least square estimator (LSE). Two benchmark chaotic time series, Lorenz and Henon, have been used to evaluate the performance of BELPM. The obtained results have been compared with those of other prediction methods. The results show that BELPM has the capability to achieve a reasonable accuracy for long-term prediction of chaotic time series, using a limited amount of training data and a reasonably low computational time.', 'cs.AI', '2016-05-05T18:29:56Z', 'http://arxiv.org/abs/1605.01681v1', '2016-10-08 10:26:00', '2016-10-08 10:26:00')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (1.3ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 719
  [1m[36mAuthor Load (1.0ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Mahboobeh Parsapoor'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Mahboobeh Parsapoor', '2016-10-08 10:26:00', '2016-10-08 10:26:00')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1931, 719, 0, '2016-10-08 10:26:00', '2016-10-08 10:26:00')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (1.3ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'LSTM-based Mixture-of-Experts for Knowledge-Aware Dialogues'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('LSTM-based Mixture-of-Experts for Knowledge-Aware Dialogues', 'We introduce an LSTM-based method for dynamically integrating several word-prediction experts to obtain a conditional language model which can be good simultaneously at several subtasks. We illustrate this general approach with an application to dialogue where we integrate a neural chat model, good at conversational aspects, with a neural question-answering model, good at retrieving precise information from a knowledge-base, and show how the integration combines the strengths of the independent components. We hope that this focused contribution will attract attention on the benefits of using such mixtures of experts in NLP.', 'cs.AI', '2016-05-05T17:00:44Z', 'http://arxiv.org/abs/1605.01652v1', '2016-10-08 10:26:00', '2016-10-08 10:26:00')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (1.3ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 720
  [1m[36mAuthor Load (0.9ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Phong Le'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Phong Le', '2016-10-08 10:26:00', '2016-10-08 10:26:00')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1932, 720, 0, '2016-10-08 10:26:00', '2016-10-08 10:26:00')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.7ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Marc Dymetman'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35m (0.2ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (860, 720, 1, '2016-10-08 10:26:00', '2016-10-08 10:26:00')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.2ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Jean-Michel Renders'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Jean-Michel Renders', '2016-10-08 10:26:00', '2016-10-08 10:26:00')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1933, 720, 2, '2016-10-08 10:26:00', '2016-10-08 10:26:00')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPaper Load (1.0ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Improving abcdSAT by At-Least-One Recently Used Clause Management Strategy'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Improving abcdSAT by At-Least-One Recently Used Clause Management Strategy', 'We improve further the 2015 version of abcdSAT by various heuristics such as at-least-one recently used strategy, learnt clause database approximation reduction etc. Based on the requirement of different tracks at the SAT Competition 2016, we develop three versions of abcdSAT: drup, inc and lim, which participate in the competition of main (agile), incremental library and no-limit track, respectively.', 'cs.LO', '2016-05-05T15:20:33Z', 'http://arxiv.org/abs/1605.01622v1', '2016-10-08 10:26:00', '2016-10-08 10:26:00')[0m
  [1m[35m (3.0ms)[0m  COMMIT
  [1m[36mPublish Load (1.5ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 721[0m
  [1m[35mAuthor Load (1.3ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Jingchao Chen'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Jingchao Chen', '2016-10-08 10:26:00', '2016-10-08 10:26:00')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.4ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1934, 721, 0, '2016-10-08 10:26:00', '2016-10-08 10:26:00')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPaper Load (0.9ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'ODE - Augmented Training Improves Anomaly Detection in Sensor Data from Machines'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('ODE - Augmented Training Improves Anomaly Detection in Sensor Data from Machines', 'Machines of all kinds from vehicles to industrial equipment are increasingly instrumented with hundreds of sensors. Using such data to detect anomalous behaviour is critical for safety and efficient maintenance. However, anomalies occur rarely and with great variety in such systems, so there is often insufficient anomalous data to build reliable detectors. A standard approach to mitigate this problem is to use one class methods relying only on data from normal behaviour. Unfortunately, even these approaches are more likely to fail in the scenario of a dynamical system with manual control input(s). Normal behaviour in response to novel control input(s) might look very different to the learned detector which may be incorrectly detected as anomalous. In this paper, we address this issue by modelling time-series via Ordinary Differential Equations (ODE) and utilising such an ODE model to simulate the behaviour of dynamical systems under varying control inputs. The available data is then augmented with data generated from the ODE, and the anomaly detector is retrained on this augmented dataset. Experiments demonstrate that ODE-augmented training data allows better coverage of possible control input(s) and results in learning more accurate distinctions between normal and anomalous behaviour in time-series.', 'cs.AI', '2016-05-05T09:15:55Z', 'http://arxiv.org/abs/1605.01534v1', '2016-10-08 10:26:00', '2016-10-08 10:26:00')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPublish Load (1.5ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 722[0m
  [1m[35mAuthor Load (0.9ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Mohit Yadav'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Mohit Yadav', '2016-10-08 10:26:00', '2016-10-08 10:26:00')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1935, 722, 0, '2016-10-08 10:26:00', '2016-10-08 10:26:00')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.4ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Pankaj Malhotra'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36m (0.1ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (316, 722, 1, '2016-10-08 10:26:00', '2016-10-08 10:26:00')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.4ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Lovekesh Vig'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36m (0.1ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (320, 722, 2, '2016-10-08 10:26:00', '2016-10-08 10:26:00')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (1.3ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'K Sriram'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('K Sriram', '2016-10-08 10:26:00', '2016-10-08 10:26:00')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1936, 722, 3, '2016-10-08 10:26:00', '2016-10-08 10:26:00')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.4ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Gautam Shroff'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35m (0.2ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (322, 722, 4, '2016-10-08 10:26:00', '2016-10-08 10:26:00')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.9ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Movement Coordination in Human-Robot Teams: A Dynamical Systems Approach'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.4ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Movement Coordination in Human-Robot Teams: A Dynamical Systems Approach', 'In order to be effective teammates, robots need to be able to understand high-level human behavior to recognize, anticipate, and adapt to human motion. We have designed a new approach to enable robots to perceive human group motion in real-time, anticipate future actions, and synthesize their own motion accordingly. We explore this within the context of joint action, where humans and robots move together synchronously. In this paper, we present an anticipation method which takes high-level group behavior into account. We validate the method within a human-robot interaction scenario, where an autonomous mobile robot observes a team of human dancers, and then successfully and contingently coordinates its movements to \"join the dance\". We compared the results of our anticipation method to move the robot with another method which did not rely on high-level group behavior, and found our method performed better both in terms of more closely synchronizing the robot\'s motion to the team, and also exhibiting more contingent and fluent motion. These findings suggest that the robot performs better when it has an understanding of high-level group behavior than when it does not. This work will help enable others in the robotics community to build more fluent and adaptable robots in the future.', 'cs.RO', '2016-05-04T23:48:16Z', 'http://arxiv.org/abs/1605.01459v1', '2016-10-08 10:26:00', '2016-10-08 10:26:00')
  [1m[36m (3.0ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (1.7ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 723
  [1m[36mAuthor Load (1.2ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Tariq Iqbal'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Tariq Iqbal', '2016-10-08 10:26:00', '2016-10-08 10:26:00')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1937, 723, 0, '2016-10-08 10:26:00', '2016-10-08 10:26:00')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.0ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Samantha Rack'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Samantha Rack', '2016-10-08 10:26:00', '2016-10-08 10:26:00')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1938, 723, 1, '2016-10-08 10:26:00', '2016-10-08 10:26:00')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.8ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Laurel D. Riek'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36m (0.1ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1421, 723, 2, '2016-10-08 10:26:00', '2016-10-08 10:26:00')[0m
  [1m[35m (0.3ms)[0m  COMMIT
  [1m[36mPaper Load (0.8ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Consciousness is Pattern Recognition'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Consciousness is Pattern Recognition', 'This is a proof of the strong AI hypothesis, i.e. that machines can be conscious. It is a phenomenological proof that pattern-recognition and subjective consciousness are the same activity in different terms. Therefore, it proves that essential subjective processes of consciousness are computable, and identifies significant traits and requirements of a conscious system. Since Husserl, many philosophers have accepted that consciousness consists of memories of logical connections between an ego and external objects. These connections are called \"intentions.\" Pattern recognition systems are achievable technical artifacts. The proof links this respected introspective philosophical theory of consciousness with technical art. The proof therefore endorses the strong AI hypothesis and may therefore also enable a theoretically-grounded form of artificial intelligence called a \"synthetic intentionality,\" able to synthesize, generalize, select and repeat intentions. If the pattern recognition is reflexive, able to operate on the set of intentions, and flexible, with several methods of synthesizing intentions, an SI may be a particularly strong form of AI. Similarities and possible applications to several AI paradigms are discussed. The article then addresses some problems: The proof\'s limitations, reflexive cognition, Searles\' Chinese room, and how an SI could \"understand\" \"meanings\" and \"be creative.\"', 'cs.AI', '2016-05-04T20:19:05Z', 'http://arxiv.org/abs/1605.03009v2', '2016-10-08 10:26:00', '2016-10-08 10:26:00')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPublish Load (1.1ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 724[0m
  [1m[35mAuthor Load (0.9ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Ray Van De Walker'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Ray Van De Walker', '2016-10-08 10:26:00', '2016-10-08 10:26:00')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1939, 724, 0, '2016-10-08 10:26:00', '2016-10-08 10:26:00')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (0.8ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Learning from the memory of Atari 2600'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Learning from the memory of Atari 2600', 'We train a number of neural networks to play games Bowling, Breakout and Seaquest using information stored in the memory of a video game console Atari 2600. We consider four models of neural networks which differ in size and architecture: two networks which use only information contained in the RAM and two mixed networks which use both information in the RAM and information from the screen. As the benchmark we used the convolutional model proposed in NIPS and received comparable results in all considered games. Quite surprisingly, in the case of Seaquest we were able to train RAM-only agents which behave better than the benchmark screen-only agent. Mixing screen and RAM did not lead to an improved performance comparing to screen-only and RAM-only agents.', 'cs.LG', '2016-05-04T16:23:34Z', 'http://arxiv.org/abs/1605.01335v1', '2016-10-08 10:26:00', '2016-10-08 10:26:00')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPublish Load (1.4ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 725[0m
  [1m[35mAuthor Load (1.0ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Jakub Sygnowski'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Jakub Sygnowski', '2016-10-08 10:26:00', '2016-10-08 10:26:00')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1940, 725, 0, '2016-10-08 10:26:00', '2016-10-08 10:26:00')[0m
  [1m[35m (3.0ms)[0m  COMMIT
  [1m[36mAuthor Load (1.7ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Henryk Michalewski'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Henryk Michalewski', '2016-10-08 10:26:00', '2016-10-08 10:26:00')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1941, 725, 1, '2016-10-08 10:26:00', '2016-10-08 10:26:00')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (1.0ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Notes on a model for fuzzy computing'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Notes on a model for fuzzy computing', 'In these notes we propose a setting for fuzzy computing in a framework similar to that of well-established theories of computation: boolean, and quantum computing. Our efforts have been directed towards stressing the formal similarities: there is a common pattern underlying these three theories. We tried to conform our approach, as much as possible, to this pattern. This work was part of a project jointly with Professor Vittorio Cafagna. Professor Cafagna passed away unexpectedly in 2007. His intellectual breadth and inspiring passion for mathematics is still very well alive.', 'cs.AI', '2016-05-04T16:16:10Z', 'http://arxiv.org/abs/1605.01596v1', '2016-10-08 10:26:00', '2016-10-08 10:26:00')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (1.3ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 726
  [1m[36mAuthor Load (1.1ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Vittorio Cafagna'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Vittorio Cafagna', '2016-10-08 10:26:00', '2016-10-08 10:26:00')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1942, 726, 0, '2016-10-08 10:26:00', '2016-10-08 10:26:00')
  [1m[36m (0.9ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.5ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Gianluca Caterina'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Gianluca Caterina', '2016-10-08 10:26:00', '2016-10-08 10:26:00')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1943, 726, 1, '2016-10-08 10:26:00', '2016-10-08 10:26:00')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (0.8ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Ontology-Mediated Queries: Combined Complexity and Succinctness of Rewritings via Circuit Complexity'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Ontology-Mediated Queries: Combined Complexity and Succinctness of Rewritings via Circuit Complexity', 'We give solutions to two fundamental computational problems in ontology-based data access with the W3C standard ontology language OWL 2 QL: the succinctness problem for first-order rewritings of ontology-mediated queries (OMQs), and the complexity problem for OMQ answering. We classify OMQs according to the shape of their conjunctive queries (treewidth, the number of leaves) and the existential depth of their ontologies. For each of these classes, we determine the combined complexity of OMQ answering, and whether all OMQs in the class have polynomial-size first-order, positive existential, and nonrecursive datalog rewritings. We obtain the succinctness results using hypergraph programs, a new computational model for Boolean functions, which makes it possible to connect the size of OMQ rewritings and circuit complexity.', 'cs.DB', '2016-05-04T10:10:37Z', 'http://arxiv.org/abs/1605.01207v1', '2016-10-08 10:26:00', '2016-10-08 10:26:00')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPublish Load (1.1ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 727[0m
  [1m[35mAuthor Load (1.0ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Meghyn Bienvenu'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Meghyn Bienvenu', '2016-10-08 10:26:00', '2016-10-08 10:26:00')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1944, 727, 0, '2016-10-08 10:26:00', '2016-10-08 10:26:00')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (1.2ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Stanislav Kikot'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Stanislav Kikot', '2016-10-08 10:26:00', '2016-10-08 10:26:00')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1945, 727, 1, '2016-10-08 10:26:00', '2016-10-08 10:26:00')
  [1m[36m (0.3ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.9ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Roman Kontchakov'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Roman Kontchakov', '2016-10-08 10:26:00', '2016-10-08 10:26:00')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1946, 727, 2, '2016-10-08 10:26:00', '2016-10-08 10:26:00')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (1.1ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Vladimir Podolskii'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Vladimir Podolskii', '2016-10-08 10:26:00', '2016-10-08 10:26:00')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1947, 727, 3, '2016-10-08 10:26:00', '2016-10-08 10:26:00')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.0ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Michael Zakharyaschev'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Michael Zakharyaschev', '2016-10-08 10:26:00', '2016-10-08 10:26:00')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1948, 727, 4, '2016-10-08 10:26:00', '2016-10-08 10:26:00')[0m
  [1m[35m (3.0ms)[0m  COMMIT
  [1m[36mPaper Load (1.5ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'A Step from Probabilistic Programming to Cognitive Architectures'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('A Step from Probabilistic Programming to Cognitive Architectures', 'Probabilistic programming is considered as a framework, in which basic components of cognitive architectures can be represented in unified and elegant fashion. At the same time, necessity of adopting some component of cognitive architectures for extending capabilities of probabilistic programming languages is pointed out. In particular, implicit specification of generative models via declaration of concepts and links between them is proposed, and usefulness of declarative knowledge for achieving efficient inference is briefly discussed.', 'cs.AI', '2016-05-04T08:34:17Z', 'http://arxiv.org/abs/1605.01180v1', '2016-10-08 10:26:00', '2016-10-08 10:26:00')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPublish Load (1.4ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 728[0m
  [1m[35mAuthor Load (1.2ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Alexey Potapov'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Alexey Potapov', '2016-10-08 10:26:00', '2016-10-08 10:26:00')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1949, 728, 0, '2016-10-08 10:26:00', '2016-10-08 10:26:00')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (0.8ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'A Comparative Evaluation of Approximate Probabilistic Simulation and Deep Neural Networks as Accounts of Human Physical Scene Understanding'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('A Comparative Evaluation of Approximate Probabilistic Simulation and Deep Neural Networks as Accounts of Human Physical Scene Understanding', 'Humans demonstrate remarkable abilities to predict physical events in complex scenes. Two classes of models for physical scene understanding have recently been proposed: \"Intuitive Physics Engines\", or IPEs, which posit that people make predictions by running approximate probabilistic simulations in causal mental models similar in nature to video-game physics engines, and memory-based models, which make judgments based on analogies to stored experiences of previously encountered scenes and physical outcomes. Versions of the latter have recently been instantiated in convolutional neural network (CNN) architectures. Here we report four experiments that, to our knowledge, are the first rigorous comparisons of simulation-based and CNN-based models, where both approaches are concretely instantiated in algorithms that can run on raw image inputs and produce as outputs physical judgments such as whether a stack of blocks will fall. Both approaches can achieve super-human accuracy levels and can quantitatively predict human judgments to a similar degree, but only the simulation-based models generalize to novel situations in ways that people do, and are qualitatively consistent with systematic perceptual illusions and judgment asymmetries that people show.', 'cs.AI', '2016-05-04T04:26:06Z', 'http://arxiv.org/abs/1605.01138v1', '2016-10-08 10:26:00', '2016-10-08 10:26:00')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPublish Load (1.1ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 729[0m
  [1m[35mAuthor Load (0.9ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Renqiao Zhang'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Renqiao Zhang', '2016-10-08 10:26:00', '2016-10-08 10:26:00')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1950, 729, 0, '2016-10-08 10:26:00', '2016-10-08 10:26:00')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (1.2ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Jiajun Wu'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Jiajun Wu', '2016-10-08 10:26:00', '2016-10-08 10:26:00')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1951, 729, 1, '2016-10-08 10:26:00', '2016-10-08 10:26:00')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.3ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Chengkai Zhang'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Chengkai Zhang', '2016-10-08 10:26:00', '2016-10-08 10:26:00')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1952, 729, 2, '2016-10-08 10:26:00', '2016-10-08 10:26:00')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (1.2ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'William T. Freeman'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('William T. Freeman', '2016-10-08 10:26:00', '2016-10-08 10:26:00')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1953, 729, 3, '2016-10-08 10:26:00', '2016-10-08 10:26:00')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.6ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Joshua B. Tenenbaum'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35m (0.1ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (503, 729, 4, '2016-10-08 10:26:00', '2016-10-08 10:26:00')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.8ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Online Learning of Commission Avoidant Portfolio Ensembles'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Online Learning of Commission Avoidant Portfolio Ensembles', 'We present a novel online ensemble learning strategy for portfolio selection. The new strategy controls and exploits any set of commission-oblivious portfolio selection algorithms. The strategy handles transaction costs using a novel commission avoidance mechanism. We prove a logarithmic regret bound for our strategy with respect to optimal mixtures of the base algorithms. Numerical examples validate the viability of our method and show significant improvement over the state-of-the-art.', 'cs.AI', '2016-05-03T08:38:34Z', 'http://arxiv.org/abs/1605.00788v2', '2016-10-08 10:26:00', '2016-10-08 10:26:00')
  [1m[36m (2.9ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (1.5ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 730
  [1m[36mAuthor Load (1.2ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Guy Uziel'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.4ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Guy Uziel', '2016-10-08 10:26:00', '2016-10-08 10:26:00')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1954, 730, 0, '2016-10-08 10:26:00', '2016-10-08 10:26:00')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.3ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Ran El-Yaniv'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Ran El-Yaniv', '2016-10-08 10:26:00', '2016-10-08 10:26:00')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1955, 730, 1, '2016-10-08 10:26:00', '2016-10-08 10:26:00')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (0.9ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Obstacle evasion using fuzzy logic in a sliding blades problem environment'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Obstacle evasion using fuzzy logic in a sliding blades problem environment', 'This paper discusses obstacle avoidance using fuzzy logic and shortest path algorithm. This paper also introduces the sliding blades problem and illustrates how a drone can navigate itself through the swinging blade obstacles while tracing a semi-optimal path and also maintaining constant velocity', 'cs.AI', '2016-05-03T08:34:45Z', 'http://arxiv.org/abs/1605.00787v1', '2016-10-08 10:26:00', '2016-10-08 10:26:00')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPublish Load (1.1ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 731[0m
  [1m[35mAuthor Load (1.0ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Shadrack Kimutai'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Shadrack Kimutai', '2016-10-08 10:26:00', '2016-10-08 10:26:00')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1956, 731, 0, '2016-10-08 10:26:00', '2016-10-08 10:26:00')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (0.8ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'A heuristic algorithm for a single vehicle static bike sharing rebalancing problem'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('A heuristic algorithm for a single vehicle static bike sharing rebalancing problem', 'The static bike rebalancing problem (SBRP) concerns the task of repositioning bikes among stations in self-service bike-sharing systems. This problem can be seen as a variant of the one-commodity pickup and delivery vehicle routing problem, where multiple visits are allowed to be performed at each station, i.e., the demand of a station is allowed to be split. Moreover, a vehicle may temporarily drop its load at a station, leaving it in excess or, alternatively, collect more bikes from a station (even all of them), thus leaving it in default. Both cases require further visits in order to meet the actual demands of such station. This paper deals with a particular case of the SBRP, in which only a single vehicle is available and the objective is to find a least-cost route that meets the demand of all stations and does not violate the minimum (zero) and maximum (vehicle capacity) load limits along the tour. Therefore, the number of bikes to be collected or delivered at each station should be appropriately determined in order to respect such constraints. We propose an iterated local search (ILS) based heuristic to solve the problem. The ILS algorithm was tested on 980 benchmark instances from the literature and the results obtained are quite competitive when compared to other existing methods. Moreover, our heuristic was capable of finding most of the known optimal solutions and also of improving the results on a number of open instances.', 'cs.AI', '2016-05-02T22:44:54Z', 'http://arxiv.org/abs/1605.00702v2', '2016-10-08 10:26:00', '2016-10-08 10:26:00')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPublish Load (1.7ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 732[0m
  [1m[35mAuthor Load (1.0ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Fábio Cruz'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Fábio Cruz', '2016-10-08 10:26:00', '2016-10-08 10:26:00')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1957, 732, 0, '2016-10-08 10:26:00', '2016-10-08 10:26:00')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (1.0ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Anand Subramanian'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Anand Subramanian', '2016-10-08 10:26:00', '2016-10-08 10:26:00')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1958, 732, 1, '2016-10-08 10:26:00', '2016-10-08 10:26:00')
  [1m[36m (3.0ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.4ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Bruno P. Bruck'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Bruno P. Bruck', '2016-10-08 10:26:00', '2016-10-08 10:26:00')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1959, 732, 2, '2016-10-08 10:26:00', '2016-10-08 10:26:00')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (1.3ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Manuel Iori'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Manuel Iori', '2016-10-08 10:26:00', '2016-10-08 10:26:00')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1960, 732, 3, '2016-10-08 10:26:00', '2016-10-08 10:26:00')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (1.1ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Disjunctive Normal Form Schemes for Heterogeneous Attributed Graphs'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Disjunctive Normal Form Schemes for Heterogeneous Attributed Graphs', 'Several \'edge-discovery\' applications over graph-based data models are known to have worst-case quadratic complexity, even if the discovered edges are sparse. One example is the generic link discovery problem between two graphs, which has invited research interest in several communities. Specific versions of this problem include link prediction in social networks, ontology alignment between metadata-rich RDF data, approximate joins, and entity resolution between instance-rich data. As large datasets continue to proliferate, reducing quadratic complexity to make the task practical is an important research problem. Within the entity resolution community, the problem is commonly referred to as blocking. A particular class of learnable blocking schemes is known as Disjunctive Normal Form (DNF) blocking schemes, and has emerged as state-of-the art for homogeneous (i.e. same-schema) tabular data. Despite the promise of these schemes, a formalism or learning framework has not been developed for them when input data instances are generic, attributed graphs possessing both node and edge heterogeneity. With such a development, the complexity-reducing scope of DNF schemes becomes applicable to a variety of problems, including entity resolution and type alignment between heterogeneous RDF graphs, and link prediction in networks represented as attributed graphs. This paper presents a graph-theoretic formalism for DNF schemes, and investigates their learnability in an optimization framework. Experimentally, the DNF schemes learned on pairs of heterogeneous RDF graphs are demonstrated to achieve high complexity-reductions (98.25% across ten RDF test cases) at little cost to coverage, and with high reliability (<2.5% standard deviation). Finally, one extant class of RDF blocking schemes is shown to be a special case of DNF schemes.', 'cs.AI', '2016-05-02T20:51:43Z', 'http://arxiv.org/abs/1605.00686v1', '2016-10-08 10:26:00', '2016-10-08 10:26:00')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (1.0ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 733
  [1m[36mAuthor Load (1.0ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Mayank Kejriwal'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Mayank Kejriwal', '2016-10-08 10:26:00', '2016-10-08 10:26:00')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1961, 733, 0, '2016-10-08 10:26:00', '2016-10-08 10:26:00')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (1.0ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Graph Clustering Bandits for Recommendation'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Graph Clustering Bandits for Recommendation', 'We investigate an efficient context-dependent clustering technique for recommender systems based on exploration-exploitation strategies through multi-armed bandits over multiple users. Our algorithm dynamically groups users based on their observed behavioral similarity during a sequence of logged activities. In doing so, the algorithm reacts to the currently served user by shaping clusters around him/her but, at the same time, it explores the generation of clusters over users which are not currently engaged. We motivate the effectiveness of this clustering policy, and provide an extensive empirical analysis on real-world datasets, showing scalability and improved prediction performance over state-of-the-art methods for sequential clustering of users in multi-armed bandit scenarios.', 'stat.ML', '2016-05-02T18:13:04Z', 'http://arxiv.org/abs/1605.00596v1', '2016-10-08 10:26:00', '2016-10-08 10:26:00')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (1.0ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 734
  [1m[36mAuthor Load (0.4ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Shuai Li'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36m (0.1ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (489, 734, 0, '2016-10-08 10:26:00', '2016-10-08 10:26:00')[0m
  [1m[35m (3.0ms)[0m  COMMIT
  [1m[36mAuthor Load (0.8ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Claudio Gentile'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36m (0.3ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.4ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (490, 734, 1, '2016-10-08 10:26:00', '2016-10-08 10:26:00')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (0.6ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Alexandros Karatzoglou'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36m (0.2ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (491, 734, 2, '2016-10-08 10:26:00', '2016-10-08 10:26:00')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPaper Load (0.8ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Coalition Formability Semantics with Conflict-Eliminable Sets of Arguments'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Coalition Formability Semantics with Conflict-Eliminable Sets of Arguments', 'We consider abstract-argumentation-theoretic coalition formability in this work. Taking a model from political alliance among political parties, we will contemplate profitability, and then formability, of a coalition. As is commonly understood, a group forms a coalition with another group for a greater good, the goodness measured against some criteria. As is also commonly understood, however, a coalition may deliver benefits to a group X at the sacrifice of something that X was able to do before coalition formation, which X may be no longer able to do under the coalition. Use of the typical conflict-free sets of arguments is not very fitting for accommodating this aspect of coalition, which prompts us to turn to a weaker notion, conflict-eliminability, as a property that a set of arguments should primarily satisfy. We require numerical quantification of attack strengths as well as of argument strengths for its characterisation. We will first analyse semantics of profitability of a given conflict-eliminable set forming a coalition with another conflict-eliminable set, and will then provide four coalition formability semantics, each of which formalises certain utility postulate(s) taking the coalition profitability into account.', 'cs.AI', '2016-05-02T14:08:23Z', 'http://arxiv.org/abs/1605.00495v1', '2016-10-08 10:26:00', '2016-10-08 10:26:00')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPublish Load (1.4ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 735[0m
  [1m[35mAuthor Load (1.1ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Ryuta Arisaka'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Ryuta Arisaka', '2016-10-08 10:26:00', '2016-10-08 10:26:00')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1962, 735, 0, '2016-10-08 10:26:00', '2016-10-08 10:26:00')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (1.0ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Ken Satoh'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Ken Satoh', '2016-10-08 10:26:00', '2016-10-08 10:26:00')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1963, 735, 1, '2016-10-08 10:26:00', '2016-10-08 10:26:00')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.9ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'A Self-Taught Artificial Agent for Multi-Physics Computational Model Personalization'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.4ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('A Self-Taught Artificial Agent for Multi-Physics Computational Model Personalization', 'Personalization is the process of fitting a model to patient data, a critical step towards application of multi-physics computational models in clinical practice. Designing robust personalization algorithms is often a tedious, time-consuming, model- and data-specific process. We propose to use artificial intelligence concepts to learn this task, inspired by how human experts manually perform it. The problem is reformulated in terms of reinforcement learning. In an off-line phase, Vito, our self-taught artificial agent, learns a representative decision process model through exploration of the computational model: it learns how the model behaves under change of parameters. The agent then automatically learns an optimal strategy for on-line personalization. The algorithm is model-independent; applying it to a new model requires only adjusting few hyper-parameters of the agent and defining the observations to match. The full knowledge of the model itself is not required. Vito was tested in a synthetic scenario, showing that it could learn how to optimize cost functions generically. Then Vito was applied to the inverse problem of cardiac electrophysiology and the personalization of a whole-body circulation model. The obtained results suggested that Vito could achieve equivalent, if not better goodness of fit than standard methods, while being more robust (up to 11% higher success rates) and with faster (up to seven times) convergence rate. Our artificial intelligence approach could thus make personalization algorithms generalizable and self-adaptable to any patient and any model.', 'cs.CE', '2016-05-01T20:19:25Z', 'http://arxiv.org/abs/1605.00303v1', '2016-10-08 10:26:00', '2016-10-08 10:26:00')
  [1m[36m (2.8ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (1.3ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 736
  [1m[36mAuthor Load (1.2ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Dominik Neumann'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Dominik Neumann', '2016-10-08 10:26:00', '2016-10-08 10:26:00')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1964, 736, 0, '2016-10-08 10:26:00', '2016-10-08 10:26:00')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.0ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Tommaso Mansi'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Tommaso Mansi', '2016-10-08 10:26:00', '2016-10-08 10:26:00')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1965, 736, 1, '2016-10-08 10:26:00', '2016-10-08 10:26:00')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (1.1ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Lucian Itu'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Lucian Itu', '2016-10-08 10:26:00', '2016-10-08 10:26:00')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1966, 736, 2, '2016-10-08 10:26:00', '2016-10-08 10:26:00')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.3ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Bogdan Georgescu'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Bogdan Georgescu', '2016-10-08 10:26:00', '2016-10-08 10:26:00')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1967, 736, 3, '2016-10-08 10:26:00', '2016-10-08 10:26:00')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (1.5ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Elham Kayvanpour'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Elham Kayvanpour', '2016-10-08 10:26:00', '2016-10-08 10:26:00')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1968, 736, 4, '2016-10-08 10:26:00', '2016-10-08 10:26:00')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.9ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Farbod Sedaghat-Hamedani'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Farbod Sedaghat-Hamedani', '2016-10-08 10:26:00', '2016-10-08 10:26:00')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1969, 736, 5, '2016-10-08 10:26:00', '2016-10-08 10:26:00')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (1.0ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Ali Amr'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Ali Amr', '2016-10-08 10:26:00', '2016-10-08 10:26:00')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.4ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1970, 736, 6, '2016-10-08 10:26:00', '2016-10-08 10:26:00')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.2ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Jan Haas'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Jan Haas', '2016-10-08 10:26:00', '2016-10-08 10:26:00')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1971, 736, 7, '2016-10-08 10:26:00', '2016-10-08 10:26:00')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (1.5ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Hugo Katus'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Hugo Katus', '2016-10-08 10:26:00', '2016-10-08 10:26:00')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.4ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1972, 736, 8, '2016-10-08 10:26:00', '2016-10-08 10:26:00')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.2ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Benjamin Meder'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Benjamin Meder', '2016-10-08 10:26:00', '2016-10-08 10:26:00')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.4ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1973, 736, 9, '2016-10-08 10:26:00', '2016-10-08 10:26:00')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (1.1ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Stefan Steidl'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Stefan Steidl', '2016-10-08 10:26:00', '2016-10-08 10:26:00')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1974, 736, 10, '2016-10-08 10:26:00', '2016-10-08 10:26:00')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.3ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Joachim Hornegger'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Joachim Hornegger', '2016-10-08 10:26:00', '2016-10-08 10:26:00')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1975, 736, 11, '2016-10-08 10:26:00', '2016-10-08 10:26:00')[0m
  [1m[35m (0.3ms)[0m  COMMIT
  [1m[36mAuthor Load (1.4ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Dorin Comaniciu'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Dorin Comaniciu', '2016-10-08 10:26:00', '2016-10-08 10:26:00')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1976, 736, 12, '2016-10-08 10:26:00', '2016-10-08 10:26:00')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (1.1ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Common-Description Learning: A Framework for Learning Algorithms and Generating Subproblems from Few Examples'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Common-Description Learning: A Framework for Learning Algorithms and Generating Subproblems from Few Examples', 'Current learning algorithms face many difficulties in learning simple patterns and using them to learn more complex ones. They also require more examples than humans do to learn the same pattern, assuming no prior knowledge. In this paper, a new learning framework is introduced that is called common-description learning (CDL). This framework has been tested on 32 small multi-task datasets, and the results show that it was able to learn complex algorithms from a few number of examples. The final model is perfectly interpretable and its depth depends on the question. What is meant by depth here is that whenever needed, the model learns to break down the problem into simpler subproblems and solves them using previously learned models. Finally, we explain the capabilities of our framework in discovering complex relations in data and how it can help in improving language understanding in machines.', 'cs.AI', '2016-05-01T11:56:01Z', 'http://arxiv.org/abs/1605.00241v1', '2016-10-08 10:26:00', '2016-10-08 10:26:00')
  [1m[36m (3.0ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (1.9ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 737
  [1m[36mAuthor Load (1.7ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Basem G. El-Barashy'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Basem G. El-Barashy', '2016-10-08 10:26:00', '2016-10-08 10:26:00')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1977, 737, 0, '2016-10-08 10:26:00', '2016-10-08 10:26:00')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (1.2ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Look-ahead before you leap: end-to-end active recognition by forecasting the effect of motion'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Look-ahead before you leap: end-to-end active recognition by forecasting the effect of motion', 'Visual recognition systems mounted on autonomous moving agents face the challenge of unconstrained data, but simultaneously have the opportunity to improve their performance by moving to acquire new views of test data. In this work, we first show how a recurrent neural network-based system may be trained to perform end-to-end learning of motion policies suited for this \"active recognition\" setting. Further, we hypothesize that active vision requires an agent to have the capacity to reason about the effects of its motions on its view of the world. To verify this hypothesis, we attempt to induce this capacity in our active recognition pipeline, by simultaneously learning to forecast the effects of the agent\'s motions on its internal representation of the environment conditional on all past views. Results across two challenging datasets confirm both that our end-to-end system successfully learns meaningful policies for active category recognition, and that \"learning to look ahead\" further boosts recognition performance.', 'cs.CV', '2016-04-30T20:39:16Z', 'http://arxiv.org/abs/1605.00164v2', '2016-10-08 10:26:00', '2016-10-08 10:26:00')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (1.0ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 738
  [1m[36mAuthor Load (1.0ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Dinesh Jayaraman'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Dinesh Jayaraman', '2016-10-08 10:26:00', '2016-10-08 10:26:00')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1978, 738, 0, '2016-10-08 10:26:00', '2016-10-08 10:26:00')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.3ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Kristen Grauman'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35m (0.1ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (237, 738, 1, '2016-10-08 10:26:00', '2016-10-08 10:26:00')
  [1m[36m (1.8ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (1.1ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Higher Order Recurrent Neural Networks'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Higher Order Recurrent Neural Networks', 'In this paper, we study novel neural network structures to better model long term dependency in sequential data. We propose to use more memory units to keep track of more preceding states in recurrent neural networks (RNNs), which are all recurrently fed to the hidden layers as feedback through different weighted paths. By extending the popular recurrent structure in RNNs, we provide the models with better short-term memory mechanism to learn long term dependency in sequences. Analogous to digital filters in signal processing, we call these structures as higher order RNNs (HORNNs). Similar to RNNs, HORNNs can also be learned using the back-propagation through time method. HORNNs are generally applicable to a variety of sequence modelling tasks. In this work, we have examined HORNNs for the language modeling task using two popular data sets, namely the Penn Treebank (PTB) and English text8 data sets. Experimental results have shown that the proposed HORNNs yield the state-of-the-art performance on both data sets, significantly outperforming the regular RNNs as well as the popular LSTMs.', 'cs.NE', '2016-04-30T05:04:08Z', 'http://arxiv.org/abs/1605.00064v1', '2016-10-08 10:26:00', '2016-10-08 10:26:00')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (1.3ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 739
  [1m[36mAuthor Load (1.3ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Rohollah Soltani'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Rohollah Soltani', '2016-10-08 10:26:00', '2016-10-08 10:26:00')[0m
  [1m[35m (3.0ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1979, 739, 0, '2016-10-08 10:26:00', '2016-10-08 10:26:00')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.6ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Hui Jiang'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Hui Jiang', '2016-10-08 10:26:00', '2016-10-08 10:26:00')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1980, 739, 1, '2016-10-08 10:26:00', '2016-10-08 10:26:00')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPaper Load (1.1ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'An efficient and expressive similarity measure for relational clustering using neighbourhood trees'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('An efficient and expressive similarity measure for relational clustering using neighbourhood trees', 'Clustering is an underspecified task: there are no universal criteria for what makes a good clustering. This is especially true for relational data, where similarity can be based on the features of individuals, the relationships between them, or a mix of both. Existing methods for relational clustering have strong and often implicit biases in this respect. In this paper, we introduce a novel similarity measure for relational data. It is the first measure to incorporate a wide variety of types of similarity, including similarity of attributes, similarity of relational context, and proximity in a hypergraph. We experimentally evaluate how using this similarity affects the quality of clustering on very different types of datasets. The experiments demonstrate that (a) using this similarity in standard clustering methods consistently gives good results, whereas other measures work well only on datasets that match their bias; and (b) on most datasets, the novel similarity outperforms even the best among the existing ones.', 'stat.ML', '2016-04-29T18:48:53Z', 'http://arxiv.org/abs/1604.08934v1', '2016-10-08 10:26:00', '2016-10-08 10:26:00')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPublish Load (1.5ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 740[0m
  [1m[35mAuthor Load (1.0ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Sebastijan Dumancic'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Sebastijan Dumancic', '2016-10-08 10:26:00', '2016-10-08 10:26:00')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1981, 740, 0, '2016-10-08 10:26:00', '2016-10-08 10:26:00')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.9ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Hendrik Blockeel'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Hendrik Blockeel', '2016-10-08 10:26:00', '2016-10-08 10:26:00')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1982, 740, 1, '2016-10-08 10:26:00', '2016-10-08 10:26:00')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.8ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Deep, Convolutional, and Recurrent Models for Human Activity Recognition using Wearables'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Deep, Convolutional, and Recurrent Models for Human Activity Recognition using Wearables', 'Human activity recognition (HAR) in ubiquitous computing is beginning to adopt deep learning to substitute for well-established analysis techniques that rely on hand-crafted feature extraction and classification techniques. From these isolated applications of custom deep architectures it is, however, difficult to gain an overview of their suitability for problems ranging from the recognition of manipulative gestures to the segmentation and identification of physical activities like running or ascending stairs. In this paper we rigorously explore deep, convolutional, and recurrent approaches across three representative datasets that contain movement data captured with wearable sensors. We describe how to train recurrent approaches in this setting, introduce a novel regularisation approach, and illustrate how they outperform the state-of-the-art on a large benchmark dataset. Across thousands of recognition experiments with randomly sampled model configurations we investigate the suitability of each model for different tasks in HAR, explore the impact of hyperparameters using the fANOVA framework, and provide guidelines for the practitioner who wants to apply deep learning in their problem setting.', 'cs.LG', '2016-04-29T15:38:44Z', 'http://arxiv.org/abs/1604.08880v1', '2016-10-08 10:26:00', '2016-10-08 10:26:00')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (1.3ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 741
  [1m[36mAuthor Load (0.9ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Nils Y. Hammerla'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Nils Y. Hammerla', '2016-10-08 10:26:00', '2016-10-08 10:26:00')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1983, 741, 0, '2016-10-08 10:26:00', '2016-10-08 10:26:00')
  [1m[36m (2.3ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.4ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Shane Halloran'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Shane Halloran', '2016-10-08 10:26:00', '2016-10-08 10:26:00')
  [1m[36m (3.0ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1984, 741, 1, '2016-10-08 10:26:00', '2016-10-08 10:26:00')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (1.7ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Thomas Ploetz'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.3ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Thomas Ploetz', '2016-10-08 10:26:00', '2016-10-08 10:26:00')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1985, 741, 2, '2016-10-08 10:26:00', '2016-10-08 10:26:00')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (1.0ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'The Z-loss: a shift and scale invariant classification loss belonging to the Spherical Family'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('The Z-loss: a shift and scale invariant classification loss belonging to the Spherical Family', 'Despite being the standard loss function to train multi-class neural networks, the log-softmax has two potential limitations. First, it involves computations that scale linearly with the number of output classes, which can restrict the size of problems we are able to tackle with current hardware. Second, it remains unclear how close it matches the task loss such as the top-k error rate or other non-differentiable evaluation metrics which we aim to optimize ultimately. In this paper, we introduce an alternative classification loss function, the Z-loss, which is designed to address these two issues. Unlike the log-softmax, it has the desirable property of belonging to the spherical loss family (Vincent et al., 2015), a class of loss functions for which training can be performed very efficiently with a complexity independent of the number of output classes. We show experimentally that it significantly outperforms the other spherical loss functions previously investigated. Furthermore, we show on a word language modeling task that it also outperforms the log-softmax with respect to certain ranking scores, such as top-k scores, suggesting that the Z-loss has the flexibility to better match the task loss. These qualities thus makes the Z-loss an appealing candidate to train very efficiently large output networks such as word-language models or other extreme classification problems. On the One Billion Word (Chelba et al., 2014) dataset, we are able to train a model with the Z-loss 40 times faster than the log-softmax and more than 4 times faster than the hierarchical softmax.', 'cs.LG', '2016-04-29T14:53:00Z', 'http://arxiv.org/abs/1604.08859v2', '2016-10-08 10:26:00', '2016-10-08 10:26:00')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (1.0ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 742
  [1m[36mAuthor Load (0.9ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Alexandre de Brébisson'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Alexandre de Brébisson', '2016-10-08 10:26:00', '2016-10-08 10:26:00')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1986, 742, 0, '2016-10-08 10:26:00', '2016-10-08 10:26:00')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.1ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Pascal Vincent'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Pascal Vincent', '2016-10-08 10:26:00', '2016-10-08 10:26:00')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1987, 742, 1, '2016-10-08 10:26:00', '2016-10-08 10:26:00')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (1.2ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Teaching natural language to computers'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Teaching natural language to computers', '\"Natural Language,\" whether spoken and attended to by humans, or processed and generated by computers, requires networked structures that reflect creative processes in semantic, syntactic, phonetic, linguistic, social, emotional, and cultural modules. Being able to produce novel and useful behavior following repeated practice gets to the root of both artificial intelligence and human language. This paper investigates the modalities involved in language-like applications that computers -- and programmers -- engage with, and aims to fine tune the questions we ask to better account for context, self-awareness, and embodiment.', 'cs.CL', '2016-04-29T11:36:25Z', 'http://arxiv.org/abs/1604.08781v2', '2016-10-08 10:26:00', '2016-10-08 10:26:00')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPublish Load (1.0ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 743[0m
  [1m[35mAuthor Load (0.6ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Joseph Corneli'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35m (0.1ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1073, 743, 0, '2016-10-08 10:26:00', '2016-10-08 10:26:00')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.3ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Miriam Corneli'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Miriam Corneli', '2016-10-08 10:26:00', '2016-10-08 10:26:00')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1988, 743, 1, '2016-10-08 10:26:00', '2016-10-08 10:26:00')[0m
  [1m[35m (2.9ms)[0m  COMMIT
  [1m[36mPaper Load (1.1ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Supervisory Control for Behavior Composition'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Supervisory Control for Behavior Composition', 'We relate behavior composition, a synthesis task studied in AI, to supervisory control theory from the discrete event systems field. In particular, we show that realizing (i.e., implementing) a target behavior module (e.g., a house surveillance system) by suitably coordinating a collection of available behaviors (e.g., automatic blinds, doors, lights, cameras, etc.) amounts to imposing a supervisor onto a special discrete event system. Such a link allows us to leverage on the solid foundations and extensive work on discrete event systems, including borrowing tools and ideas from that field. As evidence of that we show how simple it is to introduce preferences in the mapped framework.', 'cs.AI', '2016-04-29T10:38:04Z', 'http://arxiv.org/abs/1604.08768v1', '2016-10-08 10:26:00', '2016-10-08 10:26:00')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPublish Load (1.4ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 744[0m
  [1m[35mAuthor Load (1.0ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Paolo Felli'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Paolo Felli', '2016-10-08 10:26:00', '2016-10-08 10:26:00')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1989, 744, 0, '2016-10-08 10:26:00', '2016-10-08 10:26:00')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (1.2ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Nitin Yadav'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Nitin Yadav', '2016-10-08 10:26:00', '2016-10-08 10:26:00')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1990, 744, 1, '2016-10-08 10:26:00', '2016-10-08 10:26:00')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.8ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Sebastian Sardina'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35m (0.2ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (955, 744, 2, '2016-10-08 10:26:00', '2016-10-08 10:26:00')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.8ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = '\"Knowing value\" logic as a normal modal logic'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('\"Knowing value\" logic as a normal modal logic', 'Recent years witness a growing interest in nonstandard epistemic logics of \"knowing whether\", \"knowing what\", \"knowing how\", and so on. These logics are usually not normal, i.e., the standard axioms and reasoning rules for modal logic may be invalid. In this paper, we show that the conditional \"knowing value\" logic proposed by Wang and Fan \\cite{WF13} can be viewed as a disguised normal modal logic by treating the negation of the Kv operator as a special diamond. Under this perspective, it turns out that the original first-order Kripke semantics can be greatly simplified by introducing a ternary relation $R_i^c$ in standard Kripke models, which associates one world with two $i$-accessible worlds that do not agree on the value of constant $c$. Under intuitive constraints, the modal logic based on such Kripke models is exactly the one studied by Wang and Fan (2013,2014}. Moreover, there is a very natural binary generalization of the \"knowing value\" diamond, which, surprisingly, does not increase the expressive power of the logic. The resulting logic with the binary diamond has a transparent normal modal system, which sharpens our understanding of the \"knowing value\" logic and simplifies some previously hard problems.', 'cs.AI', '2016-04-29T07:22:27Z', 'http://arxiv.org/abs/1604.08709v2', '2016-10-08 10:26:00', '2016-10-08 10:26:00')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (1.1ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 745
  [1m[36mAuthor Load (1.1ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Tao Gu'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Tao Gu', '2016-10-08 10:26:00', '2016-10-08 10:26:00')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1991, 745, 0, '2016-10-08 10:26:00', '2016-10-08 10:26:00')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.9ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Yanjing Wang'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35m (0.1ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1059, 745, 1, '2016-10-08 10:26:00', '2016-10-08 10:26:00')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.9ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'On the representation and embedding of knowledge bases beyond binary relations'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('On the representation and embedding of knowledge bases beyond binary relations', 'The models developed to date for knowledge base embedding are all based on the assumption that the relations contained in knowledge bases are binary. For the training and testing of these embedding models, multi-fold (or n-ary) relational data are converted to triples (e.g., in FB15K dataset) and interpreted as instances of binary relations. This paper presents a canonical representation of knowledge bases containing multi-fold relations. We show that the existing embedding models on the popular FB15K datasets correspond to a sub-optimal modelling framework, resulting in a loss of structural information. We advocate a novel modelling framework, which models multi-fold relations directly using this canonical representation. Using this framework, the existing TransH model is generalized to a new model, m-TransH. We demonstrate experimentally that m-TransH outperforms TransH by a large margin, thereby establishing a new state of the art.', 'cs.LG', '2016-04-28T22:42:38Z', 'http://arxiv.org/abs/1604.08642v1', '2016-10-08 10:26:00', '2016-10-08 10:26:00')
  [1m[36m (2.9ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (1.8ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 746
  [1m[36mAuthor Load (1.3ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Jianfeng Wen'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Jianfeng Wen', '2016-10-08 10:26:00', '2016-10-08 10:26:00')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1992, 746, 0, '2016-10-08 10:26:00', '2016-10-08 10:26:00')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.0ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Jianxin Li'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Jianxin Li', '2016-10-08 10:26:00', '2016-10-08 10:26:00')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1993, 746, 1, '2016-10-08 10:26:00', '2016-10-08 10:26:00')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (1.1ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Yongyi Mao'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Yongyi Mao', '2016-10-08 10:26:00', '2016-10-08 10:26:00')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1994, 746, 2, '2016-10-08 10:26:00', '2016-10-08 10:26:00')
  [1m[36m (0.3ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.0ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Shini Chen'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Shini Chen', '2016-10-08 10:26:00', '2016-10-08 10:26:00')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1995, 746, 3, '2016-10-08 10:26:00', '2016-10-08 10:26:00')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (1.4ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Richong Zhang'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Richong Zhang', '2016-10-08 10:26:00', '2016-10-08 10:26:00')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1996, 746, 4, '2016-10-08 10:26:00', '2016-10-08 10:26:00')
  [1m[36m (0.7ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.9ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Mysteries of Visual Experience'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Mysteries of Visual Experience', 'Science is a crowning glory of the human spirit and its applications remain our best hope for social progress. But there are limitations to current science and perhaps to any science. The general mind-body problem is known to be intractable and currently mysterious. This is one of many deep problems that are universally agreed to be beyond the current purview of Science, including quantum phenomena, etc. But all of these famous unsolved problems are either remote from everyday experience (entanglement, dark matter) or are hard to even define sharply (phenomenology, consciousness, etc.). In this note, we will consider some obvious computational problems in vision that arise every time that we open our eyes and yet are demonstrably incompatible with current theories of neural computation. The focus will be on two related phenomena, known as the neural binding problem and the illusion of a detailed stable visual world.', 'q-bio.NC', '2016-04-28T20:41:25Z', 'http://arxiv.org/abs/1604.08612v1', '2016-10-08 10:26:00', '2016-10-08 10:26:00')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (1.1ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 747
  [1m[36mAuthor Load (0.5ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Jerome Feldman'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36m (0.1ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (696, 747, 0, '2016-10-08 10:26:00', '2016-10-08 10:26:00')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (0.9ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Fast Simulation of Probabilistic Boolean Networks (Technical Report)'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Fast Simulation of Probabilistic Boolean Networks (Technical Report)', 'Probabilistic Boolean networks (PBNs) is an important mathematical framework widely used for modelling and analysing biological systems. PBNs are suited for modelling large biological systems, which more and more often arise in systems biology. However, the large system size poses a~significant challenge to the analysis of PBNs, in particular, to the crucial analysis of their steady-state behaviour. Numerical methods for performing steady-state analyses suffer from the state-space explosion problem, which makes the utilisation of statistical methods the only viable approach. However, such methods require long simulations of PBNs, rendering the simulation speed a crucial efficiency factor. For large PBNs and high estimation precision requirements, a slow simulation speed becomes an obstacle. In this paper, we propose a structure-based method for fast simulation of PBNs. This method first performs a network reduction operation and then divides nodes into groups for parallel simulation. Experimental results show that our method can lead to an approximately 10 times speedup for computing steady-state probabilities of a real-life biological network.', 'cs.CE', '2016-04-28T16:29:39Z', 'http://arxiv.org/abs/1605.00854v1', '2016-10-08 10:26:00', '2016-10-08 10:26:00')[0m
  [1m[35m (3.0ms)[0m  COMMIT
  [1m[36mPublish Load (1.8ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 748[0m
  [1m[35mAuthor Load (1.5ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Andrzej Mizera'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Andrzej Mizera', '2016-10-08 10:26:00', '2016-10-08 10:26:00')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1997, 748, 0, '2016-10-08 10:26:00', '2016-10-08 10:26:00')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (1.5ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Jun Pang'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Jun Pang', '2016-10-08 10:26:00', '2016-10-08 10:26:00')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1998, 748, 1, '2016-10-08 10:26:00', '2016-10-08 10:26:00')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.3ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Qixia Yuan'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Qixia Yuan', '2016-10-08 10:26:00', '2016-10-08 10:26:00')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1999, 748, 2, '2016-10-08 10:26:00', '2016-10-08 10:26:00')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (1.0ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Exploiting variable associations to configure efficient local search algorithms in large-scale binary integer programs'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.4ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Exploiting variable associations to configure efficient local search algorithms in large-scale binary integer programs', 'We present a data mining approach for reducing the search space of local search algorithms in a class of binary integer programs including the set covering and partitioning problems. We construct a k-nearest neighbor graph by extracting variable associations from the instance to be solved, in order to identify promising pairs of flipping variables in the neighborhood search. We also develop a 4-flip neighborhood local search algorithm that flips four variables alternately along 4-paths or 4-cycles in the k-nearest neighbor graph. We incorporate an efficient incremental evaluation of solutions and an adaptive control of penalty weights into the 4-flip neighborhood local search algorithm. Computational comparison with the latest solvers shows that our algorithm performs effectively for large-scale set covering and partitioning problems.', 'cs.DS', '2016-04-28T15:04:08Z', 'http://arxiv.org/abs/1604.08448v1', '2016-10-08 10:26:00', '2016-10-08 10:26:00')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPublish Load (1.7ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 749[0m
  [1m[35mAuthor Load (0.9ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Shunji Umetani'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Shunji Umetani', '2016-10-08 10:26:00', '2016-10-08 10:26:00')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2000, 749, 0, '2016-10-08 10:26:00', '2016-10-08 10:26:00')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (0.9ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Large-scale Analysis of Chess Games with Chess Engines: A Preliminary Report'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Large-scale Analysis of Chess Games with Chess Engines: A Preliminary Report', 'The strength of chess engines together with the availability of numerous chess games have attracted the attention of chess players, data scientists, and researchers during the last decades. State-of-the-art engines now provide an authoritative judgement that can be used in many applications like cheating detection, intrinsic ratings computation, skill assessment, or the study of human decision-making. A key issue for the research community is to gather a large dataset of chess games together with the judgement of chess engines. Unfortunately the analysis of each move takes lots of times. In this paper, we report our effort to analyse almost 5 millions chess games with a computing grid. During summer 2015, we processed 270 millions unique played positions using the Stockfish engine with a quite high depth (20). We populated a database of 1+ tera-octets of chess evaluations, representing an estimated time of 50 years of computation on a single machine. Our effort is a first step towards the replication of research results, the supply of open data and procedures for exploring new directions, and the investigation of software engineering/scalability issues when computing billions of moves.', 'cs.AI', '2016-04-28T08:37:43Z', 'http://arxiv.org/abs/1607.04186v1', '2016-10-08 10:26:00', '2016-10-08 10:26:00')[0m
  [1m[35m (2.9ms)[0m  COMMIT
  [1m[36mPublish Load (1.8ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 750[0m
  [1m[35mAuthor Load (1.3ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Mathieu Acher'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Mathieu Acher', '2016-10-08 10:26:01', '2016-10-08 10:26:01')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2001, 750, 0, '2016-10-08 10:26:01', '2016-10-08 10:26:01')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (1.2ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'François Esnault'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('François Esnault', '2016-10-08 10:26:01', '2016-10-08 10:26:01')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2002, 750, 1, '2016-10-08 10:26:01', '2016-10-08 10:26:01')
  [1m[36m (0.6ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.9ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Semantic Reasoning for Context-aware Internet of Things Applications'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.4ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Semantic Reasoning for Context-aware Internet of Things Applications', 'Advances in ICT are bringing into reality the vision of a large number of uniquely identifiable, interconnected objects and things that gather information from diverse physical environments and deliver the information to a variety of innovative applications and services. These sensing objects and things form the Internet of Things (IoT) that can improve energy and cost efficiency and automation in many different industry fields such as transportation and logistics, health care and manufacturing, and facilitate our everyday lives as well. IoT applications rely on real-time context data and allow sending information for driving the behaviors of users in intelligent environments.', 'cs.AI', '2016-04-28T08:17:56Z', 'http://arxiv.org/abs/1604.08340v1', '2016-10-08 10:26:01', '2016-10-08 10:26:01')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (1.2ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 751
  [1m[36mAuthor Load (1.0ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Altti Ilari Maarala'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Altti Ilari Maarala', '2016-10-08 10:26:01', '2016-10-08 10:26:01')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2003, 751, 0, '2016-10-08 10:26:01', '2016-10-08 10:26:01')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.3ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Xiang Su'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Xiang Su', '2016-10-08 10:26:01', '2016-10-08 10:26:01')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2004, 751, 1, '2016-10-08 10:26:01', '2016-10-08 10:26:01')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (1.3ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Jukka Riekki'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Jukka Riekki', '2016-10-08 10:26:01', '2016-10-08 10:26:01')[0m
  [1m[35m (6.0ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2005, 751, 2, '2016-10-08 10:26:01', '2016-10-08 10:26:01')
  [1m[36m (6.1ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (1.3ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Quantum cognition beyond Hilbert space II: Applications'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (1.3ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.4ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Quantum cognition beyond Hilbert space II: Applications', 'The research on human cognition has recently benefited from the use of the mathematical formalism of quantum theory in Hilbert space. However, cognitive situations exist which indicate that the Hilbert space structure, and the associated Born rule, would be insufficient to provide a satisfactory modeling of the collected data, so that one needs to go beyond Hilbert space. In Part I of this paper we follow this direction and present a general tension-reduction (GTR) model, in the ambit of an operational and realistic framework for human cognition. In this Part II we apply this non-Hilbertian quantum-like model to faithfully reproduce the probabilities of the \'Clinton/Gore\' and \'Rose/Jackson\' experiments on question order effects. We also explain why the GTR-model is needed if one wants to deal, in a fully consistent way, with response replicability and unpacking effects.', 'cs.AI', '2016-04-27T23:40:11Z', 'http://arxiv.org/abs/1604.08270v1', '2016-10-08 10:26:01', '2016-10-08 10:26:01')
  [1m[36m (6.0ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (1.0ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 752
  [1m[36mAuthor Load (1.8ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Diederik Aerts'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Diederik Aerts', '2016-10-08 10:26:01', '2016-10-08 10:26:01')[0m
  [1m[35m (0.3ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2006, 752, 0, '2016-10-08 10:26:01', '2016-10-08 10:26:01')
  [1m[36m (0.3ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.0ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Lyneth Beltran'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Lyneth Beltran', '2016-10-08 10:26:01', '2016-10-08 10:26:01')
  [1m[36m (0.3ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2007, 752, 1, '2016-10-08 10:26:01', '2016-10-08 10:26:01')[0m
  [1m[35m (3.0ms)[0m  COMMIT
  [1m[36mAuthor Load (1.2ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Massimiliano Sassoli de Bianchi'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Massimiliano Sassoli de Bianchi', '2016-10-08 10:26:01', '2016-10-08 10:26:01')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2008, 752, 2, '2016-10-08 10:26:01', '2016-10-08 10:26:01')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.5ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Sandro Sozzo'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Sandro Sozzo', '2016-10-08 10:26:01', '2016-10-08 10:26:01')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.4ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2009, 752, 3, '2016-10-08 10:26:01', '2016-10-08 10:26:01')[0m
  [1m[35m (0.7ms)[0m  COMMIT
  [1m[36mAuthor Load (1.1ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Tomas Veloz'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Tomas Veloz', '2016-10-08 10:26:01', '2016-10-08 10:26:01')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2010, 752, 4, '2016-10-08 10:26:01', '2016-10-08 10:26:01')
  [1m[36m (0.3ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (1.0ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Quantum Cognition Beyond Hilbert Space I: Fundamentals'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.4ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Quantum Cognition Beyond Hilbert Space I: Fundamentals', 'The formalism of quantum theory in Hilbert space has been applied with success to the modeling and explanation of several cognitive phenomena, whereas traditional cognitive approaches were problematical. However, this \'quantum cognition paradigm\' was recently challenged by its proven impossibility to simultaneously model \'question order effects\' and \'response replicability\'. In Part I of this paper we describe sequential dichotomic measurements within an operational and realistic framework for human cognition elaborated by ourselves, and represent them in a quantum-like \'extended Bloch representation\' where the Born rule of quantum probability does not necessarily hold. In Part II we apply this mathematical framework to successfully model question order effects, response replicability and unpacking effects, thus opening the way toward quantum cognition beyond Hilbert space.', 'cs.AI', '2016-04-27T23:30:29Z', 'http://arxiv.org/abs/1604.08268v1', '2016-10-08 10:26:01', '2016-10-08 10:26:01')
  [1m[36m (0.6ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (1.5ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 753
  [1m[36mAuthor Load (1.0ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Diederik Aerts'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36m (0.1ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2006, 753, 0, '2016-10-08 10:26:01', '2016-10-08 10:26:01')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (1.4ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Lyneth Beltran'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36m (0.1ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2007, 753, 1, '2016-10-08 10:26:01', '2016-10-08 10:26:01')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (1.4ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Massimiliano Sassoli de Bianchi'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36m (0.3ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2008, 753, 2, '2016-10-08 10:26:01', '2016-10-08 10:26:01')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (1.0ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Sandro Sozzo'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36m (0.1ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2009, 753, 3, '2016-10-08 10:26:01', '2016-10-08 10:26:01')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (1.0ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Tomas Veloz'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36m (0.1ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2010, 753, 4, '2016-10-08 10:26:01', '2016-10-08 10:26:01')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPaper Load (1.4ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Propositional Abduction with Implicit Hitting Sets'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Propositional Abduction with Implicit Hitting Sets', 'Logic-based abduction finds important applications in artificial intelligence and related areas. One application example is in finding explanations for observed phenomena. Propositional abduction is a restriction of abduction to the propositional domain, and complexity-wise is in the second level of the polynomial hierarchy. Recent work has shown that exploiting implicit hitting sets and propositional satisfiability (SAT) solvers provides an efficient approach for propositional abduction. This paper investigates this earlier work and proposes a number of algorithmic improvements. These improvements are shown to yield exponential reductions in the number of SAT solver calls. More importantly, the experimental results show significant performance improvements compared to the the best approaches for propositional abduction.', 'cs.AI', '2016-04-27T20:29:01Z', 'http://arxiv.org/abs/1604.08229v1', '2016-10-08 10:26:01', '2016-10-08 10:26:01')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPublish Load (2.1ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 754[0m
  [1m[35mAuthor Load (1.2ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Alexey Ignatiev'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Alexey Ignatiev', '2016-10-08 10:26:01', '2016-10-08 10:26:01')
  [1m[36m (0.3ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2011, 754, 0, '2016-10-08 10:26:01', '2016-10-08 10:26:01')[0m
  [1m[35m (0.3ms)[0m  COMMIT
  [1m[36mAuthor Load (1.3ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Antonio Morgado'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Antonio Morgado', '2016-10-08 10:26:01', '2016-10-08 10:26:01')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.4ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2012, 754, 1, '2016-10-08 10:26:01', '2016-10-08 10:26:01')
  [1m[36m (2.9ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.0ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Joao Marques-Silva'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Joao Marques-Silva', '2016-10-08 10:26:01', '2016-10-08 10:26:01')
  [1m[36m (0.3ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2013, 754, 2, '2016-10-08 10:26:01', '2016-10-08 10:26:01')[0m
  [1m[35m (0.3ms)[0m  COMMIT
  [1m[36mPaper Load (1.8ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Classifying Options for Deep Reinforcement Learning'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Classifying Options for Deep Reinforcement Learning', 'In this paper we combine one method for hierarchical reinforcement learning - the options framework - with deep Q-networks (DQNs) through the use of different \"option heads\" on the policy network, and a supervisory network for choosing between the different options. We utilise our setup to investigate the effects of architectural constraints in subtasks with positive and negative transfer, across a range of network capacities. We empirically show that our augmented DQN has lower sample complexity when simultaneously learning subtasks with negative transfer, without degrading performance when learning subtasks with positive transfer.', 'cs.LG', '2016-04-27T17:48:39Z', 'http://arxiv.org/abs/1604.08153v2', '2016-10-08 10:26:01', '2016-10-08 10:26:01')[0m
  [1m[35m (0.3ms)[0m  COMMIT
  [1m[36mPublish Load (1.1ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 755[0m
  [1m[35mAuthor Load (1.6ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Kai Arulkumaran'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Kai Arulkumaran', '2016-10-08 10:26:01', '2016-10-08 10:26:01')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2014, 755, 0, '2016-10-08 10:26:01', '2016-10-08 10:26:01')[0m
  [1m[35m (0.3ms)[0m  COMMIT
  [1m[36mAuthor Load (1.4ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Nat Dilokthanakul'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.5ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Nat Dilokthanakul', '2016-10-08 10:26:01', '2016-10-08 10:26:01')[0m
  [1m[35m (0.9ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2015, 755, 1, '2016-10-08 10:26:01', '2016-10-08 10:26:01')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.0ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Murray Shanahan'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.4ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Murray Shanahan', '2016-10-08 10:26:01', '2016-10-08 10:26:01')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.4ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2016, 755, 2, '2016-10-08 10:26:01', '2016-10-08 10:26:01')[0m
  [1m[35m (1.1ms)[0m  COMMIT
  [1m[36mAuthor Load (1.7ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Anil Anthony Bharath'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Anil Anthony Bharath', '2016-10-08 10:26:01', '2016-10-08 10:26:01')[0m
  [1m[35m (0.3ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2017, 755, 3, '2016-10-08 10:26:01', '2016-10-08 10:26:01')
  [1m[36m (1.3ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (1.1ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Selecting the Selection'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (4.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.4ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Selecting the Selection', 'Modern saturation-based Automated Theorem Provers typically implement the superposition calculus for reasoning about first-order logic with or without equality. Practical implementations of this calculus use a variety of literal selections and term orderings to tame the growth of the search space and help steer proof search. This paper introduces the notion of lookahead selection that estimates (looks ahead) the effect on the search space of selecting a literal. There is also a case made for the use of incomplete selection functions that attempt to restrict the search space instead of satisfying some completeness criteria. Experimental evaluation in the \\Vampire\\ theorem prover shows that both lookahead selection and incomplete selection significantly contribute to solving hard problems unsolvable by other methods.', 'cs.AI', '2016-04-27T13:14:44Z', 'http://arxiv.org/abs/1604.08055v1', '2016-10-08 10:26:01', '2016-10-08 10:26:01')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (1.3ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 756
  [1m[36mAuthor Load (1.2ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Giles Reger'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.4ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Giles Reger', '2016-10-08 10:26:01', '2016-10-08 10:26:01')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.4ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2018, 756, 0, '2016-10-08 10:26:01', '2016-10-08 10:26:01')
  [1m[36m (0.6ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.9ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Martin Suda'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Martin Suda', '2016-10-08 10:26:01', '2016-10-08 10:26:01')
  [1m[36m (0.3ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2019, 756, 1, '2016-10-08 10:26:01', '2016-10-08 10:26:01')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (1.4ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Andrei Voronkov'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.4ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Andrei Voronkov', '2016-10-08 10:26:01', '2016-10-08 10:26:01')[0m
  [1m[35m (0.3ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.4ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2020, 756, 2, '2016-10-08 10:26:01', '2016-10-08 10:26:01')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.1ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Krystof Hoder'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Krystof Hoder', '2016-10-08 10:26:01', '2016-10-08 10:26:01')
  [1m[36m (2.9ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2021, 756, 3, '2016-10-08 10:26:01', '2016-10-08 10:26:01')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (1.2ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Probabilistic Graphical Models on Multi-Core CPUs using Java 8'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Probabilistic Graphical Models on Multi-Core CPUs using Java 8', 'In this paper, we discuss software design issues related to the development of parallel computational intelligence algorithms on multi-core CPUs, using the new Java 8 functional programming features. In particular, we focus on probabilistic graphical models (PGMs) and present the parallelisation of a collection of algorithms that deal with inference and learning of PGMs from data. Namely, maximum likelihood estimation, importance sampling, and greedy search for solving combinatorial optimisation problems. Through these concrete examples, we tackle the problem of defining efficient data structures for PGMs and parallel processing of same-size batches of data sets using Java 8 features. We also provide straightforward techniques to code parallel algorithms that seamlessly exploit multi-core processors. The experimental analysis, carried out using our open source AMIDST (Analysis of MassIve Data STreams) Java toolbox, shows the merits of the proposed solutions.', 'cs.AI', '2016-04-27T09:28:27Z', 'http://dx.doi.org/10.1109/MCI.2016.2532267', '2016-10-08 10:26:01', '2016-10-08 10:26:01')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPublish Load (1.2ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 757[0m
  [1m[35mAuthor Load (1.1ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Andres R. Masegosa'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Andres R. Masegosa', '2016-10-08 10:26:01', '2016-10-08 10:26:01')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2022, 757, 0, '2016-10-08 10:26:01', '2016-10-08 10:26:01')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (1.3ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Ana M. Martinez'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.6ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Ana M. Martinez', '2016-10-08 10:26:01', '2016-10-08 10:26:01')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2023, 757, 1, '2016-10-08 10:26:01', '2016-10-08 10:26:01')
  [1m[36m (0.3ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.1ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Hanen Borchani'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Hanen Borchani', '2016-10-08 10:26:01', '2016-10-08 10:26:01')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2024, 757, 2, '2016-10-08 10:26:01', '2016-10-08 10:26:01')[0m
  [1m[35m (0.3ms)[0m  COMMIT
  [1m[36mPaper Load (2.1ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'The Power of Arc Consistency for CSPs Defined by Partially-Ordered Forbidden Patterns'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.3ms)[0m  BEGIN
  [1m[36mSQL (0.4ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('The Power of Arc Consistency for CSPs Defined by Partially-Ordered Forbidden Patterns', 'Characterising tractable fragments of the constraint satisfaction problem (CSP) is an important challenge in theoretical computer science and artificial intelligence. Forbidding patterns (generic sub-instances) provides a means of defining CSP fragments which are neither exclusively language-based nor exclusively structure-based. It is known that the class of binary CSP instances in which the broken-triangle pattern (BTP) does not occur, a class which includes all tree-structured instances, are decided by arc consistency (AC), a ubiquitous reduction operation in constraint solvers. We provide a characterisation of simple partially-ordered forbidden patterns which have this AC-solvability property. It turns out that BTP is just one of five such AC-solvable patterns. The four other patterns allow us to exhibit new tractable classes.', 'cs.CC', '2016-04-27T09:00:17Z', 'http://arxiv.org/abs/1604.07981v2', '2016-10-08 10:26:01', '2016-10-08 10:26:01')[0m
  [1m[35m (0.7ms)[0m  COMMIT
  [1m[36mPublish Load (2.0ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 758[0m
  [1m[35mAuthor Load (0.8ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Martin C. Cooper'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35m (0.1ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1366, 758, 0, '2016-10-08 10:26:01', '2016-10-08 10:26:01')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (3.0ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Stanislav Živný'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Stanislav Živný', '2016-10-08 10:26:01', '2016-10-08 10:26:01')
  [1m[36m (0.3ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2025, 758, 1, '2016-10-08 10:26:01', '2016-10-08 10:26:01')[0m
  [1m[35m (0.3ms)[0m  COMMIT
  [1m[36mPaper Load (0.9ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Distributed Flexible Nonlinear Tensor Factorization'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Distributed Flexible Nonlinear Tensor Factorization', 'Tensor factorization is a powerful tool to analyse multi-way data. Compared with traditional multi-linear methods, nonlinear tensor factorization models are capable of capturing more complex relationships in the data. However, they are computationally expensive and may suffer severe learning bias in case of extreme data sparsity. To overcome these limitations, in this paper we propose a distributed, flexible nonlinear tensor factorization model. Our model can effectively avoid the expensive computations and structural restrictions of the Kronecker-product in existing TGP formulations, allowing an arbitrary subset of tensorial entries to be selected to contribute to the training. At the same time, we derive a tractable and tight variational evidence lower bound (ELBO) that enables highly decoupled, parallel computations and high-quality inference. Based on the new bound, we develop a distributed inference algorithm in the MapReduce framework, which is key-value-free and can fully exploit the memory cache mechanism in fast MapReduce systems such as SPARK. Experimental results fully demonstrate the advantages of our method over several state-of-the-art approaches, in terms of both predictive performance and computational efficiency. Moreover, our approach shows a promising potential in the application of Click-Through-Rate (CTR) prediction for online advertising.', 'cs.LG', '2016-04-27T04:18:32Z', 'http://arxiv.org/abs/1604.07928v2', '2016-10-08 10:26:01', '2016-10-08 10:26:01')[0m
  [1m[35m (2.8ms)[0m  COMMIT
  [1m[36mPublish Load (1.7ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 759[0m
  [1m[35mAuthor Load (8.8ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Shandian Zhe'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.5ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Shandian Zhe', '2016-10-08 10:26:01', '2016-10-08 10:26:01')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.3ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2026, 759, 0, '2016-10-08 10:26:01', '2016-10-08 10:26:01')[0m
  [1m[35m (0.3ms)[0m  COMMIT
  [1m[36mAuthor Load (1.2ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Kai Zhang'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Kai Zhang', '2016-10-08 10:26:01', '2016-10-08 10:26:01')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2027, 759, 1, '2016-10-08 10:26:01', '2016-10-08 10:26:01')
  [1m[36m (0.3ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.0ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Pengyuan Wang'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Pengyuan Wang', '2016-10-08 10:26:01', '2016-10-08 10:26:01')
  [1m[36m (0.3ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2028, 759, 2, '2016-10-08 10:26:01', '2016-10-08 10:26:01')[0m
  [1m[35m (0.3ms)[0m  COMMIT
  [1m[36mAuthor Load (1.0ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Kuang-chih Lee'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Kuang-chih Lee', '2016-10-08 10:26:01', '2016-10-08 10:26:01')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2029, 759, 3, '2016-10-08 10:26:01', '2016-10-08 10:26:01')
  [1m[36m (0.3ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.0ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Zenglin Xu'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Zenglin Xu', '2016-10-08 10:26:01', '2016-10-08 10:26:01')
  [1m[36m (0.3ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2030, 759, 4, '2016-10-08 10:26:01', '2016-10-08 10:26:01')[0m
  [1m[35m (0.3ms)[0m  COMMIT
  [1m[36mAuthor Load (1.9ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Yuan Qi'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.4ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Yuan Qi', '2016-10-08 10:26:01', '2016-10-08 10:26:01')[0m
  [1m[35m (3.4ms)[0m  COMMIT
  [1m[36m (2.0ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2031, 759, 5, '2016-10-08 10:26:01', '2016-10-08 10:26:01')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.1ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Zoubin Ghahramani'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Zoubin Ghahramani', '2016-10-08 10:26:01', '2016-10-08 10:26:01')
  [1m[36m (6.0ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2032, 759, 6, '2016-10-08 10:26:01', '2016-10-08 10:26:01')[0m
  [1m[35m (6.1ms)[0m  COMMIT
  [1m[36mPaper Load (1.6ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Procedural Generation of Angry Birds Levels using Building Constructive Grammar with Chinese-Style and/or Japanese-Style Models'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Procedural Generation of Angry Birds Levels using Building Constructive Grammar with Chinese-Style and/or Japanese-Style Models', 'This paper presents a procedural generation method that creates visually attractive levels for the Angry Birds game. Besides being an immensely popular mobile game, Angry Birds has recently become a test bed for various artificial intelligence technologies. We propose a new approach for procedurally generating Angry Birds levels using Chinese style and Japanese style building structures. A conducted experiment confirms the effectiveness of our approach with statistical significance.', 'cs.AI', '2016-04-27T02:21:28Z', 'http://arxiv.org/abs/1604.07906v1', '2016-10-08 10:26:01', '2016-10-08 10:26:01')[0m
  [1m[35m (5.2ms)[0m  COMMIT
  [1m[36mPublish Load (1.8ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 760[0m
  [1m[35mAuthor Load (1.3ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'YuXuan Jiang'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.7ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('YuXuan Jiang', '2016-10-08 10:26:01', '2016-10-08 10:26:01')
  [1m[36m (2.9ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2033, 760, 0, '2016-10-08 10:26:01', '2016-10-08 10:26:01')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (1.3ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Misaki Kaidan'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Misaki Kaidan', '2016-10-08 10:26:01', '2016-10-08 10:26:01')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2034, 760, 1, '2016-10-08 10:26:01', '2016-10-08 10:26:01')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.5ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Chun Yin Chu'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Chun Yin Chu', '2016-10-08 10:26:01', '2016-10-08 10:26:01')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2035, 760, 2, '2016-10-08 10:26:01', '2016-10-08 10:26:01')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (1.4ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Tomohiro Harada'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Tomohiro Harada', '2016-10-08 10:26:01', '2016-10-08 10:26:01')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2036, 760, 3, '2016-10-08 10:26:01', '2016-10-08 10:26:01')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.0ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Ruck Thawonmas'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Ruck Thawonmas', '2016-10-08 10:26:01', '2016-10-08 10:26:01')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.4ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2037, 760, 4, '2016-10-08 10:26:01', '2016-10-08 10:26:01')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPaper Load (0.8ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Using Indirect Encoding of Multiple Brains to Produce Multimodal Behavior'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Using Indirect Encoding of Multiple Brains to Produce Multimodal Behavior', 'An important challenge in neuroevolution is to evolve complex neural networks with multiple modes of behavior. Indirect encodings can potentially answer this challenge. Yet in practice, indirect encodings do not yield effective multimodal controllers. Thus, this paper introduces novel multimodal extensions to HyperNEAT, a popular indirect encoding. A previous multimodal HyperNEAT approach called situational policy geometry assumes that multiple brains benefit from being embedded within an explicit geometric space. However, experiments here illustrate that this assumption unnecessarily constrains evolution, resulting in lower performance. Specifically, this paper introduces HyperNEAT extensions for evolving many brains without assuming geometric relationships between them. The resulting Multi-Brain HyperNEAT can exploit human-specified task divisions to decide when each brain controls the agent, or can automatically discover when brains should be used, by means of preference neurons. A further extension called module mutation allows evolution to discover the number of brains, enabling multimodal behavior with even less expert knowledge. Experiments in several multimodal domains highlight that multi-brain approaches are more effective than HyperNEAT without multimodal extensions, and show that brains without a geometric relation to each other outperform situational policy geometry. The conclusion is that Multi-Brain HyperNEAT provides several promising techniques for evolving complex multimodal behavior.', 'cs.AI', '2016-04-26T19:24:52Z', 'http://arxiv.org/abs/1604.07806v1', '2016-10-08 10:26:01', '2016-10-08 10:26:01')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPublish Load (1.2ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 761[0m
  [1m[35mAuthor Load (1.0ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Jacob Schrum'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Jacob Schrum', '2016-10-08 10:26:01', '2016-10-08 10:26:01')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.4ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2038, 761, 0, '2016-10-08 10:26:01', '2016-10-08 10:26:01')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (1.1ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Joel Lehman'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Joel Lehman', '2016-10-08 10:26:01', '2016-10-08 10:26:01')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2039, 761, 1, '2016-10-08 10:26:01', '2016-10-08 10:26:01')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.3ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Sebastian Risi'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.4ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Sebastian Risi', '2016-10-08 10:26:01', '2016-10-08 10:26:01')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2040, 761, 2, '2016-10-08 10:26:01', '2016-10-08 10:26:01')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (0.9ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Distributed Clustering of Linear Bandits in Peer to Peer Networks'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.4ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Distributed Clustering of Linear Bandits in Peer to Peer Networks', 'We provide two distributed confidence ball algorithms for solving linear bandit problems in peer to peer networks with limited communication capabilities. For the first, we assume that all the peers are solving the same linear bandit problem, and prove that our algorithm achieves the optimal asymptotic regret rate of any centralised algorithm that can instantly communicate information between the peers. For the second, we assume that there are clusters of peers solving the same bandit problem within each cluster, and we prove that our algorithm discovers these clusters, while achieving the optimal asymptotic regret rate within each one. Through experiments on several real-world datasets, we demonstrate the performance of proposed algorithms compared to the state-of-the-art.', 'cs.LG', '2016-04-26T14:59:43Z', 'http://arxiv.org/abs/1604.07706v3', '2016-10-08 10:26:01', '2016-10-08 10:26:01')[0m
  [1m[35m (2.8ms)[0m  COMMIT
  [1m[36mPublish Load (1.2ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 762[0m
  [1m[35mAuthor Load (1.0ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Nathan Korda'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Nathan Korda', '2016-10-08 10:26:01', '2016-10-08 10:26:01')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2041, 762, 0, '2016-10-08 10:26:01', '2016-10-08 10:26:01')[0m
  [1m[35m (0.3ms)[0m  COMMIT
  [1m[36mAuthor Load (1.4ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Balazs Szorenyi'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Balazs Szorenyi', '2016-10-08 10:26:01', '2016-10-08 10:26:01')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2042, 762, 1, '2016-10-08 10:26:01', '2016-10-08 10:26:01')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.6ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Shuai Li'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35m (0.1ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (489, 762, 2, '2016-10-08 10:26:01', '2016-10-08 10:26:01')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (1.1ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Tournament selection in zeroth-level classifier systems based on average reward reinforcement learning'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Tournament selection in zeroth-level classifier systems based on average reward reinforcement learning', 'As a genetics-based machine learning technique, zeroth-level classifier system (ZCS) is based on a discounted reward reinforcement learning algorithm, bucket-brigade algorithm, which optimizes the discounted total reward received by an agent but is not suitable for all multi-step problems, especially large-size ones. There are some undiscounted reinforcement learning methods available, such as R-learning, which optimize the average reward per time step. In this paper, R-learning is used as the reinforcement learning employed by ZCS, to replace its discounted reward reinforcement learning approach, and tournament selection is used to replace roulette wheel selection in ZCS. The modification results in classifier systems that can support long action chains, and thus is able to solve large multi-step problems.', 'cs.AI', '2016-04-26T14:57:56Z', 'http://arxiv.org/abs/1604.07704v1', '2016-10-08 10:26:01', '2016-10-08 10:26:01')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (1.3ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 763
  [1m[36mAuthor Load (1.1ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Zhaoxiang Zang'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Zhaoxiang Zang', '2016-10-08 10:26:01', '2016-10-08 10:26:01')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2043, 763, 0, '2016-10-08 10:26:01', '2016-10-08 10:26:01')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.2ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Zhao Li'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Zhao Li', '2016-10-08 10:26:01', '2016-10-08 10:26:01')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2044, 763, 1, '2016-10-08 10:26:01', '2016-10-08 10:26:01')[0m
  [1m[35m (0.3ms)[0m  COMMIT
  [1m[36mAuthor Load (1.0ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Junying Wang'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Junying Wang', '2016-10-08 10:26:01', '2016-10-08 10:26:01')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2045, 763, 2, '2016-10-08 10:26:01', '2016-10-08 10:26:01')
  [1m[36m (0.3ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.1ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Zhiping Dan'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Zhiping Dan', '2016-10-08 10:26:01', '2016-10-08 10:26:01')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2046, 763, 3, '2016-10-08 10:26:01', '2016-10-08 10:26:01')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (0.9ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Mutual Transformation of Information and Knowledge'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.4ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Mutual Transformation of Information and Knowledge', 'Information and knowledge are transformable into each other. Information transformation into knowledge by the example of rule generation from OWL (Web Ontology Language) ontology has been shown during the development of the SWES (Semantic Web Expert System). The SWES is expected as an expert system for searching OWL ontologies from the Web, generating rules from the found ontologies and supplementing the SWES knowledge base with these rules. The purpose of this paper is to show knowledge transformation into information by the example of ontology generation from rules.', 'cs.AI', '2016-04-26T11:31:02Z', 'http://arxiv.org/abs/1604.07625v1', '2016-10-08 10:26:01', '2016-10-08 10:26:01')[0m
  [1m[35m (3.0ms)[0m  COMMIT
  [1m[36mPublish Load (2.0ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 764[0m
  [1m[35mAuthor Load (1.8ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Olegs Verhodubs'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Olegs Verhodubs', '2016-10-08 10:26:01', '2016-10-08 10:26:01')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2047, 764, 0, '2016-10-08 10:26:01', '2016-10-08 10:26:01')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (1.0ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Semantic Change Detection with Hypermaps'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Semantic Change Detection with Hypermaps', 'Change detection is the study of detecting changes between two different images of a scene taken at different times. This paper proposes the concept of semantic change detection, which involves intuitively inserting semantic meaning into detected change areas. The problem to be solved consists of two parts, semantic segmentation and change detection. In order to solve this problem and obtain a high-level of performance, we propose an improvement to the hypercolumns representation, hereafter known as hypermaps, which effectively uses convolutional maps obtained from convolutional neural networks (CNNs). We also employ multi-scale feature representation captured by different image patches. We applied our method to the TSUNAMI Panoramic Change Detection dataset, and re-annotated the changed areas of the dataset via semantic classes. The results show that our multi-scale hypermaps provided outstanding performance on the re-annotated TSUNAMI dataset.', 'cs.CV', '2016-04-26T04:31:31Z', 'http://arxiv.org/abs/1604.07513v1', '2016-10-08 10:26:01', '2016-10-08 10:26:01')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPublish Load (1.4ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 765[0m
  [1m[35mAuthor Load (1.0ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Hirokatsu Kataoka'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Hirokatsu Kataoka', '2016-10-08 10:26:01', '2016-10-08 10:26:01')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.4ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2048, 765, 0, '2016-10-08 10:26:01', '2016-10-08 10:26:01')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (1.0ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Soma Shirakabe'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Soma Shirakabe', '2016-10-08 10:26:01', '2016-10-08 10:26:01')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2049, 765, 1, '2016-10-08 10:26:01', '2016-10-08 10:26:01')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.1ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Yudai Miyashita'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Yudai Miyashita', '2016-10-08 10:26:01', '2016-10-08 10:26:01')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2050, 765, 2, '2016-10-08 10:26:01', '2016-10-08 10:26:01')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (1.3ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Akio Nakamura'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Akio Nakamura', '2016-10-08 10:26:01', '2016-10-08 10:26:01')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2051, 765, 3, '2016-10-08 10:26:01', '2016-10-08 10:26:01')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.2ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Kenji Iwata'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Kenji Iwata', '2016-10-08 10:26:01', '2016-10-08 10:26:01')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2052, 765, 4, '2016-10-08 10:26:01', '2016-10-08 10:26:01')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (1.1ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Yutaka Satoh'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Yutaka Satoh', '2016-10-08 10:26:01', '2016-10-08 10:26:01')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2053, 765, 5, '2016-10-08 10:26:01', '2016-10-08 10:26:01')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.8ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Balancing Appearance and Context in Sketch Interpretation'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Balancing Appearance and Context in Sketch Interpretation', 'We describe a sketch interpretation system that detects and classifies clock numerals created by subjects taking the Clock Drawing Test, a clinical tool widely used to screen for cognitive impairments (e.g., dementia). We describe how it balances appearance and context, and document its performance on some 2,000 drawings (about 24K clock numerals) produced by a wide spectrum of patients. We calibrate the utility of different forms of context, describing experiments with Conditional Random Fields trained and tested using a variety of features. We identify context that contributes to interpreting otherwise ambiguous or incomprehensible strokes. We describe ST-slices, a novel representation that enables \"unpeeling\" the layers of ink that result when people overwrite, which often produces ink impossible to analyze if only the final drawing is examined. We characterize when ST-slices work, calibrate their impact on performance, and consider their breadth of applicability.', 'cs.AI', '2016-04-25T20:14:35Z', 'http://arxiv.org/abs/1604.07429v1', '2016-10-08 10:26:01', '2016-10-08 10:26:01')
  [1m[36m (4.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (1.9ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 766
  [1m[36mAuthor Load (1.7ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Yale Song'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Yale Song', '2016-10-08 10:26:01', '2016-10-08 10:26:01')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2054, 766, 0, '2016-10-08 10:26:01', '2016-10-08 10:26:01')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.3ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Randall Davis'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Randall Davis', '2016-10-08 10:26:01', '2016-10-08 10:26:01')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.4ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2055, 766, 1, '2016-10-08 10:26:01', '2016-10-08 10:26:01')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (1.2ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Kaichen Ma'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Kaichen Ma', '2016-10-08 10:26:01', '2016-10-08 10:26:01')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2056, 766, 2, '2016-10-08 10:26:01', '2016-10-08 10:26:01')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.4ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Dana L. Penny'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Dana L. Penny', '2016-10-08 10:26:01', '2016-10-08 10:26:01')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2057, 766, 3, '2016-10-08 10:26:01', '2016-10-08 10:26:01')[0m
  [1m[35m (0.3ms)[0m  COMMIT
  [1m[36mPaper Load (0.9ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Conversational Markers of Constructive Discussions'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Conversational Markers of Constructive Discussions', 'Group discussions are essential for organizing every aspect of modern life, from faculty meetings to senate debates, from grant review panels to papal conclaves. While costly in terms of time and organization effort, group discussions are commonly seen as a way of reaching better decisions compared to solutions that do not require coordination between the individuals (e.g. voting)---through discussion, the sum becomes greater than the parts. However, this assumption is not irrefutable: anecdotal evidence of wasteful discussions abounds, and in our own experiments we find that over 30% of discussions are unproductive. We propose a framework for analyzing conversational dynamics in order to determine whether a given task-oriented discussion is worth having or not. We exploit conversational patterns reflecting the flow of ideas and the balance between the participants, as well as their linguistic choices. We apply this framework to conversations naturally occurring in an online collaborative world exploration game developed and deployed to support this research. Using this setting, we show that linguistic cues and conversational patterns extracted from the first 20 seconds of a team discussion are predictive of whether it will be a wasteful or a productive one.', 'cs.CL', '2016-04-25T20:00:02Z', 'http://arxiv.org/abs/1604.07407v1', '2016-10-08 10:26:01', '2016-10-08 10:26:01')[0m
  [1m[35m (0.3ms)[0m  COMMIT
  [1m[36mPublish Load (1.0ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 767[0m
  [1m[35mAuthor Load (0.9ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Vlad Niculae'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Vlad Niculae', '2016-10-08 10:26:01', '2016-10-08 10:26:01')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2058, 767, 0, '2016-10-08 10:26:01', '2016-10-08 10:26:01')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (1.0ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Cristian Danescu-Niculescu-Mizil'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Cristian Danescu-Niculescu-Mizil', '2016-10-08 10:26:01', '2016-10-08 10:26:01')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2059, 767, 1, '2016-10-08 10:26:01', '2016-10-08 10:26:01')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.9ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Context Encoders: Feature Learning by Inpainting'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Context Encoders: Feature Learning by Inpainting', 'We present an unsupervised visual feature learning algorithm driven by context-based pixel prediction. By analogy with auto-encoders, we propose Context Encoders -- a convolutional neural network trained to generate the contents of an arbitrary image region conditioned on its surroundings. In order to succeed at this task, context encoders need to both understand the content of the entire image, as well as produce a plausible hypothesis for the missing part(s). When training context encoders, we have experimented with both a standard pixel-wise reconstruction loss, as well as a reconstruction plus an adversarial loss. The latter produces much sharper results because it can better handle multiple modes in the output. We found that a context encoder learns a representation that captures not just appearance but also the semantics of visual structures. We quantitatively demonstrate the effectiveness of our learned features for CNN pre-training on classification, detection, and segmentation tasks. Furthermore, context encoders can be used for semantic inpainting tasks, either stand-alone or as initialization for non-parametric methods.', 'cs.CV', '2016-04-25T19:42:46Z', 'http://arxiv.org/abs/1604.07379v1', '2016-10-08 10:26:01', '2016-10-08 10:26:01')
  [1m[36m (5.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (1.8ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 768
  [1m[36mAuthor Load (1.4ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Deepak Pathak'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Deepak Pathak', '2016-10-08 10:26:01', '2016-10-08 10:26:01')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2060, 768, 0, '2016-10-08 10:26:01', '2016-10-08 10:26:01')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.1ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Philipp Krahenbuhl'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35m (0.1ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1560, 768, 1, '2016-10-08 10:26:01', '2016-10-08 10:26:01')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.9ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Jeff Donahue'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35m (0.1ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1559, 768, 2, '2016-10-08 10:26:01', '2016-10-08 10:26:01')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.2ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Trevor Darrell'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35m (0.1ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1486, 768, 3, '2016-10-08 10:26:01', '2016-10-08 10:26:01')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.5ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Alexei A. Efros'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35m (0.1ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (211, 768, 4, '2016-10-08 10:26:01', '2016-10-08 10:26:01')
  [1m[36m (2.0ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (1.1ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Predictive No-Reference Assessment of Video Quality'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Predictive No-Reference Assessment of Video Quality', 'Among the various means to evaluate the quality of video streams, No-Reference (NR) methods have low computation and may be executed on thin clients. Thus, NR algorithms would be perfect candidates in cases of real-time quality assessment, automated quality control and, particularly, in adaptive mobile streaming. Yet, existing NR approaches are often inaccurate, in comparison to Full-Reference (FR) algorithms, especially under lossy network conditions. In this work, we present an NR method that combines machine learning with simple NR metrics to achieve a quality index comparably as accurate as the Video Quality Metric (VQM) Full-Reference algorithm. Our method is tested in an extensive dataset (960 videos), under lossy network conditions and considering nine different machine learning algorithms. Overall, we achieve an over 97% correlation with VQM, while allowing real-time assessment of video quality of experience in realistic streaming scenarios.', 'cs.MM', '2016-04-25T16:34:17Z', 'http://arxiv.org/abs/1604.07322v2', '2016-10-08 10:26:01', '2016-10-08 10:26:01')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (1.3ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 769
  [1m[36mAuthor Load (1.1ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Maria Torres Vega'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Maria Torres Vega', '2016-10-08 10:26:01', '2016-10-08 10:26:01')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.4ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2061, 769, 0, '2016-10-08 10:26:01', '2016-10-08 10:26:01')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.5ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Decebal Constantin Mocanu'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Decebal Constantin Mocanu', '2016-10-08 10:26:01', '2016-10-08 10:26:01')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2062, 769, 1, '2016-10-08 10:26:01', '2016-10-08 10:26:01')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (1.2ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Antonio Liotta'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Antonio Liotta', '2016-10-08 10:26:01', '2016-10-08 10:26:01')[0m
  [1m[35m (0.6ms)[0m  COMMIT
  [1m[36m (0.3ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2063, 769, 2, '2016-10-08 10:26:01', '2016-10-08 10:26:01')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.8ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Endgame Analysis of Dou Shou Qi'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Endgame Analysis of Dou Shou Qi', 'Dou Shou Qi is a game in which two players control a number of pieces, each of them aiming to move one of their pieces onto a given square. We implemented an engine for analyzing the game. Moreover, we created a series of endgame tablebases containing all configurations with up to four pieces. These tablebases are the first steps towards theoretically solving the game. Finally, we constructed decision trees based on the endgame tablebases. In this note we report on some interesting patterns.', 'cs.AI', '2016-04-25T15:35:38Z', 'http://arxiv.org/abs/1604.07312v1', '2016-10-08 10:26:01', '2016-10-08 10:26:01')
  [1m[36m (3.0ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (1.4ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 770
  [1m[36mAuthor Load (1.2ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Jan N. van Rijn'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Jan N. van Rijn', '2016-10-08 10:26:01', '2016-10-08 10:26:01')[0m
  [1m[35m (0.6ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2064, 770, 0, '2016-10-08 10:26:01', '2016-10-08 10:26:01')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.0ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Jonathan K. Vis'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Jonathan K. Vis', '2016-10-08 10:26:01', '2016-10-08 10:26:01')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2065, 770, 1, '2016-10-08 10:26:01', '2016-10-08 10:26:01')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPaper Load (0.9ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'A Deep Hierarchical Approach to Lifelong Learning in Minecraft'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('A Deep Hierarchical Approach to Lifelong Learning in Minecraft', 'The ability to reuse or transfer knowledge from one task to another in lifelong learning problems, such as Minecraft, is one of the major challenges faced in AI. Reusing knowledge across tasks is crucial to solving tasks efficiently with lower sample complexity. We provide a Reinforcement Learning agent with the ability to transfer knowledge by learning reusable skills, a type of temporally extended action (also know as Options (Sutton et. al. 1999)). The agent learns reusable skills using Deep Q Networks (Mnih et. al. 2015) to solve tasks in Minecraft, a popular video game which is an unsolved and high-dimensional lifelong learning problem. These reusable skills, which we refer to as Deep Skill Networks (DSNs), are then incorporated into our novel Hierarchical Deep Reinforcement Learning Network (H-DRLN) architecture. The H-DRLN is a hierarchical version of Deep QNetworks and learns to efficiently solve tasks by reusing knowledge from previously learned DSNs. The H-DRLN exhibits superior performance and lower learning sample complexity (by taking advantage of temporal extension) compared to the regular Deep Q Network (Mnih et. al. 2015) in subdomains of Minecraft. We also show the potential to transfer knowledge between related Minecraft tasks without any additional learning.', 'cs.AI', '2016-04-25T13:45:50Z', 'http://arxiv.org/abs/1604.07255v1', '2016-10-08 10:26:01', '2016-10-08 10:26:01')[0m
  [1m[35m (1.5ms)[0m  COMMIT
  [1m[36mPublish Load (1.6ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 771[0m
  [1m[35mAuthor Load (1.2ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Chen Tessler'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Chen Tessler', '2016-10-08 10:26:01', '2016-10-08 10:26:01')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2066, 771, 0, '2016-10-08 10:26:01', '2016-10-08 10:26:01')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (1.2ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Shahar Givony'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Shahar Givony', '2016-10-08 10:26:01', '2016-10-08 10:26:01')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2067, 771, 1, '2016-10-08 10:26:01', '2016-10-08 10:26:01')
  [1m[36m (0.3ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.7ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Tom Zahavy'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35m (0.1ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1238, 771, 2, '2016-10-08 10:26:01', '2016-10-08 10:26:01')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.2ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Daniel J. Mankowitz'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Daniel J. Mankowitz', '2016-10-08 10:26:01', '2016-10-08 10:26:01')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2068, 771, 3, '2016-10-08 10:26:01', '2016-10-08 10:26:01')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.4ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Shie Mannor'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36m (0.2ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (12, 771, 4, '2016-10-08 10:26:01', '2016-10-08 10:26:01')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPaper Load (0.8ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'AGM-Style Revision of Beliefs and Intentions from a Database Perspective (Preliminary Version)'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('AGM-Style Revision of Beliefs and Intentions from a Database Perspective (Preliminary Version)', 'We introduce a logic for temporal beliefs and intentions based on Shoham\'s database perspective. We separate strong beliefs from weak beliefs. Strong beliefs are independent from intentions, while weak beliefs are obtained by adding intentions to strong beliefs and everything that follows from that. We formalize coherence conditions on strong beliefs and intentions. We provide AGM-style postulates for the revision of strong beliefs and intentions. We show in a representation theorem that a revision operator satisfying our postulates can be represented by a pre-order on interpretations of the beliefs, together with a selection function for the intentions.', 'cs.AI', '2016-04-25T09:44:02Z', 'http://arxiv.org/abs/1604.07183v2', '2016-10-08 10:26:01', '2016-10-08 10:26:01')[0m
  [1m[35m (2.9ms)[0m  COMMIT
  [1m[36mPublish Load (1.8ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 772[0m
  [1m[35mAuthor Load (1.7ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Marc van Zee'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Marc van Zee', '2016-10-08 10:26:01', '2016-10-08 10:26:01')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2069, 772, 0, '2016-10-08 10:26:01', '2016-10-08 10:26:01')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (1.3ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Dragan Doder'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Dragan Doder', '2016-10-08 10:26:01', '2016-10-08 10:26:01')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2070, 772, 1, '2016-10-08 10:26:01', '2016-10-08 10:26:01')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.9ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Weighted Spectral Cluster Ensemble'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Weighted Spectral Cluster Ensemble', 'Clustering explores meaningful patterns in the non-labeled data sets. Cluster Ensemble Selection (CES) is a new approach, which can combine individual clustering results for increasing the performance of the final results. Although CES can achieve better final results in comparison with individual clustering algorithms and cluster ensemble methods, its performance can be dramatically affected by its consensus diversity metric and thresholding procedure. There are two problems in CES: 1) most of the diversity metrics is based on heuristic Shannon\'s entropy and 2) estimating threshold values are really hard in practice. The main goal of this paper is proposing a robust approach for solving the above mentioned problems. Accordingly, this paper develops a novel framework for clustering problems, which is called Weighted Spectral Cluster Ensemble (WSCE), by exploiting some concepts from community detection arena and graph based clustering. Under this framework, a new version of spectral clustering, which is called Two Kernels Spectral Clustering, is used for generating graphs based individual clustering results. Further, by using modularity, which is a famous metric in the community detection, on the transformed graph representation of individual clustering results, our approach provides an effective diversity estimation for individual clustering results. Moreover, this paper introduces a new approach for combining the evaluated individual clustering results without the procedure of thresholding. Experimental study on varied data sets demonstrates that the prosed approach achieves superior performance to state-of-the-art methods.', 'cs.LG', '2016-04-25T09:29:21Z', 'http://dx.doi.org/10.1109/ICDM.2015.145', '2016-10-08 10:26:01', '2016-10-08 10:26:01')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (1.0ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 773
  [1m[36mAuthor Load (0.9ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Muhammad Yousefnezhad'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36m (0.1ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1836, 773, 0, '2016-10-08 10:26:01', '2016-10-08 10:26:01')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (1.2ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Daoqiang Zhang'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Daoqiang Zhang', '2016-10-08 10:26:01', '2016-10-08 10:26:01')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2071, 773, 1, '2016-10-08 10:26:01', '2016-10-08 10:26:01')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.8ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Protein Secondary Structure Prediction Using Cascaded Convolutional and Recurrent Neural Networks'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Protein Secondary Structure Prediction Using Cascaded Convolutional and Recurrent Neural Networks', 'Protein secondary structure prediction is an important problem in bioinformatics. Inspired by the recent successes of deep neural networks, in this paper, we propose an end-to-end deep network that predicts protein secondary structures from integrated local and global contextual features. Our deep architecture leverages convolutional neural networks with different kernel sizes to extract multiscale local contextual features. In addition, considering long-range dependencies existing in amino acid sequences, we set up a bidirectional neural network consisting of gated recurrent unit to capture global contextual features. Furthermore, multi-task learning is utilized to predict secondary structure labels and amino-acid solvent accessibility simultaneously. Our proposed deep network demonstrates its effectiveness by achieving state-of-the-art performance, i.e., 69.7% Q8 accuracy on the public benchmark CB513, 76.9% Q8 accuracy on CASP10 and 73.1% Q8 accuracy on CASP11. Our model and results are publicly available.', 'q-bio.BM', '2016-04-25T09:17:18Z', 'http://arxiv.org/abs/1604.07176v1', '2016-10-08 10:26:01', '2016-10-08 10:26:01')
  [1m[36m (2.9ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (1.8ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 774
  [1m[36mAuthor Load (1.4ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Zhen Li'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Zhen Li', '2016-10-08 10:26:01', '2016-10-08 10:26:01')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2072, 774, 0, '2016-10-08 10:26:01', '2016-10-08 10:26:01')
  [1m[36m (0.8ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.3ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Yizhou Yu'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Yizhou Yu', '2016-10-08 10:26:01', '2016-10-08 10:26:01')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2073, 774, 1, '2016-10-08 10:26:01', '2016-10-08 10:26:01')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (1.0ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Makeup like a superstar: Deep Localized Makeup Transfer Network'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Makeup like a superstar: Deep Localized Makeup Transfer Network', 'In this paper, we propose a novel Deep Localized Makeup Transfer Network to automatically recommend the most suitable makeup for a female and synthesis the makeup on her face. Given a before-makeup face, her most suitable makeup is determined automatically. Then, both the beforemakeup and the reference faces are fed into the proposed Deep Transfer Network to generate the after-makeup face. Our end-to-end makeup transfer network have several nice properties including: (1) with complete functions: including foundation, lip gloss, and eye shadow transfer; (2) cosmetic specific: different cosmetics are transferred in different manners; (3) localized: different cosmetics are applied on different facial regions; (4) producing naturally looking results without obvious artifacts; (5) controllable makeup lightness: various results from light makeup to heavy makeup can be generated. Qualitative and quantitative experiments show that our network performs much better than the methods of [Guo and Sim, 2009] and two variants of NerualStyle [Gatys et al., 2015a].', 'cs.CV', '2016-04-25T01:01:51Z', 'http://arxiv.org/abs/1604.07102v1', '2016-10-08 10:26:01', '2016-10-08 10:26:01')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPublish Load (1.4ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 775[0m
  [1m[35mAuthor Load (1.1ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Si Liu'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Si Liu', '2016-10-08 10:26:01', '2016-10-08 10:26:01')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2074, 775, 0, '2016-10-08 10:26:01', '2016-10-08 10:26:01')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (1.0ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Xinyu Ou'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Xinyu Ou', '2016-10-08 10:26:01', '2016-10-08 10:26:01')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2075, 775, 1, '2016-10-08 10:26:01', '2016-10-08 10:26:01')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.5ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Ruihe Qian'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Ruihe Qian', '2016-10-08 10:26:01', '2016-10-08 10:26:01')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2076, 775, 2, '2016-10-08 10:26:01', '2016-10-08 10:26:01')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (1.3ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Wei Wang'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Wei Wang', '2016-10-08 10:26:01', '2016-10-08 10:26:01')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2077, 775, 3, '2016-10-08 10:26:01', '2016-10-08 10:26:01')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.3ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Xiaochun Cao'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Xiaochun Cao', '2016-10-08 10:26:01', '2016-10-08 10:26:01')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2078, 775, 4, '2016-10-08 10:26:01', '2016-10-08 10:26:01')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (0.9ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Neurohex: A Deep Q-learning Hex Agent'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Neurohex: A Deep Q-learning Hex Agent', 'DeepMind\'s recent spectacular success in using deep convolutional neural nets and machine learning to build superhuman level agents --- e.g. for Atari games via deep Q-learning and for the game of Go via Reinforcement Learning --- raises many questions, including to what extent these methods will succeed in other domains. In this paper we consider DQL for the game of Hex: after supervised initialization, we use selfplay to train NeuroHex, an 11-layer CNN that plays Hex on the 13x13 board. Hex is the classic two-player alternate-turn stone placement game played on a rhombus of hexagonal cells in which the winner is whomever connects their two opposing sides. Despite the large action and state space, our system trains a Q-network capable of strong play with no search. After two weeks of Q-learning, NeuroHex achieves win-rates of 20.4% as first player and 2.1% as second player against a 1-second/move version of MoHex, the current ICGA Olympiad Hex champion. Our data suggests further improvement might be possible with more training time.', 'cs.AI', '2016-04-24T23:56:37Z', 'http://arxiv.org/abs/1604.07097v2', '2016-10-08 10:26:01', '2016-10-08 10:26:01')[0m
  [1m[35m (3.0ms)[0m  COMMIT
  [1m[36mPublish Load (1.8ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 776[0m
  [1m[35mAuthor Load (1.4ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Kenny Young'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Kenny Young', '2016-10-08 10:26:01', '2016-10-08 10:26:01')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2079, 776, 0, '2016-10-08 10:26:01', '2016-10-08 10:26:01')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (1.3ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Ryan Hayward'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Ryan Hayward', '2016-10-08 10:26:01', '2016-10-08 10:26:01')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2080, 776, 1, '2016-10-08 10:26:01', '2016-10-08 10:26:01')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.0ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Gautham Vasan'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Gautham Vasan', '2016-10-08 10:26:01', '2016-10-08 10:26:01')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2081, 776, 2, '2016-10-08 10:26:01', '2016-10-08 10:26:01')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPaper Load (0.9ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Deep Learning for Reward Design to Improve Monte Carlo Tree Search in ATARI Games'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Deep Learning for Reward Design to Improve Monte Carlo Tree Search in ATARI Games', 'Monte Carlo Tree Search (MCTS) methods have proven powerful in planning for sequential decision-making problems such as Go and video games, but their performance can be poor when the planning depth and sampling trajectories are limited or when the rewards are sparse. We present an adaptation of PGRD (policy-gradient for reward-design) for learning a reward-bonus function to improve UCT (a MCTS algorithm). Unlike previous applications of PGRD in which the space of reward-bonus functions was limited to linear functions of hand-coded state-action-features, we use PGRD with a multi-layer convolutional neural network to automatically learn features from raw perception as well as to adapt the non-linear reward-bonus function parameters. We also adopt a variance-reducing gradient method to improve PGRD\'s performance. The new method improves UCT\'s performance on multiple ATARI games compared to UCT without the reward bonus. Combining PGRD and Deep Learning in this way should make adapting rewards for MCTS algorithms far more widely and practically applicable than before.', 'cs.AI', '2016-04-24T23:51:18Z', 'http://arxiv.org/abs/1604.07095v1', '2016-10-08 10:26:02', '2016-10-08 10:26:02')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPublish Load (1.2ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 777[0m
  [1m[35mAuthor Load (1.1ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Xiaoxiao Guo'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Xiaoxiao Guo', '2016-10-08 10:26:02', '2016-10-08 10:26:02')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2082, 777, 0, '2016-10-08 10:26:02', '2016-10-08 10:26:02')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.9ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Satinder Singh'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36m (0.1ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1604, 777, 1, '2016-10-08 10:26:02', '2016-10-08 10:26:02')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (1.2ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Richard Lewis'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Richard Lewis', '2016-10-08 10:26:02', '2016-10-08 10:26:02')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2083, 777, 2, '2016-10-08 10:26:02', '2016-10-08 10:26:02')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.1ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Honglak Lee'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35m (0.2ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.4ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1605, 777, 3, '2016-10-08 10:26:02', '2016-10-08 10:26:02')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.9ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Semi-supervised Vocabulary-informed Learning'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Semi-supervised Vocabulary-informed Learning', 'Despite significant progress in object categorization, in recent years, a number of important challenges remain, mainly, ability to learn from limited labeled data and ability to recognize object classes within large, potentially open, set of labels. Zero-shot learning is one way of addressing these challenges, but it has only been shown to work with limited sized class vocabularies and typically requires separation between supervised and unsupervised classes, allowing former to inform the latter but not vice versa. We propose the notion of semi-supervised vocabulary-informed learning to alleviate the above mentioned challenges and address problems of supervised, zero-shot and open set recognition using a unified framework. Specifically, we propose a maximum margin framework for semantic manifold-based recognition that incorporates distance constraints from (both supervised and unsupervised) vocabulary atoms, ensuring that labeled samples are projected closest to their correct prototypes, in the embedding space, than to others. We show that resulting model shows improvements in supervised, zero-shot, and large open set recognition, with up to 310K class vocabulary on AwA and ImageNet datasets.', 'cs.CV', '2016-04-24T23:36:36Z', 'http://arxiv.org/abs/1604.07093v1', '2016-10-08 10:26:02', '2016-10-08 10:26:02')
  [1m[36m (3.0ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (1.9ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 778
  [1m[36mAuthor Load (1.2ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Yanwei Fu'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Yanwei Fu', '2016-10-08 10:26:02', '2016-10-08 10:26:02')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2084, 778, 0, '2016-10-08 10:26:02', '2016-10-08 10:26:02')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.2ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Leonid Sigal'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Leonid Sigal', '2016-10-08 10:26:02', '2016-10-08 10:26:02')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2085, 778, 1, '2016-10-08 10:26:02', '2016-10-08 10:26:02')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPaper Load (0.9ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'The Dichotomy for Conservative Constraint Satisfaction is Polynomially Decidable'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('The Dichotomy for Conservative Constraint Satisfaction is Polynomially Decidable', 'Given a fixed constraint language $\\Gamma$, the conservative CSP over $\\Gamma$ (denoted by c-CSP($\\Gamma$)) is a variant of CSP($\\Gamma$) where the domain of each variable can be restricted arbitrarily. A dichotomy is known for conservative CSP: for every fixed language $\\Gamma$, c-CSP($\\Gamma$) is either in P or NP-complete. However, the characterization of conservatively tractable languages is of algebraic nature and the naive recognition algorithm is super-exponential in the domain size. The main contribution of this paper is a polynomial-time algorithm that, given a constraint language $\\Gamma$ as input, decides if c-CSP($\\Gamma$) is tractable. In addition, if $\\Gamma$ is proven tractable the algorithm also outputs its coloured graph, which contains valuable information on the structure of $\\Gamma$.', 'cs.CC', '2016-04-24T17:56:44Z', 'http://arxiv.org/abs/1604.07063v2', '2016-10-08 10:26:02', '2016-10-08 10:26:02')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPublish Load (1.2ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 779[0m
  [1m[35mAuthor Load (1.1ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Clément Carbonnel'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Clément Carbonnel', '2016-10-08 10:26:02', '2016-10-08 10:26:02')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2086, 779, 0, '2016-10-08 10:26:02', '2016-10-08 10:26:02')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPaper Load (0.8ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Extracted Social Network Mining'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Extracted Social Network Mining', 'In this paper we study the relationship between the resources of social networks by exploring the Web as big data based on a simple search engine. We have used set theory by utilizing the occurrence and co-occurrence for defining the singleton or doubleton spaces of event in a search engine model, and then provided them as representation of social actors and their relationship in clusters. Thus, there are behaviors of social actors and their relation based on Web.', 'cs.SI', '2016-04-24T02:39:16Z', 'http://arxiv.org/abs/1604.06976v1', '2016-10-08 10:26:02', '2016-10-08 10:26:02')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPublish Load (1.5ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 780[0m
  [1m[35mAuthor Load (1.1ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Mahyuddin K. M. Nasution'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Mahyuddin K. M. Nasution', '2016-10-08 10:26:02', '2016-10-08 10:26:02')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2087, 780, 0, '2016-10-08 10:26:02', '2016-10-08 10:26:02')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (1.0ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Bayesian Inference of Recursive Sequences of Group Activities from Tracks'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.4ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Bayesian Inference of Recursive Sequences of Group Activities from Tracks', 'We present a probabilistic generative model for inferring a description of coordinated, recursively structured group activities at multiple levels of temporal granularity based on observations of individuals\' trajectories. The model accommodates: (1) hierarchically structured groups, (2) activities that are temporally and compositionally recursive, (3) component roles assigning different subactivity dynamics to subgroups of participants, and (4) a nonparametric Gaussian Process model of trajectories. We present an MCMC sampling framework for performing joint inference over recursive activity descriptions and assignment of trajectories to groups, integrating out continuous parameters. We demonstrate the model\'s expressive power in several simulated and complex real-world scenarios from the VIRAT and UCLA Aerial Event video data sets.', 'cs.AI', '2016-04-24T00:55:27Z', 'http://arxiv.org/abs/1604.06970v1', '2016-10-08 10:26:02', '2016-10-08 10:26:02')[0m
  [1m[35m (2.9ms)[0m  COMMIT
  [1m[36mPublish Load (1.8ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 781[0m
  [1m[35mAuthor Load (1.3ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Ernesto Brau'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Ernesto Brau', '2016-10-08 10:26:02', '2016-10-08 10:26:02')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2088, 781, 0, '2016-10-08 10:26:02', '2016-10-08 10:26:02')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (1.1ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Colin Dawson'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Colin Dawson', '2016-10-08 10:26:02', '2016-10-08 10:26:02')[0m
  [1m[35m (0.3ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2089, 781, 1, '2016-10-08 10:26:02', '2016-10-08 10:26:02')
  [1m[36m (2.3ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.4ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Alfredo Carrillo'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Alfredo Carrillo', '2016-10-08 10:26:02', '2016-10-08 10:26:02')
  [1m[36m (0.6ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2090, 781, 2, '2016-10-08 10:26:02', '2016-10-08 10:26:02')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (1.1ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'David Sidi'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('David Sidi', '2016-10-08 10:26:02', '2016-10-08 10:26:02')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2091, 781, 3, '2016-10-08 10:26:02', '2016-10-08 10:26:02')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.3ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Clayton T. Morrison'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Clayton T. Morrison', '2016-10-08 10:26:02', '2016-10-08 10:26:02')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.4ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2092, 781, 4, '2016-10-08 10:26:02', '2016-10-08 10:26:02')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (0.9ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Limits to Verification and Validation of Agentic Behavior'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Limits to Verification and Validation of Agentic Behavior', 'Verification and validation of agentic behavior have been suggested as important research priorities in efforts to reduce risks associated with the creation of general artificial intelligence (Russell et al 2015). In this paper we question the appropriateness of using language of certainty with respect to efforts to manage that risk. We begin by establishing a very general formalism to characterize agentic behavior and to describe standards of acceptable behavior. We show that determination of whether an agent meets any particular standard is not computable. We discuss the extent of the burden associated with verification by manual proof and by automated behavioral governance. We show that to ensure decidability of the behavioral standard itself, one must further limit the capabilities of the agent. We then demonstrate that if our concerns relate to outcomes in the physical world, attempts at validation are futile. Finally, we show that layered architectures aimed at making these challenges tractable mistakenly equate intentions with actions or outcomes, thereby failing to provide any guarantees. We conclude with a discussion of why language of certainty should be eradicated from the conversation about the safety of general artificial intelligence.', 'cs.AI', '2016-04-23T23:01:29Z', 'http://arxiv.org/abs/1604.06963v1', '2016-10-08 10:26:02', '2016-10-08 10:26:02')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPublish Load (1.4ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 782[0m
  [1m[35mAuthor Load (1.0ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'David J. Jilk'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('David J. Jilk', '2016-10-08 10:26:02', '2016-10-08 10:26:02')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2093, 782, 0, '2016-10-08 10:26:02', '2016-10-08 10:26:02')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPaper Load (0.9ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'RHOG: A Refinement-Operator Library for Directed Labeled Graphs'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('RHOG: A Refinement-Operator Library for Directed Labeled Graphs', 'This document provides the foundations behind the functionality provided by the $\\rho$G library (https://github.com/santiontanon/RHOG), focusing on the basic operations the library provides: subsumption, refinement of directed labeled graphs, and distance/similarity assessment between directed labeled graphs. $\\rho$G development was initially supported by the National Science Foundation, by the EAGER grant IIS-1551338.', 'cs.AI', '2016-04-23T21:03:45Z', 'http://arxiv.org/abs/1604.06954v1', '2016-10-08 10:26:02', '2016-10-08 10:26:02')[0m
  [1m[35m (2.9ms)[0m  COMMIT
  [1m[36mPublish Load (1.8ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 783[0m
  [1m[35mAuthor Load (0.9ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Santiago Ontañón'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35m (0.1ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1117, 783, 0, '2016-10-08 10:26:02', '2016-10-08 10:26:02')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.9ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'A Computational Model for Situated Task Learning with Interactive Instruction'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('A Computational Model for Situated Task Learning with Interactive Instruction', 'Learning novel tasks is a complex cognitive activity requiring the learner to acquire diverse declarative and procedural knowledge. Prior ACT-R models of acquiring task knowledge from instruction focused on learning procedural knowledge from declarative instructions encoded in semantic memory. In this paper, we identify the requirements for designing compu- tational models that learn task knowledge from situated task- oriented interactions with an expert and then describe and evaluate a model of learning from situated interactive instruc- tion that is implemented in the Soar cognitive architecture.', 'cs.AI', '2016-04-23T02:23:14Z', 'http://arxiv.org/abs/1604.06849v1', '2016-10-08 10:26:02', '2016-10-08 10:26:02')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (1.6ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 784
  [1m[36mAuthor Load (1.0ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Shiwali Mohan'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Shiwali Mohan', '2016-10-08 10:26:02', '2016-10-08 10:26:02')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2094, 784, 0, '2016-10-08 10:26:02', '2016-10-08 10:26:02')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.4ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'James Kirk'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('James Kirk', '2016-10-08 10:26:02', '2016-10-08 10:26:02')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2095, 784, 1, '2016-10-08 10:26:02', '2016-10-08 10:26:02')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (1.1ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'John Laird'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('John Laird', '2016-10-08 10:26:02', '2016-10-08 10:26:02')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2096, 784, 2, '2016-10-08 10:26:02', '2016-10-08 10:26:02')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (1.0ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'DisCSPs with Privacy Recast as Planning Problems for Utility-based Agents'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('DisCSPs with Privacy Recast as Planning Problems for Utility-based Agents', 'Privacy has traditionally been a major motivation for decentralized problem solving. However, even though several metrics have been proposed to quantify it, none of them is easily integrated with common solvers. Constraint programming is a fundamental paradigm used to approach various families of problems. We introduce Utilitarian Distributed Constraint Satisfaction Problems (UDisCSP) where the utility of each state is estimated as the difference between the the expected rewards for agreements on assignments for shared variables, and the expected cost of privacy loss. Therefore, a traditional DisCSP with privacy requirements is viewed as a planning problem. The actions available to agents are: communication and local inference. Common decentralized solvers are evaluated here from the point of view of their interpretation as greedy planners. Further, we investigate some simple extensions where these solvers start taking into account the utility function. In these extensions we assume that the planning problem is further restricting the set of communication actions to only the communication primitives present in the corresponding solver protocols. The solvers obtained for the new type of problems propose the action (communication/inference) to be performed in each situation, defining thereby the policy.', 'cs.AI', '2016-04-22T19:35:49Z', 'http://arxiv.org/abs/1604.06790v1', '2016-10-08 10:26:02', '2016-10-08 10:26:02')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (1.6ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 785
  [1m[36mAuthor Load (1.4ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Julien Savaux'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Julien Savaux', '2016-10-08 10:26:02', '2016-10-08 10:26:02')[0m
  [1m[35m (2.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.4ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2097, 785, 0, '2016-10-08 10:26:02', '2016-10-08 10:26:02')
  [1m[36m (2.9ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (3.0ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Julien Vion'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Julien Vion', '2016-10-08 10:26:02', '2016-10-08 10:26:02')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2098, 785, 1, '2016-10-08 10:26:02', '2016-10-08 10:26:02')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (2.1ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Sylvain Piechowiak'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Sylvain Piechowiak', '2016-10-08 10:26:02', '2016-10-08 10:26:02')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2099, 785, 2, '2016-10-08 10:26:02', '2016-10-08 10:26:02')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.3ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'René Mandiau'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('René Mandiau', '2016-10-08 10:26:02', '2016-10-08 10:26:02')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2100, 785, 3, '2016-10-08 10:26:02', '2016-10-08 10:26:02')[0m
  [1m[35m (0.6ms)[0m  COMMIT
  [1m[36mAuthor Load (1.0ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Toshihiro Matsui'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Toshihiro Matsui', '2016-10-08 10:26:02', '2016-10-08 10:26:02')[0m
  [1m[35m (15.6ms)[0m  COMMIT
  [1m[36m (0.3ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2101, 785, 4, '2016-10-08 10:26:02', '2016-10-08 10:26:02')
  [1m[36m (16.8ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.9ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Katsutoshi Hirayama'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.4ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Katsutoshi Hirayama', '2016-10-08 10:26:02', '2016-10-08 10:26:02')
  [1m[36m (1.0ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.4ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2102, 785, 5, '2016-10-08 10:26:02', '2016-10-08 10:26:02')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (1.5ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Makoto Yokoo'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Makoto Yokoo', '2016-10-08 10:26:02', '2016-10-08 10:26:02')[0m
  [1m[35m (0.3ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2103, 785, 6, '2016-10-08 10:26:02', '2016-10-08 10:26:02')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.4ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Shakre Elmane'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Shakre Elmane', '2016-10-08 10:26:02', '2016-10-08 10:26:02')
  [1m[36m (0.6ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2104, 785, 7, '2016-10-08 10:26:02', '2016-10-08 10:26:02')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (1.2ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Marius Silaghi'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Marius Silaghi', '2016-10-08 10:26:02', '2016-10-08 10:26:02')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2105, 785, 8, '2016-10-08 10:26:02', '2016-10-08 10:26:02')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (1.0ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Utilitarian Distributed Constraint Optimization Problems'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Utilitarian Distributed Constraint Optimization Problems', 'Privacy has been a major motivation for distributed problem optimization. However, even though several methods have been proposed to evaluate it, none of them is widely used. The Distributed Constraint Optimization Problem (DCOP) is a fundamental model used to approach various families of distributed problems. As privacy loss does not occur when a solution is accepted, but when it is proposed, privacy requirements cannot be interpreted as a criteria of the objective function of the DCOP. Here we approach the problem by letting both the optimized costs found in DCOPs and the privacy requirements guide the agents\' exploration of the search space. We introduce Utilitarian Distributed Constraint Optimization Problem (UDCOP) where the costs and the privacy requirements are used as parameters to a heuristic modifying the search process. Common stochastic algorithms for decentralized constraint optimization problems are evaluated here according to how well they preserve privacy. Further, we propose some extensions where these solvers modify their search process to take into account their privacy requirements, succeeding in significantly reducing their privacy loss without significant degradation of the solution quality.', 'cs.AI', '2016-04-22T19:26:30Z', 'http://arxiv.org/abs/1604.06787v1', '2016-10-08 10:26:02', '2016-10-08 10:26:02')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (1.3ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 786
  [1m[36mAuthor Load (1.0ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Julien Savaux'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36m (0.1ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2097, 786, 0, '2016-10-08 10:26:02', '2016-10-08 10:26:02')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (1.2ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Julien Vion'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36m (0.1ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2098, 786, 1, '2016-10-08 10:26:02', '2016-10-08 10:26:02')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (1.2ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Sylvain Piechowiak'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36m (0.1ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2099, 786, 2, '2016-10-08 10:26:02', '2016-10-08 10:26:02')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (1.3ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'René Mandiau'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36m (0.1ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2100, 786, 3, '2016-10-08 10:26:02', '2016-10-08 10:26:02')[0m
  [1m[35m (0.7ms)[0m  COMMIT
  [1m[36mAuthor Load (1.1ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Toshihiro Matsui'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36m (0.1ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2101, 786, 4, '2016-10-08 10:26:02', '2016-10-08 10:26:02')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (1.3ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Katsutoshi Hirayama'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36m (0.1ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2102, 786, 5, '2016-10-08 10:26:02', '2016-10-08 10:26:02')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (1.3ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Makoto Yokoo'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36m (0.2ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2103, 786, 6, '2016-10-08 10:26:02', '2016-10-08 10:26:02')[0m
  [1m[35m (0.3ms)[0m  COMMIT
  [1m[36mAuthor Load (1.0ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Shakre Elmane'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36m (0.1ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2104, 786, 7, '2016-10-08 10:26:02', '2016-10-08 10:26:02')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (1.3ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Marius Silaghi'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36m (0.1ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2105, 786, 8, '2016-10-08 10:26:02', '2016-10-08 10:26:02')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (0.9ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Benchmarking Deep Reinforcement Learning for Continuous Control'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Benchmarking Deep Reinforcement Learning for Continuous Control', 'Recently, researchers have made significant progress combining the advances in deep learning for learning feature representations with reinforcement learning. Some notable examples include training agents to play Atari games based on raw pixel data and to acquire advanced manipulation skills using raw sensory inputs. However, it has been difficult to quantify progress in the domain of continuous control due to the lack of a commonly adopted benchmark. In this work, we present a benchmark suite of continuous control tasks, including classic tasks like cart-pole swing-up, tasks with very high state and action dimensionality such as 3D humanoid locomotion, tasks with partial observations, and tasks with hierarchical structure. We report novel findings based on the systematic evaluation of a range of implemented reinforcement learning algorithms. Both the benchmark and reference implementations are released at https://github.com/rllab/rllab in order to facilitate experimental reproducibility and to encourage adoption by other researchers.', 'cs.LG', '2016-04-22T18:57:24Z', 'http://arxiv.org/abs/1604.06778v3', '2016-10-08 10:26:02', '2016-10-08 10:26:02')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPublish Load (1.2ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 787[0m
  [1m[35mAuthor Load (0.9ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Yan Duan'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35m (0.1ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1574, 787, 0, '2016-10-08 10:26:02', '2016-10-08 10:26:02')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.0ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Xi Chen'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35m (0.2ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1573, 787, 1, '2016-10-08 10:26:02', '2016-10-08 10:26:02')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.9ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Rein Houthooft'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35m (0.1ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1572, 787, 2, '2016-10-08 10:26:02', '2016-10-08 10:26:02')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.8ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'John Schulman'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35m (0.1ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1169, 787, 3, '2016-10-08 10:26:02', '2016-10-08 10:26:02')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.7ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Pieter Abbeel'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35m (0.1ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1124, 787, 4, '2016-10-08 10:26:02', '2016-10-08 10:26:02')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (1.0ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'A Hybrid Approach to Query Answering under Expressive Datalog+/-'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('A Hybrid Approach to Query Answering under Expressive Datalog+/-', 'Datalog+/- is a family of ontology languages that combine good computational properties with high expressive power. Datalog+/- languages are provably able to capture the most relevant Semantic Web languages. In this paper we consider the class of weakly-sticky (WS) Datalog+/- programs, which allow for certain useful forms of joins in rule bodies as well as extending the well-known class of weakly-acyclic TGDs. So far, only non-deterministic algorithms were known for answering queries on WS Datalog+/- programs. We present novel deterministic query answering algorithms under WS Datalog+/-. In particular, we propose: (1) a bottom-up grounding algorithm based on a query-driven chase, and (2) a hybrid approach based on transforming a WS program into a so-called sticky one, for which query rewriting techniques are known. We discuss how our algorithms can be optimized and effectively applied for query answering in real-world scenarios.', 'cs.DB', '2016-04-22T18:46:10Z', 'http://arxiv.org/abs/1604.06770v2', '2016-10-08 10:26:02', '2016-10-08 10:26:02')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (1.1ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 788
  [1m[36mAuthor Load (0.7ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Mostafa Milani'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36m (0.1ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (852, 788, 0, '2016-10-08 10:26:02', '2016-10-08 10:26:02')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (1.5ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Andrea Cali'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Andrea Cali', '2016-10-08 10:26:02', '2016-10-08 10:26:02')[0m
  [1m[35m (0.9ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2106, 788, 1, '2016-10-08 10:26:02', '2016-10-08 10:26:02')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.7ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Leopoldo Bertossi'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35m (0.2ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (853, 788, 2, '2016-10-08 10:26:02', '2016-10-08 10:26:02')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (1.5ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Latent Contextual Bandits and their Application to Personalized Recommendations for New Users'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Latent Contextual Bandits and their Application to Personalized Recommendations for New Users', 'Personalized recommendations for new users, also known as the cold-start problem, can be formulated as a contextual bandit problem. Existing contextual bandit algorithms generally rely on features alone to capture user variability. Such methods are inefficient in learning new users\' interests. In this paper we propose Latent Contextual Bandits. We consider both the benefit of leveraging a set of learned latent user classes for new users, and how we can learn such latent classes from prior users. We show that our approach achieves a better regret bound than existing algorithms. We also demonstrate the benefit of our approach using a large real world dataset and a preliminary user study.', 'cs.LG', '2016-04-22T16:47:04Z', 'http://arxiv.org/abs/1604.06743v1', '2016-10-08 10:26:02', '2016-10-08 10:26:02')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (1.3ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 789
  [1m[36mAuthor Load (1.3ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Li Zhou'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Li Zhou', '2016-10-08 10:26:02', '2016-10-08 10:26:02')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2107, 789, 0, '2016-10-08 10:26:02', '2016-10-08 10:26:02')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.3ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Emma Brunskill'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35m (0.1ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1654, 789, 1, '2016-10-08 10:26:02', '2016-10-08 10:26:02')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.9ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Exploiting Deep Semantics and Compositionality of Natural Language for Human-Robot-Interaction'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Exploiting Deep Semantics and Compositionality of Natural Language for Human-Robot-Interaction', 'We develop a natural language interface for human robot interaction that implements reasoning about deep semantics in natural language. To realize the required deep analysis, we employ methods from cognitive linguistics, namely the modular and compositional framework of Embodied Construction Grammar (ECG) [Feldman, 2009]. Using ECG, robots are able to solve fine-grained reference resolution problems and other issues related to deep semantics and compositionality of natural language. This also includes verbal interaction with humans to clarify commands and queries that are too ambiguous to be executed safely. We implement our NLU framework as a ROS package and present proof-of-concept scenarios with different robots, as well as a survey on the state of the art.', 'cs.AI', '2016-04-22T15:58:18Z', 'http://arxiv.org/abs/1604.06721v1', '2016-10-08 10:26:02', '2016-10-08 10:26:02')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (1.5ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 790
  [1m[36mAuthor Load (1.1ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Manfred Eppe'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Manfred Eppe', '2016-10-08 10:26:02', '2016-10-08 10:26:02')[0m
  [1m[35m (0.9ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2108, 790, 0, '2016-10-08 10:26:02', '2016-10-08 10:26:02')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.6ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Sean Trott'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35m (0.1ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (695, 790, 1, '2016-10-08 10:26:02', '2016-10-08 10:26:02')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.6ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Jerome Feldman'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35m (0.2ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (696, 790, 2, '2016-10-08 10:26:02', '2016-10-08 10:26:02')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (1.0ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Parameterized Compilation Lower Bounds for Restricted CNF-formulas'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Parameterized Compilation Lower Bounds for Restricted CNF-formulas', 'We show unconditional parameterized lower bounds in the area of knowledge compilation, more specifically on the size of circuits in decomposable negation normal form (DNNF) that encode CNF-formulas restricted by several graph width measures. In particular, we show that - there are CNF formulas of size $n$ and modular incidence treewidth $k$ whose smallest DNNF-encoding has size $n^{\\Omega(k)}$, and - there are CNF formulas of size $n$ and incidence neighborhood diversity $k$ whose smallest DNNF-encoding has size $n^{\\Omega(\\sqrt{k})}$. These results complement recent upper bounds for compiling CNF into DNNF and strengthen---quantitatively and qualitatively---known conditional low\\-er bounds for cliquewidth. Moreover, they show that, unlike for many graph problems, the parameters considered here behave significantly differently from treewidth.', 'cs.AI', '2016-04-22T15:37:14Z', 'http://arxiv.org/abs/1604.06715v1', '2016-10-08 10:26:02', '2016-10-08 10:26:02')
  [1m[36m (0.8ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (1.3ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 791
  [1m[36mAuthor Load (1.0ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Stefan Mengel'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Stefan Mengel', '2016-10-08 10:26:02', '2016-10-08 10:26:02')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2109, 791, 0, '2016-10-08 10:26:02', '2016-10-08 10:26:02')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.9ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Using Reinforcement Learning to Validate Empirical Game-Theoretic Analysis: A Continuous Double Auction Study'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Using Reinforcement Learning to Validate Empirical Game-Theoretic Analysis: A Continuous Double Auction Study', 'Empirical game-theoretic analysis (EGTA) has recently been applied successfully to analyze the behavior of large numbers of competing traders in a continuous double auction market. Multiagent simulation methods like EGTA are useful for studying complex strategic environments like a stock market, where it is not feasible to solve analytically for the rational behavior of each agent. A weakness of simulation-based methods in strategic settings, however, is that it is typically impossible to prove that the strategy profile assigned to the simulated agents is stable, as in a Nash equilibrium. I propose using reinforcement learning to analyze the regret of supposed Nash-equilibrium strategy profiles found by EGTA. I have developed a new library of reinforcement learning tools, which I have integrated into an extended version of the market simulator from our prior work. I provide evidence for the effectiveness of our library methods, both on a suite of benchmark problems from the literature, and on non-equilibrium strategy profiles in our market environment. Finally, I use our new reinforcement learning tools to provide evidence that the equilibria found by EGTA in our recent continuous double auction study are likely to have only negligible regret, even with respect to an extended strategy space.', 'cs.AI', '2016-04-22T15:23:27Z', 'http://arxiv.org/abs/1604.06710v1', '2016-10-08 10:26:02', '2016-10-08 10:26:02')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (1.1ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 792
  [1m[36mAuthor Load (1.0ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Mason Wright'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Mason Wright', '2016-10-08 10:26:02', '2016-10-08 10:26:02')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.3ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2110, 792, 0, '2016-10-08 10:26:02', '2016-10-08 10:26:02')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.9ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Compact-Table: Efficiently Filtering Table Constraints with Reversible Sparse Bit-Sets'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Compact-Table: Efficiently Filtering Table Constraints with Reversible Sparse Bit-Sets', 'In this paper, we describe Compact-Table (CT), a bitwise algorithm to enforce Generalized Arc Consistency (GAC) on table con- straints. Although this algorithm is the default propagator for table constraints in or-tools and OscaR, two publicly available CP solvers, it has never been described so far. Importantly, CT has been recently improved further with the introduction of residues, resetting operations and a data-structure called reversible sparse bit-set, used to maintain tables of supports (following the idea of tabular reduction): tuples are invalidated incrementally on value removals by means of bit-set operations. The experimentation that we have conducted with OscaR shows that CT outperforms state-of-the-art algorithms STR2, STR3, GAC4R, MDD4R and AC5-TC on standard benchmarks.', 'cs.AI', '2016-04-22T13:12:38Z', 'http://arxiv.org/abs/1604.06641v1', '2016-10-08 10:26:02', '2016-10-08 10:26:02')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (1.8ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 793
  [1m[36mAuthor Load (1.1ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Jordan Demeulenaere'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Jordan Demeulenaere', '2016-10-08 10:26:02', '2016-10-08 10:26:02')[0m
  [1m[35m (0.6ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2111, 793, 0, '2016-10-08 10:26:02', '2016-10-08 10:26:02')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.1ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Renaud Hartert'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Renaud Hartert', '2016-10-08 10:26:02', '2016-10-08 10:26:02')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2112, 793, 1, '2016-10-08 10:26:02', '2016-10-08 10:26:02')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (1.4ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Christophe Lecoutre'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Christophe Lecoutre', '2016-10-08 10:26:02', '2016-10-08 10:26:02')[0m
  [1m[35m (0.9ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2113, 793, 2, '2016-10-08 10:26:02', '2016-10-08 10:26:02')
  [1m[36m (0.3ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.0ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Guillaume Perez'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Guillaume Perez', '2016-10-08 10:26:02', '2016-10-08 10:26:02')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.6ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2114, 793, 3, '2016-10-08 10:26:02', '2016-10-08 10:26:02')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (1.3ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Laurent Perron'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Laurent Perron', '2016-10-08 10:26:02', '2016-10-08 10:26:02')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2115, 793, 4, '2016-10-08 10:26:02', '2016-10-08 10:26:02')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.1ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Jean-Charles Régin'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Jean-Charles Régin', '2016-10-08 10:26:02', '2016-10-08 10:26:02')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2116, 793, 5, '2016-10-08 10:26:02', '2016-10-08 10:26:02')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (1.0ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Pierre Schaus'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Pierre Schaus', '2016-10-08 10:26:02', '2016-10-08 10:26:02')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2117, 793, 6, '2016-10-08 10:26:02', '2016-10-08 10:26:02')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (1.0ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Bridging LSTM Architecture and the Neural Dynamics during Reading'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.4ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Bridging LSTM Architecture and the Neural Dynamics during Reading', 'Recently, the long short-term memory neural network (LSTM) has attracted wide interest due to its success in many tasks. LSTM architecture consists of a memory cell and three gates, which looks similar to the neuronal networks in the brain. However, there still lacks the evidence of the cognitive plausibility of LSTM architecture as well as its working mechanism. In this paper, we study the cognitive plausibility of LSTM by aligning its internal architecture with the brain activity observed via fMRI when the subjects read a story. Experiment results show that the artificial memory vector in LSTM can accurately predict the observed sequential brain activities, indicating the correlation between LSTM architecture and the cognitive process of story reading.', 'cs.CL', '2016-04-22T12:51:11Z', 'http://arxiv.org/abs/1604.06635v1', '2016-10-08 10:26:02', '2016-10-08 10:26:02')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (1.2ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 794
  [1m[36mAuthor Load (1.0ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Peng Qian'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Peng Qian', '2016-10-08 10:26:02', '2016-10-08 10:26:02')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2118, 794, 0, '2016-10-08 10:26:02', '2016-10-08 10:26:02')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.4ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Xipeng Qiu'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35m (0.2ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (332, 794, 1, '2016-10-08 10:26:02', '2016-10-08 10:26:02')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.4ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Xuanjing Huang'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35m (0.1ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (334, 794, 2, '2016-10-08 10:26:02', '2016-10-08 10:26:02')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.9ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Agenda Separability in Judgment Aggregation'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Agenda Separability in Judgment Aggregation', 'One of the better studied properties for operators in judgment aggregation is independence, which essentially dictates that the collective judgment on one issue should not depend on the individual judgments given on some other issue(s) in the same agenda. Independence, although considered a desirable property, is too strong, because together with mild additional conditions it implies dictatorship. We propose here a weakening of independence, named agenda separability: a judgment aggregation rule satisfies it if, whenever the agenda is composed of several independent sub-agendas, the resulting collective judgment sets can be computed separately for each sub-agenda and then put together. We show that this property is discriminant, in the sense that among judgment aggregation rules so far studied in the literature, some satisfy it and some do not. We briefly discuss the implications of agenda separability on the computation of judgment aggregation rules.', 'cs.AI', '2016-04-22T11:53:37Z', 'http://arxiv.org/abs/1604.06614v1', '2016-10-08 10:26:02', '2016-10-08 10:26:02')
  [1m[36m (3.0ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (2.0ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 795
  [1m[36mAuthor Load (1.4ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Jérôme Lang'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Jérôme Lang', '2016-10-08 10:26:02', '2016-10-08 10:26:02')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2119, 795, 0, '2016-10-08 10:26:02', '2016-10-08 10:26:02')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.4ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Marija Slavkovik'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Marija Slavkovik', '2016-10-08 10:26:02', '2016-10-08 10:26:02')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2120, 795, 1, '2016-10-08 10:26:02', '2016-10-08 10:26:02')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (1.2ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Srdjan Vesic'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Srdjan Vesic', '2016-10-08 10:26:02', '2016-10-08 10:26:02')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2121, 795, 2, '2016-10-08 10:26:02', '2016-10-08 10:26:02')
  [1m[36m (0.3ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.9ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Parallel Strategies Selection'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Parallel Strategies Selection', 'We consider the problem of selecting the best variable-value strategy for solving a given problem in constraint programming. We show that the recent Embarrassingly Parallel Search method (EPS) can be used for this purpose. EPS proposes to solve a problem by decomposing it in a lot of subproblems and to give them on-demand to workers which run in parallel. Our method uses a part of these subproblems as a simple sample as defined in statistics for comparing some strategies in order to select the most promising one that will be used for solving the remaining subproblems. For each subproblem of the sample, the parallelism helps us to control the running time of the strategies because it gives us the possibility to introduce timeouts by stopping a strategy when it requires more than twice the time of the best one. Thus, we can deal with the great disparity in solving times for the strategies. The selections we made are based on the Wilcoxon signed rank tests because no assumption has to be made on the distribution of the solving times and because these tests can deal with the censored data that we obtain after introducing timeouts. The experiments we performed on a set of classical benchmarks for satisfaction and optimization problems show that our method obtain good performance by selecting almost all the time the best variable-value strategy and by almost never choosing a variable-value strategy which is dramatically slower than the best one. Our method also outperforms the portfolio approach consisting in running some strategies in parallel and is competitive with the multi armed bandit framework.', 'cs.AI', '2016-04-21T20:40:35Z', 'http://arxiv.org/abs/1604.06484v1', '2016-10-08 10:26:02', '2016-10-08 10:26:02')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (1.6ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 796
  [1m[36mAuthor Load (1.3ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Anthony Palmieri'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Anthony Palmieri', '2016-10-08 10:26:02', '2016-10-08 10:26:02')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2122, 796, 0, '2016-10-08 10:26:02', '2016-10-08 10:26:02')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.3ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Jean-Charles Régin'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35m (0.2ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2116, 796, 1, '2016-10-08 10:26:02', '2016-10-08 10:26:02')
  [1m[36m (0.3ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.4ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Pierre Schaus'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35m (0.1ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2117, 796, 2, '2016-10-08 10:26:02', '2016-10-08 10:26:02')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.9ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Iterative Judgment Aggregation'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Iterative Judgment Aggregation', 'Judgment aggregation problems form a class of collective decision-making problems represented in an abstract way, subsuming some well known problems such as voting. A collective decision can be reached in many ways, but a direct one-step aggregation of individual decisions is arguably most studied. Another way to reach collective decisions is by iterative consensus building -- allowing each decision-maker to change their individual decision in response to the choices of the other agents until a consensus is reached. Iterative consensus building has so far only been studied for voting problems. Here we propose an iterative judgment aggregation algorithm, based on movements in an undirected graph, and we study for which instances it terminates with a consensus. We also compare the computational complexity of our iterative procedure with that of related judgment aggregation operators.', 'cs.AI', '2016-04-21T15:26:02Z', 'http://dx.doi.org/10.3233/978-1-61499-672-9-1528', '2016-10-08 10:26:02', '2016-10-08 10:26:02')
  [1m[36m (6.8ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (1.9ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 797
  [1m[36mAuthor Load (1.7ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Marija Slavkovik'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36m (0.2ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2120, 797, 0, '2016-10-08 10:26:02', '2016-10-08 10:26:02')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (1.3ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Wojciech Jamroga'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Wojciech Jamroga', '2016-10-08 10:26:02', '2016-10-08 10:26:02')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2123, 797, 1, '2016-10-08 10:26:02', '2016-10-08 10:26:02')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.9ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Task scheduling system for UAV operations in indoor environment'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Task scheduling system for UAV operations in indoor environment', 'Application of UAV in indoor environment is emerging nowadays due to the advancements in technology. UAV brings more space-flexibility in an occupied or hardly-accessible indoor environment, e.g., shop floor of manufacturing industry, greenhouse, nuclear powerplant. UAV helps in creating an autonomous manufacturing system by executing tasks with less human intervention in time-efficient manner. Consequently, a scheduler is one essential component to be focused on; yet the number of reported studies on UAV scheduling has been minimal. This work proposes a methodology with a heuristic (based on Earliest Available Time algorithm) which assigns tasks to UAVs with an objective of minimizing the makespan. In addition, a quick response towards uncertain events and a quick creation of new high-quality feasible schedule are needed. Hence, the proposed heuristic is incorporated with Particle Swarm Optimization (PSO) algorithm to find a quick near optimal schedule. This proposed methodology is implemented into a scheduler and tested on a few scales of datasets generated based on a real flight demonstration. Performance evaluation of scheduler is discussed in detail and the best solution obtained from a selected set of parameters is reported.', 'cs.AI', '2016-04-21T09:21:21Z', 'http://arxiv.org/abs/1604.06223v1', '2016-10-08 10:26:02', '2016-10-08 10:26:02')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (1.5ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 798
  [1m[36mAuthor Load (1.1ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Yohanes Khosiawan'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Yohanes Khosiawan', '2016-10-08 10:26:02', '2016-10-08 10:26:02')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2124, 798, 0, '2016-10-08 10:26:02', '2016-10-08 10:26:02')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.1ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Young Soo Park'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Young Soo Park', '2016-10-08 10:26:02', '2016-10-08 10:26:02')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2125, 798, 1, '2016-10-08 10:26:02', '2016-10-08 10:26:02')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (1.3ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Ilkyeong Moon'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Ilkyeong Moon', '2016-10-08 10:26:02', '2016-10-08 10:26:02')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2126, 798, 2, '2016-10-08 10:26:02', '2016-10-08 10:26:02')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.1ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Janardhanan Mukund Nilakantan'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Janardhanan Mukund Nilakantan', '2016-10-08 10:26:02', '2016-10-08 10:26:02')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2127, 798, 3, '2016-10-08 10:26:02', '2016-10-08 10:26:02')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (1.1ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Izabela Nielsen'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Izabela Nielsen', '2016-10-08 10:26:02', '2016-10-08 10:26:02')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2128, 798, 4, '2016-10-08 10:26:02', '2016-10-08 10:26:02')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.9ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Question Answering via Integer Programming over Semi-Structured Knowledge'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.4ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Question Answering via Integer Programming over Semi-Structured Knowledge', 'Answering science questions posed in natural language is an important AI challenge. Answering such questions often requires non-trivial inference and knowledge that goes beyond factoid retrieval. Yet, most systems for this task are based on relatively shallow Information Retrieval (IR) and statistical correlation techniques operating on large unstructured corpora. We propose a structured inference system for this task, formulated as an Integer Linear Program (ILP), that answers natural language questions using a semi-structured knowledge base derived from text, including questions requiring multi-step inference and a combination of multiple facts. On a dataset of real, unseen science questions, our system significantly outperforms (+14%) the best previous attempt at structured reasoning for this task, which used Markov Logic Networks (MLNs). It also improves upon a previous ILP formulation by 17.7%. When combined with unstructured inference methods, the ILP system significantly boosts overall performance (+10%). Finally, we show our approach is substantially more robust to a simple answer perturbation compared to statistical correlation methods.', 'cs.AI', '2016-04-20T19:48:07Z', 'http://arxiv.org/abs/1604.06076v1', '2016-10-08 10:26:02', '2016-10-08 10:26:02')
  [1m[36m (3.0ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (2.0ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 799
  [1m[36mAuthor Load (1.1ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Daniel Khashabi'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36m (0.2ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1761, 799, 0, '2016-10-08 10:26:02', '2016-10-08 10:26:02')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (1.2ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Tushar Khot'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Tushar Khot', '2016-10-08 10:26:02', '2016-10-08 10:26:02')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2129, 799, 1, '2016-10-08 10:26:02', '2016-10-08 10:26:02')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.1ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Ashish Sabharwal'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Ashish Sabharwal', '2016-10-08 10:26:02', '2016-10-08 10:26:02')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2130, 799, 2, '2016-10-08 10:26:02', '2016-10-08 10:26:02')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (1.1ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Peter Clark'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Peter Clark', '2016-10-08 10:26:02', '2016-10-08 10:26:02')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2131, 799, 3, '2016-10-08 10:26:02', '2016-10-08 10:26:02')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.3ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Oren Etzioni'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Oren Etzioni', '2016-10-08 10:26:02', '2016-10-08 10:26:02')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2132, 799, 4, '2016-10-08 10:26:02', '2016-10-08 10:26:02')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (1.0ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Dan Roth'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Dan Roth', '2016-10-08 10:26:02', '2016-10-08 10:26:02')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2133, 799, 5, '2016-10-08 10:26:02', '2016-10-08 10:26:02')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.9ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Hierarchical Deep Reinforcement Learning: Integrating Temporal Abstraction and Intrinsic Motivation'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Hierarchical Deep Reinforcement Learning: Integrating Temporal Abstraction and Intrinsic Motivation', 'Learning goal-directed behavior in environments with sparse feedback is a major challenge for reinforcement learning algorithms. The primary difficulty arises due to insufficient exploration, resulting in an agent being unable to learn robust value functions. Intrinsically motivated agents can explore new behavior for its own sake rather than to directly solve problems. Such intrinsic behaviors could eventually help the agent solve tasks posed by the environment. We present hierarchical-DQN (h-DQN), a framework to integrate hierarchical value functions, operating at different temporal scales, with intrinsically motivated deep reinforcement learning. A top-level value function learns a policy over intrinsic goals, and a lower-level function learns a policy over atomic actions to satisfy the given goals. h-DQN allows for flexible goal specifications, such as functions over entities and relations. This provides an efficient space for exploration in complicated environments. We demonstrate the strength of our approach on two problems with very sparse, delayed feedback: (1) a complex discrete stochastic decision process, and (2) the classic ATARI game `Montezuma\'s Revenge\'.', 'cs.LG', '2016-04-20T18:47:48Z', 'http://arxiv.org/abs/1604.06057v2', '2016-10-08 10:26:02', '2016-10-08 10:26:02')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (1.3ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 800
  [1m[36mAuthor Load (0.9ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Tejas D. Kulkarni'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36m (0.2ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1432, 800, 0, '2016-10-08 10:26:02', '2016-10-08 10:26:02')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (1.3ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Karthik R. Narasimhan'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Karthik R. Narasimhan', '2016-10-08 10:26:02', '2016-10-08 10:26:02')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2134, 800, 1, '2016-10-08 10:26:02', '2016-10-08 10:26:02')
  [1m[36m (4.0ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.5ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Ardavan Saeedi'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35m (0.2ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1433, 800, 2, '2016-10-08 10:26:02', '2016-10-08 10:26:02')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.5ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Joshua B. Tenenbaum'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35m (0.2ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.4ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (503, 800, 3, '2016-10-08 10:26:02', '2016-10-08 10:26:02')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (1.1ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Constructive Preference Elicitation by Setwise Max-margin Learning'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.4ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Constructive Preference Elicitation by Setwise Max-margin Learning', 'In this paper we propose an approach to preference elicitation that is suitable to large configuration spaces beyond the reach of existing state-of-the-art approaches. Our setwise max-margin method can be viewed as a generalization of max-margin learning to sets, and can produce a set of \"diverse\" items that can be used to ask informative queries to the user. Moreover, the approach can encourage sparsity in the parameter space, in order to favor the assessment of utility towards combinations of weights that concentrate on just few features. We present a mixed integer linear programming formulation and show how our approach compares favourably with Bayesian preference elicitation alternatives and easily scales to realistic datasets.', 'stat.ML', '2016-04-20T16:22:01Z', 'http://arxiv.org/abs/1604.06020v1', '2016-10-08 10:26:02', '2016-10-08 10:26:02')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (1.2ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 801
  [1m[36mAuthor Load (1.2ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Stefano Teso'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Stefano Teso', '2016-10-08 10:26:02', '2016-10-08 10:26:02')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2135, 801, 0, '2016-10-08 10:26:02', '2016-10-08 10:26:02')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.5ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Andrea Passerini'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Andrea Passerini', '2016-10-08 10:26:02', '2016-10-08 10:26:02')
  [1m[36m (0.6ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2136, 801, 1, '2016-10-08 10:26:02', '2016-10-08 10:26:02')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (1.1ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Paolo Viappiani'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Paolo Viappiani', '2016-10-08 10:26:02', '2016-10-08 10:26:02')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2137, 801, 2, '2016-10-08 10:26:02', '2016-10-08 10:26:02')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (1.1ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'A topological insight into restricted Boltzmann machines'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('A topological insight into restricted Boltzmann machines', 'Restricted Boltzmann Machines (RBMs) and models derived from them have been successfully used as basic building blocks in deep artificial neural networks for automatic features extraction, unsupervised weights initialization, but also as density estimators. Thus, their generative and discriminative capabilities, but also their computational time are instrumental to a wide range of applications. Our main contribution is to look at RBMs from a topological perspective, bringing insights from network science. Firstly, here we show that RBMs and Gaussian RBMs (GRBMs) are bipartite graphs which naturally have a small-world topology. Secondly, we demonstrate both on synthetic and real-world datasets that by constraining RBMs and GRBMs to a scale-free topology (while still considering local neighborhoods and data distribution), we reduce the number of weights that need to be computed by a few orders of magnitude, at virtually no loss in generative performance. Thirdly, we show that, for a fixed number of weights, our proposed sparse models (which by design have a higher number of hidden neurons) achieve better generative capabilities than standard fully connected RBMs and GRBMs (which by design have a smaller number of hidden neurons), at no additional computational costs.', 'cs.NE', '2016-04-20T14:35:12Z', 'http://dx.doi.org/10.1007/s10994-016-5570-z', '2016-10-08 10:26:02', '2016-10-08 10:26:02')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (1.5ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 802
  [1m[36mAuthor Load (1.0ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Decebal Constantin Mocanu'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36m (0.1ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2062, 802, 0, '2016-10-08 10:26:02', '2016-10-08 10:26:02')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.9ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Elena Mocanu'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36m (0.2ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1923, 802, 1, '2016-10-08 10:26:02', '2016-10-08 10:26:02')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (1.3ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Phuong H. Nguyen'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36m (0.1ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1924, 802, 2, '2016-10-08 10:26:02', '2016-10-08 10:26:02')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (1.2ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Madeleine Gibescu'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36m (0.2ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1925, 802, 3, '2016-10-08 10:26:02', '2016-10-08 10:26:02')[0m
  [1m[35m (2.9ms)[0m  COMMIT
  [1m[36mAuthor Load (1.8ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Antonio Liotta'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36m (0.2ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2063, 802, 4, '2016-10-08 10:26:02', '2016-10-08 10:26:02')[0m
  [1m[35m (6.2ms)[0m  COMMIT
  [1m[36mPaper Load (1.2ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Multiplayer Games for Learning Multirobot Coordination Algorithms'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Multiplayer Games for Learning Multirobot Coordination Algorithms', 'Humans have an impressive ability to solve complex coordination problems in a fully distributed manner. This ability, if learned as a set of distributed multirobot coordination strategies, can enable programming large groups of robots to collaborate towards complex coordination objectives in a way similar to humans. Such strategies would offer robustness, adaptability, fault-tolerance, and, importantly, distributed decision-making. To that end, we have designed a networked gaming platform to investigate human group behavior, specifically in solving complex collaborative coordinated tasks. Through this platform, we are able to limit the communication, sensing, and actuation capabilities provided to the players. With the aim of learning coordination algorithms for robots in mind, we define these capabilities to mimic those of a simple ground robot.', 'cs.RO', '2016-04-20T13:12:45Z', 'http://arxiv.org/abs/1604.05942v1', '2016-10-08 10:26:02', '2016-10-08 10:26:02')[0m
  [1m[35m (6.3ms)[0m  COMMIT
  [1m[36mPublish Load (2.1ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 803[0m
  [1m[35mAuthor Load (1.8ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Arash Tavakoli'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Arash Tavakoli', '2016-10-08 10:26:02', '2016-10-08 10:26:02')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2138, 803, 0, '2016-10-08 10:26:02', '2016-10-08 10:26:02')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (1.1ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Haig Nalbandian'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.4ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Haig Nalbandian', '2016-10-08 10:26:02', '2016-10-08 10:26:02')[0m
  [1m[35m (0.3ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2139, 803, 1, '2016-10-08 10:26:02', '2016-10-08 10:26:02')
  [1m[36m (0.6ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.1ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Nora Ayanian'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Nora Ayanian', '2016-10-08 10:26:02', '2016-10-08 10:26:02')
  [1m[36m (0.6ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2140, 803, 2, '2016-10-08 10:26:02', '2016-10-08 10:26:02')[0m
  [1m[35m (0.3ms)[0m  COMMIT
  [1m[36mPaper Load (1.0ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'A Factorization Machine Framework for Testing Bigram Embeddings in Knowledgebase Completion'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.3ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('A Factorization Machine Framework for Testing Bigram Embeddings in Knowledgebase Completion', 'Embedding-based Knowledge Base Completion models have so far mostly combined distributed representations of individual entities or relations to compute truth scores of missing links. Facts can however also be represented using pairwise embeddings, i.e. embeddings for pairs of entities and relations. In this paper we explore such bigram embeddings with a flexible Factorization Machine model and several ablations from it. We investigate the relevance of various bigram types on the fb15k237 dataset and find relative improvements compared to a compositional model.', 'cs.CL', '2016-04-20T09:58:56Z', 'http://arxiv.org/abs/1604.05878v1', '2016-10-08 10:26:02', '2016-10-08 10:26:02')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPublish Load (1.2ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 804[0m
  [1m[35mAuthor Load (1.0ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Johannes Welbl'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35m (0.2ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1182, 804, 0, '2016-10-08 10:26:02', '2016-10-08 10:26:02')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.7ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Guillaume Bouchard'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35m (0.1ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1184, 804, 1, '2016-10-08 10:26:02', '2016-10-08 10:26:02')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.2ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Sebastian Riedel'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.5ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1056, 804, 2, '2016-10-08 10:26:02', '2016-10-08 10:26:02')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (1.0ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Estimating 3D Trajectories from 2D Projections via Disjunctive Factored Four-Way Conditional Restricted Boltzmann Machines'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Estimating 3D Trajectories from 2D Projections via Disjunctive Factored Four-Way Conditional Restricted Boltzmann Machines', 'Estimation, recognition, and near-future prediction of 3D trajectories based on their two dimensional projections available from one camera source is an exceptionally difficult problem due to uncertainty in the trajectories and environment, high dimensionality of the specific trajectory states, lack of enough labeled data and so on. In this article, we propose a solution to solve this problem based on a novel deep learning model dubbed Disjunctive Factored Four-Way Conditional Restricted Boltzmann Machine (DFFW-CRBM). Our method improves state-of-the-art deep learning techniques for high dimensional time-series modeling by introducing a novel tensor factorization capable of driving forth order Boltzmann machines to considerably lower energy levels, at no computational costs. DFFW-CRBMs are capable of accurately estimating, recognizing, and performing near-future prediction of three-dimensional trajectories from their 2D projections while requiring limited amount of labeled data. We evaluate our method on both simulated and real-world data, showing its effectiveness in predicting and classifying complex ball trajectories and human activities.', 'cs.CV', '2016-04-20T09:08:50Z', 'http://arxiv.org/abs/1604.05865v1', '2016-10-08 10:26:02', '2016-10-08 10:26:02')
  [1m[36m (2.7ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (1.6ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 805
  [1m[36mAuthor Load (2.1ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Decebal Constantin Mocanu'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36m (0.3ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.4ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2062, 805, 0, '2016-10-08 10:26:02', '2016-10-08 10:26:02')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (1.1ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Haitham Bou Ammar'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Haitham Bou Ammar', '2016-10-08 10:26:02', '2016-10-08 10:26:02')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2141, 805, 1, '2016-10-08 10:26:02', '2016-10-08 10:26:02')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.2ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Luis Puig'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Luis Puig', '2016-10-08 10:26:02', '2016-10-08 10:26:02')
  [1m[36m (0.9ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.4ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2142, 805, 2, '2016-10-08 10:26:02', '2016-10-08 10:26:02')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (1.2ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Eric Eaton'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Eric Eaton', '2016-10-08 10:26:02', '2016-10-08 10:26:02')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2143, 805, 3, '2016-10-08 10:26:02', '2016-10-08 10:26:02')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.0ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Antonio Liotta'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35m (0.1ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2063, 805, 4, '2016-10-08 10:26:02', '2016-10-08 10:26:02')
  [1m[36m (0.7ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (1.3ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Procedural urban environments for FPS games'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Procedural urban environments for FPS games', 'This paper presents a novel approach to procedural generation of urban maps for First Person Shooter (FPS) games. A multi-agent evolutionary system is employed to place streets, buildings and other items inside the Unity3D game engine, resulting in playable video game levels. A computational agent is trained using machine learning techniques to capture the intent of the game designer as part of the multi-agent system, and to enable a semi-automated aesthetic selection for the underlying genetic algorithm.', 'cs.AI', '2016-04-20T02:39:04Z', 'http://dx.doi.org/10.1145/2843043.2843479', '2016-10-08 10:26:03', '2016-10-08 10:26:03')
  [1m[36m (0.6ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (1.4ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 806
  [1m[36mAuthor Load (1.2ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Jan Kruse'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Jan Kruse', '2016-10-08 10:26:03', '2016-10-08 10:26:03')[0m
  [1m[35m (0.3ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2144, 806, 0, '2016-10-08 10:26:03', '2016-10-08 10:26:03')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.8ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Ricardo Sosa'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Ricardo Sosa', '2016-10-08 10:26:03', '2016-10-08 10:26:03')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2145, 806, 1, '2016-10-08 10:26:03', '2016-10-08 10:26:03')[0m
  [1m[35m (0.3ms)[0m  COMMIT
  [1m[36mAuthor Load (1.0ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Andy M. Connor'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Andy M. Connor', '2016-10-08 10:26:03', '2016-10-08 10:26:03')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2146, 806, 2, '2016-10-08 10:26:03', '2016-10-08 10:26:03')
  [1m[36m (0.3ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (1.5ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Sketching and Neural Networks'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Sketching and Neural Networks', 'High-dimensional sparse data present computational and statistical challenges for supervised learning. We propose compact linear sketches for reducing the dimensionality of the input, followed by a single layer neural network. We show that any sparse polynomial function can be computed, on nearly all sparse binary vectors, by a single layer neural network that takes a compact sketch of the vector as input. Consequently, when a set of sparse binary vectors is approximately separable using a sparse polynomial, there exists a single-layer neural network that takes a short sketch as input and correctly classifies nearly all the points. Previous work has proposed using sketches to reduce dimensionality while preserving the hypothesis class. However, the sketch size has an exponential dependence on the degree in the case of polynomial classifiers. In stark contrast, our approach of using improper learning, using a larger hypothesis class allows the sketch size to have a logarithmic dependence on the degree. Even in the linear case, our approach allows us to improve on the pesky $O({1}/{{\\gamma}^2})$ dependence of random projections, on the margin $\\gamma$. We empirically show that our approach leads to more compact neural networks than related methods such as feature hashing at equal or better performance.', 'cs.LG', '2016-04-19T21:22:29Z', 'http://arxiv.org/abs/1604.05753v1', '2016-10-08 10:26:03', '2016-10-08 10:26:03')
  [1m[36m (2.8ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (1.1ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 807
  [1m[36mAuthor Load (1.0ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Amit Daniely'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Amit Daniely', '2016-10-08 10:26:03', '2016-10-08 10:26:03')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2147, 807, 0, '2016-10-08 10:26:03', '2016-10-08 10:26:03')
  [1m[36m (0.6ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.9ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Nevena Lazic'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Nevena Lazic', '2016-10-08 10:26:03', '2016-10-08 10:26:03')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2148, 807, 1, '2016-10-08 10:26:03', '2016-10-08 10:26:03')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (1.0ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Yoram Singer'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Yoram Singer', '2016-10-08 10:26:03', '2016-10-08 10:26:03')[0m
  [1m[35m (0.3ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2149, 807, 2, '2016-10-08 10:26:03', '2016-10-08 10:26:03')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.5ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Kunal Talwar'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Kunal Talwar', '2016-10-08 10:26:03', '2016-10-08 10:26:03')
  [1m[36m (0.3ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2150, 807, 3, '2016-10-08 10:26:03', '2016-10-08 10:26:03')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (1.0ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Proving the Incompatibility of Efficiency and Strategyproofness via SMT Solving'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Proving the Incompatibility of Efficiency and Strategyproofness via SMT Solving', 'Two important requirements when aggregating the preferences of multiple agents are that the outcome should be economically efficient and the aggregation mechanism should not be manipulable. In this paper, we provide a computer-aided proof of a sweeping impossibility using these two conditions for randomized aggregation mechanisms. More precisely, we show that every efficient aggregation mechanism can be manipulated for all expected utility representations of the agents\' preferences. This settles a conjecture by Aziz et al. [2013b] and strengthens a number of existing theorems, including statements that were shown within the special domain of assignment. Our proof is obtained by formulating the claim as a satisfiability problem over predicates from real-valued arithmetic, which is then checked using an SMT (satisfiability modulo theories) solver. To the best of our knowledge, this is the first application of SMT solvers in computational social choice.', 'cs.GT', '2016-04-19T19:01:55Z', 'http://arxiv.org/abs/1604.05692v3', '2016-10-08 10:26:03', '2016-10-08 10:26:03')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPublish Load (1.1ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 808[0m
  [1m[35mAuthor Load (1.2ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Florian Brandl'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.4ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Florian Brandl', '2016-10-08 10:26:03', '2016-10-08 10:26:03')
  [1m[36m (1.0ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.4ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2151, 808, 0, '2016-10-08 10:26:03', '2016-10-08 10:26:03')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (1.0ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Felix Brandt'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Felix Brandt', '2016-10-08 10:26:03', '2016-10-08 10:26:03')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2152, 808, 1, '2016-10-08 10:26:03', '2016-10-08 10:26:03')
  [1m[36m (0.3ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.0ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Christian Geist'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (1.4ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Christian Geist', '2016-10-08 10:26:03', '2016-10-08 10:26:03')
  [1m[36m (1.0ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2153, 808, 2, '2016-10-08 10:26:03', '2016-10-08 10:26:03')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (1.3ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Pattern-Based Approach to the Workflow Satisfiability Problem with User-Independent Constraints'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Pattern-Based Approach to the Workflow Satisfiability Problem with User-Independent Constraints', 'The fixed parameter tractable (FPT) approach is a powerful tool in tackling computationally hard problems. In this paper we link FPT results to classic artificial intelligence techniques to show how they complement each other. Specifically, we consider the workflow satisfiability problem (WSP) which asks whether there exists an assignment of authorised users to the steps in a workflow specification, subject to certain constraints on the assignment. It was shown that WSP restricted to the class of user-independent constraints (UI), covering many practical cases, admits FPT algorithms. We show that the FPT nature of WSP with UI constraints decomposes the problem into two levels, and exploit this in a new FPT algorithm that is by many orders of magnitude faster then the previous state-of-the-art WSP algorithm. The WSP with UI constraints can also be viewed as an extension of the hypergraph list colouring problem. Inspired by a classic graph colouring method called Zykov\'s Contraction, we designed a new pseudo-boolean (PB) formulation of WSP with UI constraints that also exploits the two-level split of the problem. Our experiments showed that, in many cases, this formulation being solved with a general purpose PB solver demonstrated performance comparable to that of our bespoke FPT algorithm. This raises the potential of using general purpose solvers to tackle FPT problems efficiently. We also study the practical, average-case, performance of various algorithms. To support this we extend studies of phase transition phenomena in the understanding of the average computational effort needed to solve decision problems. We investigate, for the first time, the phase transition properties of the WSP, under a model for generation of random instances, and note that the methods of the phase transition study need to be adjusted to FPT problems.', 'cs.AI', '2016-04-19T16:08:33Z', 'http://arxiv.org/abs/1604.05636v1', '2016-10-08 10:26:03', '2016-10-08 10:26:03')[0m
  [1m[35m (2.7ms)[0m  COMMIT
  [1m[36mPublish Load (1.3ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 809[0m
  [1m[35mAuthor Load (1.7ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Daniel Karapetyan'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.4ms)[0m  [1mBEGIN[0m
  [1m[35m (0.3ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1920, 809, 0, '2016-10-08 10:26:03', '2016-10-08 10:26:03')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.1ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Andrew J. Parkes'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35m (0.1ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1922, 809, 1, '2016-10-08 10:26:03', '2016-10-08 10:26:03')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.0ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Gregory Gutin'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Gregory Gutin', '2016-10-08 10:26:03', '2016-10-08 10:26:03')
  [1m[36m (0.3ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2154, 809, 2, '2016-10-08 10:26:03', '2016-10-08 10:26:03')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (1.7ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Andrei Gagarin'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Andrei Gagarin', '2016-10-08 10:26:03', '2016-10-08 10:26:03')[0m
  [1m[35m (2.8ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2155, 809, 3, '2016-10-08 10:26:03', '2016-10-08 10:26:03')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (1.8ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'The SP theory of intelligence and the representation and processing of knowledge in the brain'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.3ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.7ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('The SP theory of intelligence and the representation and processing of knowledge in the brain', 'The \"SP theory of intelligence\", with its realisation in the \"SP computer model\", aims to simplify and integrate observations and concepts across AI-related fields, with information compression as a unifying theme. This paper describes how abstract structures and processes in the theory may be realised in terms of neurons, their interconnections, and the transmission of signals between neurons. This part of the SP theory -- \"SP-neural\" -- is a tentative and partial model for the representation and processing of knowledge in the brain. In the SP theory (apart from SP-neural), all kinds of knowledge are represented with \"patterns\", where a pattern is an array of atomic symbols in one or two dimensions. In SP-neural, the concept of a \"pattern\" is realised as an array of neurons called a \"pattern assembly\", similar to Hebb\'s concept of a \"cell assembly\" but with important differences. Central to the processing of information in the SP system is the powerful concept of \"multiple alignment\", borrowed and adapted from bioinformatics. Processes such as pattern recognition, reasoning and problem solving are achieved via the building of multiple alignments, while unsupervised learning -- significantly different from the \"Hebbian\" kinds of learning -- is achieved by creating patterns from sensory information and also by creating patterns from multiple alignments in which there is a partial match between one pattern and another. Short-lived neural structures equivalent to multiple alignments will be created via an inter-play of excitatory and inhibitory neural signals. The paper discusses several associated issues, with relevant empirical evidence.', 'cs.AI', '2016-04-19T12:04:14Z', 'http://arxiv.org/abs/1604.05535v2', '2016-10-08 10:26:03', '2016-10-08 10:26:03')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (1.4ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 810
  [1m[36mAuthor Load (1.3ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'J Gerard Wolff'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('J Gerard Wolff', '2016-10-08 10:26:03', '2016-10-08 10:26:03')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2156, 810, 0, '2016-10-08 10:26:03', '2016-10-08 10:26:03')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (1.7ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Demand Prediction and Placement Optimization for Electric Vehicle Charging Stations'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.3ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Demand Prediction and Placement Optimization for Electric Vehicle Charging Stations', 'Effective placement of charging stations plays a key role in Electric Vehicle (EV) adoption. In the placement problem, given a set of candidate sites, an optimal subset needs to be selected with respect to the concerns of both (a) the charging station service provider, such as the demand at the candidate sites and the budget for deployment, and (b) the EV user, such as charging station reachability and short waiting times at the station. This work addresses these concerns, making the following three novel contributions: (i) a supervised multi-view learning framework using Canonical Correlation Analysis (CCA) for demand prediction at candidate sites, using multiple datasets such as points of interest information, traffic density, and the historical usage at existing charging stations; (ii) a mixed-packing-and- covering optimization framework that models competing concerns of the service provider and EV users; (iii) an iterative heuristic to solve these problems by alternately invoking knapsack and set cover algorithms. The performance of the demand prediction model and the placement optimization heuristic are evaluated using real world data.', 'cs.AI', '2016-04-19T08:51:03Z', 'http://arxiv.org/abs/1604.05472v2', '2016-10-08 10:26:03', '2016-10-08 10:26:03')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (1.1ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 811
  [1m[36mAuthor Load (1.3ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Ragavendran Gopalakrishnan'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Ragavendran Gopalakrishnan', '2016-10-08 10:26:03', '2016-10-08 10:26:03')[0m
  [1m[35m (2.8ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2157, 811, 0, '2016-10-08 10:26:03', '2016-10-08 10:26:03')
  [1m[36m (0.3ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.6ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Arpita Biswas'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.4ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Arpita Biswas', '2016-10-08 10:26:03', '2016-10-08 10:26:03')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2158, 811, 1, '2016-10-08 10:26:03', '2016-10-08 10:26:03')[0m
  [1m[35m (0.3ms)[0m  COMMIT
  [1m[36mAuthor Load (1.1ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Alefiya Lightwala'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Alefiya Lightwala', '2016-10-08 10:26:03', '2016-10-08 10:26:03')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2159, 811, 2, '2016-10-08 10:26:03', '2016-10-08 10:26:03')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.5ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Skanda Vasudevan'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Skanda Vasudevan', '2016-10-08 10:26:03', '2016-10-08 10:26:03')
  [1m[36m (0.8ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2160, 811, 3, '2016-10-08 10:26:03', '2016-10-08 10:26:03')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (1.3ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Partha Dutta'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Partha Dutta', '2016-10-08 10:26:03', '2016-10-08 10:26:03')[0m
  [1m[35m (0.3ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2161, 811, 4, '2016-10-08 10:26:03', '2016-10-08 10:26:03')
  [1m[36m (0.3ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.1ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Abhishek Tripathi'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Abhishek Tripathi', '2016-10-08 10:26:03', '2016-10-08 10:26:03')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.5ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2162, 811, 5, '2016-10-08 10:26:03', '2016-10-08 10:26:03')[0m
  [1m[35m (0.3ms)[0m  COMMIT
  [1m[36mPaper Load (1.0ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Managing Overstaying Electric Vehicles in Park-and-Charge Facilities'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Managing Overstaying Electric Vehicles in Park-and-Charge Facilities', 'With the increase in adoption of Electric Vehicles (EVs), proper utilization of the charging infrastructure is an emerging challenge for service providers. Overstaying of an EV after a charging event is a key contributor to low utilization. Since overstaying is easily detectable by monitoring the power drawn from the charger, managing this problem primarily involves designing an appropriate \"penalty\" during the overstaying period. Higher penalties do discourage overstaying; however, due to uncertainty in parking duration, less people would find such penalties acceptable, leading to decreased utilization (and revenue). To analyze this central trade-off, we develop a novel framework that integrates models for realistic user behavior into queueing dynamics to locate the optimal penalty from the points of view of utilization and revenue, for different values of the external charging demand. Next, when the model parameters are unknown, we show how an online learning algorithm, such as UCB, can be adapted to learn the optimal penalty. Our experimental validation, based on charging data from London, shows that an appropriate penalty can increase both utilization and revenue while significantly reducing overstaying.', 'cs.AI', '2016-04-19T08:42:14Z', 'http://arxiv.org/abs/1604.05471v2', '2016-10-08 10:26:03', '2016-10-08 10:26:03')[0m
  [1m[35m (0.3ms)[0m  COMMIT
  [1m[36mPublish Load (1.1ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 812[0m
  [1m[35mAuthor Load (1.0ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Arpita Biswas'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35m (0.1ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2158, 812, 0, '2016-10-08 10:26:03', '2016-10-08 10:26:03')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.7ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Ragavendran Gopalakrishnan'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35m (0.2ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.4ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2157, 812, 1, '2016-10-08 10:26:03', '2016-10-08 10:26:03')
  [1m[36m (1.8ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.1ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Partha Dutta'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35m (0.1ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.4ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2161, 812, 2, '2016-10-08 10:26:03', '2016-10-08 10:26:03')
  [1m[36m (0.8ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (1.0ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Understanding Rating Behaviour and Predicting Ratings by Identifying Representative Users'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Understanding Rating Behaviour and Predicting Ratings by Identifying Representative Users', 'Online user reviews describing various products and services are now abundant on the web. While the information conveyed through review texts and ratings is easily comprehensible, there is a wealth of hidden information in them that is not immediately obvious. In this study, we unlock this hidden value behind user reviews to understand the various dimensions along which users rate products. We learn a set of users that represent each of these dimensions and use their ratings to predict product ratings. Specifically, we work with restaurant reviews to identify users whose ratings are influenced by dimensions like \'Service\', \'Atmosphere\' etc. in order to predict restaurant ratings and understand the variation in rating behaviour across different cuisines. While previous approaches to obtaining product ratings require either a large number of user ratings or a few review texts, we show that it is possible to predict ratings with few user ratings and no review text. Our experiments show that our approach outperforms other conventional methods by 16-27% in terms of RMSE.', 'cs.IR', '2016-04-19T08:31:23Z', 'http://arxiv.org/abs/1604.05468v1', '2016-10-08 10:26:03', '2016-10-08 10:26:03')
  [1m[36m (2.8ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (1.1ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 813
  [1m[36mAuthor Load (1.6ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Rahul Kamath'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.7ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Rahul Kamath', '2016-10-08 10:26:03', '2016-10-08 10:26:03')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2163, 813, 0, '2016-10-08 10:26:03', '2016-10-08 10:26:03')
  [1m[36m (0.3ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.2ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Masanao Ochi'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Masanao Ochi', '2016-10-08 10:26:03', '2016-10-08 10:26:03')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2164, 813, 1, '2016-10-08 10:26:03', '2016-10-08 10:26:03')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (1.3ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Yutaka Matsuo'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Yutaka Matsuo', '2016-10-08 10:26:03', '2016-10-08 10:26:03')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.5ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2165, 813, 2, '2016-10-08 10:26:03', '2016-10-08 10:26:03')
  [1m[36m (0.3ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (1.2ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Estimation of Passenger Route Choice Pattern Using Smart Card Data for Complex Metro Systems'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Estimation of Passenger Route Choice Pattern Using Smart Card Data for Complex Metro Systems', 'Nowadays, metro systems play an important role in meeting the urban transportation demand in large cities. The understanding of passenger route choice is critical for public transit management. The wide deployment of Automated Fare Collection(AFC) systems opens up a new opportunity. However, only each trip\'s tap-in and tap-out timestamp and stations can be directly obtained from AFC system records; the train and route chosen by a passenger are unknown, which are necessary to solve our problem. While existing methods work well in some specific situations, they don\'t work for complicated situations. In this paper, we propose a solution that needs no additional equipment or human involvement than the AFC systems. We develop a probabilistic model that can estimate from empirical analysis how the passenger flows are dispatched to different routes and trains. We validate our approach using a large scale data set collected from the Shenzhen metro system. The measured results provide us with useful inputs when building the passenger path choice model.', 'cs.AI', '2016-04-19T07:52:30Z', 'http://arxiv.org/abs/1605.08390v1', '2016-10-08 10:26:03', '2016-10-08 10:26:03')
  [1m[36m (0.3ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (1.2ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 814
  [1m[36mAuthor Load (1.3ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Juanjuan Zhao'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.4ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Juanjuan Zhao', '2016-10-08 10:26:03', '2016-10-08 10:26:03')[0m
  [1m[35m (0.9ms)[0m  COMMIT
  [1m[36m (0.3ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2166, 814, 0, '2016-10-08 10:26:03', '2016-10-08 10:26:03')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.1ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Fan Zhang'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Fan Zhang', '2016-10-08 10:26:03', '2016-10-08 10:26:03')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2167, 814, 1, '2016-10-08 10:26:03', '2016-10-08 10:26:03')[0m
  [1m[35m (0.3ms)[0m  COMMIT
  [1m[36mAuthor Load (1.2ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Lai Tu'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Lai Tu', '2016-10-08 10:26:03', '2016-10-08 10:26:03')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.8ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2168, 814, 2, '2016-10-08 10:26:03', '2016-10-08 10:26:03')
  [1m[36m (0.7ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.1ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Chengzhong Xu'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Chengzhong Xu', '2016-10-08 10:26:03', '2016-10-08 10:26:03')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2169, 814, 3, '2016-10-08 10:26:03', '2016-10-08 10:26:03')[0m
  [1m[35m (0.3ms)[0m  COMMIT
  [1m[36mAuthor Load (1.0ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Dayong Shen'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Dayong Shen', '2016-10-08 10:26:03', '2016-10-08 10:26:03')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.4ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2170, 814, 4, '2016-10-08 10:26:03', '2016-10-08 10:26:03')
  [1m[36m (0.9ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.4ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Chen Tian'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Chen Tian', '2016-10-08 10:26:03', '2016-10-08 10:26:03')
  [1m[36m (2.8ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2171, 814, 5, '2016-10-08 10:26:03', '2016-10-08 10:26:03')[0m
  [1m[35m (0.3ms)[0m  COMMIT
  [1m[36mAuthor Load (1.1ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Xiang-Yang Li'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Xiang-Yang Li', '2016-10-08 10:26:03', '2016-10-08 10:26:03')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.4ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2172, 814, 6, '2016-10-08 10:26:03', '2016-10-08 10:26:03')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.1ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Zhengxi Li'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Zhengxi Li', '2016-10-08 10:26:03', '2016-10-08 10:26:03')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2173, 814, 7, '2016-10-08 10:26:03', '2016-10-08 10:26:03')[0m
  [1m[35m (0.3ms)[0m  COMMIT
  [1m[36mPaper Load (0.9ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Extending the Harper Identity to Iterated Belief Change'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Extending the Harper Identity to Iterated Belief Change', 'The field of iterated belief change has focused mainly on revision, with the other main operator of AGM belief change theory, i.e. contraction, receiving relatively little attention. In this paper we extend the Harper Identity from single-step change to define iterated contraction in terms of iterated revision. Specifically, just as the Harper Identity provides a recipe for defining the belief set resulting from contracting A in terms of (i) the initial belief set and (ii) the belief set resulting from revision by not-A, we look at ways to define the plausibility ordering over worlds resulting from contracting A in terms of (iii) the initial plausibility ordering, and (iv) the plausibility ordering resulting from revision by not-A. After noting that the most straightforward such extension leads to a trivialisation of the space of permissible orderings, we provide a family of operators for combining plausibility orderings that avoid such a result. These operators are characterised in our domain of interest by a pair of intuitively compelling properties, which turn out to enable the derivation of a number of iterated contraction postulates from postulates for iterated revision. We finish by observing that a salient member of this family allows for the derivation of counterparts for contraction of some well known iterated revision operators, as well as for defining new iterated contraction operators.', 'cs.AI', '2016-04-19T03:36:20Z', 'http://arxiv.org/abs/1604.05419v1', '2016-10-08 10:26:03', '2016-10-08 10:26:03')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPublish Load (1.6ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 815[0m
  [1m[35mAuthor Load (1.4ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Jake Chandler'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Jake Chandler', '2016-10-08 10:26:03', '2016-10-08 10:26:03')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2174, 815, 0, '2016-10-08 10:26:03', '2016-10-08 10:26:03')[0m
  [1m[35m (0.3ms)[0m  COMMIT
  [1m[36mAuthor Load (1.0ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Richard Booth'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Richard Booth', '2016-10-08 10:26:03', '2016-10-08 10:26:03')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2175, 815, 1, '2016-10-08 10:26:03', '2016-10-08 10:26:03')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (1.4ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Text-based LSTM networks for Automatic Music Composition'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Text-based LSTM networks for Automatic Music Composition', 'In this paper, we introduce new methods and discuss results of text-based LSTM (Long Short-Term Memory) networks for automatic music composition. The proposed network is designed to learn relationships within text documents that represent chord progressions and drum tracks in two case studies. In the experiments, word-RNNs (Recurrent Neural Networks) show good results for both cases, while character-based RNNs (char-RNNs) only succeed to learn chord progressions. The proposed system can be used for fully automatic composition or as semi-automatic systems that help humans to compose music by controlling a diversity parameter of the model.', 'cs.AI', '2016-04-18T21:43:44Z', 'http://arxiv.org/abs/1604.05358v1', '2016-10-08 10:26:03', '2016-10-08 10:26:03')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (1.1ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 816
  [1m[36mAuthor Load (0.4ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Keunwoo Choi'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36m (0.1ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (377, 816, 0, '2016-10-08 10:26:03', '2016-10-08 10:26:03')[0m
  [1m[35m (0.3ms)[0m  COMMIT
  [1m[36mAuthor Load (0.5ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'George Fazekas'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (378, 816, 1, '2016-10-08 10:26:03', '2016-10-08 10:26:03')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.4ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Mark Sandler'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36m (0.1ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (379, 816, 2, '2016-10-08 10:26:03', '2016-10-08 10:26:03')[0m
  [1m[35m (2.8ms)[0m  COMMIT
  [1m[36mPaper Load (1.9ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Inductive Coherence'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Inductive Coherence', 'While probability theory is normally applied to external environments, there has been some recent interest in probabilistic modeling of the outputs of computations that are too expensive to run. Since mathematical logic is a powerful tool for reasoning about computer programs, we consider this problem from the perspective of integrating probability and logic. Recent work on assigning probabilities to mathematical statements has used the concept of coherent distributions, which satisfy logical constraints such as the probability of a sentence and its negation summing to one. Although there are algorithms which converge to a coherent probability distribution in the limit, this yields only weak guarantees about finite approximations of these distributions. In our setting, this is a significant limitation: Coherent distributions assign probability one to all statements provable in a specific logical theory, such as Peano Arithmetic, which can prove what the output of any terminating computation is; thus, a coherent distribution must assign probability one to the output of any terminating computation. To model uncertainty about computations, we propose to work with approximations to coherent distributions. We introduce inductive coherence, a strengthening of coherence that provides appropriate constraints on finite approximations, and propose an algorithm which satisfies this criterion.', 'cs.AI', '2016-04-18T19:37:46Z', 'http://arxiv.org/abs/1604.05288v2', '2016-10-08 10:26:03', '2016-10-08 10:26:03')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPublish Load (2.4ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 817[0m
  [1m[35mAuthor Load (0.8ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Scott Garrabrant'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35m (0.2ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (2.8ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (45, 817, 0, '2016-10-08 10:26:03', '2016-10-08 10:26:03')
  [1m[36m (0.7ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.1ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Benya Fallenstein'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Benya Fallenstein', '2016-10-08 10:26:03', '2016-10-08 10:26:03')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2176, 817, 1, '2016-10-08 10:26:03', '2016-10-08 10:26:03')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (1.1ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Abram Demski'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Abram Demski', '2016-10-08 10:26:03', '2016-10-08 10:26:03')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2177, 817, 2, '2016-10-08 10:26:03', '2016-10-08 10:26:03')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.5ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Nate Soares'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.3ms)[0m  [1mBEGIN[0m
  [1m[35m (0.3ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (48, 817, 3, '2016-10-08 10:26:03', '2016-10-08 10:26:03')
  [1m[36m (0.6ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (1.1ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Asymptotic Convergence in Online Learning with Unbounded Delays'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.4ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Asymptotic Convergence in Online Learning with Unbounded Delays', 'We study the problem of predicting the results of computations that are too expensive to run, via the observation of the results of smaller computations. We model this as an online learning problem with delayed feedback, where the length of the delay is unbounded, which we study mainly in a stochastic setting. We show that in this setting, consistency is not possible in general, and that optimal forecasters might not have average regret going to zero. However, it is still possible to give algorithms that converge asymptotically to Bayes-optimal predictions, by evaluating forecasters on specific sparse independent subsequences of their predictions. We give an algorithm that does this, which converges asymptotically on good behavior, and give very weak bounds on how long it takes to converge. We then relate our results back to the problem of predicting large computations in a deterministic setting.', 'cs.LG', '2016-04-18T19:04:59Z', 'http://arxiv.org/abs/1604.05280v4', '2016-10-08 10:26:03', '2016-10-08 10:26:03')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (1.9ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 818
  [1m[36mAuthor Load (0.5ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Scott Garrabrant'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36m (0.1ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (45, 818, 0, '2016-10-08 10:26:03', '2016-10-08 10:26:03')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.3ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Nate Soares'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36m (0.1ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (48, 818, 1, '2016-10-08 10:26:03', '2016-10-08 10:26:03')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.3ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Jessica Taylor'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36m (0.1ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (49, 818, 2, '2016-10-08 10:26:03', '2016-10-08 10:26:03')[0m
  [1m[35m (0.3ms)[0m  COMMIT
  [1m[36mPaper Load (1.4ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Learning Possibilistic Logic Theories from Default Rules'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Learning Possibilistic Logic Theories from Default Rules', 'We introduce a setting for learning possibilistic logic theories from defaults of the form \"if alpha then typically beta\". We first analyse this problem from the point of view of machine learning theory, determining the VC dimension of possibilistic stratifications as well as the complexity of the associated learning problems, after which we present a heuristic learning algorithm that can easily scale to thousands of defaults. An important property of our approach is that it is inherently able to handle noisy and conflicting sets of defaults. Among others, this allows us to learn possibilistic logic theories from crowdsourced data and to approximate propositional Markov logic networks using heuristic MAP solvers. We present experimental results that demonstrate the effectiveness of this approach.', 'cs.AI', '2016-04-18T18:35:38Z', 'http://arxiv.org/abs/1604.05273v1', '2016-10-08 10:26:03', '2016-10-08 10:26:03')[0m
  [1m[35m (2.8ms)[0m  COMMIT
  [1m[36mPublish Load (1.3ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 819[0m
  [1m[35mAuthor Load (1.1ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Ondrej Kuzelka'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Ondrej Kuzelka', '2016-10-08 10:26:03', '2016-10-08 10:26:03')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2178, 819, 0, '2016-10-08 10:26:03', '2016-10-08 10:26:03')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (1.2ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Jesse Davis'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.4ms)[0m  BEGIN
  [1m[36mSQL (0.4ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Jesse Davis', '2016-10-08 10:26:03', '2016-10-08 10:26:03')[0m
  [1m[35m (0.6ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.4ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2179, 819, 1, '2016-10-08 10:26:03', '2016-10-08 10:26:03')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.1ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Steven Schockaert'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Steven Schockaert', '2016-10-08 10:26:03', '2016-10-08 10:26:03')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2180, 819, 2, '2016-10-08 10:26:03', '2016-10-08 10:26:03')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (1.3ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'A Repeated Signal Difference for Recognising Patterns'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('A Repeated Signal Difference for Recognising Patterns', 'This paper describes a new mechanism that might help with defining pattern sequences, by the fact that it can produce an upper bound on the ensemble value that can persistently oscillate with the actual values produced from each pattern. With every firing event, a node also receives an on/off feedback switch. If the node fires, then it sends a feedback result depending on the input signal strength. If the input signal is positive or larger, it can store an \'on\' switch feedback for the next iteration. If the signal is negative or smaller, it can store an \'off\' switch feedback for the next iteration. If the node does not fire, then it does not affect the current feedback situation and receives the switch command produced by the last active pattern event for the same neuron. The upper bound therefore also represents the largest or most enclosing pattern set and the lower value is for the actual set of firing patterns. If the pattern sequence repeats, it will oscillate between the two values, allowing them to be recognised and measured more easily, over time. Tests show that changing the sequence ordering produces different value sets, which can also be measured.', 'cs.NE', '2016-04-18T14:13:52Z', 'http://arxiv.org/abs/1604.05170v3', '2016-10-08 10:26:03', '2016-10-08 10:26:03')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPublish Load (1.2ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 820[0m
  [1m[35mAuthor Load (0.8ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Kieran Greer'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35m (0.1ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1212, 820, 0, '2016-10-08 10:26:03', '2016-10-08 10:26:03')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (1.2ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Memory shapes time perception and intertemporal choices'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Memory shapes time perception and intertemporal choices', 'There is a consensus that human and non-human subjects experience temporal distortions in many stages of their perceptual and decision-making systems. Similarly, intertemporal choice research has shown that decision-makers undervalue future outcomes relative to immediate ones. Here we combine techniques from information theory and artificial intelligence to show how both temporal distortions and intertemporal choice preferences can be explained as a consequence of the coding efficiency of sensorimotor representation. In particular, the model implies that interactions that constrain future behavior are perceived as being both longer in duration and more valuable. Furthermore, using simulations of artificial agents, we investigate how memory constraints enforce a renormalization of the perceived timescales. Our results show that qualitatively different discount functions, such as exponential and hyperbolic discounting, arise as a consequence of an agent\'s probabilistic model of the world.', 'q-bio.NC', '2016-04-18T13:17:55Z', 'http://arxiv.org/abs/1604.05129v2', '2016-10-08 10:26:03', '2016-10-08 10:26:03')
  [1m[36m (3.0ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (2.3ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 821
  [1m[36mAuthor Load (1.3ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Pedro A. Ortega'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Pedro A. Ortega', '2016-10-08 10:26:03', '2016-10-08 10:26:03')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2181, 821, 0, '2016-10-08 10:26:03', '2016-10-08 10:26:03')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.2ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Naftali Tishby'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.3ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Naftali Tishby', '2016-10-08 10:26:03', '2016-10-08 10:26:03')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.5ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2182, 821, 1, '2016-10-08 10:26:03', '2016-10-08 10:26:03')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (1.1ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'End-to-End Tracking and Semantic Segmentation Using Recurrent Neural Networks'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('End-to-End Tracking and Semantic Segmentation Using Recurrent Neural Networks', 'In this work we present a novel end-to-end framework for tracking and classifying a robot\'s surroundings in complex, dynamic and only partially observable real-world environments. The approach deploys a recurrent neural network to filter an input stream of raw laser measurements in order to directly infer object locations, along with their identity in both visible and occluded areas. To achieve this we first train the network using unsupervised Deep Tracking, a recently proposed theoretical framework for end-to-end space occupancy prediction. We show that by learning to track on a large amount of unsupervised data, the network creates a rich internal representation of its environment which we in turn exploit through the principle of inductive transfer of knowledge to perform the task of it\'s semantic classification. As a result, we show that only a small amount of labelled data suffices to steer the network towards mastering this additional task. Furthermore we propose a novel recurrent neural network architecture specifically tailored to tracking and semantic classification in real-world robotics applications. We demonstrate the tracking and classification performance of the method on real-world data collected at a busy road junction. Our evaluation shows that the proposed end-to-end framework compares favourably to a state-of-the-art, model-free tracking solution and that it outperforms a conventional one-shot training scheme for semantic classification.', 'cs.LG', '2016-04-18T11:15:56Z', 'http://arxiv.org/abs/1604.05091v2', '2016-10-08 10:26:03', '2016-10-08 10:26:03')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPublish Load (1.1ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 822[0m
  [1m[35mAuthor Load (1.1ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Peter Ondruska'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.4ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Peter Ondruska', '2016-10-08 10:26:03', '2016-10-08 10:26:03')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2183, 822, 0, '2016-10-08 10:26:03', '2016-10-08 10:26:03')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (1.1ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Julie Dequaire'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Julie Dequaire', '2016-10-08 10:26:03', '2016-10-08 10:26:03')[0m
  [1m[35m (0.3ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2184, 822, 1, '2016-10-08 10:26:03', '2016-10-08 10:26:03')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.3ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Dominic Zeng Wang'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Dominic Zeng Wang', '2016-10-08 10:26:03', '2016-10-08 10:26:03')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2185, 822, 2, '2016-10-08 10:26:03', '2016-10-08 10:26:03')[0m
  [1m[35m (0.7ms)[0m  COMMIT
  [1m[36mAuthor Load (1.9ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Ingmar Posner'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Ingmar Posner', '2016-10-08 10:26:03', '2016-10-08 10:26:03')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2186, 822, 3, '2016-10-08 10:26:03', '2016-10-08 10:26:03')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (1.1ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Normative Multiagent Systems: A Dynamic Generalization'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.4ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Normative Multiagent Systems: A Dynamic Generalization', 'Social norms are powerful formalism in coordinating autonomous agents\' behaviour to achieve certain objectives. In this paper, we propose a dynamic normative system to enable the reasoning of the changes of norms under different circumstances, which cannot be done in the existing static normative systems. We study two important problems (norm synthesis and norm recognition) related to the autonomy of the entire system and the agents, and characterise the computational complexities of solving these problems.', 'cs.AI', '2016-04-18T11:07:02Z', 'http://arxiv.org/abs/1604.05086v1', '2016-10-08 10:26:03', '2016-10-08 10:26:03')
  [1m[36m (3.0ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (2.3ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 823
  [1m[36mAuthor Load (1.4ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Xiaowei Huang'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Xiaowei Huang', '2016-10-08 10:26:03', '2016-10-08 10:26:03')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2187, 823, 0, '2016-10-08 10:26:03', '2016-10-08 10:26:03')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.2ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Ji Ruan'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Ji Ruan', '2016-10-08 10:26:03', '2016-10-08 10:26:03')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2188, 823, 1, '2016-10-08 10:26:03', '2016-10-08 10:26:03')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (1.2ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Qingliang Chen'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Qingliang Chen', '2016-10-08 10:26:03', '2016-10-08 10:26:03')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2189, 823, 2, '2016-10-08 10:26:03', '2016-10-08 10:26:03')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.4ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Kaile Su'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Kaile Su', '2016-10-08 10:26:03', '2016-10-08 10:26:03')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2190, 823, 3, '2016-10-08 10:26:03', '2016-10-08 10:26:03')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (1.0ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Mastering $2048$ with Delayed Temporal Coherence Learning, Multi-State Weight Promotion, Redundant Encoding and Carousel Shaping'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Mastering $2048$ with Delayed Temporal Coherence Learning, Multi-State Weight Promotion, Redundant Encoding and Carousel Shaping', '$2048$ is an engaging single-player, nondeterministic video puzzle game, which, thanks to the simple rules and hard-to-master gameplay, has gained massive popularity in recent years. As $2048$ can be conveniently embedded into the discrete-state Markov decision processes framework, we treat it as a testbed for evaluating existing and new methods in reinforcement learning. With the aim to develop a strong $2048$ playing program, we employ temporal difference learning with systematic n-tuple networks. We show that this basic method can be significantly improved with temporal coherence learning, multi-stage function approximator with weight promotion, carousel shaping, and redundant encoding. In addition, we demonstrate how to take advantage of the characteristics of the n-tuple network, to improve the algorithmic effectiveness of the learning process by i) delaying the (decayed) update and applying lock-free optimistic parallelism to effortlessly make advantage of multiple CPU cores. This way, we were able to develop the best known $2048$ playing program to date, which confirms the effectiveness of the introduced methods for discrete-state Markov decision problems.', 'cs.AI', '2016-04-18T11:06:32Z', 'http://arxiv.org/abs/1604.05085v1', '2016-10-08 10:26:03', '2016-10-08 10:26:03')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPublish Load (1.7ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 824[0m
  [1m[35mAuthor Load (1.3ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Wojciech Jaśkowski'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35m (0.2ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1913, 824, 0, '2016-10-08 10:26:03', '2016-10-08 10:26:03')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (1.1ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Empirical study of PROXTONE and PROXTONE$^+$ for Fast Learning of Large Scale Sparse Models'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Empirical study of PROXTONE and PROXTONE$^+$ for Fast Learning of Large Scale Sparse Models', 'PROXTONE is a novel and fast method for optimization of large scale non-smooth convex problem \\cite{shi2015large}. In this work, we try to use PROXTONE method in solving large scale \\emph{non-smooth non-convex} problems, for example training of sparse deep neural network (sparse DNN) or sparse convolutional neural network (sparse CNN) for embedded or mobile device. PROXTONE converges much faster than first order methods, while first order method is easy in deriving and controlling the sparseness of the solutions. Thus in some applications, in order to train sparse models fast, we propose to combine the merits of both methods, that is we use PROXTONE in the first several epochs to reach the neighborhood of an optimal solution, and then use the first order method to explore the possibility of sparsity in the following training. We call such method PROXTONE plus (PROXTONE$^+$). Both PROXTONE and PROXTONE$^+$ are tested in our experiments, and which demonstrate both methods improved convergence speed twice as fast at least on diverse sparse model learning problems, and at the same time reduce the size to 0.5\\% for DNN models. The source of all the algorithms is available upon request.', 'cs.LG', '2016-04-18T08:01:02Z', 'http://arxiv.org/abs/1604.05024v1', '2016-10-08 10:26:03', '2016-10-08 10:26:03')
  [1m[36m (3.0ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (1.9ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 825
  [1m[36mAuthor Load (1.3ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Ziqiang Shi'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Ziqiang Shi', '2016-10-08 10:26:03', '2016-10-08 10:26:03')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2191, 825, 0, '2016-10-08 10:26:03', '2016-10-08 10:26:03')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.2ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Rujie Liu'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Rujie Liu', '2016-10-08 10:26:03', '2016-10-08 10:26:03')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2192, 825, 1, '2016-10-08 10:26:03', '2016-10-08 10:26:03')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (1.0ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Expressive Completeness of Existential Rule Languages for Ontology-based Query Answering'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Expressive Completeness of Existential Rule Languages for Ontology-based Query Answering', 'Existential rules, also known as data dependencies in Databases, have been recently rediscovered as a promising family of languages for Ontology-based Query Answering. In this paper, we prove that disjunctive embedded dependencies exactly capture the class of recursively enumerable ontologies in Ontology-based Conjunctive Query Answering (OCQA). Our expressive completeness result does not rely on any built-in linear order on the database. To establish the expressive completeness, we introduce a novel semantic definition for OCQA ontologies. We also show that neither the class of disjunctive tuple-generating dependencies nor the class of embedded dependencies is expressively complete for recursively enumerable OCQA ontologies.', 'cs.AI', '2016-04-18T06:16:49Z', 'http://arxiv.org/abs/1604.05006v2', '2016-10-08 10:26:03', '2016-10-08 10:26:03')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPublish Load (1.5ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 826[0m
  [1m[35mAuthor Load (1.3ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Heng Zhang'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Heng Zhang', '2016-10-08 10:26:03', '2016-10-08 10:26:03')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2193, 826, 0, '2016-10-08 10:26:03', '2016-10-08 10:26:03')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (1.1ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Yan Zhang'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Yan Zhang', '2016-10-08 10:26:03', '2016-10-08 10:26:03')[0m
  [1m[35m (0.3ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2194, 826, 1, '2016-10-08 10:26:03', '2016-10-08 10:26:03')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.3ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Jia-Huai You'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Jia-Huai You', '2016-10-08 10:26:03', '2016-10-08 10:26:03')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2195, 826, 2, '2016-10-08 10:26:03', '2016-10-08 10:26:03')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPaper Load (1.1ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Learning to Incentivize: Eliciting Effort via Output Agreement'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.4ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Learning to Incentivize: Eliciting Effort via Output Agreement', 'In crowdsourcing when there is a lack of verification for contributed answers, output agreement mechanisms are often used to incentivize participants to provide truthful answers when the correct answer is hold by the majority. In this paper, we focus on using output agreement mechanisms to elicit effort, in addition to eliciting truthful answers, from a population of workers. We consider a setting where workers have heterogeneous cost of effort exertion and examine the data requester\'s problem of deciding the reward level in output agreement for optimal elicitation. In particular, when the requester knows the cost distribution, we derive the optimal reward level for output agreement mechanisms. This is achieved by first characterizing Bayesian Nash equilibria of output agreement mechanisms for a given reward level. When the requester does not know the cost distribution, we develop sequential mechanisms that combine learning the cost distribution with incentivizing effort exertion to approximately determine the optimal reward level.', 'cs.GT', '2016-04-17T21:07:02Z', 'http://arxiv.org/abs/1604.04928v1', '2016-10-08 10:26:03', '2016-10-08 10:26:03')[0m
  [1m[35m (3.0ms)[0m  COMMIT
  [1m[36mPublish Load (1.9ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 827[0m
  [1m[35mAuthor Load (0.8ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Yang Liu'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35m (0.2ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.4ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1028, 827, 0, '2016-10-08 10:26:03', '2016-10-08 10:26:03')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.2ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Yiling Chen'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Yiling Chen', '2016-10-08 10:26:03', '2016-10-08 10:26:03')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2196, 827, 1, '2016-10-08 10:26:03', '2016-10-08 10:26:03')[0m
  [1m[35m (0.9ms)[0m  COMMIT
  [1m[36mPaper Load (1.0ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'A global constraint for closed itemset mining'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('A global constraint for closed itemset mining', 'Discovering the set of closed frequent patterns is one of the fundamental problems in Data Mining. Recent Constraint Programming (CP) approaches for declarative itemset mining have proven their usefulness and flexibility. But the wide use of reified constraints in current CP approaches raises many difficulties to cope with high dimensional datasets. This paper proposes CLOSED PATTERN global constraint which does not require any reified constraints nor any extra variables to encode efficiently the Closed Frequent Pattern Mining (CFPM) constraint. CLOSED-PATTERN captures the particular semantics of the CFPM problem in order to ensure a polynomial pruning algorithm ensuring domain consistency. The computational properties of our constraint are analyzed and their practical effectiveness is experimentally evaluated.', 'cs.AI', '2016-04-17T16:32:27Z', 'http://arxiv.org/abs/1604.04894v1', '2016-10-08 10:26:03', '2016-10-08 10:26:03')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPublish Load (1.1ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 828[0m
  [1m[35mAuthor Load (1.0ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Mehdi Maamar'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Mehdi Maamar', '2016-10-08 10:26:03', '2016-10-08 10:26:03')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2197, 828, 0, '2016-10-08 10:26:03', '2016-10-08 10:26:03')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (1.2ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Nadjib Lazaar'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Nadjib Lazaar', '2016-10-08 10:26:03', '2016-10-08 10:26:03')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2198, 828, 1, '2016-10-08 10:26:03', '2016-10-08 10:26:03')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.3ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Samir Loudni'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Samir Loudni', '2016-10-08 10:26:03', '2016-10-08 10:26:03')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2199, 828, 2, '2016-10-08 10:26:03', '2016-10-08 10:26:03')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (1.3ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Yahia Lebbah'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Yahia Lebbah', '2016-10-08 10:26:03', '2016-10-08 10:26:03')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2200, 828, 3, '2016-10-08 10:26:03', '2016-10-08 10:26:03')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (1.0ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'KOGNAC: Efficient Encoding of Large Knowledge Graphs'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('KOGNAC: Efficient Encoding of Large Knowledge Graphs', 'Many Web applications require efficient querying of large Knowledge Graphs (KGs). We propose KOGNAC, a dictionary-encoding algorithm designed to improve SPARQL querying with a judicious combination of statistical and semantic techniques. In KOGNAC, frequent terms are detected with a frequency approximation algorithm and encoded to maximise compression. Infrequent terms are semantically grouped into ontological classes and encoded to increase data locality. We evaluated KOGNAC in combination with state-of-the-art RDF engines, and observed that it significantly improves SPARQL querying on KGs with up to 1B edges.', 'cs.AI', '2016-04-16T20:54:12Z', 'http://arxiv.org/abs/1604.04795v2', '2016-10-08 10:26:03', '2016-10-08 10:26:03')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (1.2ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 829
  [1m[36mAuthor Load (1.1ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Jacopo Urbani'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Jacopo Urbani', '2016-10-08 10:26:03', '2016-10-08 10:26:03')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2201, 829, 0, '2016-10-08 10:26:03', '2016-10-08 10:26:03')
  [1m[36m (0.3ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.0ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Sourav Dutta'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Sourav Dutta', '2016-10-08 10:26:03', '2016-10-08 10:26:03')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2202, 829, 1, '2016-10-08 10:26:03', '2016-10-08 10:26:03')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (1.1ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Sairam Gurajada'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Sairam Gurajada', '2016-10-08 10:26:03', '2016-10-08 10:26:03')[0m
  [1m[35m (3.0ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2203, 829, 2, '2016-10-08 10:26:03', '2016-10-08 10:26:03')
  [1m[36m (1.7ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (2.0ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Gerhard Weikum'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Gerhard Weikum', '2016-10-08 10:26:03', '2016-10-08 10:26:03')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2204, 829, 3, '2016-10-08 10:26:03', '2016-10-08 10:26:03')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (1.0ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'A Hierarchical Genetic Optimization of a Fuzzy Logic System for Flow Control in Micro Grids'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('A Hierarchical Genetic Optimization of a Fuzzy Logic System for Flow Control in Micro Grids', 'Computational Intelligence techniques are today widely used to solve complex engineering problems. Bio-inspired algorithms like Genetic Algorithms and Fuzzy Inference Systems are nowadays adopted as hybrids techniques in the commercial and industrial environment. In this paper, we present an interesting application of the FUZZY-GA paradigm to Smart Grids. In particular, this study focuses on the possibility of tuning a Fuzzy Rule Base trying to discover, by means of a GA, a minimal fuzzy rules set in a Fuzzy Logic Controller (FLC) adopted to perform decision making for the power flow management task in a microgrid. The RB optimization is obtained through Hierarchical Genetic Algorithm, based on an encoding scheme inspired by Nature, applied to the optimization of the FIS parameters. Tests show how the proposed controller scheme is effective in maximizing the economic return when dealing with the problem of power flows management in a microgrid, equipped with an energy storage system.', 'cs.AI', '2016-04-16T19:38:21Z', 'http://arxiv.org/abs/1604.04789v1', '2016-10-08 10:26:03', '2016-10-08 10:26:03')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPublish Load (1.4ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 830[0m
  [1m[35mAuthor Load (1.2ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Enrico De Santis'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Enrico De Santis', '2016-10-08 10:26:03', '2016-10-08 10:26:03')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2205, 830, 0, '2016-10-08 10:26:03', '2016-10-08 10:26:03')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (1.5ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Alireza Sadeghian'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Alireza Sadeghian', '2016-10-08 10:26:03', '2016-10-08 10:26:03')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2206, 830, 1, '2016-10-08 10:26:03', '2016-10-08 10:26:03')
  [1m[36m (0.3ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.0ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Antonello Rizzi'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Antonello Rizzi', '2016-10-08 10:26:03', '2016-10-08 10:26:03')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2207, 830, 2, '2016-10-08 10:26:03', '2016-10-08 10:26:03')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (0.9ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Studying the impact of negotiation environments on negotiation teams\' performance'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.4ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Studying the impact of negotiation environments on negotiation teams\' performance', 'In this article we study the impact of the negotiation environment on the performance of several intra-team strategies (team dynamics) for agent-based negotiation teams that negotiate with an opponent. An agent-based negotiation team is a group of agents that joins together as a party because they share common interests in the negotiation at hand. It is experimentally shown how negotiation environment conditions like the deadline of both parties, the concession speed of the opponent, similarity among team members, and team size affect performance metrics like the minimum utility of team members, the average utility of team members, and the number of negotiation rounds. Our goal is identifying which intra-team strategies work better in different environmental conditions in order to provide useful knowledge for team members to select appropriate intra-team strategies according to environmental conditions.', 'cs.MA', '2016-04-16T12:13:02Z', 'http://dx.doi.org/10.1016/j.ins.2012.07.017', '2016-10-08 10:26:03', '2016-10-08 10:26:03')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPublish Load (1.4ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 831[0m
  [1m[35mAuthor Load (0.6ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Victor Sanchez-Anguix'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35m (0.1ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (957, 831, 0, '2016-10-08 10:26:03', '2016-10-08 10:26:03')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.3ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Vicente Julian'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Vicente Julian', '2016-10-08 10:26:03', '2016-10-08 10:26:03')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2208, 831, 1, '2016-10-08 10:26:03', '2016-10-08 10:26:03')[0m
  [1m[35m (5.1ms)[0m  COMMIT
  [1m[36mAuthor Load (1.8ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Vicente Botti'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Vicente Botti', '2016-10-08 10:26:03', '2016-10-08 10:26:03')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2209, 831, 2, '2016-10-08 10:26:03', '2016-10-08 10:26:03')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.2ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Ana Garcia-Fornes'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Ana Garcia-Fornes', '2016-10-08 10:26:03', '2016-10-08 10:26:03')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2210, 831, 3, '2016-10-08 10:26:03', '2016-10-08 10:26:03')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (0.9ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Intra-Team Strategies for Teams Negotiating Against Competitor, Matchers, and Conceders'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Intra-Team Strategies for Teams Negotiating Against Competitor, Matchers, and Conceders', 'Under some circumstances, a group of individuals may need to negotiate together as a negotiation team against another party. Unlike bilateral negotiation between two individuals, this type of negotiations entails to adopt an intra-team strategy for negotiation teams in order to make team decisions and accordingly negotiate with the opponent. It is crucial to be able to negotiate successfully with heterogeneous opponents since opponents\' negotiation strategy and behavior may vary in an open environment. While one opponent might collaborate and concede over time, another may not be inclined to concede. This paper analyzes the performance of recently proposed intra-team strategies for negotiation teams against different categories of opponents: competitors, matchers, and conceders. Furthermore, it provides an extension of the negotiation tool Genius for negotiation teams in bilateral settings. Consequently, this work facilitates research in negotiation teams.', 'cs.MA', '2016-04-16T12:11:02Z', 'http://dx.doi.org/10.1007/978-4-431-54758-7_1', '2016-10-08 10:26:03', '2016-10-08 10:26:03')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPublish Load (1.5ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 832[0m
  [1m[35mAuthor Load (0.6ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Victor Sanchez-Anguix'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35m (0.1ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (957, 832, 0, '2016-10-08 10:26:03', '2016-10-08 10:26:03')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.9ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Reyhan Aydogan'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35m (0.1ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (958, 832, 1, '2016-10-08 10:26:03', '2016-10-08 10:26:03')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.0ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Vicente Julian'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35m (0.1ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2208, 832, 2, '2016-10-08 10:26:03', '2016-10-08 10:26:03')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.6ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Catholijn Jonker'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Catholijn Jonker', '2016-10-08 10:26:03', '2016-10-08 10:26:03')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2211, 832, 3, '2016-10-08 10:26:03', '2016-10-08 10:26:03')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (1.0ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Evolutionary-aided negotiation model for bilateral bargaining in Ambient Intelligence domains with complex utility functions'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Evolutionary-aided negotiation model for bilateral bargaining in Ambient Intelligence domains with complex utility functions', 'Ambient Intelligence aims to offer personalized services and easier ways of interaction between people and systems. Since several users and systems may coexist in these environments, it is quite possible that entities with opposing preferences need to cooperate to reach their respective goals. Automated negotiation is pointed as one of the mechanisms that may provide a solution to this kind of problems. In this article, a multi-issue bilateral bargaining model for Ambient Intelligence domains is presented where it is assumed that agents have computational bounded resources and do not know their opponents\' preferences. The main goal of this work is to provide negotiation models that obtain efficient agreements while maintaining the computational cost low. A niching genetic algorithm is used before the negotiation process to sample one\'s own utility function (self-sampling). During the negotiation process, genetic operators are applied over the opponent\'s and one\'s own offers in order to sample new offers that are interesting for both parties. Results show that the proposed model is capable of outperforming similarity heuristics which only sample before the negotiation process and of obtaining similar results to similarity heuristics which have access to all of the possible offers.', 'cs.MA', '2016-04-16T11:53:46Z', 'http://dx.doi.org/10.1016/j.ins.2010.11.018', '2016-10-08 10:26:03', '2016-10-08 10:26:03')[0m
  [1m[35m (3.0ms)[0m  COMMIT
  [1m[36mPublish Load (1.9ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 833[0m
  [1m[35mAuthor Load (0.8ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Victor Sanchez-Anguix'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35m (0.2ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.4ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (957, 833, 0, '2016-10-08 10:26:03', '2016-10-08 10:26:03')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.1ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Soledad Valero'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Soledad Valero', '2016-10-08 10:26:03', '2016-10-08 10:26:03')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2212, 833, 1, '2016-10-08 10:26:03', '2016-10-08 10:26:03')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (1.1ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Vicente Julian'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36m (0.2ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2208, 833, 2, '2016-10-08 10:26:03', '2016-10-08 10:26:03')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (1.3ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Vicente Botti'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36m (0.1ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2209, 833, 3, '2016-10-08 10:26:03', '2016-10-08 10:26:03')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (1.1ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Ana Garcia-Fornes'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36m (0.1ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2210, 833, 4, '2016-10-08 10:26:03', '2016-10-08 10:26:03')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPaper Load (1.0ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Reaching Unanimous Agreements Within Agent-Based Negotiation Teams With Linear and Monotonic Utility Functions'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.4ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Reaching Unanimous Agreements Within Agent-Based Negotiation Teams With Linear and Monotonic Utility Functions', 'In this article, an agent-based negotiation model for negotiation teams that negotiate a deal with an opponent is presented. Agent-based negotiation teams are groups of agents that join together as a single negotiation party because they share an interest that is related to the negotiation process. The model relies on a trusted mediator that coordinates and helps team members in the decisions that they have to take during the negotiation process: which offer is sent to the opponent, and whether the offers received from the opponent are accepted. The main strength of the proposed negotiation model is the fact that it guarantees unanimity within team decisions since decisions report a utility to team members that is greater than or equal to their aspiration levels at each negotiation round. This work analyzes how unanimous decisions are taken within the team and the robustness of the model against different types of manipulations. An empirical evaluation is also performed to study the impact of the different parameters of the model.', 'cs.MA', '2016-04-16T11:42:38Z', 'http://dx.doi.org/10.1109/TSMCB.2011.2177658', '2016-10-08 10:26:03', '2016-10-08 10:26:03')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPublish Load (1.4ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 834[0m
  [1m[35mAuthor Load (0.9ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Victor Sanchez-Anguix'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35m (0.1ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (957, 834, 0, '2016-10-08 10:26:03', '2016-10-08 10:26:03')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.3ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Vicente Julian'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35m (0.1ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2208, 834, 1, '2016-10-08 10:26:03', '2016-10-08 10:26:03')
  [1m[36m (0.3ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.0ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Vicente Botti'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35m (0.1ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2209, 834, 2, '2016-10-08 10:26:03', '2016-10-08 10:26:03')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.3ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Ana Garcia-Fornes'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35m (0.2ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2210, 834, 3, '2016-10-08 10:26:03', '2016-10-08 10:26:03')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (1.0ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Tasks for agent-based negotiation teams: Analysis, review, and challenges'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Tasks for agent-based negotiation teams: Analysis, review, and challenges', 'An agent-based negotiation team is a group of interdependent agents that join together as a single negotiation party due to their shared interests in the negotiation at hand. The reasons to employ an agent-based negotiation team may vary: (i) more computation and parallelization capabilities, (ii) unite agents with different expertise and skills whose joint work makes it possible to tackle complex negotiation domains, (iii) the necessity to represent different stakeholders or different preferences in the same party (e.g., organizations, countries, and married couple). The topic of agent-based negotiation teams has been recently introduced in multi-agent research. Therefore, it is necessary to identify good practices, challenges, and related research that may help in advancing the state-of-the-art in agent-based negotiation teams. For that reason, in this article we review the tasks to be carried out by agent-based negotiation teams. Each task is analyzed and related with current advances in different research areas. The analysis aims to identify special challenges that may arise due to the particularities of agent-based negotiation teams.', 'cs.MA', '2016-04-16T11:37:50Z', 'http://dx.doi.org/10.1016/j.engappai.2013.07.006', '2016-10-08 10:26:03', '2016-10-08 10:26:03')
  [1m[36m (3.0ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (2.0ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 835
  [1m[36mAuthor Load (0.8ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Victor Sanchez-Anguix'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36m (0.2ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (957, 835, 0, '2016-10-08 10:26:03', '2016-10-08 10:26:03')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (1.5ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Vicente Julian'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36m (0.2ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2208, 835, 1, '2016-10-08 10:26:03', '2016-10-08 10:26:03')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (1.1ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Vicente Botti'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36m (0.1ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2209, 835, 2, '2016-10-08 10:26:04', '2016-10-08 10:26:04')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (1.3ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Ana Garcia-Fornes'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36m (0.1ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2210, 835, 3, '2016-10-08 10:26:04', '2016-10-08 10:26:04')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (0.9ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Unanimously acceptable agreements for negotiation teams in unpredictable domains'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Unanimously acceptable agreements for negotiation teams in unpredictable domains', 'A negotiation team is a set of agents with common and possibly also conflicting preferences that forms one of the parties of a negotiation. A negotiation team is involved in two decision making processes simultaneously, a negotiation with the opponents, and an intra-team process to decide on the moves to make in the negotiation. This article focuses on negotiation team decision making for circumstances that require unanimity of team decisions. Existing agent-based approaches only guarantee unanimity in teams negotiating in domains exclusively composed of predictable and compatible issues. This article presents a model for negotiation teams that guarantees unanimous team decisions in domains consisting of predictable and compatible, and also unpredictable issues. Moreover, the article explores the influence of using opponent, and team member models in the proposing strategies that team members use. Experimental results show that the team benefits if team members employ Bayesian learning to model their teammates\' preferences.', 'cs.MA', '2016-04-16T11:01:44Z', 'http://dx.doi.org/10.1016/j.elerap.2014.05.002', '2016-10-08 10:26:04', '2016-10-08 10:26:04')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPublish Load (1.6ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 836[0m
  [1m[35mAuthor Load (0.8ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Victor Sanchez-Anguix'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35m (0.2ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (957, 836, 0, '2016-10-08 10:26:04', '2016-10-08 10:26:04')
  [1m[36m (1.9ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.8ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Reyhan Aydogan'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35m (0.1ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (958, 836, 1, '2016-10-08 10:26:04', '2016-10-08 10:26:04')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.2ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Vicente Julian'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35m (0.2ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2208, 836, 2, '2016-10-08 10:26:04', '2016-10-08 10:26:04')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.1ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Catholijn Jonker'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35m (0.1ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2211, 836, 3, '2016-10-08 10:26:04', '2016-10-08 10:26:04')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.9ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'An artificial intelligence tool for heterogeneous team formation in the classroom'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('An artificial intelligence tool for heterogeneous team formation in the classroom', 'Nowadays, there is increasing interest in the development of teamwork skills in the educational context. This growing interest is motivated by its pedagogical effectiveness and the fact that, in labour contexts, enterprises organize their employees in teams to carry out complex projects. Despite its crucial importance in the classroom and industry, there is a lack of support for the team formation process. Not only do many factors influence team performance, but the problem becomes exponentially costly if teams are to be optimized. In this article, we propose a tool whose aim it is to cover such a gap. It combines artificial intelligence techniques such as coalition structure generation, Bayesian learning, and Belbin\'s role theory to facilitate the generation of working groups in an educational context. This tool improves current state of the art proposals in three ways: i) it takes into account the feedback of other teammates in order to establish the most predominant role of a student instead of self-perception questionnaires; ii) it handles uncertainty with regard to each student\'s predominant team role; iii) it is iterative since it considers information from several interactions in order to improve the estimation of role assignments. We tested the performance of the proposed tool in an experiment involving students that took part in three different team activities. The experiments suggest that the proposed tool is able to improve different teamwork aspects such as team dynamics and student satisfaction.', 'cs.AI', '2016-04-16T10:50:02Z', 'http://dx.doi.org/10.1016/j.knosys.2016.02.010', '2016-10-08 10:26:04', '2016-10-08 10:26:04')
  [1m[36m (2.9ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (1.9ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 837
  [1m[36mAuthor Load (1.3ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Juan M. Alberola'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Juan M. Alberola', '2016-10-08 10:26:04', '2016-10-08 10:26:04')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.3ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2213, 837, 0, '2016-10-08 10:26:04', '2016-10-08 10:26:04')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.2ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Elena Del Val'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Elena Del Val', '2016-10-08 10:26:04', '2016-10-08 10:26:04')
  [1m[36m (0.3ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2214, 837, 1, '2016-10-08 10:26:04', '2016-10-08 10:26:04')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.7ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Victor Sanchez-Anguix'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36m (0.2ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (957, 837, 2, '2016-10-08 10:26:04', '2016-10-08 10:26:04')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (1.1ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Alberto Palomares'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Alberto Palomares', '2016-10-08 10:26:04', '2016-10-08 10:26:04')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2215, 837, 3, '2016-10-08 10:26:04', '2016-10-08 10:26:04')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.2ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Maria Dolores Teruel'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Maria Dolores Teruel', '2016-10-08 10:26:04', '2016-10-08 10:26:04')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2216, 837, 4, '2016-10-08 10:26:04', '2016-10-08 10:26:04')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (1.1ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Why Artificial Intelligence Needs a Task Theory --- And What It Might Look Like'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.4ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Why Artificial Intelligence Needs a Task Theory --- And What It Might Look Like', 'The concept of \"task\" is at the core of artificial intelligence (AI): Tasks are used for training and evaluating AI systems, which are built in order to perform and automatize tasks we deem useful. In other fields of engineering theoretical foundations allow thorough evaluation of designs by methodical manipulation of well understood parameters with a known role and importance; this allows an aeronautics engineer, for instance, to systematically assess the effects of wind speed on an airplane\'s performance and stability. No framework exists in AI that allows this kind of methodical manipulation: Performance results on the few tasks in current use (cf. board games, question-answering) cannot be easily compared, however similar or different. The issue is even more acute with respect to artificial *general* intelligence systems, which must handle unanticipated tasks whose specifics cannot be known beforehand. A *task theory* would enable addressing tasks at the *class* level, bypassing their specifics, providing the appropriate formalization and classification of tasks, environments, and their parameters, resulting in more rigorous ways of measuring, comparing, and evaluating intelligent behavior. Even modest improvements in this direction would surpass the current ad-hoc nature of machine learning and AI evaluation. Here we discuss the main elements of the argument for a task theory and present an outline of what it might look like for physical tasks.', 'cs.AI', '2016-04-15T23:36:44Z', 'http://arxiv.org/abs/1604.04660v2', '2016-10-08 10:26:04', '2016-10-08 10:26:04')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPublish Load (1.3ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 838[0m
  [1m[35mAuthor Load (1.0ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Kristinn R. Thórisson'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Kristinn R. Thórisson', '2016-10-08 10:26:04', '2016-10-08 10:26:04')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2217, 838, 0, '2016-10-08 10:26:04', '2016-10-08 10:26:04')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (1.3ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Jordi Bieger'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Jordi Bieger', '2016-10-08 10:26:04', '2016-10-08 10:26:04')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2218, 838, 1, '2016-10-08 10:26:04', '2016-10-08 10:26:04')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.5ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Thröstur Thorarensen'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Thröstur Thorarensen', '2016-10-08 10:26:04', '2016-10-08 10:26:04')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2219, 838, 2, '2016-10-08 10:26:04', '2016-10-08 10:26:04')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (1.3ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Jóna S. Sigurðardóttir'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Jóna S. Sigurðardóttir', '2016-10-08 10:26:04', '2016-10-08 10:26:04')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2220, 838, 3, '2016-10-08 10:26:04', '2016-10-08 10:26:04')
  [1m[36m (4.8ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.8ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Bas R. Steunebrink'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Bas R. Steunebrink', '2016-10-08 10:26:04', '2016-10-08 10:26:04')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2221, 838, 4, '2016-10-08 10:26:04', '2016-10-08 10:26:04')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (1.1ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'AGI and Reflexivity'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('AGI and Reflexivity', 'We define a property of intelligent systems, which we call Reflexivity. In human beings, it is one aspect of consciousness, and an element of deliberation. We propose a conjecture, that this property is conditioned by a topological property of the processes which implement this reflexivity. These processes may be symbolic, or non symbolic e.g. connexionnist. An architecture which implements reflexivity may be based on the interaction of one or several modules of deep learning, which may be specialized or not, and interconnected in a relevant way. A necessary condition of reflexivity is the existence of recurrence in its processes, we will examine in which cases this condition may be sufficient. We will then examine how this topology and this property make possible the expression of a second property, the deliberation. In a final paragraph, we propose an evaluation of intelligent systems, based on the fulfillment of all or some of these properties.', 'cs.AI', '2016-04-15T19:39:54Z', 'http://arxiv.org/abs/1604.05557v3', '2016-10-08 10:26:04', '2016-10-08 10:26:04')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPublish Load (1.6ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 839[0m
  [1m[35mAuthor Load (1.2ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Pascal Faudemay'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Pascal Faudemay', '2016-10-08 10:26:04', '2016-10-08 10:26:04')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2222, 839, 0, '2016-10-08 10:26:04', '2016-10-08 10:26:04')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPaper Load (1.0ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'A Network-based End-to-End Trainable Task-oriented Dialogue System'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('A Network-based End-to-End Trainable Task-oriented Dialogue System', 'Teaching machines to accomplish tasks by conversing naturally with humans is challenging. Currently, developing task-oriented dialogue systems requires creating multiple components and typically this involves either a large amount of handcrafting, or acquiring labelled datasets and solving a statistical learning problem for each component. In this work we introduce a neural network-based text-in, text-out end-to-end trainable dialogue system along with a new way of collecting task-oriented dialogue data based on a novel pipe-lined Wizard-of-Oz framework. This approach allows us to develop dialogue systems easily and without making too many assumptions about the task at hand. The results show that the model can converse with human subjects naturally whilst helping them to accomplish tasks in a restaurant search domain.', 'cs.CL', '2016-04-15T16:40:49Z', 'http://arxiv.org/abs/1604.04562v2', '2016-10-08 10:26:04', '2016-10-08 10:26:04')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPublish Load (1.8ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 840[0m
  [1m[35mAuthor Load (0.7ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Tsung-Hsien Wen'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35m (0.2ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1321, 840, 0, '2016-10-08 10:26:04', '2016-10-08 10:26:04')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.6ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'David Vandyke'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('David Vandyke', '2016-10-08 10:26:04', '2016-10-08 10:26:04')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2223, 840, 1, '2016-10-08 10:26:04', '2016-10-08 10:26:04')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (1.0ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Nikola Mrksic'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36m (0.2ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1319, 840, 2, '2016-10-08 10:26:04', '2016-10-08 10:26:04')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (1.3ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Milica Gasic'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Milica Gasic', '2016-10-08 10:26:04', '2016-10-08 10:26:04')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2224, 840, 3, '2016-10-08 10:26:04', '2016-10-08 10:26:04')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.5ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Lina M. Rojas-Barahona'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Lina M. Rojas-Barahona', '2016-10-08 10:26:04', '2016-10-08 10:26:04')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2225, 840, 4, '2016-10-08 10:26:04', '2016-10-08 10:26:04')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (1.3ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Pei-Hao Su'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Pei-Hao Su', '2016-10-08 10:26:04', '2016-10-08 10:26:04')[0m
  [1m[35m (0.6ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2226, 840, 5, '2016-10-08 10:26:04', '2016-10-08 10:26:04')
  [1m[36m (2.9ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.8ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Stefan Ultes'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Stefan Ultes', '2016-10-08 10:26:04', '2016-10-08 10:26:04')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2227, 840, 6, '2016-10-08 10:26:04', '2016-10-08 10:26:04')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (0.9ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Steve Young'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36m (0.2ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1323, 840, 7, '2016-10-08 10:26:04', '2016-10-08 10:26:04')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (0.9ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Accessing accurate documents by mining auxiliary document information'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Accessing accurate documents by mining auxiliary document information', 'Earlier techniques of text mining included algorithms like k-means, Naive Bayes, SVM which classify and cluster the text document for mining relevant information about the documents. The need for improving the mining techniques has us searching for techniques using the available algorithms. This paper proposes one technique which uses the auxiliary information that is present inside the text documents to improve the mining. This auxiliary information can be a description to the content. This information can be either useful or completely useless for mining. The user should assess the worth of the auxiliary information before considering this technique for text mining. In this paper, a combination of classical clustering algorithms is used to mine the datasets. The algorithm runs in two stages which carry out mining at different levels of abstraction. The clustered documents would then be classified based on the necessary groups. The proposed technique is aimed at improved results of document clustering.', 'cs.IR', '2016-04-15T16:27:38Z', 'http://arxiv.org/abs/1604.04558v1', '2016-10-08 10:26:04', '2016-10-08 10:26:04')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPublish Load (1.6ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 841[0m
  [1m[35mAuthor Load (1.1ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Jinju Joby'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Jinju Joby', '2016-10-08 10:26:04', '2016-10-08 10:26:04')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2228, 841, 0, '2016-10-08 10:26:04', '2016-10-08 10:26:04')[0m
  [1m[35m (0.3ms)[0m  COMMIT
  [1m[36mAuthor Load (1.4ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Jyothi Korra'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Jyothi Korra', '2016-10-08 10:26:04', '2016-10-08 10:26:04')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2229, 841, 1, '2016-10-08 10:26:04', '2016-10-08 10:26:04')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (1.1ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Integrating Know-How into the Linked Data Cloud'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Integrating Know-How into the Linked Data Cloud', 'This paper presents the first framework for integrating procedural knowledge, or \"know-how\", into the Linked Data Cloud. Know-how available on the Web, such as step-by-step instructions, is largely unstructured and isolated from other sources of online knowledge. To overcome these limitations, we propose extending to procedural knowledge the benefits that Linked Data has already brought to representing, retrieving and reusing declarative knowledge. We describe a framework for representing generic know-how as Linked Data and for automatically acquiring this representation from existing resources on the Web. This system also allows the automatic generation of links between different know-how resources, and between those resources and other online knowledge bases, such as DBpedia. We discuss the results of applying this framework to a real-world scenario and we show how it outperforms existing manual community-driven integration efforts.', 'cs.AI', '2016-04-15T13:52:12Z', 'http://dx.doi.org/10.1007/978-3-319-13704-9_30', '2016-10-08 10:26:04', '2016-10-08 10:26:04')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (1.5ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 842
  [1m[36mAuthor Load (1.2ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Paolo Pareti'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Paolo Pareti', '2016-10-08 10:26:04', '2016-10-08 10:26:04')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2230, 842, 0, '2016-10-08 10:26:04', '2016-10-08 10:26:04')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.4ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Benoit Testu'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Benoit Testu', '2016-10-08 10:26:04', '2016-10-08 10:26:04')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2231, 842, 1, '2016-10-08 10:26:04', '2016-10-08 10:26:04')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (1.2ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Ryutaro Ichise'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Ryutaro Ichise', '2016-10-08 10:26:04', '2016-10-08 10:26:04')[0m
  [1m[35m (2.9ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2232, 842, 2, '2016-10-08 10:26:04', '2016-10-08 10:26:04')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.4ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Ewan Klein'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Ewan Klein', '2016-10-08 10:26:04', '2016-10-08 10:26:04')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2233, 842, 3, '2016-10-08 10:26:04', '2016-10-08 10:26:04')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (1.3ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Adam Barker'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Adam Barker', '2016-10-08 10:26:04', '2016-10-08 10:26:04')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2234, 842, 4, '2016-10-08 10:26:04', '2016-10-08 10:26:04')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.9ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Preference Elicitation For Single Crossing Domain'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Preference Elicitation For Single Crossing Domain', 'Eliciting the preferences of a set of agents over a set of alternatives is a problem of fundamental importance in social choice theory. Prior work on this problem has studied the query complexity of preference elicitation for the unrestricted domain and for the domain of single peaked preferences. In this paper, we consider the domain of single crossing preference profiles and study the query complexity of preference elicitation under various settings. We consider two distinct situations: when an ordering of the voters with respect to which the profile is single crossing is known versus when it is unknown. We also consider different access models: when the votes can be accessed at random, as opposed to when they are coming in a pre-defined sequence. In the sequential access model, we distinguish two cases when the ordering is known: the first is that sequence in which the votes appear is also a single-crossing order, versus when it is not. The main contribution of our work is to provide polynomial time algorithms with low query complexity for preference elicitation in all the above six cases. Further, we show that the query complexities of our algorithms are optimal up to constant factors for all but one of the above six cases. We then present preference elicitation algorithms for profiles which are close to being single crossing under various notions of closeness, for example, single crossing width, minimum number of candidates | voters whose deletion makes a profile single crossing.', 'cs.GT', '2016-04-15T08:47:18Z', 'http://arxiv.org/abs/1604.05194v1', '2016-10-08 10:26:04', '2016-10-08 10:26:04')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (1.2ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 843
  [1m[36mAuthor Load (1.1ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Palash Dey'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Palash Dey', '2016-10-08 10:26:04', '2016-10-08 10:26:04')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2235, 843, 0, '2016-10-08 10:26:04', '2016-10-08 10:26:04')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.5ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Neeldhara Misra'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Neeldhara Misra', '2016-10-08 10:26:04', '2016-10-08 10:26:04')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2236, 843, 1, '2016-10-08 10:26:04', '2016-10-08 10:26:04')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (1.0ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Elicitation for Preferences Single Peaked on Trees'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Elicitation for Preferences Single Peaked on Trees', 'In multiagent systems, we often have a set of agents each of which have a preference ordering over a set of items and one would like to know these preference orderings for various tasks, for example, data analysis, preference aggregation, voting etc. However, we often have a large number of items which makes it impractical to ask the agents for their complete preference ordering. In such scenarios, we usually elicit these agents\' preferences by asking (a hopefully small number of) comparison queries --- asking an agent to compare two items. Prior works on preference elicitation focus on unrestricted domain and the domain of single peaked preferences and show that the preferences in single peaked domain can be elicited by much less number of queries compared to unrestricted domain. We extend this line of research and study preference elicitation for single peaked preferences on trees which is a strict superset of the domain of single peaked preferences. We show that the query complexity crucially depends on the number of leaves, the path cover number, and the distance from path of the underlying single peaked tree, whereas the other natural parameters like maximum degree, diameter, pathwidth do not play any direct role in determining query complexity. We then investigate the query complexity for finding a weak Condorcet winner for preferences single peaked on a tree and show that this task has much less query complexity than preference elicitation. Here again we observe that the number of leaves in the underlying single peaked tree and the path cover number of the tree influence the query complexity of the problem.', 'cs.GT', '2016-04-15T08:40:39Z', 'http://arxiv.org/abs/1604.04403v1', '2016-10-08 10:26:04', '2016-10-08 10:26:04')[0m
  [1m[35m (2.9ms)[0m  COMMIT
  [1m[36mPublish Load (1.5ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 844[0m
  [1m[35mAuthor Load (1.4ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Palash Dey'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35m (0.2ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2235, 844, 0, '2016-10-08 10:26:04', '2016-10-08 10:26:04')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.1ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Neeldhara Misra'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35m (0.1ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2236, 844, 1, '2016-10-08 10:26:04', '2016-10-08 10:26:04')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (1.0ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Match-SRNN: Modeling the Recursive Matching Structure with Spatial RNN'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Match-SRNN: Modeling the Recursive Matching Structure with Spatial RNN', 'Semantic matching, which aims to determine the matching degree between two texts, is a fundamental problem for many NLP applications. Recently, deep learning approach has been applied to this problem and significant improvements have been achieved. In this paper, we propose to view the generation of the global interaction between two texts as a recursive process: i.e. the interaction of two texts at each position is a composition of the interactions between their prefixes as well as the word level interaction at the current position. Based on this idea, we propose a novel deep architecture, namely Match-SRNN, to model the recursive matching structure. Firstly, a tensor is constructed to capture the word level interactions. Then a spatial RNN is applied to integrate the local interactions recursively, with importance determined by four types of gates. Finally, the matching score is calculated based on the global interaction. We show that, after degenerated to the exact matching scenario, Match-SRNN can approximate the dynamic programming process of longest common subsequence. Thus, there exists a clear interpretation for Match-SRNN. Our experiments on two semantic matching tasks showed the effectiveness of Match-SRNN, and its ability of visualizing the learned matching structure.', 'cs.CL', '2016-04-15T07:23:53Z', 'http://arxiv.org/abs/1604.04378v1', '2016-10-08 10:26:04', '2016-10-08 10:26:04')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (1.2ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 845
  [1m[36mAuthor Load (1.0ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Shengxian Wan'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Shengxian Wan', '2016-10-08 10:26:04', '2016-10-08 10:26:04')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2237, 845, 0, '2016-10-08 10:26:04', '2016-10-08 10:26:04')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.0ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Yanyan Lan'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.3ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Yanyan Lan', '2016-10-08 10:26:04', '2016-10-08 10:26:04')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2238, 845, 1, '2016-10-08 10:26:04', '2016-10-08 10:26:04')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (1.2ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Jun Xu'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Jun Xu', '2016-10-08 10:26:04', '2016-10-08 10:26:04')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2239, 845, 2, '2016-10-08 10:26:04', '2016-10-08 10:26:04')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.0ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Jiafeng Guo'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Jiafeng Guo', '2016-10-08 10:26:04', '2016-10-08 10:26:04')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2240, 845, 3, '2016-10-08 10:26:04', '2016-10-08 10:26:04')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (1.4ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Liang Pang'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Liang Pang', '2016-10-08 10:26:04', '2016-10-08 10:26:04')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2241, 845, 4, '2016-10-08 10:26:04', '2016-10-08 10:26:04')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.4ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Xueqi Cheng'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Xueqi Cheng', '2016-10-08 10:26:04', '2016-10-08 10:26:04')
  [1m[36m (3.0ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2242, 845, 5, '2016-10-08 10:26:04', '2016-10-08 10:26:04')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (1.0ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Complexity of Manipulation with Partial Information in Voting'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Complexity of Manipulation with Partial Information in Voting', 'The Coalitional Manipulation problem has been studied extensively in the literature for many voting rules. However, most studies have focused on the complete information setting, wherein the manipulators know the votes of the non-manipulators. While this assumption is reasonable for purposes of showing intractability, it is unrealistic for algorithmic considerations. In most real-world scenarios, it is impractical for the manipulators to have accurate knowledge of all the other votes. In this paper, we investigate manipulation with incomplete information. In our framework, the manipulators know a partial order for each voter that is consistent with the true preference of that voter. In this setting, we formulate three natural computational notions of manipulation, namely weak, opportunistic, and strong manipulation. We say that an extension of a partial order is if there exists a manipulative vote for that extension. 1. Weak Manipulation (WM): the manipulators seek to vote in a way that makes their preferred candidate win in at least one extension of the partial votes of the non-manipulators. 2. Opportunistic Manipulation (OM): the manipulators seek to vote in a way that makes their preferred candidate win in every viable extension of the partial votes of the non-manipulators. 3. Strong Manipulation (SM): the manipulators seek to vote in a way that makes their preferred candidate win in every extension of the partial votes of the non-manipulators. We consider several scenarios for which the traditional manipulation problems are easy (for instance, Borda with a single manipulator). For many of them, the corresponding manipulative questions that we propose turn out to be computationally intractable. Our hardness results often hold even when very little information is missing, or in other words, even when the instances are quite close to the complete information setting.', 'cs.MA', '2016-04-15T05:55:07Z', 'http://arxiv.org/abs/1604.04359v1', '2016-10-08 10:26:04', '2016-10-08 10:26:04')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPublish Load (1.4ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 846[0m
  [1m[35mAuthor Load (0.9ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Palash Dey'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35m (0.2ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2235, 846, 0, '2016-10-08 10:26:04', '2016-10-08 10:26:04')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.3ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Neeldhara Misra'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35m (0.2ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2236, 846, 1, '2016-10-08 10:26:04', '2016-10-08 10:26:04')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.2ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Y. Narahari'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Y. Narahari', '2016-10-08 10:26:04', '2016-10-08 10:26:04')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2243, 846, 2, '2016-10-08 10:26:04', '2016-10-08 10:26:04')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (1.1ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'StalemateBreaker: A Proactive Content-Introducing Approach to Automatic Human-Computer Conversation'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('StalemateBreaker: A Proactive Content-Introducing Approach to Automatic Human-Computer Conversation', 'Existing open-domain human-computer conversation systems are typically passive: they either synthesize or retrieve a reply provided a human-issued utterance. It is generally presumed that humans should take the role to lead the conversation and introduce new content when a stalemate occurs, and that the computer only needs to \"respond.\" In this paper, we propose StalemateBreaker, a conversation system that can proactively introduce new content when appropriate. We design a pipeline to determine when, what, and how to introduce new content during human-computer conversation. We further propose a novel reranking algorithm Bi-PageRank-HITS to enable rich interaction between conversation context and candidate replies. Experiments show that both the content-introducing approach and the reranking algorithm are effective. Our full StalemateBreaker model outperforms a state-of-the-practice conversation system by +14.4% p@1 when a stalemate occurs.', 'cs.CL', '2016-04-15T05:51:29Z', 'http://arxiv.org/abs/1604.04358v1', '2016-10-08 10:26:04', '2016-10-08 10:26:04')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPublish Load (1.2ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 847[0m
  [1m[35mAuthor Load (1.0ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Xiang Li'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Xiang Li', '2016-10-08 10:26:04', '2016-10-08 10:26:04')
  [1m[36m (3.0ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2244, 847, 0, '2016-10-08 10:26:04', '2016-10-08 10:26:04')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (1.9ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Lili Mou'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Lili Mou', '2016-10-08 10:26:04', '2016-10-08 10:26:04')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2245, 847, 1, '2016-10-08 10:26:04', '2016-10-08 10:26:04')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.5ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Rui Yan'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Rui Yan', '2016-10-08 10:26:04', '2016-10-08 10:26:04')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2246, 847, 2, '2016-10-08 10:26:04', '2016-10-08 10:26:04')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (1.2ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Ming Zhang'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Ming Zhang', '2016-10-08 10:26:04', '2016-10-08 10:26:04')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2247, 847, 3, '2016-10-08 10:26:04', '2016-10-08 10:26:04')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.9ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Moving Beyond the Turing Test with the Allen AI Science Challenge'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Moving Beyond the Turing Test with the Allen AI Science Challenge', 'Given recent successes in AI (e.g., AlphaGo\'s victory against Lee Sedol in the game of GO), it\'s become increasingly important to assess: how close are AI systems to human-level intelligence? This paper describes the Allen AI Science Challenge---an approach towards that goal which led to a unique Kaggle Competition, its results, the lessons learned, and our next steps.', 'cs.AI', '2016-04-14T22:43:30Z', 'http://arxiv.org/abs/1604.04315v2', '2016-10-08 10:26:04', '2016-10-08 10:26:04')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (1.5ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 848
  [1m[36mAuthor Load (1.2ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Carissa Schoenick'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Carissa Schoenick', '2016-10-08 10:26:04', '2016-10-08 10:26:04')[0m
  [1m[35m (1.7ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2248, 848, 0, '2016-10-08 10:26:04', '2016-10-08 10:26:04')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.0ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Peter Clark'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35m (0.2ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2131, 848, 1, '2016-10-08 10:26:04', '2016-10-08 10:26:04')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.1ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Oyvind Tafjord'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Oyvind Tafjord', '2016-10-08 10:26:04', '2016-10-08 10:26:04')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2249, 848, 2, '2016-10-08 10:26:04', '2016-10-08 10:26:04')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (1.1ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Peter Turney'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Peter Turney', '2016-10-08 10:26:04', '2016-10-08 10:26:04')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2250, 848, 3, '2016-10-08 10:26:04', '2016-10-08 10:26:04')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.2ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Oren Etzioni'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35m (0.1ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2132, 848, 4, '2016-10-08 10:26:04', '2016-10-08 10:26:04')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.9ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'A Deterministic Annealing Approach to the Multiple Traveling Salesmen and Related Problems'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('A Deterministic Annealing Approach to the Multiple Traveling Salesmen and Related Problems', 'This paper presents a novel and efficient heuristic framework for approximating the solutions to the multiple traveling salesmen problem (m-TSP) and other variants on the TSP. The approach adopted in this paper is an extension of the Maximum-Entropy-Principle (MEP) and the Deterministic Annealing (DA) algorithm. The framework is presented as a general tool that can be suitably adapted to a number of variants on the basic TSP. Additionally, unlike most other heuristics for the TSP, the framework presented in this paper is independent of the edges defined between any two pairs of nodes. This makes the algorithm particularly suited for variants such as the close-enough traveling salesman problem (CETSP) which are challenging due to added computational complexity. The examples presented in this paper illustrate the effectiveness of this new framework for use in TSP and many variants thereof.', 'math.OC', '2016-04-14T14:39:56Z', 'http://arxiv.org/abs/1604.04169v1', '2016-10-08 10:26:04', '2016-10-08 10:26:04')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (1.1ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 849
  [1m[36mAuthor Load (1.1ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Mayank Baranwal'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Mayank Baranwal', '2016-10-08 10:26:04', '2016-10-08 10:26:04')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2251, 849, 0, '2016-10-08 10:26:04', '2016-10-08 10:26:04')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.1ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Brian Roehl'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Brian Roehl', '2016-10-08 10:26:04', '2016-10-08 10:26:04')
  [1m[36m (2.9ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2252, 849, 1, '2016-10-08 10:26:04', '2016-10-08 10:26:04')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (1.5ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Srinivasa M. Salapaka'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Srinivasa M. Salapaka', '2016-10-08 10:26:04', '2016-10-08 10:26:04')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2253, 849, 2, '2016-10-08 10:26:04', '2016-10-08 10:26:04')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.9ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'A Discrete Firefly Algorithm to Solve a Rich Vehicle Routing Problem Modelling a Newspaper Distribution System with Recycling Policy'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('A Discrete Firefly Algorithm to Solve a Rich Vehicle Routing Problem Modelling a Newspaper Distribution System with Recycling Policy', 'A real-world newspaper distribution problem with recycling policy is tackled in this work. In order to meet all the complex restrictions contained in such a problem, it has been modeled as a rich vehicle routing problem, which can be more specifically considered as an asymmetric and clustered vehicle routing problem with simultaneous pickup and deliveries, variable costs and forbidden paths (AC-VRP-SPDVCFP). This is the first study of such a problem in the literature. For this reason, a benchmark composed by 15 instances has been also proposed. In the design of this benchmark, real geographical positions have been used, located in the province of Bizkaia, Spain. For the proper treatment of this AC-VRP-SPDVCFP, a discrete firefly algorithm (DFA) has been developed. This application is the first application of the firefly algorithm to any rich vehicle routing problem. To prove that the proposed DFA is a promising technique, its performance has been compared with two other well-known techniques: an evolutionary algorithm and an evolutionary simulated annealing. Our results have shown that the DFA has outperformed these two classic meta-heuristics.', 'cs.NE', '2016-04-14T13:25:42Z', 'http://dx.doi.org/10.1007/s00500-016-2114-1', '2016-10-08 10:26:04', '2016-10-08 10:26:04')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (1.4ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 850
  [1m[36mAuthor Load (1.1ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'E. Osaba'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('E. Osaba', '2016-10-08 10:26:04', '2016-10-08 10:26:04')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2254, 850, 0, '2016-10-08 10:26:04', '2016-10-08 10:26:04')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.2ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Xin-She Yang'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Xin-She Yang', '2016-10-08 10:26:04', '2016-10-08 10:26:04')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2255, 850, 1, '2016-10-08 10:26:04', '2016-10-08 10:26:04')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (1.1ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'F. Diaz'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('F. Diaz', '2016-10-08 10:26:04', '2016-10-08 10:26:04')[0m
  [1m[35m (0.3ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2256, 850, 2, '2016-10-08 10:26:04', '2016-10-08 10:26:04')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.5ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'E. Onieva'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('E. Onieva', '2016-10-08 10:26:04', '2016-10-08 10:26:04')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2257, 850, 3, '2016-10-08 10:26:04', '2016-10-08 10:26:04')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (1.3ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'A. D. Masegosa'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('A. D. Masegosa', '2016-10-08 10:26:04', '2016-10-08 10:26:04')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.3ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2258, 850, 4, '2016-10-08 10:26:04', '2016-10-08 10:26:04')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.4ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'A. Perallos'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('A. Perallos', '2016-10-08 10:26:04', '2016-10-08 10:26:04')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2259, 850, 5, '2016-10-08 10:26:04', '2016-10-08 10:26:04')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPaper Load (0.9ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'An Improved Discrete Bat Algorithm for Symmetric and Asymmetric Traveling Salesman Problems'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('An Improved Discrete Bat Algorithm for Symmetric and Asymmetric Traveling Salesman Problems', 'Bat algorithm is a population metaheuristic proposed in 2010 which is based on the echolocation or bio-sonar characteristics of microbats. Since its first implementation, the bat algorithm has been used in a wide range of fields. In this paper, we present a discrete version of the bat algorithm to solve the well-known symmetric and asymmetric traveling salesman problems. In addition, we propose an improvement in the basic structure of the classic bat algorithm. To prove that our proposal is a promising approximation method, we have compared its performance in 37 instances with the results obtained by five different techniques: evolutionary simulated annealing, genetic algorithm, an island based distributed genetic algorithm, a discrete firefly algorithm and an imperialist competitive algorithm. In order to obtain fair and rigorous comparisons, we have conducted three different statistical tests along the paper: the Student\'s $t$-test, the Holm\'s test, and the Friedman test. We have also compared the convergence behaviour shown by our proposal with the ones shown by the evolutionary simulated annealing, and the discrete firefly algorithm. The experimentation carried out in this study has shown that the presented improved bat algorithm outperforms significantly all the other alternatives in most of the cases.', 'cs.NE', '2016-04-14T12:52:20Z', 'http://dx.doi.org/10.1016/j.engappai.2015.10.006', '2016-10-08 10:26:04', '2016-10-08 10:26:04')[0m
  [1m[35m (2.9ms)[0m  COMMIT
  [1m[36mPublish Load (2.0ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 851[0m
  [1m[35mAuthor Load (1.4ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Eneko Osaba'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Eneko Osaba', '2016-10-08 10:26:04', '2016-10-08 10:26:04')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2260, 851, 0, '2016-10-08 10:26:04', '2016-10-08 10:26:04')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (1.2ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Xin-She Yang'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36m (0.1ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2255, 851, 1, '2016-10-08 10:26:04', '2016-10-08 10:26:04')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (1.4ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Fernando Diaz'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Fernando Diaz', '2016-10-08 10:26:04', '2016-10-08 10:26:04')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2261, 851, 2, '2016-10-08 10:26:04', '2016-10-08 10:26:04')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.2ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Pedro Lopez-Garcia'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Pedro Lopez-Garcia', '2016-10-08 10:26:04', '2016-10-08 10:26:04')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2262, 851, 3, '2016-10-08 10:26:04', '2016-10-08 10:26:04')[0m
  [1m[35m (0.3ms)[0m  COMMIT
  [1m[36mAuthor Load (1.0ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Roberto Carballedo'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Roberto Carballedo', '2016-10-08 10:26:04', '2016-10-08 10:26:04')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2263, 851, 4, '2016-10-08 10:26:04', '2016-10-08 10:26:04')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (1.0ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Random-Key Cuckoo Search for the Travelling Salesman Problem'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Random-Key Cuckoo Search for the Travelling Salesman Problem', 'Combinatorial optimization problems are typically NP-hard, and thus very challenging to solve. In this paper, we present the random key cuckoo search (RKCS) algorithm for solving the famous Travelling Salesman Problem (TSP). We used a simplified random-key encoding scheme to pass from a continuous space (real numbers) to a combinatorial space. We also consider the displacement of a solution in both spaces using Levy flights. The performance of the proposed RKCS is tested against a set of benchmarks of symmetric TSP from the well-known TSPLIB library. The results of the tests show that RKCS is superior to some other metaheuristic algorithms.', 'cs.NE', '2016-04-14T12:40:50Z', 'http://dx.doi.org/10.1007/s00500-014-1322-9', '2016-10-08 10:26:04', '2016-10-08 10:26:04')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (1.4ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 852
  [1m[36mAuthor Load (1.3ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Aziz Ouaarab'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Aziz Ouaarab', '2016-10-08 10:26:04', '2016-10-08 10:26:04')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2264, 852, 0, '2016-10-08 10:26:04', '2016-10-08 10:26:04')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.7ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'B. Ahiod'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('B. Ahiod', '2016-10-08 10:26:04', '2016-10-08 10:26:04')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2265, 852, 1, '2016-10-08 10:26:04', '2016-10-08 10:26:04')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (1.5ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Xin-She Yang'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36m (0.2ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2255, 852, 2, '2016-10-08 10:26:04', '2016-10-08 10:26:04')[0m
  [1m[35m (0.3ms)[0m  COMMIT
  [1m[36mPaper Load (0.9ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'A General Framework for Describing Creative Agents'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('A General Framework for Describing Creative Agents', 'Computational creativity is a subfield of AI focused on developing and studying creative systems. Few academic studies analysing the behaviour of creative agents from a theoretical viewpoint have been proposed. The proposed frameworks are vague and hard to exploit; moreover, such works are focused on a notion of creativity tailored for humans. In this paper we introduce General Creativity, which extends that traditional notion. General Creativity provides the basis for a formalised theoretical framework, that allows one to univocally describe any creative agent, and their behaviour within societies of creative systems. Given the growing number of AI creative systems developed over recent years, it is of fundamental importance to understand how they could influence each other as well as how to gauge their impact on human society. In particular, in this paper we exploit the proposed framework for (i) identifying different forms of creativity; (ii) describing some typical creative agents behaviour, and (iii) analysing the dynamics of societies in which both human and non-human creative systems coexist.', 'cs.AI', '2016-04-14T10:13:43Z', 'http://arxiv.org/abs/1604.04096v1', '2016-10-08 10:26:04', '2016-10-08 10:26:04')[0m
  [1m[35m (4.0ms)[0m  COMMIT
  [1m[36mPublish Load (2.0ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 853[0m
  [1m[35mAuthor Load (1.8ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Valerio Velardo'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Valerio Velardo', '2016-10-08 10:26:04', '2016-10-08 10:26:04')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2266, 853, 0, '2016-10-08 10:26:04', '2016-10-08 10:26:04')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (1.5ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Mauro Vallati'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Mauro Vallati', '2016-10-08 10:26:04', '2016-10-08 10:26:04')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2267, 853, 1, '2016-10-08 10:26:04', '2016-10-08 10:26:04')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (1.0ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Visual Storytelling'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Visual Storytelling', 'We introduce the first dataset for sequential vision-to-language, and explore how this data may be used for the task of visual storytelling. The first release of this dataset, SIND v.1, includes 81,743 unique photos in 20,211 sequences, aligned to both descriptive (caption) and story language. We establish several strong baselines for the storytelling task, and motivate an automatic metric to benchmark progress. Modelling concrete description as well as figurative and social language, as provided in this dataset and the storytelling task, has the potential to move artificial intelligence from basic understandings of typical visual scenes towards more and more human-like understanding of grounded event structure and subjective expression.', 'cs.CL', '2016-04-13T20:27:43Z', 'http://arxiv.org/abs/1604.03968v1', '2016-10-08 10:26:04', '2016-10-08 10:26:04')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (1.4ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 854
  [1m[36mAuthor Load (1.1ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = ' Ting-Hao'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES (' Ting-Hao', '2016-10-08 10:26:04', '2016-10-08 10:26:04')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2268, 854, 0, '2016-10-08 10:26:04', '2016-10-08 10:26:04')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.3ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = ' Huang'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES (' Huang', '2016-10-08 10:26:04', '2016-10-08 10:26:04')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2269, 854, 1, '2016-10-08 10:26:04', '2016-10-08 10:26:04')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (1.3ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Francis Ferraro'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Francis Ferraro', '2016-10-08 10:26:04', '2016-10-08 10:26:04')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2270, 854, 2, '2016-10-08 10:26:04', '2016-10-08 10:26:04')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.4ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Nasrin Mostafazadeh'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Nasrin Mostafazadeh', '2016-10-08 10:26:04', '2016-10-08 10:26:04')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2271, 854, 3, '2016-10-08 10:26:04', '2016-10-08 10:26:04')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (1.1ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Ishan Misra'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Ishan Misra', '2016-10-08 10:26:04', '2016-10-08 10:26:04')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2272, 854, 4, '2016-10-08 10:26:04', '2016-10-08 10:26:04')
  [1m[36m (1.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.5ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Aishwarya Agrawal'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35m (0.2ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (206, 854, 5, '2016-10-08 10:26:04', '2016-10-08 10:26:04')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.2ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Jacob Devlin'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Jacob Devlin', '2016-10-08 10:26:04', '2016-10-08 10:26:04')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2273, 854, 6, '2016-10-08 10:26:04', '2016-10-08 10:26:04')[0m
  [1m[35m (3.0ms)[0m  COMMIT
  [1m[36mAuthor Load (1.9ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Ross Girshick'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Ross Girshick', '2016-10-08 10:26:04', '2016-10-08 10:26:04')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2274, 854, 7, '2016-10-08 10:26:04', '2016-10-08 10:26:04')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.5ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Xiaodong He'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35m (0.2ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (496, 854, 8, '2016-10-08 10:26:04', '2016-10-08 10:26:04')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.4ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Pushmeet Kohli'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35m (0.1ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (402, 854, 9, '2016-10-08 10:26:04', '2016-10-08 10:26:04')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.4ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Dhruv Batra'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35m (0.2ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (188, 854, 10, '2016-10-08 10:26:04', '2016-10-08 10:26:04')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.4ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'C. Lawrence Zitnick'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35m (0.1ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (205, 854, 11, '2016-10-08 10:26:04', '2016-10-08 10:26:04')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.5ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Devi Parikh'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35m (0.2ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (187, 854, 12, '2016-10-08 10:26:04', '2016-10-08 10:26:04')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.6ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Lucy Vanderwende'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.4ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Lucy Vanderwende', '2016-10-08 10:26:04', '2016-10-08 10:26:04')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2275, 854, 13, '2016-10-08 10:26:04', '2016-10-08 10:26:04')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (1.1ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Michel Galley'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Michel Galley', '2016-10-08 10:26:04', '2016-10-08 10:26:04')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2276, 854, 14, '2016-10-08 10:26:04', '2016-10-08 10:26:04')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.4ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Margaret Mitchell'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35m (0.1ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (208, 854, 15, '2016-10-08 10:26:04', '2016-10-08 10:26:04')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (1.0ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Inverse Reinforcement Learning with Simultaneous Estimation of Rewards and Dynamics'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Inverse Reinforcement Learning with Simultaneous Estimation of Rewards and Dynamics', 'Inverse Reinforcement Learning (IRL) describes the problem of learning an unknown reward function of a Markov Decision Process (MDP) from observed behavior of an agent. Since the agent\'s behavior originates in its policy and MDP policies depend on both the stochastic system dynamics as well as the reward function, the solution of the inverse problem is significantly influenced by both. Current IRL approaches assume that if the transition model is unknown, additional samples from the system\'s dynamics are accessible, or the observed behavior provides enough samples of the system\'s dynamics to solve the inverse problem accurately. These assumptions are often not satisfied. To overcome this, we present a gradient-based IRL approach that simultaneously estimates the system\'s dynamics. By solving the combined optimization problem, our approach takes into account the bias of the demonstrations, which stems from the generating policy. The evaluation on a synthetic MDP and a transfer learning task shows improvements regarding the sample efficiency as well as the accuracy of the estimated reward functions and transition models.', 'cs.AI', '2016-04-13T19:06:41Z', 'http://arxiv.org/abs/1604.03912v1', '2016-10-08 10:26:04', '2016-10-08 10:26:04')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (1.1ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 855
  [1m[36mAuthor Load (1.1ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Michael Herman'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Michael Herman', '2016-10-08 10:26:04', '2016-10-08 10:26:04')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2277, 855, 0, '2016-10-08 10:26:04', '2016-10-08 10:26:04')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.1ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Tobias Gindele'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Tobias Gindele', '2016-10-08 10:26:04', '2016-10-08 10:26:04')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2278, 855, 1, '2016-10-08 10:26:04', '2016-10-08 10:26:04')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (1.4ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Jörg Wagner'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Jörg Wagner', '2016-10-08 10:26:04', '2016-10-08 10:26:04')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2279, 855, 2, '2016-10-08 10:26:04', '2016-10-08 10:26:04')
  [1m[36m (0.3ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.2ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Felix Schmitt'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Felix Schmitt', '2016-10-08 10:26:04', '2016-10-08 10:26:04')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2280, 855, 3, '2016-10-08 10:26:04', '2016-10-08 10:26:04')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (1.7ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Wolfram Burgard'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Wolfram Burgard', '2016-10-08 10:26:04', '2016-10-08 10:26:04')[0m
  [1m[35m (3.0ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2281, 855, 4, '2016-10-08 10:26:04', '2016-10-08 10:26:04')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (1.6ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Single-Image Depth Perception in the Wild'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Single-Image Depth Perception in the Wild', 'This paper studies single-image depth perception in the wild, i.e., recovering depth from a single image taken in unconstrained settings. We introduce a new dataset \"Depth in the Wild\" consisting of images in the wild annotated with relative depth between pairs of random points. We also propose a new algorithm that learns to estimate metric depth using annotations of relative depth. Compared to the state of the art, our algorithm is simpler and performs better. Experiments show that our algorithm, combined with existing RGB-D data and our new relative depth annotations, significantly improves single-image depth perception in the wild.', 'cs.CV', '2016-04-13T18:19:35Z', 'http://arxiv.org/abs/1604.03901v1', '2016-10-08 10:26:04', '2016-10-08 10:26:04')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (1.5ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 856
  [1m[36mAuthor Load (1.1ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Weifeng Chen'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Weifeng Chen', '2016-10-08 10:26:04', '2016-10-08 10:26:04')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2282, 856, 0, '2016-10-08 10:26:04', '2016-10-08 10:26:04')
  [1m[36m (1.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.5ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Zhao Fu'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Zhao Fu', '2016-10-08 10:26:04', '2016-10-08 10:26:04')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2283, 856, 1, '2016-10-08 10:26:04', '2016-10-08 10:26:04')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (1.4ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Dawei Yang'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Dawei Yang', '2016-10-08 10:26:04', '2016-10-08 10:26:04')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2284, 856, 2, '2016-10-08 10:26:04', '2016-10-08 10:26:04')
  [1m[36m (0.3ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.0ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Jia Deng'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Jia Deng', '2016-10-08 10:26:04', '2016-10-08 10:26:04')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2285, 856, 3, '2016-10-08 10:26:04', '2016-10-08 10:26:04')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPaper Load (0.9ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Hierarchical Compound Poisson Factorization'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Hierarchical Compound Poisson Factorization', 'Non-negative matrix factorization models based on a hierarchical Gamma-Poisson structure capture user and item behavior effectively in extremely sparse data sets, making them the ideal choice for collaborative filtering applications. Hierarchical Poisson factorization (HPF) in particular has proved successful for scalable recommendation systems with extreme sparsity. HPF, however, suffers from a tight coupling of sparsity model (absence of a rating) and response model (the value of the rating), which limits the expressiveness of the latter. Here, we introduce hierarchical compound Poisson factorization (HCPF) that has the favorable Gamma-Poisson structure and scalability of HPF to high-dimensional extremely sparse matrices. More importantly, HCPF decouples the sparsity model from the response model, allowing us to choose the most suitable distribution for the response. HCPF can capture binary, non-negative discrete, non-negative continuous, and zero-inflated continuous responses. We compare HCPF with HPF on nine discrete and three continuous data sets and conclude that HCPF captures the relationship between sparsity and response better than HPF.', 'cs.LG', '2016-04-13T16:12:01Z', 'http://arxiv.org/abs/1604.03853v2', '2016-10-08 10:26:04', '2016-10-08 10:26:04')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPublish Load (1.7ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 857[0m
  [1m[35mAuthor Load (0.5ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Mehmet E. Basbug'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35m (0.2ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (388, 857, 0, '2016-10-08 10:26:04', '2016-10-08 10:26:04')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.6ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Barbara E. Engelhardt'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35m (0.2ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (389, 857, 1, '2016-10-08 10:26:04', '2016-10-08 10:26:04')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (1.1ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'HordeQBF: A Modular and Massively Parallel QBF Solver'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.4ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('HordeQBF: A Modular and Massively Parallel QBF Solver', 'The recently developed massively parallel satisfiability (SAT) solver HordeSAT was designed in a modular way to allow the integration of any sequential CDCL-based SAT solver in its core. We integrated the QCDCL-based quantified Boolean formula (QBF) solver DepQBF in HordeSAT to obtain a massively parallel QBF solver---HordeQBF. In this paper we describe the details of this integration and report on results of the experimental evaluation of HordeQBF\'s performance. HordeQBF achieves superlinear average and median speedup on the hard application instances of the 2014 QBF Gallery.', 'cs.LO', '2016-04-13T14:21:34Z', 'http://dx.doi.org/10.1007/978-3-319-40970-2_33', '2016-10-08 10:26:04', '2016-10-08 10:26:04')
  [1m[36m (3.0ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (2.0ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 858
  [1m[36mAuthor Load (1.9ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Tomas Balyo'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Tomas Balyo', '2016-10-08 10:26:04', '2016-10-08 10:26:04')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2286, 858, 0, '2016-10-08 10:26:04', '2016-10-08 10:26:04')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.4ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Florian Lonsing'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Florian Lonsing', '2016-10-08 10:26:04', '2016-10-08 10:26:04')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2287, 858, 1, '2016-10-08 10:26:04', '2016-10-08 10:26:04')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (0.9ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Learning Social Affordance for Human-Robot Interaction'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Learning Social Affordance for Human-Robot Interaction', 'In this paper, we present an approach for robot learning of social affordance from human activity videos. We consider the problem in the context of human-robot interaction: Our approach learns structural representations of human-human (and human-object-human) interactions, describing how body-parts of each agent move with respect to each other and what spatial relations they should maintain to complete each sub-event (i.e., sub-goal). This enables the robot to infer its own movement in reaction to the human body motion, allowing it to naturally replicate such interactions. We introduce the representation of social affordance and propose a generative model for its weakly supervised learning from human demonstration videos. Our approach discovers critical steps (i.e., latent sub-events) in an interaction and the typical motion associated with them, learning what body-parts should be involved and how. The experimental results demonstrate that our Markov Chain Monte Carlo (MCMC) based learning algorithm automatically discovers semantically meaningful interactive affordance from RGB-D videos, which allows us to generate appropriate full body motion for an agent.', 'cs.RO', '2016-04-13T08:40:06Z', 'http://arxiv.org/abs/1604.03692v2', '2016-10-08 10:26:04', '2016-10-08 10:26:04')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPublish Load (1.3ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 859[0m
  [1m[35mAuthor Load (1.1ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Tianmin Shu'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Tianmin Shu', '2016-10-08 10:26:04', '2016-10-08 10:26:04')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2288, 859, 0, '2016-10-08 10:26:04', '2016-10-08 10:26:04')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (1.1ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'M. S. Ryoo'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('M. S. Ryoo', '2016-10-08 10:26:04', '2016-10-08 10:26:04')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2289, 859, 1, '2016-10-08 10:26:04', '2016-10-08 10:26:04')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.5ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Song-Chun Zhu'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Song-Chun Zhu', '2016-10-08 10:26:04', '2016-10-08 10:26:04')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2290, 859, 2, '2016-10-08 10:26:04', '2016-10-08 10:26:04')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (1.0ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'A Discrete and Bounded Envy-Free Cake Cutting Protocol for Any Number of Agents'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('A Discrete and Bounded Envy-Free Cake Cutting Protocol for Any Number of Agents', 'We consider the well-studied cake cutting problem in which the goal is to find an envy-free allocation based on queries from $n$ agents. The problem has received attention in computer science, mathematics, and economics. It has been a major open problem whether there exists a discrete and bounded envy-free protocol. We resolve the problem by proposing a discrete and bounded envy-free protocol for any number of agents. The maximum number of queries required by the protocol is $n^{n^{n^{n^{n^n}}}}$. We additionally show that even if we do not run our protocol to completion, it can find in at most $n^{n+1}$ queries a partial allocation of the cake that achieves proportionality (each agent gets at least $1/n$ of the value of the whole cake) and envy-freeness. Finally we show that an envy-free partial allocation can be computed in $n^{n+1}$ queries such that each agent gets a connected piece that gives the agent at least $1/(3n)$ of the value of the whole cake.', 'cs.DS', '2016-04-13T05:06:29Z', 'http://arxiv.org/abs/1604.03655v9', '2016-10-08 10:26:04', '2016-10-08 10:26:04')[0m
  [1m[35m (3.0ms)[0m  COMMIT
  [1m[36mPublish Load (2.0ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 860[0m
  [1m[35mAuthor Load (1.4ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Haris Aziz'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35m (0.2ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1585, 860, 0, '2016-10-08 10:26:04', '2016-10-08 10:26:04')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.4ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Simon Mackenzie'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Simon Mackenzie', '2016-10-08 10:26:04', '2016-10-08 10:26:04')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2291, 860, 1, '2016-10-08 10:26:04', '2016-10-08 10:26:04')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (1.0ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Strategyproof Peer Selection'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Strategyproof Peer Selection', 'Peer review, evaluation, and selection is the foundation on which modern science is built. Funding bodies the world over employ experts to study and select the best proposals of those submitted for funding. The problem of peer selection, however, is much more universal: a professional society may want give a subset of its members awards based on the opinions of all the members; an instructor for a MOOC or online course may want to crowdsource grading; or a marketing company may select ideas from group brainstorming sessions based on peer evaluation. We make three fundamental contributions to the study of procedures or mechanisms for peer selection, a specific type of group decision making problem studied in computer science, economics, political science, and beyond. First, we detail a novel mechanism that is strategyproof, i.e., agents cannot benefit themselves by reporting insincere valuations, in addition to other desirable normative properties. Second, we demonstrate the effectiveness of our mechanism through a comprehensive simulation based comparison of our mechanism with a suite of mechanisms found in the computer science and economics literature. Finally, our mechanism employs a randomized rounding technique that is of independent interest, as it can be used as a randomized method to addresses the ubiquitous apportionment problem that arises in various settings where discrete resources such as parliamentary representation slots need to be divided fairly.', 'cs.GT', '2016-04-13T02:28:15Z', 'http://arxiv.org/abs/1604.03632v1', '2016-10-08 10:26:04', '2016-10-08 10:26:04')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPublish Load (1.3ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 861[0m
  [1m[35mAuthor Load (0.8ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Haris Aziz'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35m (0.1ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1585, 861, 0, '2016-10-08 10:26:04', '2016-10-08 10:26:04')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.8ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Omer Lev'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35m (0.1ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1099, 861, 1, '2016-10-08 10:26:04', '2016-10-08 10:26:04')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.7ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Nicholas Mattei'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35m (0.2ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (543, 861, 2, '2016-10-08 10:26:04', '2016-10-08 10:26:04')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.3ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Jeffrey S. Rosenschein'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Jeffrey S. Rosenschein', '2016-10-08 10:26:04', '2016-10-08 10:26:04')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2292, 861, 3, '2016-10-08 10:26:04', '2016-10-08 10:26:04')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (0.7ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Toby Walsh'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36m (0.2ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (544, 861, 4, '2016-10-08 10:26:04', '2016-10-08 10:26:04')[0m
  [1m[35m (0.3ms)[0m  COMMIT
  [1m[36mPaper Load (1.1ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Spatiotemporal Articulated Models for Dynamic SLAM'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Spatiotemporal Articulated Models for Dynamic SLAM', 'We propose an online spatiotemporal articulation model estimation framework that estimates both articulated structure as well as a temporal prediction model solely using passive observations. The resulting model can predict future mo- tions of an articulated object with high confidence because of the spatial and temporal structure. We demonstrate the effectiveness of the predictive model by incorporating it within a standard simultaneous localization and mapping (SLAM) pipeline for mapping and robot localization in previously unexplored dynamic environments. Our method is able to localize the robot and map a dynamic scene by explaining the observed motion in the world. We demonstrate the effectiveness of the proposed framework for both simulated and real-world dynamic environments.', 'cs.RO', '2016-04-12T19:00:48Z', 'http://arxiv.org/abs/1604.03526v1', '2016-10-08 10:26:05', '2016-10-08 10:26:05')[0m
  [1m[35m (3.2ms)[0m  COMMIT
  [1m[36mPublish Load (2.0ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 862[0m
  [1m[35mAuthor Load (1.8ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Suren Kumar'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Suren Kumar', '2016-10-08 10:26:05', '2016-10-08 10:26:05')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2293, 862, 0, '2016-10-08 10:26:05', '2016-10-08 10:26:05')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (1.4ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Vikas Dhiman'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Vikas Dhiman', '2016-10-08 10:26:05', '2016-10-08 10:26:05')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2294, 862, 1, '2016-10-08 10:26:05', '2016-10-08 10:26:05')
  [1m[36m (0.3ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.0ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Madan Ravi Ganesh'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Madan Ravi Ganesh', '2016-10-08 10:26:05', '2016-10-08 10:26:05')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2295, 862, 2, '2016-10-08 10:26:05', '2016-10-08 10:26:05')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (1.3ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Jason J. Corso'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Jason J. Corso', '2016-10-08 10:26:05', '2016-10-08 10:26:05')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2296, 862, 3, '2016-10-08 10:26:05', '2016-10-08 10:26:05')
  [1m[36m (0.6ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.9ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Backward-Forward Search for Manipulation Planning'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Backward-Forward Search for Manipulation Planning', 'In this paper we address planning problems in high-dimensional hybrid configuration spaces, with a particular focus on manipulation planning problems involving many objects. We present the hybrid backward-forward (HBF) planning algorithm that uses a backward identification of constraints to direct the sampling of the infinite action space in a forward search from the initial state towards a goal configuration. The resulting planner is probabilistically complete and can effectively construct long manipulation plans requiring both prehensile and nonprehensile actions in cluttered environments.', 'cs.RO', '2016-04-12T16:22:29Z', 'http://arxiv.org/abs/1604.03468v1', '2016-10-08 10:26:05', '2016-10-08 10:26:05')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (1.2ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 863
  [1m[36mAuthor Load (0.5ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Caelan Reed Garrett'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36m (0.1ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (530, 863, 0, '2016-10-08 10:26:05', '2016-10-08 10:26:05')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (0.7ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Tomas Lozano-Perez'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36m (0.2ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (532, 863, 1, '2016-10-08 10:26:05', '2016-10-08 10:26:05')[0m
  [1m[35m (0.6ms)[0m  COMMIT
  [1m[36mAuthor Load (0.6ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Leslie Pack Kaelbling'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36m (0.1ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (531, 863, 2, '2016-10-08 10:26:05', '2016-10-08 10:26:05')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPaper Load (0.9ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Resource Allocation with Population Dynamics'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Resource Allocation with Population Dynamics', 'Many analyses of resource-allocation problems employ simplistic models of the population. Using the example of a resource-allocation problem of Marecek et al. [arXiv:1406.7639], we introduce rather a general behavioural model, where the evolution of a heterogeneous population of agents is governed by a Markov chain. Still, we are able to show that the distribution of agents across resources converges in distribution, for suitable means of information provision, under certain assumptions. The model and proof techniques may have wider applicability.', 'math.OC', '2016-04-12T15:53:25Z', 'http://arxiv.org/abs/1604.03458v1', '2016-10-08 10:26:05', '2016-10-08 10:26:05')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPublish Load (1.5ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 864[0m
  [1m[35mAuthor Load (1.0ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Jonathan Epperlein'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Jonathan Epperlein', '2016-10-08 10:26:05', '2016-10-08 10:26:05')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2297, 864, 0, '2016-10-08 10:26:05', '2016-10-08 10:26:05')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (1.2ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Jakub Marecek'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Jakub Marecek', '2016-10-08 10:26:05', '2016-10-08 10:26:05')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2298, 864, 1, '2016-10-08 10:26:05', '2016-10-08 10:26:05')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (1.0ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Applying Ontological Modeling on Quranic Nature Domain'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Applying Ontological Modeling on Quranic Nature Domain', 'The holy Quran is the holy book of the Muslims. It contains information about many domains. Often people search for particular concepts of holy Quran based on the relations among concepts. An ontological modeling of holy Quran can be useful in such a scenario. In this paper, we have modeled nature related concepts of holy Quran using OWL (Web Ontology Language) / RDF (Resource Description Framework). Our methodology involves identifying nature related concepts mentioned in holy Quran and identifying relations among those concepts. These concepts and relations are represented as classes/instances and properties of an OWL ontology. Later, in the result section it is shown that, using the Ontological model, SPARQL queries can retrieve verses and concepts of interest. Thus, this modeling helps semantic search and query on the holy Quran. In this work, we have used English translation of the holy Quran by Sahih International, Protege OWL Editor and for querying we have used SPARQL.', 'cs.AI', '2016-04-12T09:27:00Z', 'http://arxiv.org/abs/1604.03318v1', '2016-10-08 10:26:05', '2016-10-08 10:26:05')
  [1m[36m (3.0ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (2.0ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 865
  [1m[36mAuthor Load (1.8ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'A. B. M. Shamsuzzaman Sadi'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('A. B. M. Shamsuzzaman Sadi', '2016-10-08 10:26:05', '2016-10-08 10:26:05')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2299, 865, 0, '2016-10-08 10:26:05', '2016-10-08 10:26:05')
  [1m[36m (2.6ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.9ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Towfique Anam'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Towfique Anam', '2016-10-08 10:26:05', '2016-10-08 10:26:05')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2300, 865, 1, '2016-10-08 10:26:05', '2016-10-08 10:26:05')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (1.9ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Mohamed Abdirazak'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Mohamed Abdirazak', '2016-10-08 10:26:05', '2016-10-08 10:26:05')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2301, 865, 2, '2016-10-08 10:26:05', '2016-10-08 10:26:05')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.5ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Abdillahi Hasan Adnan'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Abdillahi Hasan Adnan', '2016-10-08 10:26:05', '2016-10-08 10:26:05')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2302, 865, 3, '2016-10-08 10:26:05', '2016-10-08 10:26:05')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (1.2ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Sazid Zaman Khan'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Sazid Zaman Khan', '2016-10-08 10:26:05', '2016-10-08 10:26:05')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2303, 865, 4, '2016-10-08 10:26:05', '2016-10-08 10:26:05')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.4ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Mohamed Mahmudur Rahman'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Mohamed Mahmudur Rahman', '2016-10-08 10:26:05', '2016-10-08 10:26:05')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2304, 865, 5, '2016-10-08 10:26:05', '2016-10-08 10:26:05')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (1.2ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Ghassan Samara'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Ghassan Samara', '2016-10-08 10:26:05', '2016-10-08 10:26:05')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2305, 865, 6, '2016-10-08 10:26:05', '2016-10-08 10:26:05')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.9ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Optimal Route Planning with Prioritized Task Scheduling for AUV Missions'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Optimal Route Planning with Prioritized Task Scheduling for AUV Missions', 'This paper presents a solution to Autonomous Underwater Vehicles (AUVs) large scale route planning and task assignment joint problem. Given a set of constraints (e.g., time) and a set of task priority values, the goal is to find the optimal route for underwater mission that maximizes the sum of the priorities and minimizes the total risk percentage while meeting the given constraints. Making use of the heuristic nature of genetic and swarm intelligence algorithms in solving NP-hard graph problems, Particle Swarm Optimization (PSO) and Genetic Algorithm (GA) are employed to find the optimum solution, where each individual in the population is a candidate solution (route). To evaluate the robustness of the proposed methods, the performance of the all PS and GA algorithms are examined and compared for a number of Monte Carlo runs. Simulation results suggest that the routes generated by both algorithms are feasible and reliable enough, and applicable for underwater motion planning. However, the GA-based route planner produces superior results comparing to the results obtained from the PSO based route planner.', 'cs.RO', '2016-04-12T08:45:51Z', 'http://arxiv.org/abs/1604.03303v1', '2016-10-08 10:26:05', '2016-10-08 10:26:05')
  [1m[36m (3.0ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (2.0ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 866
  [1m[36mAuthor Load (1.8ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'S. Mahmoud Zadeh'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.4ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('S. Mahmoud Zadeh', '2016-10-08 10:26:05', '2016-10-08 10:26:05')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2306, 866, 0, '2016-10-08 10:26:05', '2016-10-08 10:26:05')
  [1m[36m (0.6ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.5ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'D. Powers'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('D. Powers', '2016-10-08 10:26:05', '2016-10-08 10:26:05')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.4ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2307, 866, 1, '2016-10-08 10:26:05', '2016-10-08 10:26:05')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (1.1ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'K. Sammut'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('K. Sammut', '2016-10-08 10:26:05', '2016-10-08 10:26:05')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2308, 866, 2, '2016-10-08 10:26:05', '2016-10-08 10:26:05')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.5ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'A. Lammas'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('A. Lammas', '2016-10-08 10:26:05', '2016-10-08 10:26:05')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2309, 866, 3, '2016-10-08 10:26:05', '2016-10-08 10:26:05')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (1.4ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'A. M. Yazdani'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('A. M. Yazdani', '2016-10-08 10:26:05', '2016-10-08 10:26:05')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2310, 866, 4, '2016-10-08 10:26:05', '2016-10-08 10:26:05')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (1.0ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Volumetric and Multi-View CNNs for Object Classification on 3D Data'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Volumetric and Multi-View CNNs for Object Classification on 3D Data', '3D shape models are becoming widely available and easier to capture, making available 3D information crucial for progress in object classification. Current state-of-the-art methods rely on CNNs to address this problem. Recently, we witness two types of CNNs being developed: CNNs based upon volumetric representations versus CNNs based upon multi-view representations. Empirical results from these two types of CNNs exhibit a large gap, indicating that existing volumetric CNN architectures and approaches are unable to fully exploit the power of 3D representations. In this paper, we aim to improve both volumetric CNNs and multi-view CNNs according to extensive analysis of existing approaches. To this end, we introduce two distinct network architectures of volumetric CNNs. In addition, we examine multi-view CNNs, where we introduce multi-resolution filtering in 3D. Overall, we are able to outperform current state-of-the-art methods for both volumetric CNNs and multi-view CNNs. We provide extensive experiments designed to evaluate underlying design choices, thus providing a better understanding of the space of methods available for object classification on 3D data.', 'cs.CV', '2016-04-12T07:10:43Z', 'http://arxiv.org/abs/1604.03265v2', '2016-10-08 10:26:05', '2016-10-08 10:26:05')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (1.5ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 867
  [1m[36mAuthor Load (1.2ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Charles R. Qi'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Charles R. Qi', '2016-10-08 10:26:05', '2016-10-08 10:26:05')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2311, 867, 0, '2016-10-08 10:26:05', '2016-10-08 10:26:05')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.1ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Hao Su'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Hao Su', '2016-10-08 10:26:05', '2016-10-08 10:26:05')
  [1m[36m (0.3ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2312, 867, 1, '2016-10-08 10:26:05', '2016-10-08 10:26:05')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (1.2ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Matthias Niessner'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Matthias Niessner', '2016-10-08 10:26:05', '2016-10-08 10:26:05')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2313, 867, 2, '2016-10-08 10:26:05', '2016-10-08 10:26:05')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.4ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Angela Dai'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Angela Dai', '2016-10-08 10:26:05', '2016-10-08 10:26:05')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2314, 867, 3, '2016-10-08 10:26:05', '2016-10-08 10:26:05')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (1.1ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Mengyuan Yan'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Mengyuan Yan', '2016-10-08 10:26:05', '2016-10-08 10:26:05')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2315, 867, 4, '2016-10-08 10:26:05', '2016-10-08 10:26:05')
  [1m[36m (2.9ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.9ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Leonidas J. Guibas'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Leonidas J. Guibas', '2016-10-08 10:26:05', '2016-10-08 10:26:05')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2316, 867, 5, '2016-10-08 10:26:05', '2016-10-08 10:26:05')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPaper Load (1.0ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Finding Patterns is Almost Always Hard'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Finding Patterns is Almost Always Hard', 'We study the complexity of the problem of searching for a set of patterns that separate two given sets of strings. This problem has applications in a wide variety of areas, most notably in data mining, computational biology, and in understanding the complexity of genetic algorithms. We show that the basic problem of finding a small set of patterns that match one set of strings but do not match any string in a second set is difficult (NP-complete, W[2]-hard when parameterized by the size of the pattern set, and APX-hard). We then perform a detailed parameterized analysis of the problem, separating tractable and intractable variants. In particular we show that parameterizing by the size of pattern set and the number of strings, and the size of the alphabet and the number of strings give FPT results, amongst others.', 'cs.CC', '2016-04-12T04:37:35Z', 'http://arxiv.org/abs/1604.03243v1', '2016-10-08 10:26:05', '2016-10-08 10:26:05')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPublish Load (1.2ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 868[0m
  [1m[35mAuthor Load (1.1ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Giuseppe Lancia'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Giuseppe Lancia', '2016-10-08 10:26:05', '2016-10-08 10:26:05')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2317, 868, 0, '2016-10-08 10:26:05', '2016-10-08 10:26:05')[0m
  [1m[35m (0.3ms)[0m  COMMIT
  [1m[36mAuthor Load (1.1ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Luke Mathieson'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Luke Mathieson', '2016-10-08 10:26:05', '2016-10-08 10:26:05')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2318, 868, 1, '2016-10-08 10:26:05', '2016-10-08 10:26:05')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.3ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Pablo Moscato'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Pablo Moscato', '2016-10-08 10:26:05', '2016-10-08 10:26:05')
  [1m[36m (0.3ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2319, 868, 2, '2016-10-08 10:26:05', '2016-10-08 10:26:05')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (0.9ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Efficient Classification of Multi-Labelled Text Streams by Clashing'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Efficient Classification of Multi-Labelled Text Streams by Clashing', 'We present a method for the classification of multi-labelled text documents explicitly designed for data stream applications that require to process a virtually infinite sequence of data using constant memory and constant processing time. Our method is composed of an online procedure used to efficiently map text into a low-dimensional feature space and a partition of this space into a set of regions for which the system extracts and keeps statistics used to predict multi-label text annotations. Documents are fed into the system as a sequence of words, mapped to a region of the partition, and annotated using the statistics computed from the labelled instances colliding in the same region. This approach is referred to as clashing. We illustrate the method in real-world text data, comparing the results with those obtained using other text classifiers. In addition, we provide an analysis about the effect of the representation space dimensionality on the predictive performance of the system. Our results show that the online embedding indeed approximates the geometry of the full corpus-wise TF and TF-IDF space. The model obtains competitive F measures with respect to the most accurate methods, using significantly fewer computational resources. In addition, the method achieves a higher macro-averaged F measure than methods with similar running time. Furthermore, the system is able to learn faster than the other methods from partially labelled streams.', 'cs.AI', '2016-04-12T01:52:38Z', 'http://dx.doi.org/10.1016/j.eswa.2014.02.017', '2016-10-08 10:26:05', '2016-10-08 10:26:05')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPublish Load (1.5ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 869[0m
  [1m[35mAuthor Load (1.1ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Ricardo Ñanculef'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Ricardo Ñanculef', '2016-10-08 10:26:05', '2016-10-08 10:26:05')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2320, 869, 0, '2016-10-08 10:26:05', '2016-10-08 10:26:05')[0m
  [1m[35m (3.0ms)[0m  COMMIT
  [1m[36mAuthor Load (1.9ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Ilias Flaounas'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Ilias Flaounas', '2016-10-08 10:26:05', '2016-10-08 10:26:05')[0m
  [1m[35m (1.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2321, 869, 1, '2016-10-08 10:26:05', '2016-10-08 10:26:05')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.6ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Nello Cristianini'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Nello Cristianini', '2016-10-08 10:26:05', '2016-10-08 10:26:05')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2322, 869, 2, '2016-10-08 10:26:05', '2016-10-08 10:26:05')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (0.9ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Conversational flow in Oxford-style debates'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Conversational flow in Oxford-style debates', 'Public debates are a common platform for presenting and juxtaposing diverging views on important issues. In this work we propose a methodology for tracking how ideas flow between participants throughout a debate. We use this approach in a case study of Oxford-style debates---a competitive format where the winner is determined by audience votes---and show how the outcome of a debate depends on aspects of conversational flow. In particular, we find that winners tend to make better use of a debate\'s interactive component than losers, by actively pursuing their opponents\' points rather than promoting their own ideas over the course of the conversation.', 'cs.CL', '2016-04-11T20:00:04Z', 'http://arxiv.org/abs/1604.03114v1', '2016-10-08 10:26:05', '2016-10-08 10:26:05')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPublish Load (1.6ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 870[0m
  [1m[35mAuthor Load (1.2ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Justine Zhang'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Justine Zhang', '2016-10-08 10:26:05', '2016-10-08 10:26:05')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2323, 870, 0, '2016-10-08 10:26:05', '2016-10-08 10:26:05')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (1.3ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Ravi Kumar'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Ravi Kumar', '2016-10-08 10:26:05', '2016-10-08 10:26:05')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2324, 870, 1, '2016-10-08 10:26:05', '2016-10-08 10:26:05')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.7ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Sujith Ravi'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Sujith Ravi', '2016-10-08 10:26:05', '2016-10-08 10:26:05')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2325, 870, 2, '2016-10-08 10:26:05', '2016-10-08 10:26:05')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (1.5ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Cristian Danescu-Niculescu-Mizil'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36m (0.2ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2059, 870, 3, '2016-10-08 10:26:05', '2016-10-08 10:26:05')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPaper Load (1.1ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Symbolic Knowledge Extraction using Łukasiewicz Logics'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Symbolic Knowledge Extraction using Łukasiewicz Logics', 'This work describes a methodology that combines logic-based systems and connectionist systems. Our approach uses finite truth-valued {\\L}ukasiewicz logic, wherein every connective can be defined by a neuron in an artificial network. This allowed the injection of first-order formulas into a network architecture, and also simplified symbolic rule extraction. For that we trained a neural networks using the Levenderg-Marquardt algorithm, where we restricted the knowledge dissemination in the network structure. This procedure reduces neural network plasticity without drastically damaging the learning performance, thus making the descriptive power of produced neural networks similar to the descriptive power of {\\L}ukasiewicz logic language and simplifying the translation between symbolic and connectionist structures. We used this method for reverse engineering truth table and in extraction of formulas from real data sets.', 'cs.AI', '2016-04-11T05:17:09Z', 'http://arxiv.org/abs/1604.03099v1', '2016-10-08 10:26:05', '2016-10-08 10:26:05')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPublish Load (1.1ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 871[0m
  [1m[35mAuthor Load (0.9ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Carlos Leandro'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35m (0.1ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1914, 871, 0, '2016-10-08 10:26:05', '2016-10-08 10:26:05')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.9ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Knowledge Extraction and Knowledge Integration governed by Łukasiewicz Logics'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Knowledge Extraction and Knowledge Integration governed by Łukasiewicz Logics', 'The development of machine learning in particular and artificial intelligent in general has been strongly conditioned by the lack of an appropriate interface layer between deduction, abduction and induction. In this work we extend traditional algebraic specification methods in this direction. Here we assume that such interface for AI emerges from an adequate Neural-Symbolic integration. This integration is made for universe of discourse described on a Topos governed by a many-valued {\\L}ukasiewicz logic. Sentences are integrated in a symbolic knowledge base describing the problem domain, codified using a graphic-based language, wherein every logic connective is defined by a neuron in an artificial network. This allows the integration of first-order formulas into a network architecture as background knowledge, and simplifies symbolic rule extraction from trained networks. For the train of such neural networks we changed the Levenderg-Marquardt algorithm, restricting the knowledge dissemination in the network structure using soft crystallization. This procedure reduces neural network plasticity without drastically damaging the learning performance, allowing the emergence of symbolic patterns. This makes the descriptive power of produced neural networks similar to the descriptive power of {\\L}ukasiewicz logic language, reducing the information lost on translation between symbolic and connectionist structures. We tested this method on the extraction of knowledge from specified structures. For it, we present the notion of fuzzy state automata, and we use automata behaviour to infer its structure. We use this type of automata on the generation of models for relations specified as symbolic background knowledge.', 'cs.AI', '2016-04-11T03:23:21Z', 'http://arxiv.org/abs/1604.02780v1', '2016-10-08 10:26:05', '2016-10-08 10:26:05')
  [1m[36m (3.0ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (2.0ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 872
  [1m[36mAuthor Load (1.3ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Carlos Leandro'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36m (0.2ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1914, 872, 0, '2016-10-08 10:26:05', '2016-10-08 10:26:05')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (0.9ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Reverse Engineering and Symbolic Knowledge Extraction on Łukasiewicz Fuzzy Logics using Linear Neural Networks'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Reverse Engineering and Symbolic Knowledge Extraction on Łukasiewicz Fuzzy Logics using Linear Neural Networks', 'This work describes a methodology to combine logic-based systems and connectionist systems. Our approach uses finite truth valued {\\L}ukasiewicz logic, where we take advantage of fact what in this type of logics every connective can be define by a neuron in an artificial network having by activation function the identity truncated to zero and one. This allowed the injection of first-order formulas in a network architecture, and also simplified symbolic rule extraction. Our method trains a neural network using Levenderg-Marquardt algorithm, where we restrict the knowledge dissemination in the network structure. We show how this reduces neural networks plasticity without damage drastically the learning performance. Making the descriptive power of produced neural networks similar to the descriptive power of {\\L}ukasiewicz logic language, simplifying the translation between symbolic and connectionist structures. This method is used in the reverse engineering problem of finding the formula used on generation of a truth table for a multi-valued {\\L}ukasiewicz logic. For real data sets the method is particularly useful for attribute selection, on binary classification problems defined using nominal attribute. After attribute selection and possible data set completion in the resulting connectionist model: neurons are directly representable using a disjunctive or conjunctive formulas, in the {\\L}ukasiewicz logic, or neurons are interpretations which can be approximated by symbolic rules. This fact is exemplified, extracting symbolic knowledge from connectionist models generated for the data set Mushroom from UCI Machine Learning Repository.', 'cs.AI', '2016-04-11T02:05:21Z', 'http://arxiv.org/abs/1604.02774v1', '2016-10-08 10:26:05', '2016-10-08 10:26:05')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPublish Load (1.6ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 873[0m
  [1m[35mAuthor Load (1.0ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Carlos Leandro'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35m (0.1ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1914, 873, 0, '2016-10-08 10:26:05', '2016-10-08 10:26:05')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (1.0ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Correlated Equilibria for Approximate Variational Inference in MRFs'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Correlated Equilibria for Approximate Variational Inference in MRFs', 'Almost all of the work in graphical models for game theory has mirrored previous work in probabilistic graphical models. Our work considers the opposite direction: Taking advantage of recent advances in equilibrium computation for belief inference. In particular, we present formulations of inference problems in Markov random fields (MRFs) as computation of equilibria in a certain class of game-theoretic graphical models. While some previous work explores this direction, none of that work concretely establishes the precise connection between variational probabilistic inference in MRFs and correlated equilibria. There is no work that exploits recent theoretical and empirical results from the literature on algorithmic and computational game theory on the tractable, polynomial-time computation of exact or approximate correlated equilibria in graphical games with arbitrary, loopy graph structure. Our work discusses how to design new algorithms with equally tractable guarantees for the computation of approximate variational inference in MRFs. In addition, inspired by a previously stated game-theoretic view of state-of-the-art tree-reweighed (TRW) message-passing techniques for belief inference as zero-sum game, we propose a different, general-sum potential game to design approximate fictitious-play techniques. We perform synthetic experiments evaluating our proposed approximation algorithms with standard methods and TRW on several classes of classical Ising models. Our experiments show that our global approach is competitive, particularly shinning in a class of Ising models with constant, \"highly attractive\" edge-weights, in which it is often better than all other alternatives we evaluated. While our local approach was not as effective as our global approach or TRW, almost all of the alternatives are often no better than a simple baseline: estimate the marginal probability to be 0.5.', 'cs.AI', '2016-04-10T21:21:00Z', 'http://arxiv.org/abs/1604.02737v1', '2016-10-08 10:26:05', '2016-10-08 10:26:05')
  [1m[36m (3.0ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (2.1ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 874
  [1m[36mAuthor Load (1.4ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Luis E. Ortiz'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Luis E. Ortiz', '2016-10-08 10:26:05', '2016-10-08 10:26:05')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2326, 874, 0, '2016-10-08 10:26:05', '2016-10-08 10:26:05')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.2ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Ze Gong'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Ze Gong', '2016-10-08 10:26:05', '2016-10-08 10:26:05')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2327, 874, 1, '2016-10-08 10:26:05', '2016-10-08 10:26:05')[0m
  [1m[35m (0.3ms)[0m  COMMIT
  [1m[36mPaper Load (1.0ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Differential Evolution for Efficient AUV Path Planning in Time Variant Uncertain Underwater Environment'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Differential Evolution for Efficient AUV Path Planning in Time Variant Uncertain Underwater Environment', 'The AUV three-dimension path planning in complex turbulent underwater environment is investigated in this research, in which static current map data and uncertain static-moving time variant obstacles are taken into account. Robustness of AUVs path planning to this strong variability is known as a complex NP-hard problem and is considered a critical issue to ensure vehicles safe deployment. Efficient evolutionary techniques have substantial potential of handling NP hard complexity of path planning problem as more powerful and fast algorithms among other approaches for mentioned problem. For the purpose of this research Differential Evolution (DE) technique is conducted to solve the AUV path planning problem in a realistic underwater environment. The path planners designed in this paper are capable of extracting feasible areas of a real map to determine the allowed spaces for deployment, where coastal area, islands, static/dynamic obstacles and ocean current is taken into account and provides the efficient path with a small computation time. The results obtained from analyze of experimental demonstrate the inherent robustness and drastic efficiency of the proposed scheme in enhancement of the vehicles path planning capability in coping undesired current, using useful current flow, and avoid colliding collision boundaries in a real-time manner. The proposed approach is also flexible and strictly respects to vehicle\'s kinematic constraints resisting current instabilities.', 'cs.RO', '2016-04-09T05:04:29Z', 'http://arxiv.org/abs/1604.02523v3', '2016-10-08 10:26:05', '2016-10-08 10:26:05')[0m
  [1m[35m (3.0ms)[0m  COMMIT
  [1m[36mPublish Load (2.0ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 875[0m
  [1m[35mAuthor Load (1.3ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'S. Mahmoud Zadeh'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35m (0.1ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2306, 875, 0, '2016-10-08 10:26:05', '2016-10-08 10:26:05')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.3ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'D. M. W. Powers'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('D. M. W. Powers', '2016-10-08 10:26:05', '2016-10-08 10:26:05')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2328, 875, 1, '2016-10-08 10:26:05', '2016-10-08 10:26:05')[0m
  [1m[35m (0.3ms)[0m  COMMIT
  [1m[36mAuthor Load (1.0ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'K. Sammut'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36m (0.1ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2308, 875, 2, '2016-10-08 10:26:05', '2016-10-08 10:26:05')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (1.4ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'A. Yazdani'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('A. Yazdani', '2016-10-08 10:26:05', '2016-10-08 10:26:05')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2329, 875, 3, '2016-10-08 10:26:05', '2016-10-08 10:26:05')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.9ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Towards an Indexical Model of Situated Language Comprehension for Cognitive Agents in Physical Worlds'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Towards an Indexical Model of Situated Language Comprehension for Cognitive Agents in Physical Worlds', 'We propose a computational model of situated language comprehension based on the Indexical Hypothesis that generates meaning representations by translating amodal linguistic symbols to modal representations of beliefs, knowledge, and experience external to the linguistic system. This Indexical Model incorporates multiple information sources, including perceptions, domain knowledge, and short-term and long-term experiences during comprehension. We show that exploiting diverse information sources can alleviate ambiguities that arise from contextual use of underspecific referring expressions and unexpressed argument alternations of verbs. The model is being used to support linguistic interactions in Rosie, an agent implemented in Soar that learns from instruction.', 'cs.AI', '2016-04-09T01:57:13Z', 'http://arxiv.org/abs/1604.02509v1', '2016-10-08 10:26:05', '2016-10-08 10:26:05')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (1.4ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 876
  [1m[36mAuthor Load (1.1ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Shiwali Mohan'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36m (0.1ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2094, 876, 0, '2016-10-08 10:26:05', '2016-10-08 10:26:05')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (1.2ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Aaron Mininger'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Aaron Mininger', '2016-10-08 10:26:05', '2016-10-08 10:26:05')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2330, 876, 1, '2016-10-08 10:26:05', '2016-10-08 10:26:05')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.2ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'John Laird'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35m (0.1ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2096, 876, 2, '2016-10-08 10:26:05', '2016-10-08 10:26:05')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.9ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Back to the Basics: Bayesian extensions of IRT outperform neural networks for proficiency estimation'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Back to the Basics: Bayesian extensions of IRT outperform neural networks for proficiency estimation', 'Estimating student proficiency is an important task for computer based learning systems. We compare a family of IRT-based proficiency estimation methods to Deep Knowledge Tracing (DKT), a recently proposed recurrent neural network model with promising initial results. We evaluate how well each model predicts a student\'s future response given previous responses using two publicly available and one proprietary data set. We find that IRT-based methods consistently matched or outperformed DKT across all data sets at the finest level of content granularity that was tractable for them to be trained on. A hierarchical extension of IRT that captured item grouping structure performed best overall. When data sets included non-trivial autocorrelations in student response patterns, a temporal extension of IRT improved performance over standard IRT while the RNN-based method did not. We conclude that IRT-based models provide a simpler, better-performing alternative to existing RNN-based models of student interaction data while also affording more interpretability and guarantees due to their formulation as Bayesian probabilistic models.', 'cs.AI', '2016-04-08T12:54:18Z', 'http://arxiv.org/abs/1604.02336v2', '2016-10-08 10:26:05', '2016-10-08 10:26:05')
  [1m[36m (3.0ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (2.0ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 877
  [1m[36mAuthor Load (1.5ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Kevin H. Wilson'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Kevin H. Wilson', '2016-10-08 10:26:05', '2016-10-08 10:26:05')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2331, 877, 0, '2016-10-08 10:26:05', '2016-10-08 10:26:05')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.2ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Yan Karklin'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Yan Karklin', '2016-10-08 10:26:05', '2016-10-08 10:26:05')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2332, 877, 1, '2016-10-08 10:26:05', '2016-10-08 10:26:05')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (1.2ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Bojian Han'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Bojian Han', '2016-10-08 10:26:05', '2016-10-08 10:26:05')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2333, 877, 2, '2016-10-08 10:26:05', '2016-10-08 10:26:05')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.4ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Chaitanya Ekanadham'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Chaitanya Ekanadham', '2016-10-08 10:26:05', '2016-10-08 10:26:05')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2334, 877, 3, '2016-10-08 10:26:05', '2016-10-08 10:26:05')[0m
  [1m[35m (0.3ms)[0m  COMMIT
  [1m[36mPaper Load (1.1ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'A system of serial computation for classified rules prediction in non-regular ontology trees'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('A system of serial computation for classified rules prediction in non-regular ontology trees', 'Objects or structures that are regular take uniform dimensions. Based on the concepts of regular models, our previous research work has developed a system of a regular ontology that models learning structures in a multiagent system for uniform pre-assessments in a learning environment. This regular ontology has led to the modelling of a classified rules learning algorithm that predicts the actual number of rules needed for inductive learning processes and decision making in a multiagent system. But not all processes or models are regular. Thus this paper presents a system of polynomial equation that can estimate and predict the required number of rules of a non-regular ontology model given some defined parameters.', 'cs.AI', '2016-04-08T12:12:17Z', 'http://arxiv.org/abs/1604.02323v1', '2016-10-08 10:26:05', '2016-10-08 10:26:05')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPublish Load (1.7ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 878[0m
  [1m[35mAuthor Load (0.8ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Kennedy E. Ehimwenma'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35m (0.1ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1609, 878, 0, '2016-10-08 10:26:05', '2016-10-08 10:26:05')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.8ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Paul Crowther'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35m (0.1ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1611, 878, 1, '2016-10-08 10:26:05', '2016-10-08 10:26:05')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.0ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Martin Beer'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35m (0.1ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1610, 878, 2, '2016-10-08 10:26:05', '2016-10-08 10:26:05')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.9ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Revising Incompletely Specified Convex Probabilistic Belief Bases'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Revising Incompletely Specified Convex Probabilistic Belief Bases', 'We propose a method for an agent to revise its incomplete probabilistic beliefs when a new piece of propositional information is observed. In this work, an agent\'s beliefs are represented by a set of probabilistic formulae -- a belief base. The method involves determining a representative set of \'boundary\' probability distributions consistent with the current belief base, revising each of these probability distributions and then translating the revised information into a new belief base. We use a version of Lewis Imaging as the revision operation. The correctness of the approach is proved. The expressivity of the belief bases under consideration are rather restricted, but has some applications. We also discuss methods of belief base revision employing the notion of optimum entropy, and point out some of the benefits and difficulties in those methods. Both the boundary distribution method and the optimum entropy method are reasonable, yet yield different results.', 'cs.AI', '2016-04-07T19:41:35Z', 'http://arxiv.org/abs/1604.02133v1', '2016-10-08 10:26:05', '2016-10-08 10:26:05')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (1.7ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 879
  [1m[36mAuthor Load (0.6ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Gavin Rens'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36m (0.1ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (961, 879, 0, '2016-10-08 10:26:05', '2016-10-08 10:26:05')[0m
  [1m[35m (1.6ms)[0m  COMMIT
  [1m[36mAuthor Load (1.5ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Thomas Meyer'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Thomas Meyer', '2016-10-08 10:26:05', '2016-10-08 10:26:05')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2335, 879, 1, '2016-10-08 10:26:05', '2016-10-08 10:26:05')
  [1m[36m (3.0ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.9ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Giovanni Casini'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Giovanni Casini', '2016-10-08 10:26:05', '2016-10-08 10:26:05')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2336, 879, 2, '2016-10-08 10:26:05', '2016-10-08 10:26:05')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPaper Load (1.1ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'On Stochastic Belief Revision and Update and their Combination'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('On Stochastic Belief Revision and Update and their Combination', 'I propose a framework for an agent to change its probabilistic beliefs when a new piece of propositional information $\\alpha$ is observed. Traditionally, belief change occurs by either a revision process or by an update process, depending on whether the agent is informed with $\\alpha$ in a static world or, respectively, whether $\\alpha$ is a \'signal\' from the environment due to an event occurring. Boutilier suggested a unified model of qualitative belief change, which \"combines aspects of revision and update, providing a more realistic characterization of belief change.\" In this paper, I propose a unified model of quantitative belief change, where an agent\'s beliefs are represented as a probability distribution over possible worlds. As does Boutilier, I take a dynamical systems perspective. The proposed approach is evaluated against several rationality postulated, and some properties of the approach are worked out.', 'cs.AI', '2016-04-07T19:28:00Z', 'http://arxiv.org/abs/1604.02126v1', '2016-10-08 10:26:05', '2016-10-08 10:26:05')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPublish Load (1.2ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 880[0m
  [1m[35mAuthor Load (0.6ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Gavin Rens'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35m (0.1ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (961, 880, 0, '2016-10-08 10:26:05', '2016-10-08 10:26:05')
  [1m[36m (0.3ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (1.1ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Planning with Information-Processing Constraints and Model Uncertainty in Markov Decision Processes'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.4ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Planning with Information-Processing Constraints and Model Uncertainty in Markov Decision Processes', 'Information-theoretic principles for learning and acting have been proposed to solve particular classes of Markov Decision Problems. Mathematically, such approaches are governed by a variational free energy principle and allow solving MDP planning problems with information-processing constraints expressed in terms of a Kullback-Leibler divergence with respect to a reference distribution. Here we consider a generalization of such MDP planners by taking model uncertainty into account. As model uncertainty can also be formalized as an information-processing constraint, we can derive a unified solution from a single generalized variational principle. We provide a generalized value iteration scheme together with a convergence proof. As limit cases, this generalized scheme includes standard value iteration with a known model, Bayesian MDP planning, and robust planning. We demonstrate the benefits of this approach in a grid world simulation.', 'cs.AI', '2016-04-07T17:12:07Z', 'http://arxiv.org/abs/1604.02080v1', '2016-10-08 10:26:05', '2016-10-08 10:26:05')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (1.4ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 881
  [1m[36mAuthor Load (1.1ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Jordi Grau-Moya'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Jordi Grau-Moya', '2016-10-08 10:26:05', '2016-10-08 10:26:05')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2337, 881, 0, '2016-10-08 10:26:05', '2016-10-08 10:26:05')
  [1m[36m (0.3ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.1ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Felix Leibfried'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Felix Leibfried', '2016-10-08 10:26:05', '2016-10-08 10:26:05')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2338, 881, 1, '2016-10-08 10:26:05', '2016-10-08 10:26:05')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (1.3ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Tim Genewein'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Tim Genewein', '2016-10-08 10:26:05', '2016-10-08 10:26:05')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2339, 881, 2, '2016-10-08 10:26:05', '2016-10-08 10:26:05')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.3ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Daniel A. Braun'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Daniel A. Braun', '2016-10-08 10:26:05', '2016-10-08 10:26:05')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2340, 881, 3, '2016-10-08 10:26:05', '2016-10-08 10:26:05')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (1.0ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'An Analysis of General Fuzzy Logic and Fuzzy Reasoning Method'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('An Analysis of General Fuzzy Logic and Fuzzy Reasoning Method', 'In this article, we describe the fuzzy logic, fuzzy language and algorithms as the basis of fuzzy reasoning, one of the intelligent information processing method, and then describe the general fuzzy reasoning method.', 'cs.AI', '2016-04-07T13:05:10Z', 'http://arxiv.org/abs/1604.03210v1', '2016-10-08 10:26:05', '2016-10-08 10:26:05')[0m
  [1m[35m (3.0ms)[0m  COMMIT
  [1m[36mPublish Load (2.0ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 882[0m
  [1m[35mAuthor Load (1.5ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Kwak Son Il'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Kwak Son Il', '2016-10-08 10:26:05', '2016-10-08 10:26:05')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2341, 882, 0, '2016-10-08 10:26:05', '2016-10-08 10:26:05')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (1.1ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Learning to Track at 100 FPS with Deep Regression Networks'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Learning to Track at 100 FPS with Deep Regression Networks', 'Machine learning techniques are often used in computer vision due to their ability to leverage large amounts of training data to improve performance. Unfortunately, most generic object trackers are still trained from scratch online and do not benefit from the large number of videos that are readily available for offline training. We propose a method for offline training of neural networks that can track novel objects at test-time at 100 fps. Our tracker is significantly faster than previous methods that use neural networks for tracking, which are typically very slow to run and not practical for real-time applications. Our tracker uses a simple feed-forward network with no online training required. The tracker learns a generic relationship between object motion and appearance and can be used to track novel objects that do not appear in the training set. We test our network on a standard tracking benchmark to demonstrate our tracker\'s state-of-the-art performance. Further, our performance improves as we add more videos to our offline training set. To the best of our knowledge, our tracker is the first neural-network tracker that learns to track generic objects at 100 fps.', 'cs.CV', '2016-04-06T20:39:34Z', 'http://arxiv.org/abs/1604.01802v2', '2016-10-08 10:26:05', '2016-10-08 10:26:05')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPublish Load (1.1ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 883[0m
  [1m[35mAuthor Load (1.1ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'David Held'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('David Held', '2016-10-08 10:26:05', '2016-10-08 10:26:05')
  [1m[36m (6.2ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2342, 883, 0, '2016-10-08 10:26:05', '2016-10-08 10:26:05')[0m
  [1m[35m (6.1ms)[0m  COMMIT
  [1m[36mAuthor Load (1.2ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Sebastian Thrun'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Sebastian Thrun', '2016-10-08 10:26:05', '2016-10-08 10:26:05')[0m
  [1m[35m (6.1ms)[0m  COMMIT
  [1m[36m (0.3ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2343, 883, 1, '2016-10-08 10:26:05', '2016-10-08 10:26:05')
  [1m[36m (6.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.9ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Silvio Savarese'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Silvio Savarese', '2016-10-08 10:26:05', '2016-10-08 10:26:05')
  [1m[36m (6.6ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2344, 883, 2, '2016-10-08 10:26:05', '2016-10-08 10:26:05')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPaper Load (1.7ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Safe Probability'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Safe Probability', 'We formalize the idea of probability distributions that lead to reliable predictions about some, but not all aspects of a domain. The resulting notion of `safety\' provides a fresh perspective on foundational issues in statistics, providing a middle ground between imprecise probability and multiple-prior models on the one hand and strictly Bayesian approaches on the other. It also allows us to formalize fiducial distributions in terms of the set of random variables that they can safely predict, thus taking some of the sting out of the fiducial idea. By restricting probabilistic inference to safe uses, one also automatically avoids paradoxes such as the Monty Hall problem. Safety comes in a variety of degrees, such as \"validity\" (the strongest notion), \"calibration\", \"confidence safety\" and \"unbiasedness\" (almost the weakest notion).', 'stat.ME', '2016-04-06T20:01:28Z', 'http://arxiv.org/abs/1604.01785v1', '2016-10-08 10:26:05', '2016-10-08 10:26:05')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPublish Load (1.5ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 884[0m
  [1m[35mAuthor Load (1.1ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Peter Grünwald'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Peter Grünwald', '2016-10-08 10:26:05', '2016-10-08 10:26:05')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2345, 884, 0, '2016-10-08 10:26:05', '2016-10-08 10:26:05')[0m
  [1m[35m (3.0ms)[0m  COMMIT
  [1m[36mPaper Load (1.6ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Efficiency and Sequenceability in Fair Division of Indivisible Goods with Additive Preferences'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.4ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Efficiency and Sequenceability in Fair Division of Indivisible Goods with Additive Preferences', 'In fair division of indivisible goods, using sequences of sincere choices (or picking sequences) is a natural way to allocate the objects. The idea is the following: at each stage, a designated agent picks one object among those that remain. This paper, restricted to the case where the agents have numerical additive preferences over objects, revisits to some extent the seminal paper by Brams and King [9] which was specific to ordinal and linear order preferences over items. We point out similarities and differences with this latter context. In particular, we show that any Pareto-optimal allocation (under additive preferences) is sequenceable, but that the converse is not true anymore. This asymmetry leads naturally to the definition of a \"scale of efficiency\" having three steps: Pareto-optimality, sequenceability without Pareto-optimality, and non-sequenceability. Finally, we investigate the links between these efficiency properties and the \"scale of fairness\" we have described in an earlier work [7]: we first show that an allocation can be envy-free and non-sequenceable, but that every competitive equilibrium with equal incomes is sequenceable. Then we experimentally explore the links between the scales of efficiency and fairness.', 'cs.GT', '2016-04-06T19:08:34Z', 'http://arxiv.org/abs/1604.01734v1', '2016-10-08 10:26:05', '2016-10-08 10:26:05')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPublish Load (1.6ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 885[0m
  [1m[35mAuthor Load (1.3ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Sylvain Bouveret'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Sylvain Bouveret', '2016-10-08 10:26:05', '2016-10-08 10:26:05')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2346, 885, 0, '2016-10-08 10:26:05', '2016-10-08 10:26:05')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (1.2ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Michel Lemaître'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Michel Lemaître', '2016-10-08 10:26:05', '2016-10-08 10:26:05')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2347, 885, 1, '2016-10-08 10:26:05', '2016-10-08 10:26:05')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (1.0ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'A Corpus and Evaluation Framework for Deeper Understanding of Commonsense Stories'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('A Corpus and Evaluation Framework for Deeper Understanding of Commonsense Stories', 'Representation and learning of commonsense knowledge is one of the foundational problems in the quest to enable deep language understanding. This issue is particularly challenging for understanding casual and correlational relationships between events. While this topic has received a lot of interest in the NLP community, research has been hindered by the lack of a proper evaluation framework. This paper attempts to address this problem with a new framework for evaluating story understanding and script learning: the \'Story Cloze Test\'. This test requires a system to choose the correct ending to a four-sentence story. We created a new corpus of ~50k five-sentence commonsense stories, ROCStories, to enable this evaluation. This corpus is unique in two ways: (1) it captures a rich set of causal and temporal commonsense relations between daily events, and (2) it is a high quality collection of everyday life stories that can also be used for story generation. Experimental evaluation shows that a host of baselines and state-of-the-art models based on shallow language understanding struggle to achieve a high score on the Story Cloze Test. We discuss these implications for script and story learning, and offer suggestions for deeper language understanding.', 'cs.CL', '2016-04-06T17:15:10Z', 'http://arxiv.org/abs/1604.01696v1', '2016-10-08 10:26:05', '2016-10-08 10:26:05')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (1.6ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 886
  [1m[36mAuthor Load (1.1ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Nasrin Mostafazadeh'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36m (0.1ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2271, 886, 0, '2016-10-08 10:26:05', '2016-10-08 10:26:05')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (1.2ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Nathanael Chambers'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Nathanael Chambers', '2016-10-08 10:26:05', '2016-10-08 10:26:05')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2348, 886, 1, '2016-10-08 10:26:05', '2016-10-08 10:26:05')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.5ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Xiaodong He'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35m (0.2ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (496, 886, 2, '2016-10-08 10:26:05', '2016-10-08 10:26:05')
  [1m[36m (3.0ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.5ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Devi Parikh'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35m (0.2ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.8ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (187, 886, 3, '2016-10-08 10:26:05', '2016-10-08 10:26:05')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.4ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Dhruv Batra'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35m (0.2ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (188, 886, 4, '2016-10-08 10:26:05', '2016-10-08 10:26:05')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.2ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Lucy Vanderwende'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35m (0.2ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2275, 886, 5, '2016-10-08 10:26:05', '2016-10-08 10:26:05')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.6ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Pushmeet Kohli'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35m (0.1ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (402, 886, 6, '2016-10-08 10:26:05', '2016-10-08 10:26:05')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.3ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'James Allen'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('James Allen', '2016-10-08 10:26:05', '2016-10-08 10:26:05')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2349, 886, 7, '2016-10-08 10:26:05', '2016-10-08 10:26:05')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (1.0ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'On the uniform one-dimensional fragment'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('On the uniform one-dimensional fragment', 'The uniform one-dimensional fragment of first-order logic, U1, is a recently introduced formalism that extends two-variable logic in a natural way to contexts with relations of all arities. We survey properties of U1 and investigate its relationship to description logics designed to accommodate higher arity relations, with particular attention given to DLR_reg. We also define a description logic version of a variant of U1 and prove a range of new results concerning the expressivity of U1 and related logics.', 'cs.LO', '2016-04-06T16:03:42Z', 'http://arxiv.org/abs/1604.01673v2', '2016-10-08 10:26:05', '2016-10-08 10:26:05')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPublish Load (1.5ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 887[0m
  [1m[35mAuthor Load (1.2ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Antti Kuusisto'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Antti Kuusisto', '2016-10-08 10:26:05', '2016-10-08 10:26:05')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2350, 887, 0, '2016-10-08 10:26:05', '2016-10-08 10:26:05')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (0.9ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Towards Bayesian Deep Learning: A Survey'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Towards Bayesian Deep Learning: A Survey', 'While perception tasks such as visual object recognition and text understanding play an important role in human intelligence, the subsequent tasks that involve inference, reasoning and planning require an even higher level of intelligence. The past few years have seen major advances in many perception tasks using deep learning models. For higher-level inference, however, probabilistic graphical models with their Bayesian nature are still more powerful and flexible. To achieve integrated intelligence that involves both perception and inference, it is naturally desirable to tightly integrate deep learning and Bayesian models within a principled probabilistic framework, which we call Bayesian deep learning. In this unified framework, the perception of text or images using deep learning can boost the performance of higher-level inference and in return, the feedback from the inference process is able to enhance the perception of text or images. This survey provides a general introduction to Bayesian deep learning and reviews its recent applications on recommender systems, topic models, and control. In this survey, we also discuss the relationship and differences between Bayesian deep learning and other related topics like Bayesian treatment of neural networks.', 'stat.ML', '2016-04-06T15:35:08Z', 'http://arxiv.org/abs/1604.01662v2', '2016-10-08 10:26:05', '2016-10-08 10:26:05')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPublish Load (1.2ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 888[0m
  [1m[35mAuthor Load (1.0ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Hao Wang'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.6ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Hao Wang', '2016-10-08 10:26:05', '2016-10-08 10:26:05')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2351, 888, 0, '2016-10-08 10:26:05', '2016-10-08 10:26:05')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (1.2ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Dit-Yan Yeung'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Dit-Yan Yeung', '2016-10-08 10:26:05', '2016-10-08 10:26:05')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2352, 888, 1, '2016-10-08 10:26:05', '2016-10-08 10:26:05')
  [1m[36m (2.8ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (1.2ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'The Curious Robot: Learning Visual Representations via Physical Interactions'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('The Curious Robot: Learning Visual Representations via Physical Interactions', 'What is the right supervisory signal to train visual representations? Current approaches in computer vision use category labels from datasets such as ImageNet to train ConvNets. However, in case of biological agents, visual representation learning does not require millions of semantic labels. We argue that biological agents use physical interactions with the world to learn visual representations unlike current vision systems which just use passive observations (images and videos downloaded from web). For example, babies push objects, poke them, put them in their mouth and throw them to learn representations. Towards this goal, we build one of the first systems on a Baxter platform that pushes, pokes, grasps and observes objects in a tabletop environment. It uses four different types of physical interactions to collect more than 130K datapoints, with each datapoint providing supervision to a shared ConvNet architecture allowing us to learn visual representations. We show the quality of learned representations by observing neuron activations and performing nearest neighbor retrieval on this learned representation. Quantitatively, we evaluate our learned ConvNet on image classification tasks and show improvements compared to learning without external data. Finally, on the task of instance retrieval, our network outperforms the ImageNet network on recall@1 by 3%', 'cs.CV', '2016-04-05T18:47:15Z', 'http://arxiv.org/abs/1604.01360v2', '2016-10-08 10:26:05', '2016-10-08 10:26:05')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (1.1ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 889
  [1m[36mAuthor Load (1.0ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Lerrel Pinto'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Lerrel Pinto', '2016-10-08 10:26:05', '2016-10-08 10:26:05')[0m
  [1m[35m (2.7ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2353, 889, 0, '2016-10-08 10:26:05', '2016-10-08 10:26:05')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.5ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Dhiraj Gandhi'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Dhiraj Gandhi', '2016-10-08 10:26:05', '2016-10-08 10:26:05')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2354, 889, 1, '2016-10-08 10:26:05', '2016-10-08 10:26:05')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (1.3ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Yuanfeng Han'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Yuanfeng Han', '2016-10-08 10:26:05', '2016-10-08 10:26:05')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2355, 889, 2, '2016-10-08 10:26:05', '2016-10-08 10:26:05')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.1ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Yong-Lae Park'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Yong-Lae Park', '2016-10-08 10:26:05', '2016-10-08 10:26:05')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2356, 889, 3, '2016-10-08 10:26:05', '2016-10-08 10:26:05')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (1.3ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Abhinav Gupta'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Abhinav Gupta', '2016-10-08 10:26:05', '2016-10-08 10:26:05')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2357, 889, 4, '2016-10-08 10:26:05', '2016-10-08 10:26:05')
  [1m[36m (1.9ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (1.4ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Bounded Optimal Exploration in MDP'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Bounded Optimal Exploration in MDP', 'Within the framework of probably approximately correct Markov decision processes (PAC-MDP), much theoretical work has focused on methods to attain near optimality after a relatively long period of learning and exploration. However, practical concerns require the attainment of satisfactory behavior within a short period of time. In this paper, we relax the PAC-MDP conditions to reconcile theoretically driven exploration methods and practical needs. We propose simple algorithms for discrete and continuous state spaces, and illustrate the benefits of our proposed relaxation via theoretical analyses and numerical examples. Our algorithms also maintain anytime error bounds and average loss bounds. Our approach accommodates both Bayesian and non-Bayesian methods.', 'cs.AI', '2016-04-05T18:00:02Z', 'http://arxiv.org/abs/1604.01350v1', '2016-10-08 10:26:05', '2016-10-08 10:26:05')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (1.2ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 890
  [1m[36mAuthor Load (0.7ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Kenji Kawaguchi'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36m (0.1ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (801, 890, 0, '2016-10-08 10:26:05', '2016-10-08 10:26:05')[0m
  [1m[35m (3.0ms)[0m  COMMIT
  [1m[36mPaper Load (1.4ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Deep Cross Residual Learning for Multitask Visual Recognition'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.4ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Deep Cross Residual Learning for Multitask Visual Recognition', 'Residual learning has recently surfaced as an effective means of constructing very deep neural networks for object recognition. However, current incarnations of residual networks do not allow for the modeling and integration of complex relations between closely coupled recognition tasks or across domains. Such problems are often encountered in multimedia applications involving large-scale content recognition. We propose a novel extension of residual learning for deep networks that enables intuitive learning across multiple related tasks using cross-connections called cross-residuals. These cross-residuals connections can be viewed as a form of in-network regularization and enables greater network generalization. We show how cross-residual learning (CRL) can be integrated in multitask networks to jointly train and detect visual concepts across several tasks. We present a single multitask cross-residual network with >40% less parameters that is able to achieve competitive, or even better, detection performance on a visual sentiment concept detection problem normally requiring multiple specialized single-task networks. The resulting multitask cross-residual network also achieves better detection performance by about 10.4% over a standard multitask residual network without cross-residuals with even a small amount of cross-task weighting.', 'cs.CV', '2016-04-05T17:08:14Z', 'http://arxiv.org/abs/1604.01335v2', '2016-10-08 10:26:05', '2016-10-08 10:26:05')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPublish Load (1.5ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 891[0m
  [1m[35mAuthor Load (1.0ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Brendan Jou'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Brendan Jou', '2016-10-08 10:26:05', '2016-10-08 10:26:05')
  [1m[36m (1.3ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2358, 891, 0, '2016-10-08 10:26:05', '2016-10-08 10:26:05')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (1.1ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Shih-Fu Chang'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Shih-Fu Chang', '2016-10-08 10:26:05', '2016-10-08 10:26:05')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2359, 891, 1, '2016-10-08 10:26:05', '2016-10-08 10:26:05')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.9ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Landmark-based Plan Recognition'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Landmark-based Plan Recognition', 'Recognition of goals and plans using incomplete evidence from action execution can be done efficiently by using planning techniques. In many applications it is important to recognize goals and plans not only accurately, but also quickly. In this paper, we develop a heuristic approach for recognizing plans based on planning techniques that rely on ordering constraints to filter candidate goals from observations. These ordering constraints are called landmarks in the planning literature, which are facts or actions that cannot be avoided to achieve a goal. We show the applicability of planning landmarks in two settings: first, we use it directly to develop a heuristic-based plan recognition approach; second, we refine an existing planning-based plan recognition approach by pre-filtering its candidate goals. Our empirical evaluation shows that our approach is not only substantially more accurate than the state-of-the-art in all available datasets, it is also an order of magnitude faster.', 'cs.AI', '2016-04-05T14:44:03Z', 'http://arxiv.org/abs/1604.01277v2', '2016-10-08 10:26:05', '2016-10-08 10:26:05')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (1.6ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 892
  [1m[36mAuthor Load (1.2ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Ramon Fraga Pereira'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Ramon Fraga Pereira', '2016-10-08 10:26:05', '2016-10-08 10:26:05')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2360, 892, 0, '2016-10-08 10:26:05', '2016-10-08 10:26:05')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.1ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Felipe Meneguzzi'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Felipe Meneguzzi', '2016-10-08 10:26:05', '2016-10-08 10:26:05')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2361, 892, 1, '2016-10-08 10:26:05', '2016-10-08 10:26:05')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPaper Load (1.0ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Feature extraction using Latent Dirichlet Allocation and Neural Networks: A case study on movie synopses'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Feature extraction using Latent Dirichlet Allocation and Neural Networks: A case study on movie synopses', 'Feature extraction has gained increasing attention in the field of machine learning, as in order to detect patterns, extract information, or predict future observations from big data, the urge of informative features is crucial. The process of extracting features is highly linked to dimensionality reduction as it implies the transformation of the data from a sparse high-dimensional space, to higher level meaningful abstractions. This dissertation employs Neural Networks for distributed paragraph representations, and Latent Dirichlet Allocation to capture higher level features of paragraph vectors. Although Neural Networks for distributed paragraph representations are considered the state of the art for extracting paragraph vectors, we show that a quick topic analysis model such as Latent Dirichlet Allocation can provide meaningful features too. We evaluate the two methods on the CMU Movie Summary Corpus, a collection of 25,203 movie plot summaries extracted from Wikipedia. Finally, for both approaches, we use K-Nearest Neighbors to discover similar movies, and plot the projected representations using T-Distributed Stochastic Neighbor Embedding to depict the context similarities. These similarities, expressed as movie distances, can be used for movies recommendation. The recommended movies of this approach are compared with the recommended movies from IMDB, which use a collaborative filtering recommendation approach, to show that our two models could constitute either an alternative or a supplementary recommendation approach.', 'cs.CL', '2016-04-05T14:32:48Z', 'http://arxiv.org/abs/1604.01272v1', '2016-10-08 10:26:05', '2016-10-08 10:26:05')[0m
  [1m[35m (3.0ms)[0m  COMMIT
  [1m[36mPublish Load (2.0ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 893[0m
  [1m[35mAuthor Load (1.4ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Despoina Christou'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Despoina Christou', '2016-10-08 10:26:05', '2016-10-08 10:26:05')
  [1m[36m (0.6ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2362, 893, 0, '2016-10-08 10:26:05', '2016-10-08 10:26:05')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (1.1ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Learning to Generate Posters of Scientific Papers'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Learning to Generate Posters of Scientific Papers', 'Researchers often summarize their work in the form of posters. Posters provide a coherent and efficient way to convey core ideas from scientific papers. Generating a good scientific poster, however, is a complex and time consuming cognitive task, since such posters need to be readable, informative, and visually aesthetic. In this paper, for the first time, we study the challenging problem of learning to generate posters from scientific papers. To this end, a data-driven framework, that utilizes graphical models, is proposed. Specifically, given content to display, the key elements of a good poster, including panel layout and attributes of each panel, are learned and inferred from data. Then, given inferred layout and attributes, composition of graphical elements within each panel is synthesized. To learn and validate our model, we collect and make public a Poster-Paper dataset, which consists of scientific papers and corresponding posters with exhaustively labelled panels and attributes. Qualitative and quantitative results indicate the effectiveness of our approach.', 'cs.AI', '2016-04-05T11:18:04Z', 'http://arxiv.org/abs/1604.01219v1', '2016-10-08 10:26:05', '2016-10-08 10:26:05')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPublish Load (1.4ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 894[0m
  [1m[35mAuthor Load (1.0ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Yuting Qiang'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Yuting Qiang', '2016-10-08 10:26:05', '2016-10-08 10:26:05')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2363, 894, 0, '2016-10-08 10:26:05', '2016-10-08 10:26:05')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (1.1ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Yanwei Fu'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36m (0.1ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2084, 894, 1, '2016-10-08 10:26:05', '2016-10-08 10:26:05')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (1.1ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Yanwen Guo'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Yanwen Guo', '2016-10-08 10:26:05', '2016-10-08 10:26:05')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2364, 894, 2, '2016-10-08 10:26:05', '2016-10-08 10:26:05')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.4ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Zhi-Hua Zhou'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35m (0.1ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (164, 894, 3, '2016-10-08 10:26:05', '2016-10-08 10:26:05')
  [1m[36m (3.0ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.9ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Leonid Sigal'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35m (0.2ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2085, 894, 4, '2016-10-08 10:26:06', '2016-10-08 10:26:06')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (1.2ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'An Efficient Algorithm for Mining Frequent Sequence with Constraint Programming'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('An Efficient Algorithm for Mining Frequent Sequence with Constraint Programming', 'The main advantage of Constraint Programming (CP) approaches for sequential pattern mining (SPM) is their modularity, which includes the ability to add new constraints (regular expressions, length restrictions, etc). The current best CP approach for SPM uses a global constraint (module) that computes the projected database and enforces the minimum frequency; it does this with a filtering algorithm similar to the PrefixSpan method. However, the resulting system is not as scalable as some of the most advanced mining systems like Zaki\'s cSPADE. We show how, using techniques from both data mining and CP, one can use a generic constraint solver and yet outperform existing specialized systems. This is mainly due to two improvements in the module that computes the projected frequencies: first, computing the projected database can be sped up by pre-computing the positions at which an symbol can become unsupported by a sequence, thereby avoiding to scan the full sequence each time; and second by taking inspiration from the trailing used in CP solvers to devise a backtracking-aware data structure that allows fast incremental storing and restoring of the projected database. Detailed experiments show how this approach outperforms existing CP as well as specialized systems for SPM, and that the gain in efficiency translates directly into increased efficiency for other settings such as mining with regular expressions.', 'cs.DB', '2016-04-05T08:15:24Z', 'http://arxiv.org/abs/1604.01166v1', '2016-10-08 10:26:06', '2016-10-08 10:26:06')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (1.5ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 895
  [1m[36mAuthor Load (1.2ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'John O. R. Aoga'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('John O. R. Aoga', '2016-10-08 10:26:06', '2016-10-08 10:26:06')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2365, 895, 0, '2016-10-08 10:26:06', '2016-10-08 10:26:06')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.1ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Tias Guns'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Tias Guns', '2016-10-08 10:26:06', '2016-10-08 10:26:06')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2366, 895, 1, '2016-10-08 10:26:06', '2016-10-08 10:26:06')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (1.2ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Pierre Schaus'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36m (0.1ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2117, 895, 2, '2016-10-08 10:26:06', '2016-10-08 10:26:06')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (1.1ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Asking the metaquestions in constraint tractability'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Asking the metaquestions in constraint tractability', 'The constraint satisfaction problem (CSP) involves deciding, given a set of variables and a set of constraints on the variables, whether or not there is an assignment to the variables satisfying all of the constraints. One formulation of the CSP is as the problem of deciding, given a pair (G,H) of relational structures, whether or not there is a homomorphism from the first structure to the second structure. The CSP is in general NP-hard; a common way to restrict this problem is to fix the second structure H, so that each structure H gives rise to a problem CSP(H). The problem family CSP(H) has been studied using an algebraic approach, which links the algorithmic and complexity properties of each problem CSP(H) to a set of operations, the so-called polymorphisms of H. Certain types of polymorphisms are known to imply the polynomial-time tractability of $CSP(H)$, and others are conjectured to do so. This article systematically studies---for various classes of polymorphisms---the computational complexity of deciding whether or not a given structure H admits a polymorphism from the class. Among other results, we prove the NP-completeness of deciding a condition conjectured to characterize the tractable problems CSP(H), as well as the NP-completeness of deciding if CSP(H) has bounded width.', 'cs.CC', '2016-04-04T16:18:16Z', 'http://arxiv.org/abs/1604.00932v1', '2016-10-08 10:26:06', '2016-10-08 10:26:06')[0m
  [1m[35m (3.3ms)[0m  COMMIT
  [1m[36mPublish Load (2.1ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 896[0m
  [1m[35mAuthor Load (2.0ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Hubie Chen'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Hubie Chen', '2016-10-08 10:26:06', '2016-10-08 10:26:06')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.4ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2367, 896, 0, '2016-10-08 10:26:06', '2016-10-08 10:26:06')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (1.7ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Benoit Larose'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Benoit Larose', '2016-10-08 10:26:06', '2016-10-08 10:26:06')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2368, 896, 1, '2016-10-08 10:26:06', '2016-10-08 10:26:06')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (1.1ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Data-Efficient Off-Policy Policy Evaluation for Reinforcement Learning'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Data-Efficient Off-Policy Policy Evaluation for Reinforcement Learning', 'In this paper we present a new way of predicting the performance of a reinforcement learning policy given historical data that may have been generated by a different policy. The ability to evaluate a policy from historical data is important for applications where the deployment of a bad policy can be dangerous or costly. We show empirically that our algorithm produces estimates that often have orders of magnitude lower mean squared error than existing methods---it makes more efficient use of the available data. Our new estimator is based on two advances: an extension of the doubly robust estimator (Jiang and Li, 2015), and a new way to mix between model based estimates and importance sampling based estimates.', 'cs.LG', '2016-04-04T15:56:52Z', 'http://arxiv.org/abs/1604.00923v1', '2016-10-08 10:26:06', '2016-10-08 10:26:06')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (1.4ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 897
  [1m[36mAuthor Load (1.1ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Philip S. Thomas'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Philip S. Thomas', '2016-10-08 10:26:06', '2016-10-08 10:26:06')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2369, 897, 0, '2016-10-08 10:26:06', '2016-10-08 10:26:06')
  [1m[36m (0.3ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.9ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Emma Brunskill'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35m (0.1ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1654, 897, 1, '2016-10-08 10:26:06', '2016-10-08 10:26:06')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (1.0ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Automatic Knowledge Base Evolution by Learning Instances'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Automatic Knowledge Base Evolution by Learning Instances', 'Knowledge base is the way to store structured and unstructured data throughout the web. Since the size of the web is increasing rapidly, there are huge needs to structure the knowledge in a fully automated way. However fully-automated knowledge-base evolution on the Semantic Web is a major challenges, although there are many ontology evolution techniques available. Therefore learning ontology automatically can contribute to the semantic web society significantly. In this paper, we propose full-automated ontology learning algorithm to generate refined knowledge base from incomplete knowledge base and rdf-triples. Our algorithm is data-driven approach which is based on the property of each instance. Ontology class is being elaborated by generalizing frequent property of its instances. By using that developed class information, each instance can find its most relatively matching class. By repeating these two steps, we achieve fully-automated ontology evolution from incomplete basic knowledge base.', 'cs.AI', '2016-04-04T14:23:25Z', 'http://arxiv.org/abs/1604.00869v1', '2016-10-08 10:26:06', '2016-10-08 10:26:06')
  [1m[36m (3.0ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (2.1ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 898
  [1m[36mAuthor Load (1.4ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Sundong Kim'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Sundong Kim', '2016-10-08 10:26:06', '2016-10-08 10:26:06')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2370, 898, 0, '2016-10-08 10:26:06', '2016-10-08 10:26:06')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.9ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Extending DLR with Labelled Tuples, Projections, Functional Dependencies and Objectification (full version)'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Extending DLR with Labelled Tuples, Projections, Functional Dependencies and Objectification (full version)', 'We introduce an extension of the n-ary description logic DLR to deal with attribute-labelled tuples (generalising the positional notation), with arbitrary projections of relations (inclusion dependencies), generic functional dependencies and with global and local objectification (reifying relations or their projections). We show how a simple syntactic condition on the appearance of projections and functional dependencies in a knowledge base makes the language decidable without increasing the computational complexity of the basic DLR language.', 'cs.AI', '2016-04-04T10:11:52Z', 'http://arxiv.org/abs/1604.00799v1', '2016-10-08 10:26:06', '2016-10-08 10:26:06')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (1.7ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 899
  [1m[36mAuthor Load (1.3ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Alessandro Artale'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Alessandro Artale', '2016-10-08 10:26:06', '2016-10-08 10:26:06')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2371, 899, 0, '2016-10-08 10:26:06', '2016-10-08 10:26:06')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.1ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Enrico Franconi'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Enrico Franconi', '2016-10-08 10:26:06', '2016-10-08 10:26:06')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2372, 899, 1, '2016-10-08 10:26:06', '2016-10-08 10:26:06')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPaper Load (1.0ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Character-Level Question Answering with Attention'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Character-Level Question Answering with Attention', 'We show that a character-level encoder-decoder framework can be successfully applied to question answering with a structured knowledge base. We use our model for single-relation question answering and demonstrate the effectiveness of our approach on the SimpleQuestions dataset (Bordes et al., 2015), where we improve state-of-the-art accuracy from 63.9% to 70.9%, without use of ensembles. Importantly, our character-level model has 16x fewer parameters than an equivalent word-level model, can be learned with significantly less data compared to previous work, which relies on data augmentation, and is robust to new entities in testing.', 'cs.CL', '2016-04-04T02:43:23Z', 'http://arxiv.org/abs/1604.00727v4', '2016-10-08 10:26:06', '2016-10-08 10:26:06')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPublish Load (1.7ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 900[0m
  [1m[35mAuthor Load (1.1ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'David Golub'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('David Golub', '2016-10-08 10:26:06', '2016-10-08 10:26:06')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2373, 900, 0, '2016-10-08 10:26:06', '2016-10-08 10:26:06')[0m
  [1m[35m (0.9ms)[0m  COMMIT
  [1m[36mAuthor Load (0.7ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Xiaodong He'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36m (0.2ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (496, 900, 1, '2016-10-08 10:26:06', '2016-10-08 10:26:06')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (1.1ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'A New Learning Method for Inference Accuracy, Core Occupation, and Performance Co-optimization on TrueNorth Chip'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('A New Learning Method for Inference Accuracy, Core Occupation, and Performance Co-optimization on TrueNorth Chip', 'IBM TrueNorth chip uses digital spikes to perform neuromorphic computing and achieves ultrahigh execution parallelism and power efficiency. However, in TrueNorth chip, low quantization resolution of the synaptic weights and spikes significantly limits the inference (e.g., classification) accuracy of the deployed neural network model. Existing workaround, i.e., averaging the results over multiple copies instantiated in spatial and temporal domains, rapidly exhausts the hardware resources and slows down the computation. In this work, we propose a novel learning method on TrueNorth platform that constrains the random variance of each computation copy and reduces the number of needed copies. Compared to the existing learning method, our method can achieve up to 68.8% reduction of the required neuro-synaptic cores or 6.5X speedup, with even slightly improved inference accuracy.', 'cs.NE', '2016-04-03T22:44:00Z', 'http://dx.doi.org/10.1145/2897937.2897968', '2016-10-08 10:26:06', '2016-10-08 10:26:06')[0m
  [1m[35m (2.9ms)[0m  COMMIT
  [1m[36mPublish Load (2.1ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 901[0m
  [1m[35mAuthor Load (1.3ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Wei Wen'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Wei Wen', '2016-10-08 10:26:06', '2016-10-08 10:26:06')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2374, 901, 0, '2016-10-08 10:26:06', '2016-10-08 10:26:06')[0m
  [1m[35m (0.3ms)[0m  COMMIT
  [1m[36mAuthor Load (1.0ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Chunpeng Wu'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Chunpeng Wu', '2016-10-08 10:26:06', '2016-10-08 10:26:06')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2375, 901, 1, '2016-10-08 10:26:06', '2016-10-08 10:26:06')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.5ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Yandan Wang'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Yandan Wang', '2016-10-08 10:26:06', '2016-10-08 10:26:06')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2376, 901, 2, '2016-10-08 10:26:06', '2016-10-08 10:26:06')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (1.1ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Kent Nixon'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Kent Nixon', '2016-10-08 10:26:06', '2016-10-08 10:26:06')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.3ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2377, 901, 3, '2016-10-08 10:26:06', '2016-10-08 10:26:06')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.3ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Qing Wu'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Qing Wu', '2016-10-08 10:26:06', '2016-10-08 10:26:06')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2378, 901, 4, '2016-10-08 10:26:06', '2016-10-08 10:26:06')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (1.3ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Mark Barnell'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Mark Barnell', '2016-10-08 10:26:06', '2016-10-08 10:26:06')[0m
  [1m[35m (0.3ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2379, 901, 5, '2016-10-08 10:26:06', '2016-10-08 10:26:06')
  [1m[36m (2.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.6ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Hai Li'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Hai Li', '2016-10-08 10:26:06', '2016-10-08 10:26:06')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2380, 901, 6, '2016-10-08 10:26:06', '2016-10-08 10:26:06')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (1.4ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Yiran Chen'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Yiran Chen', '2016-10-08 10:26:06', '2016-10-08 10:26:06')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2381, 901, 7, '2016-10-08 10:26:06', '2016-10-08 10:26:06')
  [1m[36m (0.3ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.9ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Pareto Optimality and Strategy Proofness in Group Argument Evaluation'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Pareto Optimality and Strategy Proofness in Group Argument Evaluation', 'An inconsistent knowledge base can be abstracted as a set of arguments and a defeat relation among them. There can be more than one consistent way to evaluate such an argumentation graph. Collective argument evaluation is the problem of aggregating the opinions of multiple agents on how a given set of arguments should be evaluated. It is crucial not only to ensure that the outcome is logically consistent, but also satisfies measures of social optimality and immunity to strategic manipulation. This is because agents have their individual preferences about what the outcome ought to be. In the current paper, we analyze three previously introduced argument-based aggregation operators with respect to Pareto optimality and strategy proofness under different general classes of agent preferences. We highlight fundamental trade-offs between strategic manipulability and social optimality on one hand, and classical logical criteria on the other. Our results motivate further investigation into the relationship between social choice and argumentation theory. The results are also relevant for choosing an appropriate aggregation operator given the criteria that are considered more important, as well as the nature of agents\' preferences.', 'cs.AI', '2016-04-03T21:48:37Z', 'http://arxiv.org/abs/1604.00693v1', '2016-10-08 10:26:06', '2016-10-08 10:26:06')
  [1m[36m (3.0ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (2.1ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 902
  [1m[36mAuthor Load (1.9ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Edmond Awad'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Edmond Awad', '2016-10-08 10:26:06', '2016-10-08 10:26:06')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2382, 902, 0, '2016-10-08 10:26:06', '2016-10-08 10:26:06')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.6ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Martin Caminada'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Martin Caminada', '2016-10-08 10:26:06', '2016-10-08 10:26:06')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2383, 902, 1, '2016-10-08 10:26:06', '2016-10-08 10:26:06')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (1.0ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Gabriella Pigozzi'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Gabriella Pigozzi', '2016-10-08 10:26:06', '2016-10-08 10:26:06')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2384, 902, 2, '2016-10-08 10:26:06', '2016-10-08 10:26:06')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.3ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Mikołaj Podlaszewski'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Mikołaj Podlaszewski', '2016-10-08 10:26:06', '2016-10-08 10:26:06')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2385, 902, 3, '2016-10-08 10:26:06', '2016-10-08 10:26:06')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (0.8ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Iyad Rahwan'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36m (0.1ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (934, 902, 4, '2016-10-08 10:26:06', '2016-10-08 10:26:06')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPaper Load (1.1ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Experimental Assessment of Aggregation Rules in Argumentation-enabled Collective Intelligence'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Experimental Assessment of Aggregation Rules in Argumentation-enabled Collective Intelligence', 'On the Web, there is always a need to aggregate opinions from the crowd (as in posts, social networks, forums, etc.). Different mechanisms have been implemented to capture these opinions such as \"Like\" in Facebook, \"Favorite\" in Twitter, thumbs-up/down, flagging, and so on. However, in more contested domains (e.g. Wikipedia, political discussion, and climate change discussion) these mechanisms are not sufficient since they only deal with each issue independently without considering the relationships between different claims. We can view a set of conflicting arguments as a graph in which the nodes represent arguments and the arcs between these nodes represent the defeat relation. A group of people can then collectively evaluate such graphs. To do this, the group must use a rule to aggregate their individual opinions about the entire argument graph. Here, we present the first experimental evaluation of different aggregation rules presented in the literature. We use randomized controlled experiments to investigate which rules people consider better at aggregating opinions under different conditions. Our analysis reveals a number of factors, not captured by traditional formal models, that play an important role in determining the efficacy of aggregation. These results help bring formal models of argumentation closer to real-world application.', 'cs.AI', '2016-04-03T19:58:18Z', 'http://arxiv.org/abs/1604.00681v1', '2016-10-08 10:26:06', '2016-10-08 10:26:06')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPublish Load (1.6ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 903[0m
  [1m[35mAuthor Load (1.2ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Edmond Awad'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35m (0.1ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2382, 903, 0, '2016-10-08 10:26:06', '2016-10-08 10:26:06')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.3ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Jean-François Bonnefon'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Jean-François Bonnefon', '2016-10-08 10:26:06', '2016-10-08 10:26:06')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2386, 903, 1, '2016-10-08 10:26:06', '2016-10-08 10:26:06')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (1.3ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Martin Caminada'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36m (0.1ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.4ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2383, 903, 2, '2016-10-08 10:26:06', '2016-10-08 10:26:06')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (1.3ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Thomas Malone'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Thomas Malone', '2016-10-08 10:26:06', '2016-10-08 10:26:06')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2387, 903, 3, '2016-10-08 10:26:06', '2016-10-08 10:26:06')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.6ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Iyad Rahwan'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35m (0.2ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (934, 903, 4, '2016-10-08 10:26:06', '2016-10-08 10:26:06')
  [1m[36m (3.9ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (1.4ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Bicycle-Sharing System Analysis and Trip Prediction'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.4ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Bicycle-Sharing System Analysis and Trip Prediction', 'Bicycle-sharing systems, which can provide shared bike usage services for the public, have been launched in many big cities. In bicycle-sharing systems, people can borrow and return bikes at any stations in the service region very conveniently. Therefore, bicycle-sharing systems are normally used as a short-distance trip supplement for private vehicles as well as regular public transportation. Meanwhile, for stations located at different places in the service region, the bike usages can be quite skewed and imbalanced. Some stations have too many incoming bikes and get jammed without enough docks for upcoming bikes, while some other stations get empty quickly and lack enough bikes for people to check out. Therefore, inferring the potential destinations and arriving time of each individual trip beforehand can effectively help the service providers schedule manual bike re-dispatch in advance. In this paper, we will study the individual trip prediction problem for bicycle-sharing systems. To address the problem, we study a real-world bicycle-sharing system and analyze individuals\' bike usage behaviors first. Based on the analysis results, a new trip destination prediction and trip duration inference model will be introduced. Experiments conducted on a real-world bicycle-sharing system demonstrate the effectiveness of the proposed model.', 'cs.CY', '2016-04-03T18:06:36Z', 'http://arxiv.org/abs/1604.00664v1', '2016-10-08 10:26:06', '2016-10-08 10:26:06')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (1.5ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 904
  [1m[36mAuthor Load (1.0ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Jiawei Zhang'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Jiawei Zhang', '2016-10-08 10:26:06', '2016-10-08 10:26:06')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2388, 904, 0, '2016-10-08 10:26:06', '2016-10-08 10:26:06')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.1ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Xiao Pan'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Xiao Pan', '2016-10-08 10:26:06', '2016-10-08 10:26:06')
  [1m[36m (0.3ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2389, 904, 1, '2016-10-08 10:26:06', '2016-10-08 10:26:06')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (1.3ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Moyin Li'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Moyin Li', '2016-10-08 10:26:06', '2016-10-08 10:26:06')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2390, 904, 2, '2016-10-08 10:26:06', '2016-10-08 10:26:06')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.2ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Philip S. Yu'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Philip S. Yu', '2016-10-08 10:26:06', '2016-10-08 10:26:06')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2391, 904, 3, '2016-10-08 10:26:06', '2016-10-08 10:26:06')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPaper Load (1.0ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Multi-Relational Learning at Scale with ADMM'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Multi-Relational Learning at Scale with ADMM', 'Learning from multiple-relational data which contains noise, ambiguities, or duplicate entities is essential to a wide range of applications such as statistical inference based on Web Linked Data, recommender systems, computational biology, and natural language processing. These tasks usually require working with very large and complex datasets - e.g., the Web graph - however, current approaches to multi-relational learning are not practical for such scenarios due to their high computational complexity and poor scalability on large data. In this paper, we propose a novel and scalable approach for multi-relational factorization based on consensus optimization. Our model, called ConsMRF, is based on the Alternating Direction Method of Multipliers (ADMM) framework, which enables us to optimize each target relation using a smaller set of parameters than the state-of-the-art competitors in this task. Due to ADMM\'s nature, ConsMRF can be easily parallelized which makes it suitable for large multi-relational data. Experiments on large Web datasets - derived from DBpedia, Wikipedia and YAGO - show the efficiency and performance improvement of ConsMRF over strong competitors. In addition, ConsMRF near-linear scalability indicates great potential to tackle Web-scale problem sizes.', 'stat.ML', '2016-04-03T15:42:36Z', 'http://arxiv.org/abs/1604.00647v1', '2016-10-08 10:26:06', '2016-10-08 10:26:06')[0m
  [1m[35m (3.0ms)[0m  COMMIT
  [1m[36mPublish Load (2.1ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 905[0m
  [1m[35mAuthor Load (1.3ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Lucas Drumond'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Lucas Drumond', '2016-10-08 10:26:06', '2016-10-08 10:26:06')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2392, 905, 0, '2016-10-08 10:26:06', '2016-10-08 10:26:06')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (1.4ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Ernesto Diaz-Aviles'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Ernesto Diaz-Aviles', '2016-10-08 10:26:06', '2016-10-08 10:26:06')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2393, 905, 1, '2016-10-08 10:26:06', '2016-10-08 10:26:06')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.2ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Lars Schmidt-Thieme'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Lars Schmidt-Thieme', '2016-10-08 10:26:06', '2016-10-08 10:26:06')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2394, 905, 2, '2016-10-08 10:26:06', '2016-10-08 10:26:06')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPaper Load (1.1ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'An electronic-game framework for evaluating coevolutionary algorithms'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('An electronic-game framework for evaluating coevolutionary algorithms', 'One of the common artificial intelligence applications in electronic games consists of making an artificial agent learn how to execute some determined task successfully in a game environment. One way to perform this task is through machine learning algorithms capable of learning the sequence of actions required to win in a given game environment. There are several supervised learning techniques able to learn the correct answer for a problem through examples. However, when learning how to play electronic games, the correct answer might only be known by the end of the game, after all the actions were already taken. Thus, not being possible to measure the accuracy of each individual action to be taken at each time step. A way for dealing with this problem is through Neuroevolution, a method which trains Artificial Neural Networks using evolutionary algorithms. In this article, we introduce a framework for testing optimization algorithms with artificial agent controllers in electronic games, called EvoMan, which is inspired in the action-platformer game Mega Man II. The environment can be configured to run in different experiment modes, as single evolution, coevolution and others. To demonstrate some challenges regarding the proposed platform, as initial experiments we applied Neuroevolution using Genetic Algorithms and the NEAT algorithm, in the context of competitively coevolving two distinct agents in this game.', 'cs.NE', '2016-04-03T14:57:24Z', 'http://arxiv.org/abs/1604.00644v2', '2016-10-08 10:26:06', '2016-10-08 10:26:06')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPublish Load (1.5ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 906[0m
  [1m[35mAuthor Load (1.2ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Karine da Silva Miras de Araújo'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Karine da Silva Miras de Araújo', '2016-10-08 10:26:06', '2016-10-08 10:26:06')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2395, 906, 0, '2016-10-08 10:26:06', '2016-10-08 10:26:06')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (1.1ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Fabrício Olivetti de França'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Fabrício Olivetti de França', '2016-10-08 10:26:06', '2016-10-08 10:26:06')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2396, 906, 1, '2016-10-08 10:26:06', '2016-10-08 10:26:06')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.9ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'The AGI Containment Problem'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('The AGI Containment Problem', 'There is considerable uncertainty about what properties, capabilities and motivations future AGIs will have. In some plausible scenarios, AGIs may pose security risks arising from accidents and defects. In order to mitigate these risks, prudent early AGI research teams will perform significant testing on their creations before use. Unfortunately, if an AGI has human-level or greater intelligence, testing itself may not be safe; some natural AGI goal systems create emergent incentives for AGIs to tamper with their test environments, make copies of themselves on the internet, or convince developers and operators to do dangerous things. In this paper, we survey the AGI containment problem - the question of how to build a container in which tests can be conducted safely and reliably, even on AGIs with unknown motivations and capabilities that could be dangerous. We identify requirements for AGI containers, available mechanisms, and weaknesses that need to be addressed.', 'cs.AI', '2016-04-02T19:26:05Z', 'http://dx.doi.org/10.1007/978-3-319-41649-6', '2016-10-08 10:26:06', '2016-10-08 10:26:06')
  [1m[36m (3.1ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (2.1ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 907
  [1m[36mAuthor Load (1.9ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'James Babcock'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('James Babcock', '2016-10-08 10:26:06', '2016-10-08 10:26:06')[0m
  [1m[35m (0.6ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2397, 907, 0, '2016-10-08 10:26:06', '2016-10-08 10:26:06')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.4ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Janos Kramar'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Janos Kramar', '2016-10-08 10:26:06', '2016-10-08 10:26:06')
  [1m[36m (0.3ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2398, 907, 1, '2016-10-08 10:26:06', '2016-10-08 10:26:06')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (1.2ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Roman Yampolskiy'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Roman Yampolskiy', '2016-10-08 10:26:06', '2016-10-08 10:26:06')[0m
  [1m[35m (0.3ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2399, 907, 2, '2016-10-08 10:26:06', '2016-10-08 10:26:06')
  [1m[36m (0.3ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (1.0ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Improving SAT Solvers via Blocked Clause Decomposition'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Improving SAT Solvers via Blocked Clause Decomposition', 'The decision variable selection policy used by the most competitive CDCL (Conflict-Driven Clause Learning) SAT solvers is either VSIDS (Variable State Independent Decaying Sum) or its variants such as exponential version EVSIDS. The common characteristic of VSIDS and its variants is to make use of statistical information in the solving process, but ignore structure information of the problem. For this reason, this paper modifies the decision variable selection policy, and presents a SAT solving technique based on BCD (Blocked Clause Decomposition). Its basic idea is that a part of decision variables are selected by VSIDS heuristic, while another part of decision variables are selected by blocked sets that are obtained by BCD. Compared with the existing BCD-based technique, our technique is simple, and need not to reencode CNF formulas. SAT solvers for certified UNSAT track can apply also our BCD-based technique. Our experiments on application benchmarks demonstrate that the new variables selection policy based on BCD can increase the performance of SAT solvers such as abcdSAT. The solver with BCD solved an instance from the SAT Race 2015 that was not solved by any solver so far. This shows that in some cases, the heuristic based on structure information is more efficient than that based on statistical information.', 'cs.LO', '2016-04-02T17:50:32Z', 'http://arxiv.org/abs/1604.00536v1', '2016-10-08 10:26:06', '2016-10-08 10:26:06')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (1.9ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 908
  [1m[36mAuthor Load (1.2ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Jingchao Chen'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36m (0.2ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1934, 908, 0, '2016-10-08 10:26:06', '2016-10-08 10:26:06')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPaper Load (1.0ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'A Formal Calculus for International Relations Computation and Evaluation'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('A Formal Calculus for International Relations Computation and Evaluation', 'This publication presents a relation computation or calculus for international relations using a mathematical modeling. It examined trust for international relations and its calculus, which related to Bayesian inference, Dempster-Shafer theory and subjective logic. Based on an observation in the literature, we found no literature discussing the calculus method for the international relations. To bridge this research gap, we propose a relation algebra method for international relations computation. The proposed method will allow a relation computation which is previously subjective and incomputable. We also present three international relations as case studies to demonstrate the proposed method is a real-world scenario. The method will deliver the relation computation for the international relations that to support decision makers in a government such as foreign ministry, defense ministry, presidential or prime minister office. The Department of Defense (DoD) may use our method to determine a nation that can be identified as a friendly, neutral or hostile nation.', 'cs.CR', '2016-04-02T10:13:26Z', 'http://dx.doi.org/10.13140/RG.2.1.3796.6321', '2016-10-08 10:26:06', '2016-10-08 10:26:06')[0m
  [1m[35m (2.9ms)[0m  COMMIT
  [1m[36mPublish Load (2.1ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 909[0m
  [1m[35mAuthor Load (1.4ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Mohd Anuar Mat Isa'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Mohd Anuar Mat Isa', '2016-10-08 10:26:06', '2016-10-08 10:26:06')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2400, 909, 0, '2016-10-08 10:26:06', '2016-10-08 10:26:06')[0m
  [1m[35m (1.1ms)[0m  COMMIT
  [1m[36mAuthor Load (1.6ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Ramlan Mahmod'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Ramlan Mahmod', '2016-10-08 10:26:06', '2016-10-08 10:26:06')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2401, 909, 1, '2016-10-08 10:26:06', '2016-10-08 10:26:06')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.2ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Nur Izura Udzir'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Nur Izura Udzir', '2016-10-08 10:26:06', '2016-10-08 10:26:06')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2402, 909, 2, '2016-10-08 10:26:06', '2016-10-08 10:26:06')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (1.1ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Jamalul-lail Ab Manan'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Jamalul-lail Ab Manan', '2016-10-08 10:26:06', '2016-10-08 10:26:06')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2403, 909, 3, '2016-10-08 10:26:06', '2016-10-08 10:26:06')
  [1m[36m (0.3ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.0ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Audun Jøsang'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Audun Jøsang', '2016-10-08 10:26:06', '2016-10-08 10:26:06')
  [1m[36m (0.3ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2404, 909, 4, '2016-10-08 10:26:06', '2016-10-08 10:26:06')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (1.3ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Ali Dehghan Tanha'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Ali Dehghan Tanha', '2016-10-08 10:26:06', '2016-10-08 10:26:06')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2405, 909, 5, '2016-10-08 10:26:06', '2016-10-08 10:26:06')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (1.1ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Embedding Lexical Features via Low-Rank Tensors'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Embedding Lexical Features via Low-Rank Tensors', 'Modern NLP models rely heavily on engineered features, which often combine word and contextual information into complex lexical features. Such combination results in large numbers of features, which can lead to over-fitting. We present a new model that represents complex lexical features---comprised of parts for words, contextual information and labels---in a tensor that captures conjunction information among these parts. We apply low-rank tensor approximations to the corresponding parameter tensors to reduce the parameter space and improve prediction speed. Furthermore, we investigate two methods for handling features that include $n$-grams of mixed lengths. Our model achieves state-of-the-art results on tasks in relation extraction, PP-attachment, and preposition disambiguation.', 'cs.CL', '2016-04-02T04:59:21Z', 'http://arxiv.org/abs/1604.00461v1', '2016-10-08 10:26:06', '2016-10-08 10:26:06')
  [1m[36m (0.3ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (1.2ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 910
  [1m[36mAuthor Load (1.2ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Mo Yu'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Mo Yu', '2016-10-08 10:26:06', '2016-10-08 10:26:06')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2406, 910, 0, '2016-10-08 10:26:06', '2016-10-08 10:26:06')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.2ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Mark Dredze'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Mark Dredze', '2016-10-08 10:26:06', '2016-10-08 10:26:06')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2407, 910, 1, '2016-10-08 10:26:06', '2016-10-08 10:26:06')[0m
  [1m[35m (0.3ms)[0m  COMMIT
  [1m[36mAuthor Load (1.1ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Raman Arora'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Raman Arora', '2016-10-08 10:26:06', '2016-10-08 10:26:06')[0m
  [1m[35m (0.3ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2408, 910, 2, '2016-10-08 10:26:06', '2016-10-08 10:26:06')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.1ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Matthew Gormley'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Matthew Gormley', '2016-10-08 10:26:06', '2016-10-08 10:26:06')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2409, 910, 3, '2016-10-08 10:26:06', '2016-10-08 10:26:06')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPaper Load (0.9ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = '3D-R2N2: A Unified Approach for Single and Multi-view 3D Object Reconstruction'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('3D-R2N2: A Unified Approach for Single and Multi-view 3D Object Reconstruction', 'Inspired by the recent success of methods that employ shape priors to achieve robust 3D reconstructions, we propose a novel recurrent neural network architecture that we call the 3D Recurrent Reconstruction Neural Network (3D-R2N2). The network learns a mapping from images of objects to their underlying 3D shapes from a large collection of synthetic data. Our network takes in one or more images of an object instance from arbitrary viewpoints and outputs a reconstruction of the object in the form of a 3D occupancy grid. Unlike most of the previous works, our network does not require any image annotations or object class labels for training or testing. Our extensive experimental analysis shows that our reconstruction framework i) outperforms the state-of-the-art methods for single view reconstruction, and ii) enables the 3D reconstruction of objects in situations when traditional SFM/SLAM methods fail (because of lack of texture and/or wide baseline).', 'cs.CV', '2016-04-02T01:28:27Z', 'http://arxiv.org/abs/1604.00449v1', '2016-10-08 10:26:06', '2016-10-08 10:26:06')[0m
  [1m[35m (2.9ms)[0m  COMMIT
  [1m[36mPublish Load (2.0ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 911[0m
  [1m[35mAuthor Load (1.4ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Christopher B. Choy'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Christopher B. Choy', '2016-10-08 10:26:06', '2016-10-08 10:26:06')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2410, 911, 0, '2016-10-08 10:26:06', '2016-10-08 10:26:06')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (1.5ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Danfei Xu'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Danfei Xu', '2016-10-08 10:26:06', '2016-10-08 10:26:06')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2411, 911, 1, '2016-10-08 10:26:06', '2016-10-08 10:26:06')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.2ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'JunYoung Gwak'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('JunYoung Gwak', '2016-10-08 10:26:06', '2016-10-08 10:26:06')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2412, 911, 2, '2016-10-08 10:26:06', '2016-10-08 10:26:06')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (1.5ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Kevin Chen'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Kevin Chen', '2016-10-08 10:26:06', '2016-10-08 10:26:06')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2413, 911, 3, '2016-10-08 10:26:06', '2016-10-08 10:26:06')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.1ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Silvio Savarese'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35m (0.1ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2344, 911, 4, '2016-10-08 10:26:06', '2016-10-08 10:26:06')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.9ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Reinforcement learning based local search for grouping problems: A case study on graph coloring'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Reinforcement learning based local search for grouping problems: A case study on graph coloring', 'Grouping problems aim to partition a set of items into multiple mutually disjoint subsets according to some specific criterion and constraints. Grouping problems cover a large class of important combinatorial optimization problems that are generally computationally difficult. In this paper, we propose a general solution approach for grouping problems, i.e., reinforcement learning based local search (RLS), which combines reinforcement learning techniques with descent-based local search. The viability of the proposed approach is verified on a well-known representative grouping problem (graph coloring) where a very simple descent-based coloring algorithm is applied. Experimental studies on popular DIMACS and COLOR02 benchmark graphs indicate that RLS achieves competitive performances compared to a number of well-known coloring algorithms.', 'cs.AI', '2016-04-01T19:38:35Z', 'http://arxiv.org/abs/1604.00377v1', '2016-10-08 10:26:06', '2016-10-08 10:26:06')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (1.5ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 912
  [1m[36mAuthor Load (1.2ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Yangming Zhou'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Yangming Zhou', '2016-10-08 10:26:06', '2016-10-08 10:26:06')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2414, 912, 0, '2016-10-08 10:26:06', '2016-10-08 10:26:06')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.5ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Jin-Kao Hao'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Jin-Kao Hao', '2016-10-08 10:26:06', '2016-10-08 10:26:06')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2415, 912, 1, '2016-10-08 10:26:06', '2016-10-08 10:26:06')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (1.2ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Béatrice Duval'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Béatrice Duval', '2016-10-08 10:26:06', '2016-10-08 10:26:06')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2416, 912, 2, '2016-10-08 10:26:06', '2016-10-08 10:26:06')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (1.0ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'COCO: The Bi-objective Black Box Optimization Benchmarking (bbob-biobj) Test Suite'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('COCO: The Bi-objective Black Box Optimization Benchmarking (bbob-biobj) Test Suite', 'The bbob-biobj test suite contains 55 bi-objective functions in continuous domain which are derived from combining functions of the well-known single-objective noiseless bbob test suite. Besides giving the actual function definitions and presenting their (known) properties, this documentation also aims at giving the rationale behind our approach in terms of function groups, instances, and potential objective space normalization.', 'cs.AI', '2016-04-01T18:55:05Z', 'http://arxiv.org/abs/1604.00359v2', '2016-10-08 10:26:06', '2016-10-08 10:26:06')
  [1m[36m (2.9ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (2.1ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 913
  [1m[36mAuthor Load (1.3ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Tea Tusar'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Tea Tusar', '2016-10-08 10:26:06', '2016-10-08 10:26:06')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2417, 913, 0, '2016-10-08 10:26:06', '2016-10-08 10:26:06')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.1ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Dimo Brockhoff'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Dimo Brockhoff', '2016-10-08 10:26:06', '2016-10-08 10:26:06')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2418, 913, 1, '2016-10-08 10:26:06', '2016-10-08 10:26:06')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (1.1ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Nikolaus Hansen'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Nikolaus Hansen', '2016-10-08 10:26:06', '2016-10-08 10:26:06')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2419, 913, 2, '2016-10-08 10:26:06', '2016-10-08 10:26:06')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.1ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Anne Auger'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Anne Auger', '2016-10-08 10:26:06', '2016-10-08 10:26:06')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2420, 913, 3, '2016-10-08 10:26:06', '2016-10-08 10:26:06')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (1.0ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'A strengthening of rational closure in DLs: reasoning about multiple aspects'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('A strengthening of rational closure in DLs: reasoning about multiple aspects', 'We propose a logical analysis of the concept of typicality, central in human cognition (Rosch,1978). We start from a previously proposed extension of the basic Description Logic ALC (a computationally tractable fragment of First Order Logic, used to represent concept inclusions and ontologies) with a typicality operator T that allows to consistently represent the attribution to classes of individuals of properties with exceptions (as in the classic example (i) typical birds fly, (ii) penguins are birds but (iii) typical penguins don\'t fly). We then strengthen this extension in order to separately reason about the typicality with respect to different aspects (e.g., flying, having nice feather: in the previous example, penguins may not inherit the property of flying, for which they are exceptional, but can nonetheless inherit other properties, such as having nice feather).', 'cs.AI', '2016-04-01T15:50:24Z', 'http://arxiv.org/abs/1604.00301v1', '2016-10-08 10:26:06', '2016-10-08 10:26:06')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPublish Load (1.7ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 914[0m
  [1m[35mAuthor Load (1.3ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Valentina Gliozzi'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Valentina Gliozzi', '2016-10-08 10:26:06', '2016-10-08 10:26:06')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2421, 914, 0, '2016-10-08 10:26:06', '2016-10-08 10:26:06')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (1.0ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'A SAT model to mine flexible sequences in transactional datasets'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('A SAT model to mine flexible sequences in transactional datasets', 'Traditional pattern mining algorithms generally suffer from a lack of flexibility. In this paper, we propose a SAT formulation of the problem to successfully mine frequent flexible sequences occurring in transactional datasets. Our SAT-based approach can easily be extended with extra constraints to address a broad range of pattern mining applications. To demonstrate this claim, we formulate and add several constraints, such as gap and span constraints, to our model in order to extract more specific patterns. We also use interactive solving to perform important derived tasks, such as closed pattern mining or maximal pattern mining. Finally, we prove the practical feasibility of our SAT model by running experiments on two real datasets.', 'cs.AI', '2016-04-01T15:49:51Z', 'http://arxiv.org/abs/1604.00300v1', '2016-10-08 10:26:06', '2016-10-08 10:26:06')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPublish Load (1.6ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 915[0m
  [1m[35mAuthor Load (1.0ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Rémi Coletta'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Rémi Coletta', '2016-10-08 10:26:06', '2016-10-08 10:26:06')
  [1m[36m (3.0ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2422, 915, 0, '2016-10-08 10:26:06', '2016-10-08 10:26:06')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (1.9ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Benjamin Negrevergne'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Benjamin Negrevergne', '2016-10-08 10:26:06', '2016-10-08 10:26:06')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2423, 915, 1, '2016-10-08 10:26:06', '2016-10-08 10:26:06')
  [1m[36m (1.6ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (1.5ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Building Machines That Learn and Think Like People'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Building Machines That Learn and Think Like People', 'Recent progress in artificial intelligence (AI) has renewed interest in building systems that learn and think like people. Many advances have come from using deep neural networks trained end-to-end in tasks such as object recognition, video games, and board games, achieving performance that equals or even beats humans in some respects. Despite their biological inspiration and performance achievements, these systems differ from human intelligence in crucial ways. We review progress in cognitive science suggesting that truly human-like learning and thinking machines will have to reach beyond current engineering trends in both what they learn, and how they learn it. Specifically, we argue that these machines should (a) build causal models of the world that support explanation and understanding, rather than merely solving pattern recognition problems; (b) ground learning in intuitive theories of physics and psychology, to support and enrich the knowledge that is learned; and (c) harness compositionality and learning-to-learn to rapidly acquire and generalize knowledge to new tasks and situations. We suggest concrete challenges and promising routes towards these goals that can combine the strengths of recent neural network advances with more structured cognitive models.', 'cs.AI', '2016-04-01T15:37:57Z', 'http://arxiv.org/abs/1604.00289v2', '2016-10-08 10:26:06', '2016-10-08 10:26:06')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (1.5ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 916
  [1m[36mAuthor Load (1.2ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Brenden M. Lake'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Brenden M. Lake', '2016-10-08 10:26:06', '2016-10-08 10:26:06')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2424, 916, 0, '2016-10-08 10:26:06', '2016-10-08 10:26:06')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.3ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Tomer D. Ullman'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Tomer D. Ullman', '2016-10-08 10:26:06', '2016-10-08 10:26:06')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2425, 916, 1, '2016-10-08 10:26:06', '2016-10-08 10:26:06')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.7ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Joshua B. Tenenbaum'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36m (0.2ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (503, 916, 2, '2016-10-08 10:26:06', '2016-10-08 10:26:06')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (0.9ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Samuel J. Gershman'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36m (0.1ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1435, 916, 3, '2016-10-08 10:26:06', '2016-10-08 10:26:06')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPaper Load (0.9ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Relations between assumption-based approaches in nonmonotonic logic and formal argumentation'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Relations between assumption-based approaches in nonmonotonic logic and formal argumentation', 'In this paper we make a contribution to the unification of formal models of defeasible reasoning. We present several translations between formal argumentation frameworks and nonmonotonic logics for reasoning with plausible assumptions. More specifically, we translate adaptive logics into assumption-based argumentation and ASPIC+, ASPIC+ into assumption-based argumentation and a fragment of assumption-based argumentation into adaptive logics. Adaptive logics are closely related to Makinson\'s default assumptions and to a significant class of systems within the tradition of preferential semantics in the vein of KLM and Shoham. Thus, our results also provide close links between formal argumentation and the latter approaches.', 'cs.AI', '2016-04-01T08:14:30Z', 'http://arxiv.org/abs/1604.00162v1', '2016-10-08 10:26:06', '2016-10-08 10:26:06')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPublish Load (1.7ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 917[0m
  [1m[35mAuthor Load (1.0ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Jesse Heyninck'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Jesse Heyninck', '2016-10-08 10:26:06', '2016-10-08 10:26:06')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2426, 917, 0, '2016-10-08 10:26:06', '2016-10-08 10:26:06')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.9ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Christian Straßer'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36m (0.1ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1548, 917, 1, '2016-10-08 10:26:06', '2016-10-08 10:26:06')[0m
  [1m[35m (3.0ms)[0m  COMMIT
  [1m[36mPaper Load (1.3ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'To Fall Or Not To Fall: A Visual Approach to Physical Stability Prediction'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('To Fall Or Not To Fall: A Visual Approach to Physical Stability Prediction', 'Understanding physical phenomena is a key competence that enables humans and animals to act and interact under uncertain perception in previously unseen environments containing novel object and their configurations. Developmental psychology has shown that such skills are acquired by infants from observations at a very early stage. In this paper, we contrast a more traditional approach of taking a model-based route with explicit 3D representations and physical simulation by an end-to-end approach that directly predicts stability and related quantities from appearance. We ask the question if and to what extent and quality such a skill can directly be acquired in a data-driven way bypassing the need for an explicit simulation. We present a learning-based approach based on simulated data that predicts stability of towers comprised of wooden blocks under different conditions and quantities related to the potential fall of the towers. The evaluation is carried out on synthetic data and compared to human judgments on the same stimuli.', 'cs.CV', '2016-03-31T21:53:32Z', 'http://arxiv.org/abs/1604.00066v1', '2016-10-08 10:26:06', '2016-10-08 10:26:06')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPublish Load (1.4ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 918[0m
  [1m[35mAuthor Load (1.2ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Wenbin Li'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Wenbin Li', '2016-10-08 10:26:06', '2016-10-08 10:26:06')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2427, 918, 0, '2016-10-08 10:26:06', '2016-10-08 10:26:06')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (1.1ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Seyedmajid Azimi'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Seyedmajid Azimi', '2016-10-08 10:26:06', '2016-10-08 10:26:06')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2428, 918, 1, '2016-10-08 10:26:06', '2016-10-08 10:26:06')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.3ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Aleš Leonardis'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Aleš Leonardis', '2016-10-08 10:26:06', '2016-10-08 10:26:06')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2429, 918, 2, '2016-10-08 10:26:06', '2016-10-08 10:26:06')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (0.7ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Mario Fritz'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36m (0.1ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (450, 918, 3, '2016-10-08 10:26:06', '2016-10-08 10:26:06')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPaper Load (1.0ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Neural Language Correction with Character-Based Attention'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Neural Language Correction with Character-Based Attention', 'Natural language correction has the potential to help language learners improve their writing skills. While approaches with separate classifiers for different error types have high precision, they do not flexibly handle errors such as redundancy or non-idiomatic phrasing. On the other hand, word and phrase-based machine translation methods are not designed to cope with orthographic errors, and have recently been outpaced by neural models. Motivated by these issues, we present a neural network-based approach to language correction. The core component of our method is an encoder-decoder recurrent neural network with an attention mechanism. By operating at the character level, the network avoids the problem of out-of-vocabulary words. We illustrate the flexibility of our approach on dataset of noisy, user-generated text collected from an English learner forum. When combined with a language model, our method achieves a state-of-the-art $F_{0.5}$-score on the CoNLL 2014 Shared Task. We further demonstrate that training the network on additional data with synthesized errors can improve performance.', 'cs.CL', '2016-03-31T19:16:54Z', 'http://arxiv.org/abs/1603.09727v1', '2016-10-08 10:26:06', '2016-10-08 10:26:06')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPublish Load (1.8ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 919[0m
  [1m[35mAuthor Load (1.5ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Ziang Xie'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Ziang Xie', '2016-10-08 10:26:06', '2016-10-08 10:26:06')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2430, 919, 0, '2016-10-08 10:26:06', '2016-10-08 10:26:06')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (1.3ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Anand Avati'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Anand Avati', '2016-10-08 10:26:06', '2016-10-08 10:26:06')[0m
  [1m[35m (2.9ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2431, 919, 1, '2016-10-08 10:26:06', '2016-10-08 10:26:06')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.6ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Naveen Arivazhagan'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Naveen Arivazhagan', '2016-10-08 10:26:06', '2016-10-08 10:26:06')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2432, 919, 2, '2016-10-08 10:26:06', '2016-10-08 10:26:06')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (1.4ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Dan Jurafsky'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Dan Jurafsky', '2016-10-08 10:26:06', '2016-10-08 10:26:06')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2433, 919, 3, '2016-10-08 10:26:06', '2016-10-08 10:26:06')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.4ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Andrew Y. Ng'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Andrew Y. Ng', '2016-10-08 10:26:06', '2016-10-08 10:26:06')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2434, 919, 4, '2016-10-08 10:26:06', '2016-10-08 10:26:06')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPaper Load (1.3ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Characterizing Realizability in Abstract Argumentation'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Characterizing Realizability in Abstract Argumentation', 'Realizability for knowledge representation formalisms studies the following question: given a semantics and a set of interpretations, is there a knowledge base whose semantics coincides exactly with the given interpretation set? We introduce a general framework for analyzing realizability in abstract dialectical frameworks (ADFs) and various of its subclasses. In particular, the framework applies to Dung argumentation frameworks, SETAFs by Nielsen and Parsons, and bipolar ADFs. We present a uniform characterization method for the admissible, complete, preferred and model/stable semantics. We employ this method to devise an algorithm that decides realizability for the mentioned formalisms and semantics; moreover the algorithm allows for constructing a desired knowledge base whenever one exists. The algorithm is built in a modular way and thus easily extensible to new formalisms and semantics. We have also implemented our approach in answer set programming, and used the implementation to obtain several novel results on the relative expressiveness of the abovementioned formalisms.', 'cs.AI', '2016-03-31T12:05:34Z', 'http://arxiv.org/abs/1603.09545v1', '2016-10-08 10:26:06', '2016-10-08 10:26:06')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPublish Load (1.2ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 920[0m
  [1m[35mAuthor Load (1.2ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Thomas Linsbichler'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Thomas Linsbichler', '2016-10-08 10:26:06', '2016-10-08 10:26:06')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2435, 920, 0, '2016-10-08 10:26:06', '2016-10-08 10:26:06')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.3ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Jörg Pührer'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36m (0.1ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (57, 920, 1, '2016-10-08 10:26:06', '2016-10-08 10:26:06')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (1.4ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Hannes Strass'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Hannes Strass', '2016-10-08 10:26:06', '2016-10-08 10:26:06')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2436, 920, 2, '2016-10-08 10:26:06', '2016-10-08 10:26:06')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (0.9ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Distributing Knowledge into Simple Bases'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Distributing Knowledge into Simple Bases', 'Understanding the behavior of belief change operators for fragments of classical logic has received increasing interest over the last years. Results in this direction are mainly concerned with adapting representation theorems. However, fragment-driven belief change also leads to novel research questions. In this paper we propose the concept of belief distribution, which can be understood as the reverse task of merging. More specifically, we are interested in the following question: given an arbitrary knowledge base $K$ and some merging operator $\\Delta$, can we find a profile $E$ and a constraint $\\mu$, both from a given fragment of classical logic, such that $\\Delta_\\mu(E)$ yields a result equivalent to $K$? In other words, we are interested in seeing if $K$ can be distributed into knowledge bases of simpler structure, such that the task of merging allows for a reconstruction of the original knowledge. Our initial results show that merging based on drastic distance allows for an easy distribution of knowledge, while the power of distribution for operators based on Hamming distance relies heavily on the fragment of choice.', 'cs.AI', '2016-03-31T09:59:02Z', 'http://arxiv.org/abs/1603.09511v1', '2016-10-08 10:26:06', '2016-10-08 10:26:06')
  [1m[36m (3.0ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (2.1ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 921
  [1m[36mAuthor Load (1.4ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Adrian Haret'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Adrian Haret', '2016-10-08 10:26:06', '2016-10-08 10:26:06')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2437, 921, 0, '2016-10-08 10:26:06', '2016-10-08 10:26:06')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.5ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Jean-Guy Mailly'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Jean-Guy Mailly', '2016-10-08 10:26:06', '2016-10-08 10:26:06')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2438, 921, 1, '2016-10-08 10:26:06', '2016-10-08 10:26:06')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.6ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Stefan Woltran'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36m (0.1ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (352, 921, 2, '2016-10-08 10:26:06', '2016-10-08 10:26:06')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (1.0ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Verifiability of Argumentation Semantics'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Verifiability of Argumentation Semantics', 'Dung\'s abstract argumentation theory is a widely used formalism to model conflicting information and to draw conclusions in such situations. Hereby, the knowledge is represented by so-called argumentation frameworks (AFs) and the reasoning is done via semantics extracting acceptable sets. All reasonable semantics are based on the notion of conflict-freeness which means that arguments are only jointly acceptable when they are not linked within the AF. In this paper, we study the question which information on top of conflict-free sets is needed to compute extensions of a semantics at hand. We introduce a hierarchy of so-called verification classes specifying the required amount of information. We show that well-known standard semantics are exactly verifiable through a certain such class. Our framework also gives a means to study semantics lying inbetween known semantics, thus contributing to a more abstract understanding of the different features argumentation semantics offer.', 'cs.AI', '2016-03-31T09:29:02Z', 'http://arxiv.org/abs/1603.09502v1', '2016-10-08 10:26:06', '2016-10-08 10:26:06')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPublish Load (1.3ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 922[0m
  [1m[35mAuthor Load (1.1ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Ringo Baumann'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Ringo Baumann', '2016-10-08 10:26:06', '2016-10-08 10:26:06')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2439, 922, 0, '2016-10-08 10:26:06', '2016-10-08 10:26:06')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (1.4ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Thomas Linsbichler'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36m (0.1ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2435, 922, 1, '2016-10-08 10:26:06', '2016-10-08 10:26:06')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.5ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Stefan Woltran'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36m (0.2ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (352, 922, 2, '2016-10-08 10:26:06', '2016-10-08 10:26:06')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (1.1ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Reactive Policies with Planning for Action Languages'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Reactive Policies with Planning for Action Languages', 'We describe a representation in a high-level transition system for policies that express a reactive behavior for the agent. We consider a target decision component that figures out what to do next and an (online) planning capability to compute the plans needed to reach these targets. Our representation allows one to analyze the flow of executing the given reactive policy, and to determine whether it works as expected. Additionally, the flexibility of the representation opens a range of possibilities for designing behaviors.', 'cs.AI', '2016-03-31T09:05:28Z', 'http://arxiv.org/abs/1603.09495v1', '2016-10-08 10:26:06', '2016-10-08 10:26:06')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPublish Load (1.4ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 923[0m
  [1m[35mAuthor Load (1.1ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Zeynep G. Saribatur'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Zeynep G. Saribatur', '2016-10-08 10:26:06', '2016-10-08 10:26:06')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2440, 923, 0, '2016-10-08 10:26:06', '2016-10-08 10:26:06')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (1.2ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Thomas Eiter'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Thomas Eiter', '2016-10-08 10:26:06', '2016-10-08 10:26:06')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2441, 923, 1, '2016-10-08 10:26:06', '2016-10-08 10:26:06')
  [1m[36m (0.3ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (1.2ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Building the Signature of Set Theory Using the MathSem Program'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Building the Signature of Set Theory Using the MathSem Program', 'Knowledge representation is a popular research field in IT. As mathematical knowledge is most formalized, its representation is important and interesting. Mathematical knowledge consists of various mathematical theories. In this paper we consider a deductive system that derives mathematical notions, axioms and theorems. All these notions, axioms and theorems can be considered as the part of elementary set theory. This theory will be represented as a semantic net.', 'cs.LO', '2016-03-31T08:41:22Z', 'http://arxiv.org/abs/1603.09488v1', '2016-10-08 10:26:06', '2016-10-08 10:26:06')
  [1m[36m (2.9ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (2.3ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 924
  [1m[36mAuthor Load (1.3ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Andrey Luxemburg'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Andrey Luxemburg', '2016-10-08 10:26:06', '2016-10-08 10:26:06')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2442, 924, 0, '2016-10-08 10:26:06', '2016-10-08 10:26:06')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (1.1ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'A New Approach for Revising Logic Programs'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('A New Approach for Revising Logic Programs', 'Belief revision has been studied mainly with respect to background logics that are monotonic in character. In this paper we study belief revision when the underlying logic is non-monotonic instead--an inherently interesting problem that is under explored. In particular, we will focus on the revision of a body of beliefs that is represented as a logic program under the answer set semantics, while the new information is also similarly represented as a logic program. Our approach is driven by the observation that unlike in a monotonic setting where, when necessary, consistency in a revised body of beliefs is maintained by jettisoning some old beliefs, in a non-monotonic setting consistency can be restored by adding new beliefs as well. We will define a syntactic revision function and subsequently provide representation theorem for characterising it.', 'cs.AI', '2016-03-31T06:27:16Z', 'http://arxiv.org/abs/1603.09465v1', '2016-10-08 10:26:06', '2016-10-08 10:26:06')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (1.7ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 925
  [1m[36mAuthor Load (1.2ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Zhiqiang Zhuang'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Zhiqiang Zhuang', '2016-10-08 10:26:06', '2016-10-08 10:26:06')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2443, 925, 0, '2016-10-08 10:26:06', '2016-10-08 10:26:06')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.3ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'James Delgrande'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('James Delgrande', '2016-10-08 10:26:06', '2016-10-08 10:26:06')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2444, 925, 1, '2016-10-08 10:26:06', '2016-10-08 10:26:06')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (1.3ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Abhaya Nayak'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Abhaya Nayak', '2016-10-08 10:26:06', '2016-10-08 10:26:06')[0m
  [1m[35m (2.0ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2445, 925, 2, '2016-10-08 10:26:06', '2016-10-08 10:26:06')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.6ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Abdul Sattar'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Abdul Sattar', '2016-10-08 10:26:06', '2016-10-08 10:26:06')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.4ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2446, 925, 3, '2016-10-08 10:26:06', '2016-10-08 10:26:06')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPaper Load (0.9ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Ordinal Conditional Functions for Nearly Counterfactual Revision'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Ordinal Conditional Functions for Nearly Counterfactual Revision', 'We are interested in belief revision involving conditional statements where the antecedent is almost certainly false. To represent such problems, we use Ordinal Conditional Functions that may take infinite values. We model belief change in this context through simple arithmetical operations that allow us to capture the intuition that certain antecedents can not be validated by any number of observations. We frame our approach as a form of finite belief improvement, and we propose a model of conditional belief revision in which only the \"right\" hypothetical levels of implausibility are revised.', 'cs.AI', '2016-03-31T00:48:40Z', 'http://arxiv.org/abs/1603.09429v1', '2016-10-08 10:26:06', '2016-10-08 10:26:06')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPublish Load (1.9ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 926[0m
  [1m[35mAuthor Load (1.2ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Aaron Hunter'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Aaron Hunter', '2016-10-08 10:26:06', '2016-10-08 10:26:06')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2447, 926, 0, '2016-10-08 10:26:06', '2016-10-08 10:26:06')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPaper Load (1.3ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Enhancing Sentence Relation Modeling with Auxiliary Character-level Embedding'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Enhancing Sentence Relation Modeling with Auxiliary Character-level Embedding', 'Neural network based approaches for sentence relation modeling automatically generate hidden matching features from raw sentence pairs. However, the quality of matching feature representation may not be satisfied due to complex semantic relations such as entailment or contradiction. To address this challenge, we propose a new deep neural network architecture that jointly leverage pre-trained word embedding and auxiliary character embedding to learn sentence meanings. The two kinds of word sequence representations as inputs into multi-layer bidirectional LSTM to learn enhanced sentence representation. After that, we construct matching features followed by another temporal CNN to learn high-level hidden matching feature representations. Experimental results demonstrate that our approach consistently outperforms the existing methods on standard evaluation datasets.', 'cs.CL', '2016-03-30T22:39:59Z', 'http://arxiv.org/abs/1603.09405v1', '2016-10-08 10:26:06', '2016-10-08 10:26:06')[0m
  [1m[35m (3.0ms)[0m  COMMIT
  [1m[36mPublish Load (1.6ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 927[0m
  [1m[35mAuthor Load (0.7ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Peng Li'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35m (0.2ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (725, 927, 0, '2016-10-08 10:26:07', '2016-10-08 10:26:07')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.2ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Heng Huang'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Heng Huang', '2016-10-08 10:26:07', '2016-10-08 10:26:07')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2448, 927, 1, '2016-10-08 10:26:07', '2016-10-08 10:26:07')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (1.8ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Iterated Ontology Revision by Reinterpretation'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Iterated Ontology Revision by Reinterpretation', 'Iterated applications of belief change operators are essential for different scenarios such as that of ontology evolution where new information is not presented at once but only in piecemeal fashion within a sequence. I discuss iterated applications of so called reinterpretation operators that trace conflicts between ontologies back to the ambiguous of symbols and that provide conflict resolution strategies with bridging axioms. The discussion centers on adaptations of the classical iteration postulates according to Darwiche and Pearl. The main result of the paper is that reinterpretation operators fulfill the postulates for sequences containing only atomic triggers. For complex triggers, a fulfillment is not guaranteed and indeed there are different reasons for the different postulates why they should not be fulfilled in the particular scenario of ontology revision with well developed ontologies.', 'cs.AI', '2016-03-30T13:50:13Z', 'http://arxiv.org/abs/1603.09194v1', '2016-10-08 10:26:07', '2016-10-08 10:26:07')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPublish Load (1.4ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 928[0m
  [1m[35mAuthor Load (1.1ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Özgür Lütfü Özçep'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Özgür Lütfü Özçep', '2016-10-08 10:26:07', '2016-10-08 10:26:07')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2449, 928, 0, '2016-10-08 10:26:07', '2016-10-08 10:26:07')[0m
  [1m[35m (1.1ms)[0m  COMMIT
  [1m[36mPaper Load (2.1ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Phoenix: A Self-Optimizing Chess Engine'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Phoenix: A Self-Optimizing Chess Engine', 'Since the advent of computers, many tasks which required humans to spend a lot of time and energy have been trivialized by the computers\' ability to perform repetitive tasks extremely quickly. However there are still many areas in which humans excel in comparison with the machines. One such area is chess. Even with great advances in the speed and computational power of modern machines, Grandmasters often beat the best chess programs in the world with relative ease. This may be due to the fact that a game of chess cannot be won by pure calculation. There is more to the goodness of a chess position than some numerical value which apparently can be seen only by the human brain. Here an effort has been made to improve current chess engines by letting themselves evolve over a period of time. Firstly, the problem of learning is reduced into an optimization problem by defining Position Evaluation in terms of Positional Value Tables (PVTs). Next, the PVTs are optimized using Multi-Niche Crowding which successfully identifies the optima in a multimodal function, thereby arriving at distinctly different solutions which are close to the global optimum.', 'cs.AI', '2016-03-30T06:41:04Z', 'http://arxiv.org/abs/1603.09051v2', '2016-10-08 10:26:07', '2016-10-08 10:26:07')[0m
  [1m[35m (2.7ms)[0m  COMMIT
  [1m[36mPublish Load (1.7ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 929[0m
  [1m[35mAuthor Load (1.2ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Rahul A R'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Rahul A R', '2016-10-08 10:26:07', '2016-10-08 10:26:07')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2450, 929, 0, '2016-10-08 10:26:07', '2016-10-08 10:26:07')[0m
  [1m[35m (0.6ms)[0m  COMMIT
  [1m[36mAuthor Load (1.5ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'G Srinivasaraghavan'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('G Srinivasaraghavan', '2016-10-08 10:26:07', '2016-10-08 10:26:07')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2451, 929, 1, '2016-10-08 10:26:07', '2016-10-08 10:26:07')
  [1m[36m (0.3ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (1.1ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Maximize Pointwise Cost-sensitively Submodular Functions With Budget Constraint'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Maximize Pointwise Cost-sensitively Submodular Functions With Budget Constraint', 'We study the worst-case adaptive optimization problem with budget constraint. Unlike previous works, we consider the general setting where the cost is a set function on sets of decisions. For this setting, we investigate the near-optimality of greedy policies when the utility function satisfies a novel property called pointwise cost-sensitive submodularity. This property is an extension of cost-sensitive submodularity, which in turn is a generalization of submodularity to general cost functions. We prove that two simple greedy policies for the problem are not near-optimal but the best between them is near-optimal. With this result, we propose a combined policy that is near-optimal with respect to the optimal worst-case policy that uses half of the budget. We discuss applications of our theoretical results and also report experimental results comparing the greedy policies on the active learning problem.', 'cs.AI', '2016-03-30T03:27:41Z', 'http://arxiv.org/abs/1603.09029v1', '2016-10-08 10:26:07', '2016-10-08 10:26:07')
  [1m[36m (0.3ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (1.4ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 930
  [1m[36mAuthor Load (1.7ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Nguyen Viet Cuong'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Nguyen Viet Cuong', '2016-10-08 10:26:07', '2016-10-08 10:26:07')[0m
  [1m[35m (0.3ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2452, 930, 0, '2016-10-08 10:26:07', '2016-10-08 10:26:07')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.2ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Huan Xu'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Huan Xu', '2016-10-08 10:26:07', '2016-10-08 10:26:07')
  [1m[36m (0.3ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2453, 930, 1, '2016-10-08 10:26:07', '2016-10-08 10:26:07')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (1.6ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Towards Practical Bayesian Parameter and State Estimation'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Towards Practical Bayesian Parameter and State Estimation', 'Joint state and parameter estimation is a core problem for dynamic Bayesian networks. Although modern probabilistic inference toolkits make it relatively easy to specify large and practically relevant probabilistic models, the silver bullet---an efficient and general online inference algorithm for such problems---remains elusive, forcing users to write special-purpose code for each application. We propose a novel blackbox algorithm -- a hybrid of particle filtering for state variables and assumed density filtering for parameter variables. It has following advantages: (a) it is efficient due to its online nature, and (b) it is applicable to both discrete and continuous parameter spaces . On a variety of toy and real models, our system is able to generate more accurate results within a fixed computation budget. This preliminary evidence indicates that the proposed approach is likely to be of practical use.', 'cs.AI', '2016-03-29T22:41:17Z', 'http://arxiv.org/abs/1603.08988v1', '2016-10-08 10:26:07', '2016-10-08 10:26:07')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPublish Load (1.3ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 931[0m
  [1m[35mAuthor Load (1.3ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Yusuf Bugra Erol'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Yusuf Bugra Erol', '2016-10-08 10:26:07', '2016-10-08 10:26:07')
  [1m[36m (0.3ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2454, 931, 0, '2016-10-08 10:26:07', '2016-10-08 10:26:07')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (1.6ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Yi Wu'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36m (0.1ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1003, 931, 1, '2016-10-08 10:26:07', '2016-10-08 10:26:07')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.6ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Lei Li'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36m (0.1ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1004, 931, 2, '2016-10-08 10:26:07', '2016-10-08 10:26:07')[0m
  [1m[35m (2.8ms)[0m  COMMIT
  [1m[36mAuthor Load (0.9ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Stuart Russell'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36m (0.2ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.4ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1005, 931, 3, '2016-10-08 10:26:07', '2016-10-08 10:26:07')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (1.1ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Local Search Yields a PTAS for k-Means in Doubling Metrics'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Local Search Yields a PTAS for k-Means in Doubling Metrics', 'The most well known and ubiquitous clustering problem encountered in nearly every branch of science is undoubtedly $k$-means: given a set of data points and a parameter $k$, select $k$ centres and partition the data points into $k$ clusters around these centres so that the sum of squares of distances of the points to their cluster centre % (called the cost of the solution) is minimized. Typically these data points lie in Euclidean space $\\mathbb{R}^d$ for some $d\\geq 2$. The most commonly used algorithm in practice is known as Lloyd-Forgy, which is also referred to as \"the\" $k$-means algorithm, and various extensions of it often work very well in practice. However, they may produce solutions whose cost is arbitrarily large compared to the optimum solution. Kanungo et al. [2004] analyzed a very simple local search heuristic to get a polynomial-time algorithm with approximation ratio $9+\\epsilon$ for any fixed $\\epsilon>0$ for $k$-means in Euclidean space. Finding an algorithm with a better worst-case approximation guarantee has remained one of the biggest open questions in this area, in particular whether one can get a true PTAS for fixed dimension Euclidean space. We settle this problem by showing that a simple local search algorithm provides a PTAS for $k$-means for $\\mathbb{R}^d$ for any fixed $d$. More precisely, for any error parameter $\\epsilon>0$, the local search algorithm that considers swaps of up to $\\rho=d^{O(d)}\\cdot{\\epsilon}^{-O(d/\\epsilon)}$ centres will produce a solution whose cost is at most $1+\\epsilon$ times greater than the optimum cost. Our analysis extends very easily to the more general setting where the metric has fixed doubling dimension and to where we are interested in minimizing the sum of the $q$-th powers of the distances for fixed $q$.', 'cs.DS', '2016-03-29T21:41:55Z', 'http://arxiv.org/abs/1603.08976v1', '2016-10-08 10:26:07', '2016-10-08 10:26:07')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPublish Load (1.2ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 932[0m
  [1m[35mAuthor Load (1.4ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Zachary Friggstad'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Zachary Friggstad', '2016-10-08 10:26:07', '2016-10-08 10:26:07')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.6ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2455, 932, 0, '2016-10-08 10:26:07', '2016-10-08 10:26:07')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (1.3ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Mohsen Rezapour'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Mohsen Rezapour', '2016-10-08 10:26:07', '2016-10-08 10:26:07')[0m
  [1m[35m (0.3ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2456, 932, 1, '2016-10-08 10:26:07', '2016-10-08 10:26:07')
  [1m[36m (0.3ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.2ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Mohammad R. Salavatipour'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Mohammad R. Salavatipour', '2016-10-08 10:26:07', '2016-10-08 10:26:07')
  [1m[36m (0.3ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.5ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2457, 932, 2, '2016-10-08 10:26:07', '2016-10-08 10:26:07')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPaper Load (1.1ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Algorithms for Batch Hierarchical Reinforcement Learning'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Algorithms for Batch Hierarchical Reinforcement Learning', 'Hierarchical Reinforcement Learning (HRL) exploits temporal abstraction to solve large Markov Decision Processes (MDP) and provide transferable subtask policies. In this paper, we introduce an off-policy HRL algorithm: Hierarchical Q-value Iteration (HQI). We show that it is possible to effectively learn recursive optimal policies for any valid hierarchical decomposition of the original MDP, given a fixed dataset collected from a flat stochastic behavioral policy. We first formally prove the convergence of the algorithm for tabular MDP. Then our experiments on the Taxi domain show that HQI converges faster than a flat Q-value Iteration and enjoys easy state abstraction. Also, we demonstrate that our algorithm is able to learn optimal policies for different hierarchical structures from the same fixed dataset, which enables model comparison without recollecting data.', 'cs.AI', '2016-03-29T18:17:17Z', 'http://arxiv.org/abs/1603.08869v1', '2016-10-08 10:26:07', '2016-10-08 10:26:07')[0m
  [1m[35m (3.0ms)[0m  COMMIT
  [1m[36mPublish Load (1.3ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 933[0m
  [1m[35mAuthor Load (1.1ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Tiancheng Zhao'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35m (0.2ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (1.0ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1411, 933, 0, '2016-10-08 10:26:07', '2016-10-08 10:26:07')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.2ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Mohammad Gowayyed'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Mohammad Gowayyed', '2016-10-08 10:26:07', '2016-10-08 10:26:07')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2458, 933, 1, '2016-10-08 10:26:07', '2016-10-08 10:26:07')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (1.0ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Using Enthymemes to Fill the Gap between Logical Argumentation and Revision of Abstract Argumentation Frameworks'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Using Enthymemes to Fill the Gap between Logical Argumentation and Revision of Abstract Argumentation Frameworks', 'In this paper, we present a preliminary work on an approach to fill the gap between logic-based argumentation and the numerous approaches to tackle the dynamics of abstract argumentation frameworks. Our idea is that, even when arguments and attacks are defined by means of a logical belief base, there may be some uncertainty about how accurate is the content of an argument, and so the presence (or absence) of attacks concerning it. We use enthymemes to illustrate this notion of uncertainty of arguments and attacks. Indeed, as argued in the literature, real arguments are often enthymemes instead of completely specified deductive arguments. This means that some parts of the pair (support, claim) may be missing because they are supposed to belong to some \"common knowledge\", and then should be deduced by the agent which receives the enthymeme. But the perception that agents have of the common knowledge may be wrong, and then a first agent may state an enthymeme that her opponent is not able to decode in an accurate way. It is likely that the decoding of the enthymeme by the agent leads to mistaken attacks between this new argument and the existing ones. In this case, the agent can receive some information about attacks or arguments acceptance statuses which disagree with her argumentation framework. We exemplify a way to incorporate this new piece of information by means of existing works on the dynamics of abstract argumentation frameworks.', 'cs.AI', '2016-03-29T14:29:00Z', 'http://arxiv.org/abs/1603.08789v1', '2016-10-08 10:26:07', '2016-10-08 10:26:07')[0m
  [1m[35m (0.3ms)[0m  COMMIT
  [1m[36mPublish Load (1.3ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 934[0m
  [1m[35mAuthor Load (2.5ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Jean-Guy Mailly'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35m (0.1ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2438, 934, 0, '2016-10-08 10:26:07', '2016-10-08 10:26:07')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (1.2ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'COCO: A Platform for Comparing Continuous Optimizers in a Black-Box Setting'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('COCO: A Platform for Comparing Continuous Optimizers in a Black-Box Setting', 'COCO is a platform for Comparing Continuous Optimizers in a black-box setting. It aims at automatizing the tedious and repetitive task of benchmarking numerical optimization algorithms to the greatest possible extent. We present the rationals behind the development of the platform as a general proposition for a guideline towards better benchmarking. We detail underlying fundamental concepts of COCO such as its definition of a problem, the idea of instances, the relevance of target values, and runtime as central performance measure. Finally, we give a quick overview of the basic code structure and the available test suites.', 'cs.AI', '2016-03-29T14:18:52Z', 'http://arxiv.org/abs/1603.08785v3', '2016-10-08 10:26:07', '2016-10-08 10:26:07')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (2.0ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 935
  [1m[36mAuthor Load (1.2ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Nikolaus Hansen'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36m (0.1ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2419, 935, 0, '2016-10-08 10:26:07', '2016-10-08 10:26:07')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (1.2ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Anne Auger'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36m (0.1ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2420, 935, 1, '2016-10-08 10:26:07', '2016-10-08 10:26:07')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (1.5ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Olaf Mersmann'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Olaf Mersmann', '2016-10-08 10:26:07', '2016-10-08 10:26:07')[0m
  [1m[35m (0.8ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2459, 935, 2, '2016-10-08 10:26:07', '2016-10-08 10:26:07')
  [1m[36m (1.2ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.4ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Tea Tusar'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35m (0.1ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2417, 935, 3, '2016-10-08 10:26:07', '2016-10-08 10:26:07')
  [1m[36m (2.7ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.5ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Dimo Brockhoff'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.3ms)[0m  [1mBEGIN[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2418, 935, 4, '2016-10-08 10:26:07', '2016-10-08 10:26:07')
  [1m[36m (0.3ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (1.2ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'COCO: The Experimental Procedure'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('COCO: The Experimental Procedure', 'We present a budget-free experimental setup and procedure for benchmarking numericaloptimization algorithms in a black-box scenario. This procedure can be applied with the COCO benchmarking platform. We describe initialization of and input to the algorithm and touch upon therelevance of termination and restarts.', 'cs.AI', '2016-03-29T14:10:14Z', 'http://arxiv.org/abs/1603.08776v2', '2016-10-08 10:26:07', '2016-10-08 10:26:07')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (1.2ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 936
  [1m[36mAuthor Load (2.1ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Nikolaus Hansen'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.3ms)[0m  BEGIN
  [1m[36m (0.2ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2419, 936, 0, '2016-10-08 10:26:07', '2016-10-08 10:26:07')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (1.1ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Tea Tusar'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36m (0.1ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2417, 936, 1, '2016-10-08 10:26:07', '2016-10-08 10:26:07')[0m
  [1m[35m (0.3ms)[0m  COMMIT
  [1m[36mAuthor Load (1.3ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Olaf Mersmann'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36m (0.1ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2459, 936, 2, '2016-10-08 10:26:07', '2016-10-08 10:26:07')[0m
  [1m[35m (0.3ms)[0m  COMMIT
  [1m[36mAuthor Load (2.1ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Anne Auger'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36m (0.1ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2420, 936, 3, '2016-10-08 10:26:07', '2016-10-08 10:26:07')[0m
  [1m[35m (0.3ms)[0m  COMMIT
  [1m[36mAuthor Load (1.3ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Dimo Brockhoff'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36m (0.1ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2418, 936, 4, '2016-10-08 10:26:07', '2016-10-08 10:26:07')[0m
  [1m[35m (0.3ms)[0m  COMMIT
  [1m[36mPaper Load (1.2ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Properties of ABA+ for Non-Monotonic Reasoning'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.5ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Properties of ABA+ for Non-Monotonic Reasoning', 'We investigate properties of ABA+, a formalism that extends the well studied structured argumentation formalism Assumption-Based Argumentation (ABA) with a preference handling mechanism. In particular, we establish desirable properties that ABA+ semantics exhibit. These pave way to the satisfaction by ABA+ of some (arguably) desirable principles of preference handling in argumentation and non-monotonic reasoning, as well as non-monotonic inference properties of ABA+ under various semantics.', 'cs.AI', '2016-03-29T10:37:38Z', 'http://arxiv.org/abs/1603.08714v1', '2016-10-08 10:26:07', '2016-10-08 10:26:07')[0m
  [1m[35m (2.5ms)[0m  COMMIT
  [1m[36mPublish Load (1.3ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 937[0m
  [1m[35mAuthor Load (1.2ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Kristijonas Cyras'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Kristijonas Cyras', '2016-10-08 10:26:07', '2016-10-08 10:26:07')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2460, 937, 0, '2016-10-08 10:26:07', '2016-10-08 10:26:07')[0m
  [1m[35m (0.3ms)[0m  COMMIT
  [1m[36mAuthor Load (1.6ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Francesca Toni'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Francesca Toni', '2016-10-08 10:26:07', '2016-10-08 10:26:07')[0m
  [1m[35m (0.3ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.4ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2461, 937, 1, '2016-10-08 10:26:07', '2016-10-08 10:26:07')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (1.2ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Shuffle and Learn: Unsupervised Learning using Temporal Order Verification'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Shuffle and Learn: Unsupervised Learning using Temporal Order Verification', 'In this paper, we present an approach for learning a visual representation from the raw spatiotemporal signals in videos. Our representation is learned without supervision from semantic labels. We formulate our method as an unsupervised sequential verification task, i.e., we determine whether a sequence of frames from a video is in the correct temporal order. With this simple task and no semantic labels, we learn a powerful visual representation using a Convolutional Neural Network (CNN). The representation contains complementary information to that learned from supervised image datasets like ImageNet. Qualitative results show that our method captures information that is temporally varying, such as human pose. When used as pre-training for action recognition, our method gives significant gains over learning without external data on benchmark datasets like UCF101 and HMDB51. To demonstrate its sensitivity to human pose, we show results for pose estimation on the FLIC and MPII datasets that are competitive, or better than approaches using significantly more supervision. Our method can be combined with supervised representations to provide an additional boost in accuracy.', 'cs.CV', '2016-03-28T21:00:43Z', 'http://arxiv.org/abs/1603.08561v2', '2016-10-08 10:26:07', '2016-10-08 10:26:07')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (1.2ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 938
  [1m[36mAuthor Load (1.2ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Ishan Misra'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36m (0.1ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.8ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2272, 938, 0, '2016-10-08 10:26:07', '2016-10-08 10:26:07')[0m
  [1m[35m (2.9ms)[0m  COMMIT
  [1m[36mAuthor Load (0.4ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'C. Lawrence Zitnick'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36m (0.1ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (205, 938, 1, '2016-10-08 10:26:07', '2016-10-08 10:26:07')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.5ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Martial Hebert'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36m (0.1ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (569, 938, 2, '2016-10-08 10:26:07', '2016-10-08 10:26:07')[0m
  [1m[35m (0.3ms)[0m  COMMIT
  [1m[36mPaper Load (1.6ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Generating Visual Explanations'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Generating Visual Explanations', 'Clearly explaining a rationale for a classification decision to an end-user can be as important as the decision itself. Existing approaches for deep visual recognition are generally opaque and do not output any justification text; contemporary vision-language models can describe image content but fail to take into account class-discriminative image aspects which justify visual predictions. We propose a new model that focuses on the discriminating properties of the visible object, jointly predicts a class label, and explains why the predicted label is appropriate for the image. We propose a novel loss function based on sampling and reinforcement learning that learns to generate sentences that realize a global sentence property, such as class specificity. Our results on a fine-grained bird species classification dataset show that our model is able to generate explanations which are not only consistent with an image but also more discriminative than descriptions produced by existing captioning methods.', 'cs.CV', '2016-03-28T19:54:12Z', 'http://arxiv.org/abs/1603.08507v1', '2016-10-08 10:26:07', '2016-10-08 10:26:07')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPublish Load (1.3ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 939[0m
  [1m[35mAuthor Load (1.2ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Lisa Anne Hendricks'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Lisa Anne Hendricks', '2016-10-08 10:26:07', '2016-10-08 10:26:07')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2462, 939, 0, '2016-10-08 10:26:07', '2016-10-08 10:26:07')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (1.3ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Zeynep Akata'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Zeynep Akata', '2016-10-08 10:26:07', '2016-10-08 10:26:07')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.3ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2463, 939, 1, '2016-10-08 10:26:07', '2016-10-08 10:26:07')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.0ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Marcus Rohrbach'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35m (0.1ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1487, 939, 2, '2016-10-08 10:26:07', '2016-10-08 10:26:07')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.8ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Jeff Donahue'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35m (0.1ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1559, 939, 3, '2016-10-08 10:26:07', '2016-10-08 10:26:07')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.9ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Bernt Schiele'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35m (0.3ms)[0m  COMMIT
  [1m[36m (0.4ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (606, 939, 4, '2016-10-08 10:26:07', '2016-10-08 10:26:07')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.9ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Trevor Darrell'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35m (0.1ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1486, 939, 5, '2016-10-08 10:26:07', '2016-10-08 10:26:07')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (1.1ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Towards Machine Intelligence'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Towards Machine Intelligence', 'There exists a theory of a single general-purpose learning algorithm which could explain the principles of its operation. This theory assumes that the brain has some initial rough architecture, a small library of simple innate circuits which are prewired at birth and proposes that all significant mental algorithms can be learned. Given current understanding and observations, this paper reviews and lists the ingredients of such an algorithm from both architectural and functional perspectives.', 'cs.AI', '2016-03-27T22:01:59Z', 'http://arxiv.org/abs/1603.08262v1', '2016-10-08 10:26:07', '2016-10-08 10:26:07')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (2.1ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 940
  [1m[36mAuthor Load (1.4ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Kamil Rocki'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Kamil Rocki', '2016-10-08 10:26:07', '2016-10-08 10:26:07')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2464, 940, 0, '2016-10-08 10:26:07', '2016-10-08 10:26:07')
  [1m[36m (0.3ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (1.1ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Negative Learning Rates and P-Learning'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Negative Learning Rates and P-Learning', 'We present a method of training a differentiable function approximator for a regression task using negative examples. We effect this training using negative learning rates. We also show how this method can be used to perform direct policy learning in a reinforcement learning setting.', 'cs.AI', '2016-03-27T20:02:13Z', 'http://arxiv.org/abs/1603.08253v2', '2016-10-08 10:26:07', '2016-10-08 10:26:07')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (1.3ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 941
  [1m[36mAuthor Load (1.6ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Devon Merrill'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Devon Merrill', '2016-10-08 10:26:07', '2016-10-08 10:26:07')[0m
  [1m[35m (2.8ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2465, 941, 0, '2016-10-08 10:26:07', '2016-10-08 10:26:07')
  [1m[36m (0.6ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (1.7ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Do You See What I Mean? Visual Resolution of Linguistic Ambiguities'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.3ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Do You See What I Mean? Visual Resolution of Linguistic Ambiguities', 'Understanding language goes hand in hand with the ability to integrate complex contextual information obtained via perception. In this work, we present a novel task for grounded language understanding: disambiguating a sentence given a visual scene which depicts one of the possible interpretations of that sentence. To this end, we introduce a new multimodal corpus containing ambiguous sentences, representing a wide range of syntactic, semantic and discourse ambiguities, coupled with videos that visualize the different interpretations for each sentence. We address this task by extending a vision model which determines if a sentence is depicted by a video. We demonstrate how such a model can be adjusted to recognize different interpretations of the same underlying sentence, allowing to disambiguate sentences in a unified fashion across the different ambiguity types.', 'cs.CV', '2016-03-26T06:49:33Z', 'http://arxiv.org/abs/1603.08079v1', '2016-10-08 10:26:07', '2016-10-08 10:26:07')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (1.7ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 942
  [1m[36mAuthor Load (1.2ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Yevgeni Berzak'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Yevgeni Berzak', '2016-10-08 10:26:07', '2016-10-08 10:26:07')[0m
  [1m[35m (0.3ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2466, 942, 0, '2016-10-08 10:26:07', '2016-10-08 10:26:07')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.2ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Andrei Barbu'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.4ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Andrei Barbu', '2016-10-08 10:26:07', '2016-10-08 10:26:07')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2467, 942, 1, '2016-10-08 10:26:07', '2016-10-08 10:26:07')[0m
  [1m[35m (0.3ms)[0m  COMMIT
  [1m[36mAuthor Load (1.2ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Daniel Harari'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Daniel Harari', '2016-10-08 10:26:07', '2016-10-08 10:26:07')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2468, 942, 2, '2016-10-08 10:26:07', '2016-10-08 10:26:07')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.6ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Boris Katz'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.7ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Boris Katz', '2016-10-08 10:26:07', '2016-10-08 10:26:07')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2469, 942, 3, '2016-10-08 10:26:07', '2016-10-08 10:26:07')[0m
  [1m[35m (0.3ms)[0m  COMMIT
  [1m[36mAuthor Load (1.2ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Shimon Ullman'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Shimon Ullman', '2016-10-08 10:26:07', '2016-10-08 10:26:07')[0m
  [1m[35m (0.3ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2470, 942, 4, '2016-10-08 10:26:07', '2016-10-08 10:26:07')
  [1m[36m (0.3ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (1.1ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'How NOT To Evaluate Your Dialogue System: An Empirical Study of Unsupervised Evaluation Metrics for Dialogue Response Generation'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('How NOT To Evaluate Your Dialogue System: An Empirical Study of Unsupervised Evaluation Metrics for Dialogue Response Generation', 'We investigate evaluation metrics for end-to-end dialogue systems where supervised labels, such as task completion, are not available. Recent works in end-to-end dialogue systems have adopted metrics from machine translation and text summarization to compare a model\'s generated response to a single target response. We show that these metrics correlate very weakly or not at all with human judgements of the response quality in both technical and non-technical domains. We provide quantitative and qualitative results highlighting specific weaknesses in existing metrics, and provide recommendations for future development of better automatic evaluation metrics for dialogue systems.', 'cs.CL', '2016-03-25T20:32:21Z', 'http://arxiv.org/abs/1603.08023v1', '2016-10-08 10:26:07', '2016-10-08 10:26:07')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (1.2ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 943
  [1m[36mAuthor Load (1.3ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Chia-Wei Liu'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Chia-Wei Liu', '2016-10-08 10:26:07', '2016-10-08 10:26:07')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2471, 943, 0, '2016-10-08 10:26:07', '2016-10-08 10:26:07')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.2ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Ryan Lowe'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35m (0.2ms)[0m  COMMIT
  [1m[36m (0.4ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1770, 943, 1, '2016-10-08 10:26:07', '2016-10-08 10:26:07')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.1ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Iulian V. Serban'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Iulian V. Serban', '2016-10-08 10:26:07', '2016-10-08 10:26:07')
  [1m[36m (2.8ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2472, 943, 2, '2016-10-08 10:26:07', '2016-10-08 10:26:07')[0m
  [1m[35m (0.3ms)[0m  COMMIT
  [1m[36mAuthor Load (1.4ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Michael Noseworthy'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Michael Noseworthy', '2016-10-08 10:26:07', '2016-10-08 10:26:07')[0m
  [1m[35m (0.6ms)[0m  COMMIT
  [1m[36m (0.4ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2473, 943, 3, '2016-10-08 10:26:07', '2016-10-08 10:26:07')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.3ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Laurent Charlin'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35m (0.1ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1771, 943, 4, '2016-10-08 10:26:07', '2016-10-08 10:26:07')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.3ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Joelle Pineau'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35m (0.1ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (13, 943, 5, '2016-10-08 10:26:07', '2016-10-08 10:26:07')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (1.1ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'A Novel Biologically Mechanism-Based Visual Cognition Model--Automatic Extraction of Semantics, Formation of Integrated Concepts and Re-selection Features for Ambiguity'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('A Novel Biologically Mechanism-Based Visual Cognition Model--Automatic Extraction of Semantics, Formation of Integrated Concepts and Re-selection Features for Ambiguity', 'Integration between biology and information science benefits both fields. Many related models have been proposed, such as computational visual cognition models, computational motor control models, integrations of both and so on. In general, the robustness and precision of recognition is one of the key problems for object recognition models. In this paper, inspired by features of human recognition process and their biological mechanisms, a new integrated and dynamic framework is proposed to mimic the semantic extraction, concept formation and feature re-selection in human visual processing. The main contributions of the proposed model are as follows: (1) Semantic feature extraction: Local semantic features are learnt from episodic features that are extracted from raw images through a deep neural network; (2) Integrated concept formation: Concepts are formed with local semantic information and structural information learnt through network. (3) Feature re-selection: When ambiguity is detected during recognition process, distinctive features according to the difference between ambiguous candidates are re-selected for recognition. Experimental results on hand-written digits and facial shape dataset show that, compared with other methods, the new proposed model exhibits higher robustness and precision for visual recognition, especially in the condition when input samples are smantic ambiguous. Meanwhile, the introduced biological mechanisms further strengthen the interaction between neuroscience and information science.', 'cs.CV', '2016-03-25T11:47:16Z', 'http://arxiv.org/abs/1603.07886v1', '2016-10-08 10:26:07', '2016-10-08 10:26:07')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (1.5ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 944
  [1m[36mAuthor Load (1.2ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Peijie Yin'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Peijie Yin', '2016-10-08 10:26:07', '2016-10-08 10:26:07')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2474, 944, 0, '2016-10-08 10:26:07', '2016-10-08 10:26:07')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.7ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Hong Qiao'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Hong Qiao', '2016-10-08 10:26:07', '2016-10-08 10:26:07')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2475, 944, 1, '2016-10-08 10:26:07', '2016-10-08 10:26:07')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (1.3ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Wei Wu'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Wei Wu', '2016-10-08 10:26:07', '2016-10-08 10:26:07')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2476, 944, 2, '2016-10-08 10:26:07', '2016-10-08 10:26:07')
  [1m[36m (0.3ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.4ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Lu Qi'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Lu Qi', '2016-10-08 10:26:07', '2016-10-08 10:26:07')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2477, 944, 3, '2016-10-08 10:26:07', '2016-10-08 10:26:07')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (1.4ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'YinLin Li'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('YinLin Li', '2016-10-08 10:26:07', '2016-10-08 10:26:07')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2478, 944, 4, '2016-10-08 10:26:07', '2016-10-08 10:26:07')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.4ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Shanlin Zhong'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.4ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Shanlin Zhong', '2016-10-08 10:26:07', '2016-10-08 10:26:07')
  [1m[36m (0.7ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2479, 944, 5, '2016-10-08 10:26:07', '2016-10-08 10:26:07')[0m
  [1m[35m (2.7ms)[0m  COMMIT
  [1m[36mAuthor Load (1.7ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Bo Zhang'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Bo Zhang', '2016-10-08 10:26:07', '2016-10-08 10:26:07')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2480, 944, 6, '2016-10-08 10:26:07', '2016-10-08 10:26:07')
  [1m[36m (0.3ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (1.8ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Disentangling Nonlinear Perceptual Embeddings With Multi-Query Triplet Networks'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.4ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Disentangling Nonlinear Perceptual Embeddings With Multi-Query Triplet Networks', 'In typical perceptual tasks, higher-order concepts are inferred from visual features to assist with perceptual decision making. However, there is a multitude of visual concepts which can be inferred from a single stimulus. When learning nonlinear embeddings with siamese or triplet networks from similarities, we typically assume they are sourced from a single visual concept. In this paper, we are concerned with the hypothesis that it can be potentially harmful to ignore the heterogeneity of concepts affiliated with observed similarities when learning these embedding networks. We demonstrate empirically that this hypothesis holds and suggest an approach that deals with these shortcomings, by combining multiple notions of similarities in one compact system. We propose Multi-Query Networks (MQNs) that leverage recent advances in representation learning on factorized triplet embeddings in combination with Convolutional Networks in order to learn embeddings differentiated into semantically distinct subspaces, which are learned with a latent space attention mechanism. We show that the resulting model learns visually relevant semantic subspaces with features that do not only outperform single triplet networks, but even sets of concept specific networks.', 'cs.CV', '2016-03-25T02:52:02Z', 'http://arxiv.org/abs/1603.07810v1', '2016-10-08 10:26:07', '2016-10-08 10:26:07')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (1.7ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 945
  [1m[36mAuthor Load (1.4ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Andreas Veit'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36m (0.2ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1752, 945, 0, '2016-10-08 10:26:07', '2016-10-08 10:26:07')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (1.0ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Serge Belongie'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36m (0.2ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.3ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1684, 945, 1, '2016-10-08 10:26:07', '2016-10-08 10:26:07')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (1.2ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Theofanis Karaletsos'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Theofanis Karaletsos', '2016-10-08 10:26:07', '2016-10-08 10:26:07')[0m
  [1m[35m (0.3ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2481, 945, 2, '2016-10-08 10:26:07', '2016-10-08 10:26:07')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (1.0ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Probabilistic Reasoning via Deep Learning: Neural Association Models'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Probabilistic Reasoning via Deep Learning: Neural Association Models', 'In this paper, we propose a new deep learning approach, called neural association model (NAM), for probabilistic reasoning in artificial intelligence. We propose to use neural networks to model association between any two events in a domain. Neural networks take one event as input and compute a conditional probability of the other event to model how likely these two events are to be associated. The actual meaning of the conditional probabilities varies between applications and depends on how the models are trained. In this work, as two case studies, we have investigated two NAM structures, namely deep neural networks (DNN) and relation-modulated neural nets (RMNN), on several probabilistic reasoning tasks in AI, including recognizing textual entailment, triple classification in multi-relational knowledge bases and commonsense reasoning. Experimental results on several popular datasets derived from WordNet, FreeBase and ConceptNet have all demonstrated that both DNNs and RMNNs perform equally well and they can significantly outperform the conventional methods available for these reasoning tasks. Moreover, compared with DNNs, RMNNs are superior in knowledge transfer, where a pre-trained model can be quickly extended to an unseen relation after observing only a few training samples. To further prove the effectiveness of the proposed models, in this work, we have applied NAMs to solving challenging Winograd Schema (WS) problems. Experiments conducted on a set of WS problems prove that the proposed models have the potential for commonsense reasoning.', 'cs.AI', '2016-03-24T18:54:18Z', 'http://arxiv.org/abs/1603.07704v2', '2016-10-08 10:26:07', '2016-10-08 10:26:07')
  [1m[36m (3.1ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (1.7ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 946
  [1m[36mAuthor Load (1.4ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Quan Liu'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Quan Liu', '2016-10-08 10:26:07', '2016-10-08 10:26:07')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2482, 946, 0, '2016-10-08 10:26:07', '2016-10-08 10:26:07')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.4ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Hui Jiang'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35m (0.1ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1980, 946, 1, '2016-10-08 10:26:07', '2016-10-08 10:26:07')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.9ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Andrew Evdokimov'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Andrew Evdokimov', '2016-10-08 10:26:07', '2016-10-08 10:26:07')
  [1m[36m (0.6ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2483, 946, 2, '2016-10-08 10:26:07', '2016-10-08 10:26:07')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (1.3ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Zhen-Hua Ling'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Zhen-Hua Ling', '2016-10-08 10:26:07', '2016-10-08 10:26:07')[0m
  [1m[35m (0.3ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2484, 946, 3, '2016-10-08 10:26:07', '2016-10-08 10:26:07')
  [1m[36m (0.3ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (2.0ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Xiaodan Zhu'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Xiaodan Zhu', '2016-10-08 10:26:07', '2016-10-08 10:26:07')
  [1m[36m (1.6ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.3ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2485, 946, 4, '2016-10-08 10:26:07', '2016-10-08 10:26:07')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (1.5ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Si Wei'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Si Wei', '2016-10-08 10:26:07', '2016-10-08 10:26:07')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2486, 946, 5, '2016-10-08 10:26:07', '2016-10-08 10:26:07')
  [1m[36m (0.6ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.3ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Yu Hu'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Yu Hu', '2016-10-08 10:26:07', '2016-10-08 10:26:07')
  [1m[36m (0.6ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2487, 946, 6, '2016-10-08 10:26:07', '2016-10-08 10:26:07')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (1.0ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'An Expressive Probabilistic Temporal Logic'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('An Expressive Probabilistic Temporal Logic', 'This paper argues that a combined treatment of probabilities, time and actions is essential for an appropriate logical account of the notion of probability; and, based on this intuition, describes an expressive probabilistic temporal logic for reasoning about actions with uncertain outcomes. The logic is modal and higher-order: modalities annotated by actions are used to express possibility and necessity of propositions in the next states resulting from the actions, and a higher-order function is needed to express the probability operator. The proposed logic is shown to be an adequate extension of classical mathematical probability theory, and its expressiveness is illustrated through the formalization of the Monty Hall problem.', 'cs.LO', '2016-03-24T07:00:33Z', 'http://arxiv.org/abs/1603.07453v1', '2016-10-08 10:26:07', '2016-10-08 10:26:07')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPublish Load (1.6ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 947[0m
  [1m[35mAuthor Load (1.3ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Bruno Woltzenlogel Paleo'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Bruno Woltzenlogel Paleo', '2016-10-08 10:26:07', '2016-10-08 10:26:07')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2488, 947, 0, '2016-10-08 10:26:07', '2016-10-08 10:26:07')[0m
  [1m[35m (0.3ms)[0m  COMMIT
  [1m[36mPaper Load (1.0ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Pixel-Level Domain Transfer'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Pixel-Level Domain Transfer', 'We present an image-conditional image generation model. The model transfers an input domain to a target domain in semantic level, and generates the target image in pixel level. To generate realistic target images, we employ the real/fake-discriminator as in Generative Adversarial Nets, but also introduce a novel domain-discriminator to make the generated image relevant to the input image. We verify our model through a challenging task of generating a piece of clothing from an input image of a dressed person. We present a high quality clothing dataset containing the two domains, and succeed in demonstrating decent results.', 'cs.CV', '2016-03-24T05:20:59Z', 'http://arxiv.org/abs/1603.07442v2', '2016-10-08 10:26:07', '2016-10-08 10:26:07')[0m
  [1m[35m (0.3ms)[0m  COMMIT
  [1m[36mPublish Load (1.3ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 948[0m
  [1m[35mAuthor Load (1.3ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Donggeun Yoo'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Donggeun Yoo', '2016-10-08 10:26:07', '2016-10-08 10:26:07')
  [1m[36m (3.0ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2489, 948, 0, '2016-10-08 10:26:07', '2016-10-08 10:26:07')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (1.5ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Namil Kim'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Namil Kim', '2016-10-08 10:26:07', '2016-10-08 10:26:07')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2490, 948, 1, '2016-10-08 10:26:07', '2016-10-08 10:26:07')
  [1m[36m (1.2ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.5ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Sunggyun Park'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Sunggyun Park', '2016-10-08 10:26:07', '2016-10-08 10:26:07')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2491, 948, 2, '2016-10-08 10:26:07', '2016-10-08 10:26:07')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (1.2ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Anthony S. Paek'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Anthony S. Paek', '2016-10-08 10:26:07', '2016-10-08 10:26:07')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2492, 948, 3, '2016-10-08 10:26:07', '2016-10-08 10:26:07')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.2ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'In So Kweon'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('In So Kweon', '2016-10-08 10:26:07', '2016-10-08 10:26:07')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2493, 948, 4, '2016-10-08 10:26:07', '2016-10-08 10:26:07')[0m
  [1m[35m (0.6ms)[0m  COMMIT
  [1m[36mPaper Load (1.0ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Load Disaggregation Based on Aided Linear Integer Programming'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Load Disaggregation Based on Aided Linear Integer Programming', 'Load disaggregation based on aided linear integer programming (ALIP) is proposed. We start with a conventional linear integer programming (IP) based disaggregation and enhance it in several ways. The enhancements include additional constraints, correction based on a state diagram, median filtering, and linear programming-based refinement. With the aid of these enhancements, the performance of IP-based disaggregation is significantly improved. The proposed ALIP system relies only on the instantaneous load samples instead of waveform signatures, and hence does not crucially depend on high sampling frequency. Experimental results show that the proposed ALIP system performs better than the conventional IP-based load disaggregation system.', 'cs.AI', '2016-03-24T02:54:45Z', 'http://dx.doi.org/10.1109/TCSII.2016.2603479', '2016-10-08 10:26:07', '2016-10-08 10:26:07')[0m
  [1m[35m (1.8ms)[0m  COMMIT
  [1m[36mPublish Load (2.0ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 949[0m
  [1m[35mAuthor Load (1.1ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Md. Zulfiquar Ali Bhotto'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Md. Zulfiquar Ali Bhotto', '2016-10-08 10:26:07', '2016-10-08 10:26:07')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2494, 949, 0, '2016-10-08 10:26:07', '2016-10-08 10:26:07')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (1.5ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Stephen Makonin'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Stephen Makonin', '2016-10-08 10:26:07', '2016-10-08 10:26:07')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2495, 949, 1, '2016-10-08 10:26:07', '2016-10-08 10:26:07')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.1ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Ivan V. Bajic'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Ivan V. Bajic', '2016-10-08 10:26:07', '2016-10-08 10:26:07')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2496, 949, 2, '2016-10-08 10:26:07', '2016-10-08 10:26:07')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPaper Load (1.0ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'A Diagram Is Worth A Dozen Images'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('A Diagram Is Worth A Dozen Images', 'Diagrams are common tools for representing complex concepts, relationships and events, often when it would be difficult to portray the same information with natural images. Understanding natural images has been extensively studied in computer vision, while diagram understanding has received little attention. In this paper, we study the problem of diagram interpretation and reasoning, the challenging task of identifying the structure of a diagram and the semantics of its constituents and their relationships. We introduce Diagram Parse Graphs (DPG) as our representation to model the structure of diagrams. We define syntactic parsing of diagrams as learning to infer DPGs for diagrams and study semantic interpretation and reasoning of diagrams in the context of diagram question answering. We devise an LSTM-based method for syntactic parsing of diagrams and introduce a DPG-based attention model for diagram question answering. We compile a new dataset of diagrams with exhaustive annotations of constituents and relationships for over 5,000 diagrams and 15,000 questions and answers. Our results show the significance of our models for syntactic parsing and question answering in diagrams using DPGs.', 'cs.CV', '2016-03-24T00:02:58Z', 'http://arxiv.org/abs/1603.07396v1', '2016-10-08 10:26:07', '2016-10-08 10:26:07')[0m
  [1m[35m (2.9ms)[0m  COMMIT
  [1m[36mPublish Load (2.4ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 950[0m
  [1m[35mAuthor Load (1.4ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Aniruddha Kembhavi'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Aniruddha Kembhavi', '2016-10-08 10:26:07', '2016-10-08 10:26:07')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2497, 950, 0, '2016-10-08 10:26:07', '2016-10-08 10:26:07')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (1.3ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Mike Salvato'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Mike Salvato', '2016-10-08 10:26:07', '2016-10-08 10:26:07')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2498, 950, 1, '2016-10-08 10:26:07', '2016-10-08 10:26:07')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.6ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Eric Kolve'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Eric Kolve', '2016-10-08 10:26:07', '2016-10-08 10:26:07')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2499, 950, 2, '2016-10-08 10:26:07', '2016-10-08 10:26:07')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (1.7ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Minjoon Seo'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Minjoon Seo', '2016-10-08 10:26:07', '2016-10-08 10:26:07')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2500, 950, 3, '2016-10-08 10:26:07', '2016-10-08 10:26:07')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.2ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Hannaneh Hajishirzi'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Hannaneh Hajishirzi', '2016-10-08 10:26:07', '2016-10-08 10:26:07')
  [1m[36m (0.3ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2501, 950, 4, '2016-10-08 10:26:07', '2016-10-08 10:26:07')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (1.3ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Ali Farhadi'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Ali Farhadi', '2016-10-08 10:26:07', '2016-10-08 10:26:07')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2502, 950, 5, '2016-10-08 10:26:07', '2016-10-08 10:26:07')
  [1m[36m (0.3ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (1.1ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'On the Theory and Practice of Privacy-Preserving Bayesian Data Analysis'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.5ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('On the Theory and Practice of Privacy-Preserving Bayesian Data Analysis', 'Bayesian inference has great promise for the privacy-preserving analysis of sensitive data, as posterior sampling automatically preserves differential privacy, an algorithmic notion of data privacy, under certain conditions (Dimitrakakis et al., 2014; Wang et al., 2015). While this one posterior sample (OPS) approach elegantly provides privacy \"for free,\" it is data inefficient in the sense of asymptotic relative efficiency (ARE). We show that a simple alternative based on the Laplace mechanism, the workhorse of differential privacy, is as asymptotically efficient as non-private posterior inference, under general assumptions. This technique also has practical advantages including efficient use of the privacy budget for MCMC. We demonstrate the practicality of our approach on a time-series analysis of sensitive military records from the Afghanistan and Iraq wars disclosed by the Wikileaks organization.', 'cs.LG', '2016-03-23T18:31:05Z', 'http://arxiv.org/abs/1603.07294v2', '2016-10-08 10:26:07', '2016-10-08 10:26:07')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (1.4ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 951
  [1m[36mAuthor Load (1.1ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'James Foulds'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('James Foulds', '2016-10-08 10:26:07', '2016-10-08 10:26:07')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2503, 951, 0, '2016-10-08 10:26:07', '2016-10-08 10:26:07')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.2ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Joseph Geumlek'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Joseph Geumlek', '2016-10-08 10:26:07', '2016-10-08 10:26:07')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2504, 951, 1, '2016-10-08 10:26:07', '2016-10-08 10:26:07')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (1.1ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Max Welling'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36m (0.1ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1689, 951, 2, '2016-10-08 10:26:07', '2016-10-08 10:26:07')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (1.0ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Kamalika Chaudhuri'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36m (0.1ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1721, 951, 3, '2016-10-08 10:26:07', '2016-10-08 10:26:07')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPaper Load (1.0ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Debugging Machine Learning Tasks'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Debugging Machine Learning Tasks', 'Unlike traditional programs (such as operating systems or word processors) which have large amounts of code, machine learning tasks use programs with relatively small amounts of code (written in machine learning libraries), but voluminous amounts of data. Just like developers of traditional programs debug errors in their code, developers of machine learning tasks debug and fix errors in their data. However, algorithms and tools for debugging and fixing errors in data are less common, when compared to their counterparts for detecting and fixing errors in code. In this paper, we consider classification tasks where errors in training data lead to misclassifications in test points, and propose an automated method to find the root causes of such misclassifications. Our root cause analysis is based on Pearl\'s theory of causation, and uses Pearl\'s PS (Probability of Sufficiency) as a scoring metric. Our implementation, Psi, encodes the computation of PS as a probabilistic program, and uses recent work on probabilistic programs and transformations on probabilistic programs (along with gray-box models of machine learning algorithms) to efficiently compute PS. Psi is able to identify root causes of data errors in interesting data sets.', 'cs.LG', '2016-03-23T18:30:37Z', 'http://arxiv.org/abs/1603.07292v1', '2016-10-08 10:26:07', '2016-10-08 10:26:07')[0m
  [1m[35m (2.9ms)[0m  COMMIT
  [1m[36mPublish Load (2.2ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 952[0m
  [1m[35mAuthor Load (1.4ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Aleksandar Chakarov'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Aleksandar Chakarov', '2016-10-08 10:26:07', '2016-10-08 10:26:07')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2505, 952, 0, '2016-10-08 10:26:07', '2016-10-08 10:26:07')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (1.1ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Aditya Nori'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Aditya Nori', '2016-10-08 10:26:07', '2016-10-08 10:26:07')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2506, 952, 1, '2016-10-08 10:26:07', '2016-10-08 10:26:07')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.2ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Sriram Rajamani'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Sriram Rajamani', '2016-10-08 10:26:07', '2016-10-08 10:26:07')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2507, 952, 2, '2016-10-08 10:26:07', '2016-10-08 10:26:07')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (1.3ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Shayak Sen'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Shayak Sen', '2016-10-08 10:26:07', '2016-10-08 10:26:07')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2508, 952, 3, '2016-10-08 10:26:07', '2016-10-08 10:26:07')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.5ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Deepak Vijaykeerthy'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Deepak Vijaykeerthy', '2016-10-08 10:26:07', '2016-10-08 10:26:07')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.3ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2509, 952, 4, '2016-10-08 10:26:07', '2016-10-08 10:26:07')[0m
  [1m[35m (1.2ms)[0m  COMMIT
  [1m[36mPaper Load (1.1ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Cosolver2B: An Efficient Local Search Heuristic for the Travelling Thief Problem'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Cosolver2B: An Efficient Local Search Heuristic for the Travelling Thief Problem', 'Real-world problems are very difficult to optimize. However, many researchers have been solving benchmark problems that have been extensively investigated for the last decades even if they have very few direct applications. The Traveling Thief Problem (TTP) is a NP-hard optimization problem that aims to provide a more realistic model. TTP targets particularly routing problem under packing/loading constraints which can be found in supply chain management and transportation. In this paper, TTP is presented and formulated mathematically. A combined local search algorithm is proposed and compared with Random Local Search (RLS) and Evolutionary Algorithm (EA). The obtained results are quite promising since new better solutions were found.', 'cs.AI', '2016-03-23T02:30:35Z', 'http://arxiv.org/abs/1603.07051v1', '2016-10-08 10:26:07', '2016-10-08 10:26:07')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPublish Load (1.4ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 953[0m
  [1m[35mAuthor Load (0.8ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Mohamed El Yafrani'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35m (0.1ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1163, 953, 0, '2016-10-08 10:26:07', '2016-10-08 10:26:07')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.8ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Belaïd Ahiod'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35m (0.1ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1164, 953, 1, '2016-10-08 10:26:07', '2016-10-08 10:26:07')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (1.2ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Comparing Human and Automated Evaluation of Open-Ended Student Responses to Questions of Evolution'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Comparing Human and Automated Evaluation of Open-Ended Student Responses to Questions of Evolution', 'Written responses can provide a wealth of data in understanding student reasoning on a topic. Yet they are time- and labor-intensive to score, requiring many instructors to forego them except as limited parts of summative assessments at the end of a unit or course. Recent developments in Machine Learning (ML) have produced computational methods of scoring written responses for the presence or absence of specific concepts. Here, we compare the scores from one particular ML program -- EvoGrader -- to human scoring of responses to structurally- and content-similar questions that are distinct from the ones the program was trained on. We find that there is substantial inter-rater reliability between the human and ML scoring. However, sufficient systematic differences remain between the human and ML scoring that we advise only using the ML scoring for formative, rather than summative, assessment of student reasoning.', 'cs.AI', '2016-03-22T23:36:02Z', 'http://arxiv.org/abs/1603.07029v1', '2016-10-08 10:26:07', '2016-10-08 10:26:07')
  [1m[36m (3.0ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (2.2ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 954
  [1m[36mAuthor Load (1.5ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Michael J Wiser'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Michael J Wiser', '2016-10-08 10:26:07', '2016-10-08 10:26:07')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2510, 954, 0, '2016-10-08 10:26:07', '2016-10-08 10:26:07')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.2ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Louise S Mead'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Louise S Mead', '2016-10-08 10:26:07', '2016-10-08 10:26:07')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2511, 954, 1, '2016-10-08 10:26:07', '2016-10-08 10:26:07')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (1.1ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'James J Smith'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('James J Smith', '2016-10-08 10:26:07', '2016-10-08 10:26:07')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2512, 954, 2, '2016-10-08 10:26:07', '2016-10-08 10:26:07')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.4ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Robert T Pennock'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Robert T Pennock', '2016-10-08 10:26:07', '2016-10-08 10:26:07')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2513, 954, 3, '2016-10-08 10:26:07', '2016-10-08 10:26:07')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (1.0ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Feeling the Bern: Adaptive Estimators for Bernoulli Probabilities of Pairwise Comparisons'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Feeling the Bern: Adaptive Estimators for Bernoulli Probabilities of Pairwise Comparisons', 'We study methods for aggregating pairwise comparison data in order to estimate outcome probabilities for future comparisons among a collection of n items. Working within a flexible framework that imposes only a form of strong stochastic transitivity (SST), we introduce an adaptivity index defined by the indifference sets of the pairwise comparison probabilities. In addition to measuring the usual worst-case risk of an estimator, this adaptivity index also captures the extent to which the estimator adapts to instance-specific difficulty relative to an oracle estimator. We prove three main results that involve this adaptivity index and different algorithms. First, we propose a three-step estimator termed Count-Randomize-Least squares (CRL), and show that it has adaptivity index upper bounded as $\\sqrt{n}$ up to logarithmic factors. We then show that that conditional on the hardness of planted clique, no computationally efficient estimator can achieve an adaptivity index smaller than $\\sqrt{n}$. Second, we show that a regularized least squares estimator can achieve a poly-logarithmic adaptivity index, thereby demonstrating a $\\sqrt{n}$-gap between optimal and computationally achievable adaptivity. Finally, we prove that the standard least squares estimator, which is known to be optimally adaptive in several closely related problems, fails to adapt in the context of estimating pairwise probabilities.', 'cs.LG', '2016-03-22T17:28:08Z', 'http://arxiv.org/abs/1603.06881v1', '2016-10-08 10:26:07', '2016-10-08 10:26:07')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPublish Load (1.3ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 955[0m
  [1m[35mAuthor Load (0.6ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Nihar B. Shah'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35m (0.1ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (988, 955, 0, '2016-10-08 10:26:07', '2016-10-08 10:26:07')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.7ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Sivaraman Balakrishnan'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35m (0.2ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (989, 955, 1, '2016-10-08 10:26:07', '2016-10-08 10:26:07')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.7ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Martin J. Wainwright'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35m (0.1ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (990, 955, 2, '2016-10-08 10:26:07', '2016-10-08 10:26:07')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (1.0ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Generating Factoid Questions With Recurrent Neural Networks: The 30M Factoid Question-Answer Corpus'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Generating Factoid Questions With Recurrent Neural Networks: The 30M Factoid Question-Answer Corpus', 'Over the past decade, large-scale supervised learning corpora have enabled machine learning researchers to make substantial advances. However, to this date, there are no large-scale question-answer corpora available. In this paper we present the 30M Factoid Question-Answer Corpus, an enormous question answer pair corpus produced by applying a novel neural network architecture on the knowledge base Freebase to transduce facts into natural language questions. The produced question answer pairs are evaluated both by human evaluators and using automatic evaluation metrics, including well-established machine translation and sentence similarity metrics. Across all evaluation criteria the question-generation model outperforms the competing template-based baseline. Furthermore, when presented to human evaluators, the generated questions appear comparable in quality to real human-generated questions.', 'cs.CL', '2016-03-22T14:25:16Z', 'http://arxiv.org/abs/1603.06807v2', '2016-10-08 10:26:07', '2016-10-08 10:26:07')
  [1m[36m (3.0ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (1.8ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 956
  [1m[36mAuthor Load (1.0ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Iulian Vlad Serban'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36m (0.2ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1531, 956, 0, '2016-10-08 10:26:08', '2016-10-08 10:26:08')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (1.3ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Alberto García-Durán'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Alberto García-Durán', '2016-10-08 10:26:08', '2016-10-08 10:26:08')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2514, 956, 1, '2016-10-08 10:26:08', '2016-10-08 10:26:08')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.2ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Caglar Gulcehre'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Caglar Gulcehre', '2016-10-08 10:26:08', '2016-10-08 10:26:08')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2515, 956, 2, '2016-10-08 10:26:08', '2016-10-08 10:26:08')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (1.2ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Sungjin Ahn'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Sungjin Ahn', '2016-10-08 10:26:08', '2016-10-08 10:26:08')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2516, 956, 3, '2016-10-08 10:26:08', '2016-10-08 10:26:08')
  [1m[36m (0.3ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.2ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Sarath Chandar'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Sarath Chandar', '2016-10-08 10:26:08', '2016-10-08 10:26:08')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.4ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2517, 956, 4, '2016-10-08 10:26:08', '2016-10-08 10:26:08')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (1.0ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Aaron Courville'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36m (0.1ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1537, 956, 5, '2016-10-08 10:26:08', '2016-10-08 10:26:08')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.9ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Yoshua Bengio'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36m (0.2ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1536, 956, 6, '2016-10-08 10:26:08', '2016-10-08 10:26:08')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPaper Load (1.0ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Learning Executable Semantic Parsers for Natural Language Understanding'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Learning Executable Semantic Parsers for Natural Language Understanding', 'For building question answering systems and natural language interfaces, semantic parsing has emerged as an important and powerful paradigm. Semantic parsers map natural language into logical forms, the classic representation for many important linguistic phenomena. The modern twist is that we are interested in learning semantic parsers from data, which introduces a new layer of statistical and computational issues. This article lays out the components of a statistical semantic parser, highlighting the key challenges. We will see that semantic parsing is a rich fusion of the logical and the statistical world, and that this fusion will play an integral role in the future of natural language understanding systems.', 'cs.CL', '2016-03-22T05:07:16Z', 'http://arxiv.org/abs/1603.06677v1', '2016-10-08 10:26:08', '2016-10-08 10:26:08')[0m
  [1m[35m (0.3ms)[0m  COMMIT
  [1m[36mPublish Load (1.2ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 957[0m
  [1m[35mAuthor Load (0.8ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Percy Liang'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35m (0.1ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1159, 957, 0, '2016-10-08 10:26:08', '2016-10-08 10:26:08')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (1.1ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Action-Affect Classification and Morphing using Multi-Task Representation Learning'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.4ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Action-Affect Classification and Morphing using Multi-Task Representation Learning', 'Most recent work focused on affect from facial expressions, and not as much on body. This work focuses on body affect analysis. Affect does not occur in isolation. Humans usually couple affect with an action in natural interactions; for example, a person could be talking and smiling. Recognizing body affect in sequences requires efficient algorithms to capture both the micro movements that differentiate between happy and sad and the macro variations between different actions. We depart from traditional approaches for time-series data analytics by proposing a multi-task learning model that learns a shared representation that is well-suited for action-affect classification as well as generation. For this paper we choose Conditional Restricted Boltzmann Machines to be our building block. We propose a new model that enhances the CRBM model with a factored multi-task component to become Multi-Task Conditional Restricted Boltzmann Machines (MTCRBMs). We evaluate our approach on two publicly available datasets, the Body Affect dataset and the Tower Game dataset, and show superior classification performance improvement over the state-of-the-art, as well as the generative abilities of our model.', 'cs.CV', '2016-03-21T19:38:07Z', 'http://arxiv.org/abs/1603.06554v1', '2016-10-08 10:26:08', '2016-10-08 10:26:08')
  [1m[36m (3.0ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (1.7ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 958
  [1m[36mAuthor Load (1.4ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Timothy J. Shields'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Timothy J. Shields', '2016-10-08 10:26:08', '2016-10-08 10:26:08')[0m
  [1m[35m (2.0ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2518, 958, 0, '2016-10-08 10:26:08', '2016-10-08 10:26:08')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.4ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Mohamed R. Amer'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Mohamed R. Amer', '2016-10-08 10:26:08', '2016-10-08 10:26:08')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.4ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2519, 958, 1, '2016-10-08 10:26:08', '2016-10-08 10:26:08')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (1.7ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Max Ehrlich'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Max Ehrlich', '2016-10-08 10:26:08', '2016-10-08 10:26:08')[0m
  [1m[35m (0.3ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2520, 958, 2, '2016-10-08 10:26:08', '2016-10-08 10:26:08')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.2ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Amir Tamrakar'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Amir Tamrakar', '2016-10-08 10:26:08', '2016-10-08 10:26:08')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2521, 958, 3, '2016-10-08 10:26:08', '2016-10-08 10:26:08')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (1.0ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'A System for Probabilistic Linking of Thesauri and Classification Systems'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('A System for Probabilistic Linking of Thesauri and Classification Systems', 'This paper presents a system which creates and visualizes probabilistic semantic links between concepts in a thesaurus and classes in a classification system. For creating the links, we build on the Polylingual Labeled Topic Model (PLL-TM). PLL-TM identifies probable thesaurus descriptors for each class in the classification system by using information from the natural language text of documents, their assigned thesaurus descriptors and their designated classes. The links are then presented to users of the system in an interactive visualization, providing them with an automatically generated overview of the relations between the thesaurus and the classification system.', 'cs.AI', '2016-03-21T16:34:13Z', 'http://dx.doi.org/10.1007/s13218-015-0413-9', '2016-10-08 10:26:08', '2016-10-08 10:26:08')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPublish Load (1.5ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 959[0m
  [1m[35mAuthor Load (1.2ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Lisa Posch'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Lisa Posch', '2016-10-08 10:26:08', '2016-10-08 10:26:08')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2522, 959, 0, '2016-10-08 10:26:08', '2016-10-08 10:26:08')[0m
  [1m[35m (0.3ms)[0m  COMMIT
  [1m[36mAuthor Load (1.1ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Philipp Schaer'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Philipp Schaer', '2016-10-08 10:26:08', '2016-10-08 10:26:08')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2523, 959, 1, '2016-10-08 10:26:08', '2016-10-08 10:26:08')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.4ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Arnim Bleier'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Arnim Bleier', '2016-10-08 10:26:08', '2016-10-08 10:26:08')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2524, 959, 2, '2016-10-08 10:26:08', '2016-10-08 10:26:08')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (1.3ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Markus Strohmaier'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Markus Strohmaier', '2016-10-08 10:26:08', '2016-10-08 10:26:08')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2525, 959, 3, '2016-10-08 10:26:08', '2016-10-08 10:26:08')
  [1m[36m (4.2ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (1.7ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Incorporating Copying Mechanism in Sequence-to-Sequence Learning'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Incorporating Copying Mechanism in Sequence-to-Sequence Learning', 'We address an important problem in sequence-to-sequence (Seq2Seq) learning referred to as copying, in which certain segments in the input sequence are selectively replicated in the output sequence. A similar phenomenon is observable in human language communication. For example, humans tend to repeat entity names or even long phrases in conversation. The challenge with regard to copying in Seq2Seq is that new machinery is needed to decide when to perform the operation. In this paper, we incorporate copying into neural network-based Seq2Seq learning and propose a new model called CopyNet with encoder-decoder structure. CopyNet can nicely integrate the regular way of word generation in the decoder with the new copying mechanism which can choose sub-sequences in the input sequence and put them at proper places in the output sequence. Our empirical study on both synthetic data sets and real world data sets demonstrates the efficacy of CopyNet. For example, CopyNet can outperform regular RNN-based model with remarkable margins on text summarization tasks.', 'cs.CL', '2016-03-21T11:35:08Z', 'http://arxiv.org/abs/1603.06393v3', '2016-10-08 10:26:08', '2016-10-08 10:26:08')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (1.9ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 960
  [1m[36mAuthor Load (1.4ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Jiatao Gu'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Jiatao Gu', '2016-10-08 10:26:08', '2016-10-08 10:26:08')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2526, 960, 0, '2016-10-08 10:26:08', '2016-10-08 10:26:08')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.4ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Zhengdong Lu'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Zhengdong Lu', '2016-10-08 10:26:08', '2016-10-08 10:26:08')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2527, 960, 1, '2016-10-08 10:26:08', '2016-10-08 10:26:08')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (1.3ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Hang Li'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Hang Li', '2016-10-08 10:26:08', '2016-10-08 10:26:08')[0m
  [1m[35m (2.2ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2528, 960, 2, '2016-10-08 10:26:08', '2016-10-08 10:26:08')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.6ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Victor O. K. Li'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Victor O. K. Li', '2016-10-08 10:26:08', '2016-10-08 10:26:08')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2529, 960, 3, '2016-10-08 10:26:08', '2016-10-08 10:26:08')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPaper Load (1.2ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Harnessing Deep Neural Networks with Logic Rules'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Harnessing Deep Neural Networks with Logic Rules', 'Combining deep neural networks with structured logic rules is desirable to harness flexibility and reduce uninterpretability of the neural models. We propose a general framework capable of enhancing various types of neural networks (e.g., CNNs and RNNs) with declarative first-order logic rules. Specifically, we develop an iterative distillation method that transfers the structured information of logic rules into the weights of neural networks. We deploy the framework on a CNN for sentiment analysis, and an RNN for named entity recognition. With a few highly intuitive rules, we obtain substantial improvements and achieve state-of-the-art or comparable results to previous best-performing systems.', 'cs.LG', '2016-03-21T03:33:20Z', 'http://arxiv.org/abs/1603.06318v3', '2016-10-08 10:26:08', '2016-10-08 10:26:08')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPublish Load (1.6ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 961[0m
  [1m[35mAuthor Load (0.5ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Zhiting Hu'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35m (0.1ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (643, 961, 0, '2016-10-08 10:26:08', '2016-10-08 10:26:08')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.5ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Xuezhe Ma'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Xuezhe Ma', '2016-10-08 10:26:08', '2016-10-08 10:26:08')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2530, 961, 1, '2016-10-08 10:26:08', '2016-10-08 10:26:08')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (1.3ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Zhengzhong Liu'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Zhengzhong Liu', '2016-10-08 10:26:08', '2016-10-08 10:26:08')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2531, 961, 2, '2016-10-08 10:26:08', '2016-10-08 10:26:08')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.3ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Eduard Hovy'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Eduard Hovy', '2016-10-08 10:26:08', '2016-10-08 10:26:08')
  [1m[36m (3.0ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.4ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2532, 961, 3, '2016-10-08 10:26:08', '2016-10-08 10:26:08')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (1.4ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Eric Xing'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36m (0.2ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1530, 961, 4, '2016-10-08 10:26:08', '2016-10-08 10:26:08')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPaper Load (1.2ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Multi-fidelity Gaussian Process Bandit Optimisation'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.4ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Multi-fidelity Gaussian Process Bandit Optimisation', 'In many scientific and engineering applications, we are tasked with the optimisation of an expensive to evaluate black box function $f$. Traditional methods for this problem assume just the availability of this single function. However, in many cases, cheap approximations to $f$ may be obtainable. For example, the expensive real world behaviour of a robot can be approximated by a cheap computer simulation. We can use these approximations to eliminate low function value regions and use the expensive evaluations to $f$ in a small promising region and speedily identify the optimum. We formalise this task as a \\emph{multi-fidelity} bandit problem where the target function and its approximations are sampled from a Gaussian process. We develop a method based on upper confidence bound techniques and prove that it exhibits precisely the above behaviour, hence achieving better regret than strategies which ignore multi-fidelity information. Our method outperforms such naive strategies on several synthetic and real experiments.', 'stat.ML', '2016-03-20T22:58:43Z', 'http://arxiv.org/abs/1603.06288v1', '2016-10-08 10:26:08', '2016-10-08 10:26:08')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPublish Load (1.8ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 962[0m
  [1m[35mAuthor Load (1.1ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Kirthevasan Kandasamy'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Kirthevasan Kandasamy', '2016-10-08 10:26:08', '2016-10-08 10:26:08')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2533, 962, 0, '2016-10-08 10:26:08', '2016-10-08 10:26:08')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (1.3ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Gautam Dasarathy'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Gautam Dasarathy', '2016-10-08 10:26:08', '2016-10-08 10:26:08')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2534, 962, 1, '2016-10-08 10:26:08', '2016-10-08 10:26:08')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.6ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Junier B. Oliva'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Junier B. Oliva', '2016-10-08 10:26:08', '2016-10-08 10:26:08')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2535, 962, 2, '2016-10-08 10:26:08', '2016-10-08 10:26:08')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (1.5ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Jeff Schneider'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Jeff Schneider', '2016-10-08 10:26:08', '2016-10-08 10:26:08')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2536, 962, 3, '2016-10-08 10:26:08', '2016-10-08 10:26:08')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.3ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Barnabas Poczos'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Barnabas Poczos', '2016-10-08 10:26:08', '2016-10-08 10:26:08')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2537, 962, 4, '2016-10-08 10:26:08', '2016-10-08 10:26:08')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (1.0ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'An Approximation Approach for Solving the Subpath Planning Problem'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('An Approximation Approach for Solving the Subpath Planning Problem', 'The subpath planning problem is a branch of the path planning problem, which has widespread applications in automated manufacturing process as well as vehicle and robot navigation. This problem is to find the shortest path or tour subject for travelling a set of given subpaths. The current approaches for dealing with the subpath planning problem are all based on meta-heuristic approaches. It is well-known that meta-heuristic based approaches have several deficiencies. To address them, we propose a novel approximation algorithm in the O(n^3) time complexity class, which guarantees to solve any subpath planning problem instance with the fixed ratio bound of 2. Also, the formal proofs of the claims, our empirical evaluation shows that our approximation method acts much better than a state-of-the-art method, both in result and execution time.', 'cs.RO', '2016-03-20T14:22:26Z', 'http://arxiv.org/abs/1603.06217v1', '2016-10-08 10:26:08', '2016-10-08 10:26:08')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPublish Load (1.7ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 963[0m
  [1m[35mAuthor Load (1.1ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Masoud Safilian'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Masoud Safilian', '2016-10-08 10:26:08', '2016-10-08 10:26:08')
  [1m[36m (2.9ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.3ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2538, 963, 0, '2016-10-08 10:26:08', '2016-10-08 10:26:08')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (1.6ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'S. Mehdi Tashakkori'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('S. Mehdi Tashakkori', '2016-10-08 10:26:08', '2016-10-08 10:26:08')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2539, 963, 1, '2016-10-08 10:26:08', '2016-10-08 10:26:08')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.4ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Sepehr Eghbali'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Sepehr Eghbali', '2016-10-08 10:26:08', '2016-10-08 10:26:08')
  [1m[36m (0.3ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2540, 963, 2, '2016-10-08 10:26:08', '2016-10-08 10:26:08')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (1.4ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Aliakbar Safilian'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Aliakbar Safilian', '2016-10-08 10:26:08', '2016-10-08 10:26:08')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2541, 963, 3, '2016-10-08 10:26:08', '2016-10-08 10:26:08')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (1.0ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Evaluation of a Tree-based Pipeline Optimization Tool for Automating Data Science'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Evaluation of a Tree-based Pipeline Optimization Tool for Automating Data Science', 'As the field of data science continues to grow, there will be an ever-increasing demand for tools that make machine learning accessible to non-experts. In this paper, we introduce the concept of tree-based pipeline optimization for automating one of the most tedious parts of machine learning---pipeline design. We implement an open source Tree-based Pipeline Optimization Tool (TPOT) in Python and demonstrate its effectiveness on a series of simulated and real-world benchmark data sets. In particular, we show that TPOT can design machine learning pipelines that provide a significant improvement over a basic machine learning analysis while requiring little to no input nor prior knowledge from the user. We also address the tendency for TPOT to design overly complex pipelines by integrating Pareto optimization, which produces compact pipelines without sacrificing classification accuracy. As such, this work represents an important step toward fully automating machine learning pipeline design.', 'cs.NE', '2016-03-20T13:32:27Z', 'http://arxiv.org/abs/1603.06212v1', '2016-10-08 10:26:08', '2016-10-08 10:26:08')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (2.0ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 964
  [1m[36mAuthor Load (0.5ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Randal S. Olson'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36m (0.1ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (581, 964, 0, '2016-10-08 10:26:08', '2016-10-08 10:26:08')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (1.3ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Nathan Bartley'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Nathan Bartley', '2016-10-08 10:26:08', '2016-10-08 10:26:08')[0m
  [1m[35m (0.3ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2542, 964, 1, '2016-10-08 10:26:08', '2016-10-08 10:26:08')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.4ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Ryan J. Urbanowicz'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Ryan J. Urbanowicz', '2016-10-08 10:26:08', '2016-10-08 10:26:08')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2543, 964, 2, '2016-10-08 10:26:08', '2016-10-08 10:26:08')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.6ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Jason H. Moore'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36m (0.2ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (582, 964, 3, '2016-10-08 10:26:08', '2016-10-08 10:26:08')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPaper Load (1.0ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Neurally-Guided Procedural Models: Learning to Guide Procedural Models with Deep Neural Networks'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Neurally-Guided Procedural Models: Learning to Guide Procedural Models with Deep Neural Networks', 'We present a deep learning approach for speeding up constrained procedural modeling. Probabilistic inference algorithms such as Sequential Monte Carlo (SMC) provide powerful tools for constraining procedural models, but they require many samples to produce desirable results. In this paper, we show how to create procedural models which learn how to satisfy constraints. We augment procedural models with neural networks: these networks control how the model makes random choices based on what output it has generated thus far. We call such a model a neurally-guided procedural model. As a pre-computation, we train these models on constraint-satisfying example outputs generated via SMC. They are then used as efficient importance samplers for SMC, generating high-quality results with very few samples. We evaluate our method on L-system-like models with image-based constraints. Given a desired quality threshold, neurally-guided models can generate satisfactory results up to 10x faster than unguided models.', 'cs.GR', '2016-03-19T20:58:47Z', 'http://arxiv.org/abs/1603.06143v1', '2016-10-08 10:26:08', '2016-10-08 10:26:08')[0m
  [1m[35m (3.0ms)[0m  COMMIT
  [1m[36mPublish Load (2.5ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 965[0m
  [1m[35mAuthor Load (1.9ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Daniel Ritchie'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Daniel Ritchie', '2016-10-08 10:26:08', '2016-10-08 10:26:08')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2544, 965, 0, '2016-10-08 10:26:08', '2016-10-08 10:26:08')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (1.6ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Anna Thomas'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Anna Thomas', '2016-10-08 10:26:08', '2016-10-08 10:26:08')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2545, 965, 1, '2016-10-08 10:26:08', '2016-10-08 10:26:08')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.3ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Pat Hanrahan'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Pat Hanrahan', '2016-10-08 10:26:08', '2016-10-08 10:26:08')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2546, 965, 2, '2016-10-08 10:26:08', '2016-10-08 10:26:08')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (1.5ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Noah D. Goodman'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Noah D. Goodman', '2016-10-08 10:26:08', '2016-10-08 10:26:08')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2547, 965, 3, '2016-10-08 10:26:08', '2016-10-08 10:26:08')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (1.2ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Evolving Shepherding Behavior with Genetic Programming Algorithms'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Evolving Shepherding Behavior with Genetic Programming Algorithms', 'We apply genetic programming techniques to the `shepherding\' problem, in which a group of one type of animal (sheep dogs) attempts to control the movements of a second group of animals (sheep) obeying flocking behavior. Our genetic programming algorithm evolves an expression tree that governs the movements of each dog. The operands of the tree are hand-selected features of the simulation environment that may allow the dogs to herd the sheep effectively. The algorithm uses tournament-style selection, crossover reproduction, and a point mutation. We find that the evolved solutions generalize well and outperform a (naive) human-designed algorithm.', 'cs.AI', '2016-03-19T20:36:44Z', 'http://arxiv.org/abs/1603.06141v1', '2016-10-08 10:26:08', '2016-10-08 10:26:08')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (1.3ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 966
  [1m[36mAuthor Load (1.1ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Joshua Brulé'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Joshua Brulé', '2016-10-08 10:26:08', '2016-10-08 10:26:08')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2548, 966, 0, '2016-10-08 10:26:08', '2016-10-08 10:26:08')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.3ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Kevin Engel'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Kevin Engel', '2016-10-08 10:26:08', '2016-10-08 10:26:08')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2549, 966, 1, '2016-10-08 10:26:08', '2016-10-08 10:26:08')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (1.2ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Nick Fung'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Nick Fung', '2016-10-08 10:26:08', '2016-10-08 10:26:08')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2550, 966, 2, '2016-10-08 10:26:08', '2016-10-08 10:26:08')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.3ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Isaac Julien'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Isaac Julien', '2016-10-08 10:26:08', '2016-10-08 10:26:08')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2551, 966, 3, '2016-10-08 10:26:08', '2016-10-08 10:26:08')[0m
  [1m[35m (0.3ms)[0m  COMMIT
  [1m[36mPaper Load (1.1ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Automated Correction for Syntax Errors in Programming Assignments using Recurrent Neural Networks'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.4ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Automated Correction for Syntax Errors in Programming Assignments using Recurrent Neural Networks', 'We present a method for automatically generating repair feedback for syntax errors for introductory programming problems. Syntax errors constitute one of the largest classes of errors (34%) in our dataset of student submissions obtained from a MOOC course on edX. The previous techniques for generating automated feed- back on programming assignments have focused on functional correctness and style considerations of student programs. These techniques analyze the program AST of the program and then perform some dynamic and symbolic analyses to compute repair feedback. Unfortunately, it is not possible to generate ASTs for student pro- grams with syntax errors and therefore the previous feedback techniques are not applicable in repairing syntax errors. We present a technique for providing feedback on syntax errors that uses Recurrent neural networks (RNNs) to model syntactically valid token sequences. Our approach is inspired from the recent work on learning language models from Big Code (large code corpus). For a given programming assignment, we first learn an RNN to model all valid token sequences using the set of syntactically correct student submissions. Then, for a student submission with syntax errors, we query the learnt RNN model with the prefix to- ken sequence to predict token sequences that can fix the error by either replacing or inserting the predicted token sequence at the error location. We evaluate our technique on over 14, 000 student submissions with syntax errors. Our technique can completely re- pair 31.69% (4501/14203) of submissions with syntax errors and in addition partially correct 6.39% (908/14203) of the submissions.', 'cs.PL', '2016-03-19T18:43:28Z', 'http://arxiv.org/abs/1603.06129v1', '2016-10-08 10:26:08', '2016-10-08 10:26:08')[0m
  [1m[35m (3.0ms)[0m  COMMIT
  [1m[36mPublish Load (1.9ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 967[0m
  [1m[35mAuthor Load (1.9ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Sahil Bhatia'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Sahil Bhatia', '2016-10-08 10:26:08', '2016-10-08 10:26:08')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2552, 967, 0, '2016-10-08 10:26:08', '2016-10-08 10:26:08')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (0.7ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Rishabh Singh'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36m (0.2ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (400, 967, 1, '2016-10-08 10:26:08', '2016-10-08 10:26:08')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (1.0ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Sentence Pair Scoring: Towards Unified Framework for Text Comprehension'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Sentence Pair Scoring: Towards Unified Framework for Text Comprehension', 'We review the task of Sentence Pair Scoring, popular in the literature in various forms - viewed as Answer Sentence Selection, Semantic Text Scoring, Next Utterance Ranking, Recognizing Textual Entailment, Paraphrasing or e.g. a component of Memory Networks. We argue that all such tasks are similar from the model perspective and propose new baselines by comparing the performance of common IR metrics and popular convolutional, recurrent and attention-based neural models across many Sentence Pair Scoring tasks and datasets. We discuss the problem of evaluating randomized models, propose a statistically grounded methodology, and attempt to improve comparisons by releasing new datasets that are much harder than some of the currently used well explored benchmarks. We introduce a unified open source software framework with easily pluggable models and tasks, which enables us to experiment with multi-task reusability of trained sentence model. We set a new state-of-art in performance on the Ubuntu Dialogue dataset.', 'cs.CL', '2016-03-19T18:35:26Z', 'http://arxiv.org/abs/1603.06127v4', '2016-10-08 10:26:08', '2016-10-08 10:26:08')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPublish Load (1.6ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 968[0m
  [1m[35mAuthor Load (1.3ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Petr Baudiš'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Petr Baudiš', '2016-10-08 10:26:08', '2016-10-08 10:26:08')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2553, 968, 0, '2016-10-08 10:26:08', '2016-10-08 10:26:08')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (1.3ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Jan Pichl'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Jan Pichl', '2016-10-08 10:26:08', '2016-10-08 10:26:08')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2554, 968, 1, '2016-10-08 10:26:08', '2016-10-08 10:26:08')
  [1m[36m (1.6ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.6ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Tomáš Vyskočil'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Tomáš Vyskočil', '2016-10-08 10:26:08', '2016-10-08 10:26:08')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2555, 968, 2, '2016-10-08 10:26:08', '2016-10-08 10:26:08')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (1.2ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Jan Šedivý'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Jan Šedivý', '2016-10-08 10:26:08', '2016-10-08 10:26:08')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2556, 968, 3, '2016-10-08 10:26:08', '2016-10-08 10:26:08')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (1.5ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'The Computational Power of Dynamic Bayesian Networks'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('The Computational Power of Dynamic Bayesian Networks', 'This paper considers the computational power of constant size, dynamic Bayesian networks. Although discrete dynamic Bayesian networks are no more powerful than hidden Markov models, dynamic Bayesian networks with continuous random variables and discrete children of continuous parents are capable of performing Turing-complete computation. With modified versions of existing algorithms for belief propagation, such a simulation can be carried out in real time. This result suggests that dynamic Bayesian networks may be more powerful than previously considered. Relationships to causal models and recurrent neural networks are also discussed.', 'cs.AI', '2016-03-19T18:30:02Z', 'http://arxiv.org/abs/1603.06125v1', '2016-10-08 10:26:08', '2016-10-08 10:26:08')
  [1m[36m (2.9ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (2.2ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 969
  [1m[36mAuthor Load (1.5ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Joshua Brulé'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36m (0.1ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2548, 969, 0, '2016-10-08 10:26:08', '2016-10-08 10:26:08')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPaper Load (1.2ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Generating Natural Questions About an Image'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Generating Natural Questions About an Image', 'There has been an explosion of work in the vision & language community during the past few years from image captioning to video transcription, and answering questions about images. These tasks have focused on literal descriptions of the image. To move beyond the literal, we choose to explore how questions about an image are often directed at commonsense inference and the abstract events evoked by objects in the image. In this paper, we introduce the novel task of Visual Question Generation (VQG), where the system is tasked with asking a natural and engaging question when shown an image. We provide three datasets which cover a variety of images from object-centric to event-centric, with considerably more abstract training data than provided to state-of-the-art captioning systems thus far. We train and test several generative and retrieval models to tackle the task of VQG. Evaluation results show that while such models ask reasonable questions for a variety of images, there is still a wide gap with human performance which motivates further work on connecting images with commonsense knowledge and pragmatics. Our proposed task offers a new challenge to the community which we hope furthers interest in exploring deeper connections between vision & language.', 'cs.CL', '2016-03-19T07:27:15Z', 'http://arxiv.org/abs/1603.06059v3', '2016-10-08 10:26:08', '2016-10-08 10:26:08')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPublish Load (1.6ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 970[0m
  [1m[35mAuthor Load (1.0ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Nasrin Mostafazadeh'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35m (0.2ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2271, 970, 0, '2016-10-08 10:26:08', '2016-10-08 10:26:08')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.3ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Ishan Misra'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35m (0.1ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2272, 970, 1, '2016-10-08 10:26:08', '2016-10-08 10:26:08')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.3ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Jacob Devlin'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35m (0.2ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2273, 970, 2, '2016-10-08 10:26:08', '2016-10-08 10:26:08')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.4ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Margaret Mitchell'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35m (0.2ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (208, 970, 3, '2016-10-08 10:26:08', '2016-10-08 10:26:08')
  [1m[36m (0.6ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.6ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Xiaodong He'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35m (0.2ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (496, 970, 4, '2016-10-08 10:26:08', '2016-10-08 10:26:08')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.3ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Lucy Vanderwende'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35m (0.2ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2275, 970, 5, '2016-10-08 10:26:08', '2016-10-08 10:26:08')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (1.0ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'A Comprehensive Performance Evaluation of Deformable Face Tracking \"In-the-Wild\"'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('A Comprehensive Performance Evaluation of Deformable Face Tracking \"In-the-Wild\"', 'Recently, technologies such as face detection, facial landmark localisation and face recognition and verification have matured enough to provide effective and efficient solutions for imagery captured under arbitrary conditions (referred to as \"in-the-wild\"). This is partially attributed to the fact that comprehensive \"in-the-wild\" benchmarks have been developed for face detection, landmark localisation and recognition/verification. A very important technology that has not been thoroughly evaluated yet is deformable face tracking \"in-the-wild\". Until now, the performance has mainly been assessed qualitatively by visually assessing the result of a deformable face tracking technology on short videos. In this paper, we perform the first, to the best of our knowledge, thorough evaluation of state-of-the-art deformable face tracking pipelines using the recently introduced 300VW benchmark. We evaluate many different architectures focusing mainly on the task of on-line deformable face tracking. In particular, we compare the following general strategies: (a) generic face detection plus generic facial landmark localisation, (b) generic model free tracking plus generic facial landmark localisation, as well as (c) hybrid approaches using state-of-the-art face detection, model free tracking and facial landmark localisation technologies. Our evaluation reveals future avenues for further research on the topic.', 'cs.CV', '2016-03-18T23:17:01Z', 'http://arxiv.org/abs/1603.06015v1', '2016-10-08 10:26:08', '2016-10-08 10:26:08')
  [1m[36m (2.9ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (2.2ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 971
  [1m[36mAuthor Load (1.6ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Grigorios G. Chrysos'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Grigorios G. Chrysos', '2016-10-08 10:26:08', '2016-10-08 10:26:08')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2557, 971, 0, '2016-10-08 10:26:08', '2016-10-08 10:26:08')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.4ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Epameinondas Antonakos'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Epameinondas Antonakos', '2016-10-08 10:26:08', '2016-10-08 10:26:08')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2558, 971, 1, '2016-10-08 10:26:08', '2016-10-08 10:26:08')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (1.2ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Patrick Snape'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Patrick Snape', '2016-10-08 10:26:08', '2016-10-08 10:26:08')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2559, 971, 2, '2016-10-08 10:26:08', '2016-10-08 10:26:08')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.3ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Akshay Asthana'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Akshay Asthana', '2016-10-08 10:26:08', '2016-10-08 10:26:08')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2560, 971, 3, '2016-10-08 10:26:08', '2016-10-08 10:26:08')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (1.4ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Stefanos Zafeiriou'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Stefanos Zafeiriou', '2016-10-08 10:26:08', '2016-10-08 10:26:08')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2561, 971, 4, '2016-10-08 10:26:08', '2016-10-08 10:26:08')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (1.3ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Efficient Multi-Scale 3D CNN with Fully Connected CRF for Accurate Brain Lesion Segmentation'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.4ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Efficient Multi-Scale 3D CNN with Fully Connected CRF for Accurate Brain Lesion Segmentation', 'We propose a dual pathway, 11-layers deep, three-dimensional Convolutional Neural Network for the challenging task of brain lesion segmentation. The devised architecture is the result of an in-depth analysis of the limitations of current networks proposed for similar applications. To overcome the computational burden of processing 3D medical scans, we have devised an efficient and effective dense training scheme which joins the processing of adjacent image patches into one pass through the network while automatically adapting to the inherent class imbalance present in the data. Further, we analyze the development of deeper, thus more discriminative 3D CNNs. In order to incorporate both local and larger contextual information, we employ a dual pathway architecture that processes the input images at multiple scales simultaneously. For post-processing of the network\'s soft segmentation, we use a 3D fully connected Conditional Random Field which effectively removes false positives. Our pipeline is extensively evaluated on three challenging tasks of lesion segmentation in multi-channel MRI patient data with traumatic brain injuries, brain tumors, and ischemic stroke. We improve on the state-of-the-art for all three applications, with top ranking performance on the public benchmarks BRATS 2015 and ISLES 2015. Our method is computationally efficient, which allows its adoption in a variety of research and clinical settings. The source code of our implementation is made publicly available.', 'cs.CV', '2016-03-18T19:07:01Z', 'http://arxiv.org/abs/1603.05959v2', '2016-10-08 10:26:08', '2016-10-08 10:26:08')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (1.3ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 972
  [1m[36mAuthor Load (1.2ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Konstantinos Kamnitsas'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Konstantinos Kamnitsas', '2016-10-08 10:26:08', '2016-10-08 10:26:08')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2562, 972, 0, '2016-10-08 10:26:08', '2016-10-08 10:26:08')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.6ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Christian Ledig'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Christian Ledig', '2016-10-08 10:26:08', '2016-10-08 10:26:08')
  [1m[36m (3.0ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2563, 972, 1, '2016-10-08 10:26:08', '2016-10-08 10:26:08')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (1.6ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Virginia F. J. Newcombe'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Virginia F. J. Newcombe', '2016-10-08 10:26:08', '2016-10-08 10:26:08')[0m
  [1m[35m (0.6ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2564, 972, 2, '2016-10-08 10:26:08', '2016-10-08 10:26:08')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.9ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Joanna P. Simpson'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Joanna P. Simpson', '2016-10-08 10:26:08', '2016-10-08 10:26:08')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2565, 972, 3, '2016-10-08 10:26:08', '2016-10-08 10:26:08')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (1.3ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Andrew D. Kane'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Andrew D. Kane', '2016-10-08 10:26:08', '2016-10-08 10:26:08')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2566, 972, 4, '2016-10-08 10:26:08', '2016-10-08 10:26:08')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.4ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'David K. Menon'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('David K. Menon', '2016-10-08 10:26:08', '2016-10-08 10:26:08')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2567, 972, 5, '2016-10-08 10:26:08', '2016-10-08 10:26:08')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (1.2ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Daniel Rueckert'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Daniel Rueckert', '2016-10-08 10:26:08', '2016-10-08 10:26:08')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2568, 972, 6, '2016-10-08 10:26:08', '2016-10-08 10:26:08')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.2ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Ben Glocker'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Ben Glocker', '2016-10-08 10:26:08', '2016-10-08 10:26:08')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2569, 972, 7, '2016-10-08 10:26:08', '2016-10-08 10:26:08')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (1.0ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Bank distress in the news: Describing events through deep learning'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Bank distress in the news: Describing events through deep learning', 'While many models are purposed for detecting the occurrence of events in complex systems, the task of providing qualitative detail on the developments is not usually as well automated. We present a deep learning approach for detecting relevant discussion in text and extracting natural language descriptions of events. Supervised by only a small set of event information, the model is leveraged by unsupervised learning of semantic vector representations on extensive text data. We demonstrate applicability to the study of financial risk based on news (6.6M articles), particularly bank distress and government interventions (243 events), where indices can signal the level of bank-stress-related reporting at the entity level, or aggregated at country or European level, while being coupled with explanations. Thus, we exemplify how text, as timely and widely available data, can serve as a useful complementary source of information for financial risk analytics.', 'cs.CL', '2016-03-17T20:06:27Z', 'http://arxiv.org/abs/1603.05670v1', '2016-10-08 10:26:08', '2016-10-08 10:26:08')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPublish Load (1.8ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 973[0m
  [1m[35mAuthor Load (1.3ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Samuel Rönnqvist'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Samuel Rönnqvist', '2016-10-08 10:26:08', '2016-10-08 10:26:08')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2570, 973, 0, '2016-10-08 10:26:08', '2016-10-08 10:26:08')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (1.3ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Peter Sarlin'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Peter Sarlin', '2016-10-08 10:26:08', '2016-10-08 10:26:08')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2571, 973, 1, '2016-10-08 10:26:08', '2016-10-08 10:26:08')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (1.0ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Mapping Temporal Variables into the NeuCube for Improved Pattern Recognition, Predictive Modelling and Understanding of Stream Data'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Mapping Temporal Variables into the NeuCube for Improved Pattern Recognition, Predictive Modelling and Understanding of Stream Data', 'This paper proposes a new method for an optimized mapping of temporal variables, describing a temporal stream data, into the recently proposed NeuCube spiking neural network architecture. This optimized mapping extends the use of the NeuCube, which was initially designed for spatiotemporal brain data, to work on arbitrary stream data and to achieve a better accuracy of temporal pattern recognition, a better and earlier event prediction and a better understanding of complex temporal stream data through visualization of the NeuCube connectivity. The effect of the new mapping is demonstrated on three bench mark problems. The first one is early prediction of patient sleep stage event from temporal physiological data. The second one is pattern recognition of dynamic temporal patterns of traffic in the Bay Area of California and the last one is the Challenge 2012 contest data set. In all cases the use of the proposed mapping leads to an improved accuracy of pattern recognition and event prediction and a better understanding of the data when compared to traditional machine learning techniques or spiking neural network reservoirs with arbitrary mapping of the variables.', 'cs.NE', '2016-03-17T17:58:48Z', 'http://arxiv.org/abs/1603.05594v1', '2016-10-08 10:26:08', '2016-10-08 10:26:08')
  [1m[36m (3.0ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (2.2ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 974
  [1m[36mAuthor Load (1.5ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Enmei Tu'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Enmei Tu', '2016-10-08 10:26:08', '2016-10-08 10:26:08')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2572, 974, 0, '2016-10-08 10:26:08', '2016-10-08 10:26:08')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.2ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Nikola Kasabov'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Nikola Kasabov', '2016-10-08 10:26:08', '2016-10-08 10:26:08')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2573, 974, 1, '2016-10-08 10:26:08', '2016-10-08 10:26:08')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (1.6ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Jie Yang'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Jie Yang', '2016-10-08 10:26:08', '2016-10-08 10:26:08')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2574, 974, 2, '2016-10-08 10:26:08', '2016-10-08 10:26:08')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (1.0ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Neural Aggregation Network for Video Face Recognition'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Neural Aggregation Network for Video Face Recognition', 'In this paper, we present a Neural Aggregation Network (NAN) for video face recognition. The network takes a face video or face image set of a person with variable number of face frames as its input, and produces a compact and fixed-dimension visual representation of that person. The whole network is composed of two modules. The feature embedding module is a CNN which maps each face frame into a feature representation. The neural aggregation module is composed of two content based attention blocks which is driven by a memory storing all the features extracted from the face video through the feature embedding module. The output of the first attention block adapts the second, whose output is adopted as the aggregated representation of the video faces. Due to the attention mechanism, this representation is invariant to the order of the face frames. The experiments show that the proposed NAN consistently outperforms hand-crafted aggregations such as average pooling, and achieves state-of-the-art accuracy on three video face recognition datasets: the YouTube Face, IJB-A and Celebrity-1000 datasets.', 'cs.CV', '2016-03-17T13:30:45Z', 'http://arxiv.org/abs/1603.05474v1', '2016-10-08 10:26:08', '2016-10-08 10:26:08')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (1.4ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 975
  [1m[36mAuthor Load (1.2ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Jiaolong Yang'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Jiaolong Yang', '2016-10-08 10:26:08', '2016-10-08 10:26:08')[0m
  [1m[35m (1.2ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2575, 975, 0, '2016-10-08 10:26:08', '2016-10-08 10:26:08')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.3ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Peiran Ren'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Peiran Ren', '2016-10-08 10:26:08', '2016-10-08 10:26:08')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2576, 975, 1, '2016-10-08 10:26:08', '2016-10-08 10:26:08')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (1.5ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Dong Chen'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Dong Chen', '2016-10-08 10:26:08', '2016-10-08 10:26:08')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2577, 975, 2, '2016-10-08 10:26:08', '2016-10-08 10:26:08')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.2ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Fang Wen'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Fang Wen', '2016-10-08 10:26:08', '2016-10-08 10:26:08')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2578, 975, 3, '2016-10-08 10:26:08', '2016-10-08 10:26:08')[0m
  [1m[35m (2.9ms)[0m  COMMIT
  [1m[36mAuthor Load (2.0ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Hongdong Li'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Hongdong Li', '2016-10-08 10:26:08', '2016-10-08 10:26:08')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2579, 975, 4, '2016-10-08 10:26:08', '2016-10-08 10:26:08')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.5ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Gang Hua'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Gang Hua', '2016-10-08 10:26:08', '2016-10-08 10:26:08')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2580, 975, 5, '2016-10-08 10:26:08', '2016-10-08 10:26:08')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPaper Load (1.2ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Hardware Acceleration for Boolean Satisfiability Solver by Applying Belief Propagation Algorithm'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Hardware Acceleration for Boolean Satisfiability Solver by Applying Belief Propagation Algorithm', 'Boolean satisfiability (SAT) has an extensive application domain in computer science, especially in electronic design automation applications. Circuit synthesis, optimization, and verification problems can be solved by transforming original problems to SAT problems. However, the SAT problem is known as NP-complete, which means there is no efficient method to solve it. Therefore, an efficient SAT solver to enhance the performance is always desired. We propose a hardware acceleration method for SAT problems. By surveying the properties of SAT problems and the decoding of low-density parity-check (LDPC) codes, a special class of error-correcting codes, we discover that both of them are constraint satisfaction problems. The belief propagation algorithm has been successfully applied to the decoding of LDPC, and the corresponding decoder hardware designs are extensively studied. Therefore, we proposed a belief propagation based algorithm to solve SAT problems. With this algorithm, the SAT solver can be accelerated by hardware. A software simulator is implemented to verify the proposed algorithm and the performance improvement is estimated. Our experiment results show that time complexity does not increase with the size of SAT problems and the proposed method can achieve at least 30x speedup compared to MiniSat.', 'cs.AI', '2016-03-16T23:57:27Z', 'http://arxiv.org/abs/1603.05314v1', '2016-10-08 10:26:08', '2016-10-08 10:26:08')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPublish Load (1.3ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 976[0m
  [1m[35mAuthor Load (1.3ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Te-Hsuan Chen'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Te-Hsuan Chen', '2016-10-08 10:26:08', '2016-10-08 10:26:08')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2581, 976, 0, '2016-10-08 10:26:08', '2016-10-08 10:26:08')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (1.2ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Ju-Yi Lu'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Ju-Yi Lu', '2016-10-08 10:26:08', '2016-10-08 10:26:08')[0m
  [1m[35m (1.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2582, 976, 1, '2016-10-08 10:26:08', '2016-10-08 10:26:08')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (1.1ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Suppressing the Unusual: towards Robust CNNs using Symmetric Activation Functions'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Suppressing the Unusual: towards Robust CNNs using Symmetric Activation Functions', 'Many deep Convolutional Neural Networks (CNN) make incorrect predictions on adversarial samples obtained by imperceptible perturbations of clean samples. We hypothesize that this is caused by a failure to suppress unusual signals within network layers. As remedy we propose the use of Symmetric Activation Functions (SAF) in non-linear signal transducer units. These units suppress signals of exceptional magnitude. We prove that SAF networks can perform classification tasks to arbitrary precision in a simplified situation. In practice, rather than use SAFs alone, we add them into CNNs to improve their robustness. The modified CNNs can be easily trained using popular strategies with the moderate training load. Our experiments on MNIST and CIFAR-10 show that the modified CNNs perform similarly to plain ones on clean samples, and are remarkably more robust against adversarial and nonsense samples.', 'cs.CV', '2016-03-16T15:35:07Z', 'http://arxiv.org/abs/1603.05145v1', '2016-10-08 10:26:08', '2016-10-08 10:26:08')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (1.3ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 977
  [1m[36mAuthor Load (1.2ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Qiyang Zhao'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Qiyang Zhao', '2016-10-08 10:26:08', '2016-10-08 10:26:08')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2583, 977, 0, '2016-10-08 10:26:08', '2016-10-08 10:26:08')
  [1m[36m (2.9ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (2.1ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Lewis D Griffin'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Lewis D Griffin', '2016-10-08 10:26:08', '2016-10-08 10:26:08')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2584, 977, 1, '2016-10-08 10:26:08', '2016-10-08 10:26:08')[0m
  [1m[35m (1.6ms)[0m  COMMIT
  [1m[36mPaper Load (1.4ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'One-Shot Generalization in Deep Generative Models'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.4ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('One-Shot Generalization in Deep Generative Models', 'Humans have an impressive ability to reason about new concepts and experiences from just a single example. In particular, humans have an ability for one-shot generalization: an ability to encounter a new concept, understand its structure, and then be able to generate compelling alternative variations of the concept. We develop machine learning systems with this important capacity by developing new deep generative models, models that combine the representational power of deep learning with the inferential power of Bayesian reasoning. We develop a class of sequential generative models that are built on the principles of feedback and attention. These two characteristics lead to generative models that are among the state-of-the art in density estimation and image generation. We demonstrate the one-shot generalization ability of our models using three tasks: unconditional sampling, generating new exemplars of a given concept, and generating new exemplars of a family of concepts. In all cases our models are able to generate compelling and diverse samples---having seen new examples just once---providing an important class of general-purpose models for one-shot machine learning.', 'stat.ML', '2016-03-16T14:10:00Z', 'http://arxiv.org/abs/1603.05106v2', '2016-10-08 10:26:08', '2016-10-08 10:26:08')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPublish Load (1.7ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 978[0m
  [1m[35mAuthor Load (1.3ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Danilo Jimenez Rezende'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Danilo Jimenez Rezende', '2016-10-08 10:26:08', '2016-10-08 10:26:08')
  [1m[36m (0.3ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2585, 978, 0, '2016-10-08 10:26:08', '2016-10-08 10:26:08')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (1.2ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Shakir Mohamed'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Shakir Mohamed', '2016-10-08 10:26:08', '2016-10-08 10:26:08')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.4ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2586, 978, 1, '2016-10-08 10:26:08', '2016-10-08 10:26:08')
  [1m[36m (0.3ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.3ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Ivo Danihelka'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Ivo Danihelka', '2016-10-08 10:26:08', '2016-10-08 10:26:08')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2587, 978, 2, '2016-10-08 10:26:08', '2016-10-08 10:26:08')[0m
  [1m[35m (0.3ms)[0m  COMMIT
  [1m[36mAuthor Load (1.2ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Karol Gregor'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Karol Gregor', '2016-10-08 10:26:08', '2016-10-08 10:26:08')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2588, 978, 3, '2016-10-08 10:26:08', '2016-10-08 10:26:08')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.7ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Daan Wierstra'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Daan Wierstra', '2016-10-08 10:26:08', '2016-10-08 10:26:08')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2589, 978, 4, '2016-10-08 10:26:08', '2016-10-08 10:26:08')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (1.0ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'A Review of Theoretical and Practical Challenges of Trusted Autonomy in Big Data'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('A Review of Theoretical and Practical Challenges of Trusted Autonomy in Big Data', 'Despite the advances made in artificial intelligence, software agents, and robotics, there is little we see today that we can truly call a fully autonomous system. We conjecture that the main inhibitor for advancing autonomy is lack of trust. Trusted autonomy is the scientific and engineering field to establish the foundations and ground work for developing trusted autonomous systems (robotics and software agents) that can be used in our daily life, and can be integrated with humans seamlessly, naturally and efficiently. In this paper, we review this literature to reveal opportunities for researchers and practitioners to work on topics that can create a leap forward in advancing the field of trusted autonomy. We focus the paper on the `trust\' component as the uniting technology between humans and machines. Our inquiry into this topic revolves around three sub-topics: (1) reviewing and positioning the trust modelling literature for the purpose of trusted autonomy; (2) reviewing a critical subset of sensor technologies that allow a machine to sense human states; and (3) distilling some critical questions for advancing the field of trusted autonomy. The inquiry is augmented with conceptual models that we propose along the way by recompiling and reshaping the literature into forms that enables trusted autonomous systems to become a reality. The paper offers a vision for a Trusted Cyborg Swarm, an extension of our previous Cognitive Cyber Symbiosis concept, whereby humans and machines meld together in a harmonious, seamless, and coordinated manner.', 'cs.CY', '2016-03-16T11:00:23Z', 'http://arxiv.org/abs/1604.00921v1', '2016-10-08 10:26:08', '2016-10-08 10:26:08')[0m
  [1m[35m (3.0ms)[0m  COMMIT
  [1m[36mPublish Load (1.8ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 979[0m
  [1m[35mAuthor Load (1.6ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Hussein A. Abbass'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Hussein A. Abbass', '2016-10-08 10:26:08', '2016-10-08 10:26:08')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2590, 979, 0, '2016-10-08 10:26:08', '2016-10-08 10:26:08')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (1.2ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'George Leu'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('George Leu', '2016-10-08 10:26:08', '2016-10-08 10:26:08')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2591, 979, 1, '2016-10-08 10:26:08', '2016-10-08 10:26:08')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.6ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Kathryn Merrick'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Kathryn Merrick', '2016-10-08 10:26:08', '2016-10-08 10:26:08')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2592, 979, 2, '2016-10-08 10:26:08', '2016-10-08 10:26:08')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (1.0ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Optimal Sensing via Multi-armed Bandit Relaxations in Mixed Observability Domains'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Optimal Sensing via Multi-armed Bandit Relaxations in Mixed Observability Domains', 'Sequential decision making under uncertainty is studied in a mixed observability domain. The goal is to maximize the amount of information obtained on a partially observable stochastic process under constraints imposed by a fully observable internal state. An upper bound for the optimal value function is derived by relaxing constraints. We identify conditions under which the relaxed problem is a multi-armed bandit whose optimal policy is easily computable. The upper bound is applied to prune the search space in the original problem, and the effect on solution quality is assessed via simulation experiments. Empirical results show effective pruning of the search space in a target monitoring domain.', 'cs.AI', '2016-03-15T08:12:52Z', 'http://dx.doi.org/10.1109/ICRA.2015.7139867', '2016-10-08 10:26:08', '2016-10-08 10:26:08')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPublish Load (1.3ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 980[0m
  [1m[35mAuthor Load (1.1ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Mikko Lauri'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Mikko Lauri', '2016-10-08 10:26:08', '2016-10-08 10:26:08')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2593, 980, 0, '2016-10-08 10:26:08', '2016-10-08 10:26:08')[0m
  [1m[35m (0.3ms)[0m  COMMIT
  [1m[36mAuthor Load (1.3ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Risto Ritala'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Risto Ritala', '2016-10-08 10:26:08', '2016-10-08 10:26:08')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2594, 980, 1, '2016-10-08 10:26:08', '2016-10-08 10:26:08')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (1.0ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Domain Adaptation via Maximum Independence of Domain Features'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Domain Adaptation via Maximum Independence of Domain Features', 'When the distributions of the source and the target domains are different, domain adaptation techniques are needed. For example, in the field of sensors and measurement, discrete and continuous distributional change often exist in data because of instrumental variation and time-varying sensor drift. In this paper, we propose maximum independence domain adaptation (MIDA) to address this problem. Domain features are first defined to describe the background information of a sample, such as the device label and acquisition time. Then, MIDA learns features which have maximal independence with the domain features, so as to reduce the inter-domain discrepancy in distributions. A feature augmentation strategy is designed so that the learned projection is background-specific. Semi-supervised MIDA (SMIDA) extends MIDA by exploiting the label information. The proposed methods can handle not only discrete domains in traditional domain adaptation problems but also continuous distributional change such as the time-varying drift. In addition, they are naturally applicable in supervised/semi-supervised/unsupervised classification or regression problems with multiple domains. This flexibility brings potential for a wide range of applications. The effectiveness of our approaches is verified by experiments on synthetic datasets and four real-world ones on sensors, measurement, and computer vision.', 'cs.CV', '2016-03-15T02:56:22Z', 'http://arxiv.org/abs/1603.04535v1', '2016-10-08 10:26:08', '2016-10-08 10:26:08')
  [1m[36m (2.9ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (2.3ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 981
  [1m[36mAuthor Load (1.5ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Ke Yan'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Ke Yan', '2016-10-08 10:26:08', '2016-10-08 10:26:08')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2595, 981, 0, '2016-10-08 10:26:08', '2016-10-08 10:26:08')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.4ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Lu Kou'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Lu Kou', '2016-10-08 10:26:08', '2016-10-08 10:26:08')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2596, 981, 1, '2016-10-08 10:26:08', '2016-10-08 10:26:08')[0m
  [1m[35m (1.0ms)[0m  COMMIT
  [1m[36mAuthor Load (1.3ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'David Zhang'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('David Zhang', '2016-10-08 10:26:08', '2016-10-08 10:26:08')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2597, 981, 2, '2016-10-08 10:26:08', '2016-10-08 10:26:08')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (1.1ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Sequential Voting Promotes Collective Discovery in Social Recommendation Systems'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.4ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Sequential Voting Promotes Collective Discovery in Social Recommendation Systems', 'One goal of online social recommendation systems is to harness the wisdom of crowds in order to identify high quality content. Yet the sequential voting mechanisms that are commonly used by these systems are at odds with existing theoretical and empirical literature on optimal aggregation. This literature suggests that sequential voting will promote herding---the tendency for individuals to copy the decisions of others around them---and hence lead to suboptimal content recommendation. Is there a problem with our practice, or a problem with our theory? Previous attempts at answering this question have been limited by a lack of objective measurements of content quality. Quality is typically defined endogenously as the popularity of content in absence of social influence. The flaw of this metric is its presupposition that the preferences of the crowd are aligned with underlying quality. Domains in which content quality can be defined exogenously and measured objectively are thus needed in order to better assess the design choices of social recommendation systems. In this work, we look to the domain of education, where content quality can be measured via how well students are able to learn from the material presented to them. Through a behavioral experiment involving a simulated massive open online course (MOOC) run on Amazon Mechanical Turk, we show that sequential voting systems can surface better content than systems that elicit independent votes.', 'cs.SI', '2016-03-14T20:48:43Z', 'http://arxiv.org/abs/1603.04466v1', '2016-10-08 10:26:08', '2016-10-08 10:26:08')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (1.7ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 982
  [1m[36mAuthor Load (1.1ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'L. Elisa Celis'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('L. Elisa Celis', '2016-10-08 10:26:08', '2016-10-08 10:26:08')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2598, 982, 0, '2016-10-08 10:26:08', '2016-10-08 10:26:08')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.5ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Peter M. Krafft'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35m (0.1ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (497, 982, 1, '2016-10-08 10:26:08', '2016-10-08 10:26:08')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.5ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Nathan Kobe'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Nathan Kobe', '2016-10-08 10:26:08', '2016-10-08 10:26:08')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2599, 982, 2, '2016-10-08 10:26:08', '2016-10-08 10:26:08')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (1.1ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Controlling Search in Very large Commonsense Knowledge Bases: A Machine Learning Approach'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Controlling Search in Very large Commonsense Knowledge Bases: A Machine Learning Approach', 'Very large commonsense knowledge bases (KBs) often have thousands to millions of axioms, of which relatively few are relevant for answering any given query. A large number of irrelevant axioms can easily overwhelm resolution-based theorem provers. Therefore, methods that help the reasoner identify useful inference paths form an essential part of large-scale reasoning systems. In this paper, we describe two ordering heuristics for optimization of reasoning in such systems. First, we discuss how decision trees can be used to select inference steps that are more likely to succeed. Second, we identify a small set of problem instance features that suffice to guide searches away from intractable regions of the search space. We show the efficacy of these techniques via experiments on thousands of queries from the Cyc KB. Results show that these methods lead to an order of magnitude reduction in inference time.', 'cs.AI', '2016-03-14T19:20:36Z', 'http://arxiv.org/abs/1603.04402v1', '2016-10-08 10:26:08', '2016-10-08 10:26:08')[0m
  [1m[35m (3.0ms)[0m  COMMIT
  [1m[36mPublish Load (2.2ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 983[0m
  [1m[35mAuthor Load (1.6ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Abhishek Sharma'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Abhishek Sharma', '2016-10-08 10:26:08', '2016-10-08 10:26:08')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2600, 983, 0, '2016-10-08 10:26:08', '2016-10-08 10:26:08')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (1.4ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Michael Witbrock'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Michael Witbrock', '2016-10-08 10:26:08', '2016-10-08 10:26:08')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2601, 983, 1, '2016-10-08 10:26:08', '2016-10-08 10:26:08')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.2ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Keith Goolsbey'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Keith Goolsbey', '2016-10-08 10:26:08', '2016-10-08 10:26:08')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2602, 983, 2, '2016-10-08 10:26:08', '2016-10-08 10:26:08')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (1.1ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Learning Network of Multivariate Hawkes Processes: A Time Series Approach'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Learning Network of Multivariate Hawkes Processes: A Time Series Approach', 'Learning the influence structure of multiple time series data is of great interest to many disciplines. This paper studies the problem of recovering the causal structure in network of multivariate linear Hawkes processes. In such processes, the occurrence of an event in one process affects the probability of occurrence of new events in some other processes. Thus, a natural notion of causality exists between such processes captured by the support of the excitation matrix. We show that the resulting causal influence network is equivalent to the Directed Information graph (DIG) of the processes, which encodes the causal factorization of the joint distribution of the processes. Furthermore, we present an algorithm for learning the support of excitation matrix (or equivalently the DIG). The performance of the algorithm is evaluated on synthesized multivariate Hawkes networks as well as a stock market and MemeTracker real-world dataset.', 'cs.LG', '2016-03-14T16:08:26Z', 'http://arxiv.org/abs/1603.04319v1', '2016-10-08 10:26:09', '2016-10-08 10:26:09')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPublish Load (1.5ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 984[0m
  [1m[35mAuthor Load (1.2ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Jalal Etesami'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Jalal Etesami', '2016-10-08 10:26:09', '2016-10-08 10:26:09')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2603, 984, 0, '2016-10-08 10:26:09', '2016-10-08 10:26:09')[0m
  [1m[35m (0.3ms)[0m  COMMIT
  [1m[36mAuthor Load (1.2ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Negar Kiyavash'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Negar Kiyavash', '2016-10-08 10:26:09', '2016-10-08 10:26:09')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2604, 984, 1, '2016-10-08 10:26:09', '2016-10-08 10:26:09')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.4ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Kun Zhang'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Kun Zhang', '2016-10-08 10:26:09', '2016-10-08 10:26:09')
  [1m[36m (0.3ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2605, 984, 2, '2016-10-08 10:26:09', '2016-10-08 10:26:09')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (1.3ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Kushagra Singhal'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Kushagra Singhal', '2016-10-08 10:26:09', '2016-10-08 10:26:09')[0m
  [1m[35m (0.6ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.5ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2606, 984, 3, '2016-10-08 10:26:09', '2016-10-08 10:26:09')
  [1m[36m (2.9ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (1.5ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Item2Vec: Neural Item Embedding for Collaborative Filtering'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.4ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Item2Vec: Neural Item Embedding for Collaborative Filtering', 'Many Collaborative Filtering (CF) algorithms are item-based in the sense that they analyze item-item relations in order to produce item similarities. Recently, several works in the field of Natural Language Processing suggested to learn a latent representation of words using neural embedding algorithms. Among them, the Skip-gram with Negative Sampling (SGNS), also known as Word2Vec, was shown to provide state-of-the-art results on various linguistics tasks. In this paper, we show that item-based CF can be cast in the same framework of neural word embedding. Inspired by SGNS, we describe a method we name Item2Vec for item-based CF that produces embedding for items in a latent space. The method is capable of inferring item-to-item relations even when user information is not available. We present experimental results on large scale datasets that demonstrate the effectiveness of the Item2Vec method and show it is competitive with SVD.', 'cs.LG', '2016-03-14T13:37:03Z', 'http://arxiv.org/abs/1603.04259v2', '2016-10-08 10:26:09', '2016-10-08 10:26:09')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (1.7ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 985
  [1m[36mAuthor Load (1.3ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Oren Barkan'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Oren Barkan', '2016-10-08 10:26:09', '2016-10-08 10:26:09')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2607, 985, 0, '2016-10-08 10:26:09', '2016-10-08 10:26:09')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.5ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Noam Koenigstein'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Noam Koenigstein', '2016-10-08 10:26:09', '2016-10-08 10:26:09')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2608, 985, 1, '2016-10-08 10:26:09', '2016-10-08 10:26:09')[0m
  [1m[35m (1.7ms)[0m  COMMIT
  [1m[36mPaper Load (1.6ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'How deep is knowledge tracing?'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.4ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('How deep is knowledge tracing?', 'In theoretical cognitive science, there is a tension between highly structured models whose parameters have a direct psychological interpretation and highly complex, general-purpose models whose parameters and representations are difficult to interpret. The former typically provide more insight into cognition but the latter often perform better. This tension has recently surfaced in the realm of educational data mining, where a deep learning approach to predicting students\' performance as they work through a series of exercises---termed deep knowledge tracing or DKT---has demonstrated a stunning performance advantage over the mainstay of the field, Bayesian knowledge tracing or BKT. In this article, we attempt to understand the basis for DKT\'s advantage by considering the sources of statistical regularity in the data that DKT can leverage but which BKT cannot. We hypothesize four forms of regularity that BKT fails to exploit: recency effects, the contextualized trial sequence, inter-skill similarity, and individual variation in ability. We demonstrate that when BKT is extended to allow it more flexibility in modeling statistical regularities---using extensions previously proposed in the literature---BKT achieves a level of performance indistinguishable from that of DKT. We argue that while DKT is a powerful, useful, general-purpose framework for modeling student learning, its gains do not come from the discovery of novel representations---the fundamental advantage of deep learning. To answer the question posed in our title, knowledge tracing may be a domain that does not require `depth\'; shallow models like BKT can perform just as well and offer us greater interpretability and explanatory power.', 'cs.AI', '2016-03-14T04:20:55Z', 'http://arxiv.org/abs/1604.02416v2', '2016-10-08 10:26:09', '2016-10-08 10:26:09')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPublish Load (1.4ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 986[0m
  [1m[35mAuthor Load (1.2ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Mohammad Khajah'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Mohammad Khajah', '2016-10-08 10:26:09', '2016-10-08 10:26:09')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2609, 986, 0, '2016-10-08 10:26:09', '2016-10-08 10:26:09')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (1.5ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Robert V. Lindsey'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Robert V. Lindsey', '2016-10-08 10:26:09', '2016-10-08 10:26:09')[0m
  [1m[35m (2.9ms)[0m  COMMIT
  [1m[36m (0.3ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2610, 986, 1, '2016-10-08 10:26:09', '2016-10-08 10:26:09')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.7ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Michael C. Mozer'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Michael C. Mozer', '2016-10-08 10:26:09', '2016-10-08 10:26:09')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2611, 986, 2, '2016-10-08 10:26:09', '2016-10-08 10:26:09')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (1.0ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Exploratory Gradient Boosting for Reinforcement Learning in Complex Domains'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Exploratory Gradient Boosting for Reinforcement Learning in Complex Domains', 'High-dimensional observations and complex real-world dynamics present major challenges in reinforcement learning for both function approximation and exploration. We address both of these challenges with two complementary techniques: First, we develop a gradient-boosting style, non-parametric function approximator for learning on $Q$-function residuals. And second, we propose an exploration strategy inspired by the principles of state abstraction and information acquisition under uncertainty. We demonstrate the empirical effectiveness of these techniques, first, as a preliminary check, on two standard tasks (Blackjack and $n$-Chain), and then on two much larger and more realistic tasks with high-dimensional observation spaces. Specifically, we introduce two benchmarks built within the game Minecraft where the observations are pixel arrays of the agent\'s visual field. A combination of our two algorithmic techniques performs competitively on the standard reinforcement-learning tasks while consistently and substantially outperforming baselines on the two tasks with high-dimensional observation spaces. The new function approximator, exploration strategy, and evaluation benchmarks are each of independent interest in the pursuit of reinforcement-learning methods that scale to real-world domains.', 'cs.AI', '2016-03-14T03:16:25Z', 'http://arxiv.org/abs/1603.04119v1', '2016-10-08 10:26:09', '2016-10-08 10:26:09')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPublish Load (1.4ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 987[0m
  [1m[35mAuthor Load (1.1ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'David Abel'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('David Abel', '2016-10-08 10:26:09', '2016-10-08 10:26:09')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2612, 987, 0, '2016-10-08 10:26:09', '2016-10-08 10:26:09')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (1.3ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Alekh Agarwal'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36m (0.1ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1808, 987, 1, '2016-10-08 10:26:09', '2016-10-08 10:26:09')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (1.5ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Fernando Diaz'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36m (0.1ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2261, 987, 2, '2016-10-08 10:26:09', '2016-10-08 10:26:09')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.9ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Akshay Krishnamurthy'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36m (0.1ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1807, 987, 3, '2016-10-08 10:26:09', '2016-10-08 10:26:09')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (1.4ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Robert E. Schapire'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Robert E. Schapire', '2016-10-08 10:26:09', '2016-10-08 10:26:09')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2613, 987, 4, '2016-10-08 10:26:09', '2016-10-08 10:26:09')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (1.1ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Active Algorithms For Preference Learning Problems with Multiple Populations'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Active Algorithms For Preference Learning Problems with Multiple Populations', 'In this paper we model the problem of learning preferences of a population as an active learning problem. We propose an algorithm can adaptively choose pairs of items to show to users coming from a heterogeneous population, and use the obtained reward to decide which pair of items to show next. We provide computationally efficient algorithms with provable sample complexity guarantees for this problem in both the noiseless and noisy cases. In the process of establishing sample complexity guarantees for our algorithms, we establish new results using a Nystr{\\\"o}m-like method which can be of independent interest. We supplement our theoretical results with experimental comparisons.', 'stat.ML', '2016-03-14T03:08:24Z', 'http://arxiv.org/abs/1603.04118v2', '2016-10-08 10:26:09', '2016-10-08 10:26:09')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (1.7ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 988
  [1m[36mAuthor Load (1.2ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Aniruddha Bhargava'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Aniruddha Bhargava', '2016-10-08 10:26:09', '2016-10-08 10:26:09')[0m
  [1m[35m (2.9ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2614, 988, 0, '2016-10-08 10:26:09', '2016-10-08 10:26:09')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.6ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Ravi Ganti'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Ravi Ganti', '2016-10-08 10:26:09', '2016-10-08 10:26:09')
  [1m[36m (2.2ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.4ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2615, 988, 1, '2016-10-08 10:26:09', '2016-10-08 10:26:09')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (1.5ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Robert Nowak'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Robert Nowak', '2016-10-08 10:26:09', '2016-10-08 10:26:09')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2616, 988, 2, '2016-10-08 10:26:09', '2016-10-08 10:26:09')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (1.1ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Geometry of Interest (GOI): Spatio-Temporal Destination Extraction and Partitioning in GPS Trajectory Data'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Geometry of Interest (GOI): Spatio-Temporal Destination Extraction and Partitioning in GPS Trajectory Data', 'Nowadays large amounts of GPS trajectory data is being continuously collected by GPS-enabled devices such as vehicles navigation systems and mobile phones. GPS trajectory data is useful for applications such as traffic management, location forecasting, and itinerary planning. Such applications often need to extract the time-stamped Sequence of Visited Locations (SVLs) of the mobile objects. The nearest neighbor query (NNQ) is the most applied method for labeling the visited locations based on the IDs of the POIs in the process of SVL generation. NNQ in some scenarios is not accurate enough. To improve the quality of the extracted SVLs, instead of using NNQ, we label the visited locations as the IDs of the POIs which geometrically intersect with the GPS observations. Intersection operator requires the accurate geometry of the points of interest which we refer to them as the Geometries of Interest (GOIs). In some application domains (e.g. movement trajectories of animals), adequate information about the POIs and their GOIs may not be available a priori, or they may not be publicly accessible and, therefore, they need to be derived from GPS trajectory data. In this paper we propose a novel method for estimating the POIs and their GOIs, which consists of three phases: (i) extracting the geometries of the stay regions; (ii) constructing the geometry of destination regions based on the extracted stay regions; and (iii) constructing the GOIs based on the geometries of the destination regions. Using the geometric similarity to known GOIs as the major evaluation criterion, the experiments we performed using long-term GPS trajectory data show that our method outperforms the existing approaches.', 'cs.AI', '2016-03-14T01:52:28Z', 'http://arxiv.org/abs/1603.04110v2', '2016-10-08 10:26:09', '2016-10-08 10:26:09')
  [1m[36m (3.0ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (2.2ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 989
  [1m[36mAuthor Load (1.6ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Seyed Morteza Mousavi'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Seyed Morteza Mousavi', '2016-10-08 10:26:09', '2016-10-08 10:26:09')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2617, 989, 0, '2016-10-08 10:26:09', '2016-10-08 10:26:09')
  [1m[36m (0.7ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.6ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Aaron Harwood'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Aaron Harwood', '2016-10-08 10:26:09', '2016-10-08 10:26:09')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2618, 989, 1, '2016-10-08 10:26:09', '2016-10-08 10:26:09')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (1.1ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Shanika Karunasekera'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Shanika Karunasekera', '2016-10-08 10:26:09', '2016-10-08 10:26:09')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2619, 989, 2, '2016-10-08 10:26:09', '2016-10-08 10:26:09')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.3ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Mojtaba Maghrebi'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Mojtaba Maghrebi', '2016-10-08 10:26:09', '2016-10-08 10:26:09')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2620, 989, 3, '2016-10-08 10:26:09', '2016-10-08 10:26:09')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPaper Load (1.0ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'A Signaling Game Approach to Databases Querying and Interaction'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('A Signaling Game Approach to Databases Querying and Interaction', 'As most database users cannot precisely express their information needs, it is challenging for database management systems to understand them. We propose a novel formal framework for representing and understanding information needs in database querying and exploration. Our framework considers querying as a collaboration between the user and the database management system to establish a it mutual language for representing information needs. We formalize this collaboration as a signaling game, where each mutual language is an equilibrium for the game. A query interface is more effective if it establishes a less ambiguous mutual language faster. We discuss some equilibria, strategies, and the convergence in this game. In particular, we propose a reinforcement learning mechanism and analyze it within our framework. We prove that this adaptation mechanism for the query interface improves the effectiveness of answering queries stochastically speaking, and converges almost surely. We extend out results for the cases that the user also modifies her strategy during the interaction.', 'cs.DB', '2016-03-13T19:28:22Z', 'http://arxiv.org/abs/1603.04068v2', '2016-10-08 10:26:09', '2016-10-08 10:26:09')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPublish Load (1.6ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 990[0m
  [1m[35mAuthor Load (1.2ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Ben McCamish'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Ben McCamish', '2016-10-08 10:26:09', '2016-10-08 10:26:09')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2621, 990, 0, '2016-10-08 10:26:09', '2016-10-08 10:26:09')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (1.4ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Vinod Ramaswamy'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Vinod Ramaswamy', '2016-10-08 10:26:09', '2016-10-08 10:26:09')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2622, 990, 1, '2016-10-08 10:26:09', '2016-10-08 10:26:09')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.4ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Arash Termehchy'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Arash Termehchy', '2016-10-08 10:26:09', '2016-10-08 10:26:09')
  [1m[36m (3.0ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2623, 990, 2, '2016-10-08 10:26:09', '2016-10-08 10:26:09')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (1.5ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Behrouz Touri'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Behrouz Touri', '2016-10-08 10:26:09', '2016-10-08 10:26:09')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2624, 990, 3, '2016-10-08 10:26:09', '2016-10-08 10:26:09')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.6ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Eric Frew'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Eric Frew', '2016-10-08 10:26:09', '2016-10-08 10:26:09')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2625, 990, 4, '2016-10-08 10:26:09', '2016-10-08 10:26:09')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPaper Load (1.1ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'On Learning High Dimensional Structured Single Index Models'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('On Learning High Dimensional Structured Single Index Models', 'Single Index Models (SIMs) are simple yet flexible semi-parametric models for classification and regression, where response variables are modeled as a nonlinear, monotonic function of a linear combination of features. Estimation in this context requires learning both the feature weights and the nonlinear function that relates features to observations. While methods have been described to learn SIMs in the low dimensional regime, a method that can efficiently learn SIMs in high dimensions, and under general structural assumptions, has not been forthcoming. In this paper, we propose computationally efficient algorithms for SIM inference in high dimensions using atomic norm regularization. This general approach to imposing structure in high-dimensional modeling specializes to sparsity, group sparsity, and low-rank assumptions among others. We also provide a scalable, stochastic version of the method. Experiments show that the method we propose enjoys superior predictive performance when compared to generalized linear models such as logistic regression, on several real-world datasets.', 'stat.ML', '2016-03-13T01:53:40Z', 'http://arxiv.org/abs/1603.03980v1', '2016-10-08 10:26:09', '2016-10-08 10:26:09')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPublish Load (1.6ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 991[0m
  [1m[35mAuthor Load (1.2ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Nikhil Rao'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Nikhil Rao', '2016-10-08 10:26:09', '2016-10-08 10:26:09')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2626, 991, 0, '2016-10-08 10:26:09', '2016-10-08 10:26:09')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (1.3ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Ravi Ganti'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36m (0.1ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2615, 991, 1, '2016-10-08 10:26:09', '2016-10-08 10:26:09')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (1.4ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Laura Balzano'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Laura Balzano', '2016-10-08 10:26:09', '2016-10-08 10:26:09')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2627, 991, 2, '2016-10-08 10:26:09', '2016-10-08 10:26:09')
  [1m[36m (1.2ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.6ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Rebecca Willett'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Rebecca Willett', '2016-10-08 10:26:09', '2016-10-08 10:26:09')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2628, 991, 3, '2016-10-08 10:26:09', '2016-10-08 10:26:09')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (1.3ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Robert Nowak'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36m (0.2ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2616, 991, 4, '2016-10-08 10:26:09', '2016-10-08 10:26:09')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPaper Load (1.0ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Characterization of neighborhood behaviours in a multi-neighborhood local search algorithm'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Characterization of neighborhood behaviours in a multi-neighborhood local search algorithm', 'We consider a multi-neighborhood local search algorithm with a large number of possible neighborhoods. Each neighborhood is accompanied by a weight value which represents the probability of being chosen at each iteration. These weights are fixed before the algorithm runs, and are considered as parameters of the algorithm. Given a set of instances, off-line tuning of the algorithm\'s parameters can be done by automated algorithm configuration tools (e.g., SMAC). However, the large number of neighborhoods can make the tuning expensive and difficult even when the number of parameters has been reduced by some intuition. In this work, we propose a systematic method to characterize each neighborhood\'s behaviours, representing them as a feature vector, and using cluster analysis to form similar groups of neighborhoods. The novelty of our characterization method is the ability of reflecting changes of behaviours according to hardness of different solution quality regions. We show that using neighborhood clusters instead of individual neighborhoods helps to reduce the parameter configuration space without misleading the search of the tuning procedure. Moreover, this method is problem-independent and potentially can be applied in similar contexts.', 'cs.AI', '2016-03-12T12:38:32Z', 'http://arxiv.org/abs/1603.06459v1', '2016-10-08 10:26:09', '2016-10-08 10:26:09')[0m
  [1m[35m (3.0ms)[0m  COMMIT
  [1m[36mPublish Load (2.2ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 992[0m
  [1m[35mAuthor Load (1.5ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Nguyen Thi Thanh Dang'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Nguyen Thi Thanh Dang', '2016-10-08 10:26:09', '2016-10-08 10:26:09')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2629, 992, 0, '2016-10-08 10:26:09', '2016-10-08 10:26:09')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (0.4ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Patrick De Causmaecker'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36m (0.1ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (153, 992, 1, '2016-10-08 10:26:09', '2016-10-08 10:26:09')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPaper Load (1.0ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Grounding Recursive Aggregates: Preliminary Report'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Grounding Recursive Aggregates: Preliminary Report', 'Problem solving in Answer Set Programming consists of two steps, a first grounding phase, systematically replacing all variables by terms, and a second solving phase computing the stable models of the obtained ground program. An intricate part of both phases is the treatment of aggregates, which are popular language constructs that allow for expressing properties over sets. In this paper, we elaborate upon the treatment of aggregates during grounding in Gringo series 4. Consequently, our approach is applicable to grounding based on semi-naive database evaluation techniques. In particular, we provide a series of algorithms detailing the treatment of recursive aggregates and illustrate this by a running example.', 'cs.AI', '2016-03-12T10:22:13Z', 'http://arxiv.org/abs/1603.03884v1', '2016-10-08 10:26:09', '2016-10-08 10:26:09')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPublish Load (1.6ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 993[0m
  [1m[35mAuthor Load (1.1ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Martin Gebser'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Martin Gebser', '2016-10-08 10:26:09', '2016-10-08 10:26:09')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2630, 993, 0, '2016-10-08 10:26:09', '2016-10-08 10:26:09')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (1.3ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Roland Kaminski'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Roland Kaminski', '2016-10-08 10:26:09', '2016-10-08 10:26:09')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2631, 993, 1, '2016-10-08 10:26:09', '2016-10-08 10:26:09')
  [1m[36m (2.7ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (2.1ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Torsten Schaub'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Torsten Schaub', '2016-10-08 10:26:09', '2016-10-08 10:26:09')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2632, 993, 2, '2016-10-08 10:26:09', '2016-10-08 10:26:09')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mPaper Load (1.0ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Sequential Short-Text Classification with Recurrent and Convolutional Neural Networks'  ORDER BY `papers`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Sequential Short-Text Classification with Recurrent and Convolutional Neural Networks', 'Recent approaches based on artificial neural networks (ANNs) have shown promising results for short-text classification. However, many short texts occur in sequences (e.g., sentences in a document or utterances in a dialog), and most existing ANN-based systems do not leverage the preceding short texts when classifying a subsequent one. In this work, we present a model based on recurrent neural networks and convolutional neural networks that incorporates the preceding short texts. Our model achieves state-of-the-art results on three different datasets for dialog act prediction.', 'cs.CL', '2016-03-12T00:02:51Z', 'http://arxiv.org/abs/1603.03827v1', '2016-10-08 10:26:09', '2016-10-08 10:26:09')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mPublish Load (1.7ms)[0m  [1mSELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 994[0m
  [1m[35mAuthor Load (0.7ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Ji Young Lee'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35m (0.2ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1340, 994, 0, '2016-10-08 10:26:09', '2016-10-08 10:26:09')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (0.7ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Franck Dernoncourt'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35m (0.1ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (848, 994, 1, '2016-10-08 10:26:09', '2016-10-08 10:26:09')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (1.1ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Solving MaxSAT by Successive Calls to a SAT Solver'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.4ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Solving MaxSAT by Successive Calls to a SAT Solver', 'The Maximum Satisfiability (MaxSAT) problem is the problem of finding a truth assignment that maximizes the number of satisfied clauses of a given Boolean formula in Conjunctive Normal Form (CNF). Many exact solvers for MaxSAT have been developed during recent years, and many of them were presented in the well-known SAT conference. Algorithms for MaxSAT generally fall into two categories: (1) branch and bound algorithms and (2) algorithms that use successive calls to a SAT solver (SAT- based), which this paper in on. In practical problems, SAT-based algorithms have been shown to be more efficient. This paper provides an experimental investigation to compare the performance of recent SAT-based and branch and bound algorithms on the benchmarks of the MaxSAT Evaluations.', 'cs.AI', '2016-03-11T22:54:28Z', 'http://arxiv.org/abs/1603.03814v1', '2016-10-08 10:26:09', '2016-10-08 10:26:09')
  [1m[36m (3.0ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (2.2ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 995
  [1m[36mAuthor Load (1.5ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Mohamed El Halaby'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Mohamed El Halaby', '2016-10-08 10:26:09', '2016-10-08 10:26:09')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2633, 995, 0, '2016-10-08 10:26:09', '2016-10-08 10:26:09')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (1.1ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Demonstrating the Feasibility of Automatic Game Balancing'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Demonstrating the Feasibility of Automatic Game Balancing', 'Game balancing is an important part of the (computer) game design process, in which designers adapt a game prototype so that the resulting gameplay is as entertaining as possible. In industry, the evaluation of a game is often based on costly playtests with human players. It suggests itself to automate this process using surrogate models for the prediction of gameplay and outcome. In this paper, the feasibility of automatic balancing using simulation- and deck-based objectives is investigated for the card game top trumps. Additionally, the necessity of a multi-objective approach is asserted by a comparison with the only known (single-objective) method. We apply a multi-objective evolutionary algorithm to obtain decks that optimise objectives, e.g. win rate and average number of tricks, developed to express the fairness and the excitement of a game of top trumps. The results are compared with decks from published top trumps decks using simulation-based objectives. The possibility to generate decks better or at least as good as decks from published top trumps decks in terms of these objectives is demonstrated. Our results indicate that automatic balancing with the presented approach is feasible even for more complex games such as real-time strategy games.', 'cs.HC', '2016-03-11T21:36:27Z', 'http://arxiv.org/abs/1603.03795v1', '2016-10-08 10:26:09', '2016-10-08 10:26:09')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (1.3ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 996
  [1m[36mAuthor Load (1.2ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Vanessa Volz'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Vanessa Volz', '2016-10-08 10:26:09', '2016-10-08 10:26:09')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2634, 996, 0, '2016-10-08 10:26:09', '2016-10-08 10:26:09')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.5ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Günter Rudolph'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Günter Rudolph', '2016-10-08 10:26:09', '2016-10-08 10:26:09')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2635, 996, 1, '2016-10-08 10:26:09', '2016-10-08 10:26:09')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (1.2ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Boris Naujoks'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Boris Naujoks', '2016-10-08 10:26:09', '2016-10-08 10:26:09')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2636, 996, 2, '2016-10-08 10:26:09', '2016-10-08 10:26:09')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (1.0ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'High-dimensional Black-box Optimization via Divide and Approximate Conquer'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('High-dimensional Black-box Optimization via Divide and Approximate Conquer', 'Divide and Conquer (DC) is conceptually well suited to high-dimensional optimization by decomposing a problem into multiple small-scale sub-problems. However, appealing performance can be seldom observed when the sub-problems are interdependent. This paper suggests that the major difficulty of tackling interdependent sub-problems lies in the precise evaluation of a partial solution (to a sub-problem), which can be overwhelmingly costly and thus makes sub-problems non-trivial to conquer. Thus, we propose an approximation approach, named Divide and Approximate Conquer (DAC), which reduces the cost of partial solution evaluation from exponential time to polynomial time. Meanwhile, the convergence to the global optimum (of the original problem) is still guaranteed. The effectiveness of DAC is demonstrated empirically on two sets of non-separable high-dimensional problems.', 'cs.AI', '2016-03-11T04:50:59Z', 'http://arxiv.org/abs/1603.03518v2', '2016-10-08 10:26:09', '2016-10-08 10:26:09')
  [1m[36m (3.0ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (1.8ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 997
  [1m[36mAuthor Load (1.5ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Peng Yang'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Peng Yang', '2016-10-08 10:26:09', '2016-10-08 10:26:09')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2637, 997, 0, '2016-10-08 10:26:09', '2016-10-08 10:26:09')
  [1m[36m (6.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (2.1ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Ke Tang'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Ke Tang', '2016-10-08 10:26:09', '2016-10-08 10:26:09')
  [1m[36m (6.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.4ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2638, 997, 1, '2016-10-08 10:26:09', '2016-10-08 10:26:09')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mAuthor Load (1.5ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Xin Yao'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Xin Yao', '2016-10-08 10:26:09', '2016-10-08 10:26:09')[0m
  [1m[35m (0.6ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2639, 997, 2, '2016-10-08 10:26:09', '2016-10-08 10:26:09')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (1.1ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Dimension Coupling: Optimal Active Learning of Halfspaces via Query Synthesis'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Dimension Coupling: Optimal Active Learning of Halfspaces via Query Synthesis', 'In this paper, we consider the problem of actively learning a linear classifier through query synthesis where the learner can construct artificial queries in order to estimate the true decision boundaries. This problem has recently gained a lot of interest in automated science and adversarial reverse engineering for which only heuristic algorithms are known. In such applications, queries can be constructed de novo to elicit information (e.g., automated science) or to evade detection with minimal cost (e.g., adversarial reverse engineering). We develop a general framework, called dimension coupling (DC), that 1) reduces a d-dimensional learning problem to d-1 low-dimensional sub-problems, 2) solves each sub-problem efficiently, and 3) appropriately aggregates the results and outputs a linear classifier. We consider the three most common scenarios in the literature: idealized noise-free, independent noise realizations, and agnostic settings. We show that the DC framework avoids the curse of dimensionality: its computational complexity in all three cases scales linearly with the dimension. Moreover, in the noiseless and noisy cases, we show that the query complexity of DC is near optimal (within a constant factor of the optimum algorithm). We also develop an agnostic variant of DC for which we provide strong theoretical guarantees. To further support our theoretical analysis, we compare the performance of DC with the existing work in all three settings. We observe that DC consistently outperforms the prior arts in terms of query complexity while often running orders of magnitude faster.', 'cs.AI', '2016-03-11T04:18:48Z', 'http://arxiv.org/abs/1603.03515v1', '2016-10-08 10:26:09', '2016-10-08 10:26:09')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (1.3ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 998
  [1m[36mAuthor Load (1.1ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Lin Chen'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Lin Chen', '2016-10-08 10:26:09', '2016-10-08 10:26:09')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2640, 998, 0, '2016-10-08 10:26:09', '2016-10-08 10:26:09')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mAuthor Load (1.2ms)[0m  SELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Hamed Hassani'  ORDER BY `authors`.`id` ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Hamed Hassani', '2016-10-08 10:26:09', '2016-10-08 10:26:09')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2641, 998, 1, '2016-10-08 10:26:09', '2016-10-08 10:26:09')[0m
  [1m[35m (0.4ms)[0m  COMMIT
  [1m[36mAuthor Load (1.6ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Amin Karbasi'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Amin Karbasi', '2016-10-08 10:26:09', '2016-10-08 10:26:09')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2642, 998, 2, '2016-10-08 10:26:09', '2016-10-08 10:26:09')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (1.0ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'A Set Theoretic Approach for Knowledge Representation: the Representation Part'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('A Set Theoretic Approach for Knowledge Representation: the Representation Part', 'In this paper, we propose a set theoretic approach for knowledge representation. While the syntax of an application domain is captured by set theoretic constructs including individuals, concepts and operators, knowledge is formalized by equality assertions. We first present a primitive form that uses minimal assumed knowledge and constructs. Then, assuming naive set theory, we extend it by definitions, which are special kinds of knowledge. Interestingly, we show that the primitive form is expressive enough to define logic operators, not only propositional connectives but also quantifiers.', 'cs.AI', '2016-03-11T03:22:12Z', 'http://arxiv.org/abs/1603.03511v1', '2016-10-08 10:26:09', '2016-10-08 10:26:09')
  [1m[36m (2.9ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (2.3ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 999
  [1m[36mAuthor Load (1.5ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Yi Zhou'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `authors` (`name`, `created_at`, `updated_at`) VALUES ('Yi Zhou', '2016-10-08 10:26:09', '2016-10-08 10:26:09')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (2643, 999, 0, '2016-10-08 10:26:09', '2016-10-08 10:26:09')
  [1m[36m (0.5ms)[0m  [1mCOMMIT[0m
  [1m[35mPaper Load (1.1ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`title` = 'Bayesian Opponent Exploitation in Imperfect-Information Games'  ORDER BY `papers`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `papers` (`title`, `abstract`, `category`, `date`, `url`, `created_at`, `updated_at`) VALUES ('Bayesian Opponent Exploitation in Imperfect-Information Games', 'The two most fundamental problems in computational game theory are computing a Nash equilibrium and learning to exploit opponents given observations of their play (aka opponent exploitation). The latter is perhaps even more important than the former: Nash equilibrium does not have a compelling theoretical justification in game classes other than two-player zero-sum, and furthermore for all games one can potentially do better by exploiting perceived weaknesses of the opponent than by following a static equilibrium strategy throughout the match. The natural setting for opponent exploitation is the Bayesian setting where we have a prior model that is integrated with observations to create a posterior opponent model that we respond to. The most natural, and a well-studied prior distribution is the Dirichlet distribution. An exact polynomial-time algorithm is known for best-responding to the posterior distribution for an opponent assuming a Dirichlet prior with multinomial sampling in the case of normal-form games; however, for the case of imperfect-information games the best known algorithm is a sampling algorithm based on approximating an infinite integral without theoretical guarantees. The main result is the first exact algorithm for accomplishing this in imperfect-information games. We also present an algorithm for another natural setting where the prior is the uniform distribution over a polyhedron.', 'cs.GT', '2016-03-10T23:50:51Z', 'http://arxiv.org/abs/1603.03491v1', '2016-10-08 10:26:09', '2016-10-08 10:26:09')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
  [1m[35mPublish Load (1.4ms)[0m  SELECT `publishes`.* FROM `publishes` WHERE `publishes`.`paper_id` = 1000
  [1m[36mAuthor Load (0.9ms)[0m  [1mSELECT  `authors`.* FROM `authors` WHERE `authors`.`name` = 'Sam Ganzfried'  ORDER BY `authors`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36m (0.1ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `publishes` (`author_id`, `paper_id`, `order`, `created_at`, `updated_at`) VALUES (1745, 1000, 0, '2016-10-08 10:26:09', '2016-10-08 10:26:09')[0m
  [1m[35m (0.5ms)[0m  COMMIT
  [1m[36mActiveRecord::SchemaMigration Load (0.3ms)[0m  [1mSELECT `schema_migrations`.* FROM `schema_migrations`[0m
  [1m[35mActiveRecord::SchemaMigration Load (0.3ms)[0m  SELECT `schema_migrations`.* FROM `schema_migrations`
  [1m[36m (0.4ms)[0m  [1mSELECT fk.referenced_table_name as 'to_table'
      ,fk.referenced_column_name as 'primary_key'
      ,fk.column_name as 'column'
      ,fk.constraint_name as 'name'
FROM information_schema.key_column_usage fk
WHERE fk.referenced_column_name is not null
  AND fk.table_schema = 'arxivpicks_development'
  AND fk.table_name = 'authors'
[0m
  [1m[35m (0.3ms)[0m  SHOW CREATE TABLE `authors`
  [1m[36m (0.4ms)[0m  [1mSELECT fk.referenced_table_name as 'to_table'
      ,fk.referenced_column_name as 'primary_key'
      ,fk.column_name as 'column'
      ,fk.constraint_name as 'name'
FROM information_schema.key_column_usage fk
WHERE fk.referenced_column_name is not null
  AND fk.table_schema = 'arxivpicks_development'
  AND fk.table_name = 'comments'
[0m
  [1m[35m (0.3ms)[0m  SHOW CREATE TABLE `comments`
  [1m[36m (0.4ms)[0m  [1mSELECT fk.referenced_table_name as 'to_table'
      ,fk.referenced_column_name as 'primary_key'
      ,fk.column_name as 'column'
      ,fk.constraint_name as 'name'
FROM information_schema.key_column_usage fk
WHERE fk.referenced_column_name is not null
  AND fk.table_schema = 'arxivpicks_development'
  AND fk.table_name = 'images'
[0m
  [1m[35m (0.3ms)[0m  SHOW CREATE TABLE `images`
  [1m[36m (0.5ms)[0m  [1mSELECT fk.referenced_table_name as 'to_table'
      ,fk.referenced_column_name as 'primary_key'
      ,fk.column_name as 'column'
      ,fk.constraint_name as 'name'
FROM information_schema.key_column_usage fk
WHERE fk.referenced_column_name is not null
  AND fk.table_schema = 'arxivpicks_development'
  AND fk.table_name = 'likes'
[0m
  [1m[35m (0.3ms)[0m  SHOW CREATE TABLE `likes`
  [1m[36m (0.4ms)[0m  [1mSELECT fk.referenced_table_name as 'to_table'
      ,fk.referenced_column_name as 'primary_key'
      ,fk.column_name as 'column'
      ,fk.constraint_name as 'name'
FROM information_schema.key_column_usage fk
WHERE fk.referenced_column_name is not null
  AND fk.table_schema = 'arxivpicks_development'
  AND fk.table_name = 'papers'
[0m
  [1m[35m (0.3ms)[0m  SHOW CREATE TABLE `papers`
  [1m[36m (0.4ms)[0m  [1mSELECT fk.referenced_table_name as 'to_table'
      ,fk.referenced_column_name as 'primary_key'
      ,fk.column_name as 'column'
      ,fk.constraint_name as 'name'
FROM information_schema.key_column_usage fk
WHERE fk.referenced_column_name is not null
  AND fk.table_schema = 'arxivpicks_development'
  AND fk.table_name = 'publishes'
[0m
  [1m[35m (0.3ms)[0m  SHOW CREATE TABLE `publishes`
  [1m[36m (0.4ms)[0m  [1mSELECT fk.referenced_table_name as 'to_table'
      ,fk.referenced_column_name as 'primary_key'
      ,fk.column_name as 'column'
      ,fk.constraint_name as 'name'
FROM information_schema.key_column_usage fk
WHERE fk.referenced_column_name is not null
  AND fk.table_schema = 'arxivpicks_development'
  AND fk.table_name = 'users'
[0m
  [1m[35m (0.3ms)[0m  SHOW CREATE TABLE `users`
  [1m[36mActiveRecord::SchemaMigration Load (0.2ms)[0m  [1mSELECT `schema_migrations`.* FROM `schema_migrations`[0m
  [1m[35mActiveRecord::SchemaMigration Load (0.3ms)[0m  SELECT `schema_migrations`.* FROM `schema_migrations`
  [1m[36m (0.3ms)[0m  [1mSELECT fk.referenced_table_name as 'to_table'
      ,fk.referenced_column_name as 'primary_key'
      ,fk.column_name as 'column'
      ,fk.constraint_name as 'name'
FROM information_schema.key_column_usage fk
WHERE fk.referenced_column_name is not null
  AND fk.table_schema = 'arxivpicks_development'
  AND fk.table_name = 'authors'
[0m
  [1m[35m (0.2ms)[0m  SHOW CREATE TABLE `authors`
  [1m[36m (0.3ms)[0m  [1mSELECT fk.referenced_table_name as 'to_table'
      ,fk.referenced_column_name as 'primary_key'
      ,fk.column_name as 'column'
      ,fk.constraint_name as 'name'
FROM information_schema.key_column_usage fk
WHERE fk.referenced_column_name is not null
  AND fk.table_schema = 'arxivpicks_development'
  AND fk.table_name = 'comments'
[0m
  [1m[35m (0.2ms)[0m  SHOW CREATE TABLE `comments`
  [1m[36m (0.3ms)[0m  [1mSELECT fk.referenced_table_name as 'to_table'
      ,fk.referenced_column_name as 'primary_key'
      ,fk.column_name as 'column'
      ,fk.constraint_name as 'name'
FROM information_schema.key_column_usage fk
WHERE fk.referenced_column_name is not null
  AND fk.table_schema = 'arxivpicks_development'
  AND fk.table_name = 'likes'
[0m
  [1m[35m (0.2ms)[0m  SHOW CREATE TABLE `likes`
  [1m[36m (0.3ms)[0m  [1mSELECT fk.referenced_table_name as 'to_table'
      ,fk.referenced_column_name as 'primary_key'
      ,fk.column_name as 'column'
      ,fk.constraint_name as 'name'
FROM information_schema.key_column_usage fk
WHERE fk.referenced_column_name is not null
  AND fk.table_schema = 'arxivpicks_development'
  AND fk.table_name = 'papers'
[0m
  [1m[35m (0.3ms)[0m  SHOW CREATE TABLE `papers`
  [1m[36m (0.4ms)[0m  [1mSELECT fk.referenced_table_name as 'to_table'
      ,fk.referenced_column_name as 'primary_key'
      ,fk.column_name as 'column'
      ,fk.constraint_name as 'name'
FROM information_schema.key_column_usage fk
WHERE fk.referenced_column_name is not null
  AND fk.table_schema = 'arxivpicks_development'
  AND fk.table_name = 'publishes'
[0m
  [1m[35m (0.3ms)[0m  SHOW CREATE TABLE `publishes`
  [1m[36m (0.4ms)[0m  [1mSELECT fk.referenced_table_name as 'to_table'
      ,fk.referenced_column_name as 'primary_key'
      ,fk.column_name as 'column'
      ,fk.constraint_name as 'name'
FROM information_schema.key_column_usage fk
WHERE fk.referenced_column_name is not null
  AND fk.table_schema = 'arxivpicks_development'
  AND fk.table_name = 'users'
[0m
  [1m[35m (0.3ms)[0m  SHOW CREATE TABLE `users`
  [1m[36mActiveRecord::SchemaMigration Load (0.8ms)[0m  [1mSELECT `schema_migrations`.* FROM `schema_migrations`[0m
Migrating to RemoveImageUrlFromUsers (20161008111049)
  [1m[35m (1.2ms)[0m  ALTER TABLE `users` DROP `image_url`
  [1m[36mActiveRecord::SchemaMigration Load (0.3ms)[0m  [1mSELECT `schema_migrations`.* FROM `schema_migrations`[0m
Migrating to RemoveImageIdFromUsers (20161008111214)
  [1m[35m (79.9ms)[0m  ALTER TABLE `users` DROP `image_id`
  [1m[36m (0.3ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `schema_migrations` (`version`) VALUES ('20161008111214')
  [1m[36m (17.7ms)[0m  [1mCOMMIT[0m
  [1m[35mActiveRecord::SchemaMigration Load (0.4ms)[0m  SELECT `schema_migrations`.* FROM `schema_migrations`
  [1m[36m (0.3ms)[0m  [1mSELECT fk.referenced_table_name as 'to_table'
      ,fk.referenced_column_name as 'primary_key'
      ,fk.column_name as 'column'
      ,fk.constraint_name as 'name'
FROM information_schema.key_column_usage fk
WHERE fk.referenced_column_name is not null
  AND fk.table_schema = 'arxivpicks_development'
  AND fk.table_name = 'authors'
[0m
  [1m[35m (0.2ms)[0m  SHOW CREATE TABLE `authors`
  [1m[36m (0.3ms)[0m  [1mSELECT fk.referenced_table_name as 'to_table'
      ,fk.referenced_column_name as 'primary_key'
      ,fk.column_name as 'column'
      ,fk.constraint_name as 'name'
FROM information_schema.key_column_usage fk
WHERE fk.referenced_column_name is not null
  AND fk.table_schema = 'arxivpicks_development'
  AND fk.table_name = 'comments'
[0m
  [1m[35m (0.2ms)[0m  SHOW CREATE TABLE `comments`
  [1m[36m (0.4ms)[0m  [1mSELECT fk.referenced_table_name as 'to_table'
      ,fk.referenced_column_name as 'primary_key'
      ,fk.column_name as 'column'
      ,fk.constraint_name as 'name'
FROM information_schema.key_column_usage fk
WHERE fk.referenced_column_name is not null
  AND fk.table_schema = 'arxivpicks_development'
  AND fk.table_name = 'likes'
[0m
  [1m[35m (0.3ms)[0m  SHOW CREATE TABLE `likes`
  [1m[36m (0.3ms)[0m  [1mSELECT fk.referenced_table_name as 'to_table'
      ,fk.referenced_column_name as 'primary_key'
      ,fk.column_name as 'column'
      ,fk.constraint_name as 'name'
FROM information_schema.key_column_usage fk
WHERE fk.referenced_column_name is not null
  AND fk.table_schema = 'arxivpicks_development'
  AND fk.table_name = 'papers'
[0m
  [1m[35m (0.2ms)[0m  SHOW CREATE TABLE `papers`
  [1m[36m (0.4ms)[0m  [1mSELECT fk.referenced_table_name as 'to_table'
      ,fk.referenced_column_name as 'primary_key'
      ,fk.column_name as 'column'
      ,fk.constraint_name as 'name'
FROM information_schema.key_column_usage fk
WHERE fk.referenced_column_name is not null
  AND fk.table_schema = 'arxivpicks_development'
  AND fk.table_name = 'publishes'
[0m
  [1m[35m (0.3ms)[0m  SHOW CREATE TABLE `publishes`
  [1m[36m (0.4ms)[0m  [1mSELECT fk.referenced_table_name as 'to_table'
      ,fk.referenced_column_name as 'primary_key'
      ,fk.column_name as 'column'
      ,fk.constraint_name as 'name'
FROM information_schema.key_column_usage fk
WHERE fk.referenced_column_name is not null
  AND fk.table_schema = 'arxivpicks_development'
  AND fk.table_name = 'users'
[0m
  [1m[35m (0.2ms)[0m  SHOW CREATE TABLE `users`


Started GET "/" for ::1 at 2016-10-08 22:33:40 +0900
  [1m[36mActiveRecord::SchemaMigration Load (0.9ms)[0m  [1mSELECT `schema_migrations`.* FROM `schema_migrations`[0m
Processing by PapersController#index as HTML
  Rendered papers/index.html.erb within layouts/application (2.2ms)
Completed 200 OK in 736ms (Views: 724.6ms | ActiveRecord: 0.0ms)


Started GET "/assets/likes.self-e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855.css?body=1" for ::1 at 2016-10-08 22:33:40 +0900


Started GET "/assets/users.self-e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855.css?body=1" for ::1 at 2016-10-08 22:33:40 +0900


Started GET "/assets/users.self-877aef30ae1b040ab8a3aba4e3e309a11d7f2612f44dde450b5c157aa5f95c05.js?body=1" for ::1 at 2016-10-08 22:33:40 +0900


Started GET "/assets/application.self-e80e8f2318043e8af94dddc2adad5a4f09739a8ebb323b3ab31cd71d45fd9113.css?body=1" for ::1 at 2016-10-08 22:33:40 +0900


Started GET "/assets/likes.self-877aef30ae1b040ab8a3aba4e3e309a11d7f2612f44dde450b5c157aa5f95c05.js?body=1" for ::1 at 2016-10-08 22:33:40 +0900


Started GET "/" for ::1 at 2016-10-08 22:34:55 +0900
Processing by PapersController#index as HTML
  Rendered papers/index.html.erb within layouts/application (0.0ms)
Completed 200 OK in 63ms (Views: 61.8ms | ActiveRecord: 0.0ms)


Started GET "/assets/comments.self-e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855.css?body=1" for ::1 at 2016-10-08 22:34:55 +0900


Started GET "/assets/papers.self-e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855.css?body=1" for ::1 at 2016-10-08 22:34:55 +0900


Started GET "/assets/jquery.self-bd7ddd393353a8d2480a622e80342adf488fb6006d667e8b42e4c0073393abee.js?body=1" for ::1 at 2016-10-08 22:34:55 +0900


Started GET "/assets/likes.self-e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855.css?body=1" for ::1 at 2016-10-08 22:34:55 +0900


Started GET "/assets/application.self-e80e8f2318043e8af94dddc2adad5a4f09739a8ebb323b3ab31cd71d45fd9113.css?body=1" for ::1 at 2016-10-08 22:34:55 +0900


Started GET "/assets/users.self-e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855.css?body=1" for ::1 at 2016-10-08 22:34:55 +0900


Started GET "/assets/jquery_ujs.self-784a997f6726036b1993eb2217c9cb558e1cbb801c6da88105588c56f13b466a.js?body=1" for ::1 at 2016-10-08 22:34:55 +0900


Started GET "/assets/turbolinks.self-c5acd7a204f5f25ce7a1d8a0e4d92e28d34c9e2df2c7371cd7af88e147e4ad82.js?body=1" for ::1 at 2016-10-08 22:34:55 +0900


Started GET "/assets/comments.self-877aef30ae1b040ab8a3aba4e3e309a11d7f2612f44dde450b5c157aa5f95c05.js?body=1" for ::1 at 2016-10-08 22:34:55 +0900


Started GET "/assets/likes.self-877aef30ae1b040ab8a3aba4e3e309a11d7f2612f44dde450b5c157aa5f95c05.js?body=1" for ::1 at 2016-10-08 22:34:55 +0900


Started GET "/assets/papers.self-877aef30ae1b040ab8a3aba4e3e309a11d7f2612f44dde450b5c157aa5f95c05.js?body=1" for ::1 at 2016-10-08 22:34:55 +0900


Started GET "/assets/users.self-877aef30ae1b040ab8a3aba4e3e309a11d7f2612f44dde450b5c157aa5f95c05.js?body=1" for ::1 at 2016-10-08 22:34:55 +0900


Started GET "/assets/application.self-3b8dabdc891efe46b9a144b400ad69e37d7e5876bdc39dee783419a69d7ca819.js?body=1" for ::1 at 2016-10-08 22:34:55 +0900


Started GET "/" for ::1 at 2016-10-08 22:35:37 +0900
Processing by PapersController#index as HTML
  Rendered papers/index.html.erb within layouts/application (0.5ms)
Completed 200 OK in 45ms (Views: 44.5ms | ActiveRecord: 0.0ms)


Started GET "/assets/comments.self-e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855.css?body=1" for ::1 at 2016-10-08 22:35:37 +0900


Started GET "/assets/users.self-e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855.css?body=1" for ::1 at 2016-10-08 22:35:37 +0900


Started GET "/assets/likes.self-e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855.css?body=1" for ::1 at 2016-10-08 22:35:37 +0900


Started GET "/assets/papers.self-e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855.css?body=1" for ::1 at 2016-10-08 22:35:37 +0900


Started GET "/assets/jquery.self-bd7ddd393353a8d2480a622e80342adf488fb6006d667e8b42e4c0073393abee.js?body=1" for ::1 at 2016-10-08 22:35:37 +0900


Started GET "/assets/application.self-e80e8f2318043e8af94dddc2adad5a4f09739a8ebb323b3ab31cd71d45fd9113.css?body=1" for ::1 at 2016-10-08 22:35:37 +0900


Started GET "/assets/jquery_ujs.self-784a997f6726036b1993eb2217c9cb558e1cbb801c6da88105588c56f13b466a.js?body=1" for ::1 at 2016-10-08 22:35:37 +0900


Started GET "/assets/turbolinks.self-c5acd7a204f5f25ce7a1d8a0e4d92e28d34c9e2df2c7371cd7af88e147e4ad82.js?body=1" for ::1 at 2016-10-08 22:35:37 +0900


Started GET "/assets/comments.self-877aef30ae1b040ab8a3aba4e3e309a11d7f2612f44dde450b5c157aa5f95c05.js?body=1" for ::1 at 2016-10-08 22:35:37 +0900


Started GET "/assets/likes.self-877aef30ae1b040ab8a3aba4e3e309a11d7f2612f44dde450b5c157aa5f95c05.js?body=1" for ::1 at 2016-10-08 22:35:37 +0900


Started GET "/assets/papers.self-877aef30ae1b040ab8a3aba4e3e309a11d7f2612f44dde450b5c157aa5f95c05.js?body=1" for ::1 at 2016-10-08 22:35:37 +0900


Started GET "/assets/users.self-877aef30ae1b040ab8a3aba4e3e309a11d7f2612f44dde450b5c157aa5f95c05.js?body=1" for ::1 at 2016-10-08 22:35:37 +0900


Started GET "/assets/application.self-3b8dabdc891efe46b9a144b400ad69e37d7e5876bdc39dee783419a69d7ca819.js?body=1" for ::1 at 2016-10-08 22:35:37 +0900


Started GET "/1" for ::1 at 2016-10-08 22:35:56 +0900

ActionController::RoutingError (No route matches [GET] "/1"):
  actionpack (4.2.6) lib/action_dispatch/middleware/debug_exceptions.rb:21:in `call'
  web-console (2.3.0) lib/web_console/middleware.rb:28:in `block in call'
  web-console (2.3.0) lib/web_console/middleware.rb:18:in `catch'
  web-console (2.3.0) lib/web_console/middleware.rb:18:in `call'
  actionpack (4.2.6) lib/action_dispatch/middleware/show_exceptions.rb:30:in `call'
  railties (4.2.6) lib/rails/rack/logger.rb:38:in `call_app'
  railties (4.2.6) lib/rails/rack/logger.rb:20:in `block in call'
  activesupport (4.2.6) lib/active_support/tagged_logging.rb:68:in `block in tagged'
  activesupport (4.2.6) lib/active_support/tagged_logging.rb:26:in `tagged'
  activesupport (4.2.6) lib/active_support/tagged_logging.rb:68:in `tagged'
  railties (4.2.6) lib/rails/rack/logger.rb:20:in `call'
  actionpack (4.2.6) lib/action_dispatch/middleware/request_id.rb:21:in `call'
  rack (1.6.4) lib/rack/methodoverride.rb:22:in `call'
  rack (1.6.4) lib/rack/runtime.rb:18:in `call'
  activesupport (4.2.6) lib/active_support/cache/strategy/local_cache_middleware.rb:28:in `call'
  rack (1.6.4) lib/rack/lock.rb:17:in `call'
  actionpack (4.2.6) lib/action_dispatch/middleware/static.rb:120:in `call'
  rack (1.6.4) lib/rack/sendfile.rb:113:in `call'
  railties (4.2.6) lib/rails/engine.rb:518:in `call'
  railties (4.2.6) lib/rails/application.rb:165:in `call'
  rack (1.6.4) lib/rack/lock.rb:17:in `call'
  rack (1.6.4) lib/rack/content_length.rb:15:in `call'
  rack (1.6.4) lib/rack/handler/webrick.rb:88:in `service'
  /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/2.3.0/webrick/httpserver.rb:140:in `service'
  /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/2.3.0/webrick/httpserver.rb:96:in `run'
  /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/2.3.0/webrick/server.rb:296:in `block in start_thread'


  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/_trace.html.erb (2.0ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/routes/_route.html.erb (1.9ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/routes/_table.html.erb (14.6ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/_request_and_response.html.erb (1.3ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/routing_error.html.erb within rescues/layout (123.1ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/web-console-2.3.0/lib/web_console/templates/_markup.html.erb (0.5ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/web-console-2.3.0/lib/web_console/templates/_inner_console_markup.html.erb within layouts/inlined_string (0.5ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/web-console-2.3.0/lib/web_console/templates/_prompt_box_markup.html.erb within layouts/inlined_string (0.4ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/web-console-2.3.0/lib/web_console/templates/style.css.erb within layouts/inlined_string (0.5ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/web-console-2.3.0/lib/web_console/templates/console.js.erb within layouts/javascript (109.7ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/web-console-2.3.0/lib/web_console/templates/main.js.erb within layouts/javascript (0.5ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/web-console-2.3.0/lib/web_console/templates/error_page.js.erb within layouts/javascript (0.5ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/web-console-2.3.0/lib/web_console/templates/index.html.erb (198.3ms)


Started GET "/papers/1" for ::1 at 2016-10-08 22:36:03 +0900
Processing by PapersController#show as HTML
  Parameters: {"id"=>"1"}
  Rendered papers/show.html.erb within layouts/application (0.5ms)
Completed 200 OK in 41ms (Views: 40.0ms | ActiveRecord: 0.0ms)


Started GET "/papers/1/comments/new" for ::1 at 2016-10-08 22:36:32 +0900
Processing by CommentsController#new as HTML
  Parameters: {"paper_id"=>"1"}
  Rendered comments/new.html.erb within layouts/application (0.4ms)
Completed 200 OK in 31ms (Views: 30.8ms | ActiveRecord: 0.0ms)


Started GET "/papers/1/comments/new" for ::1 at 2016-10-08 22:36:39 +0900
Processing by CommentsController#new as HTML
  Parameters: {"paper_id"=>"1"}
  Rendered comments/new.html.erb within layouts/application (0.3ms)
Completed 200 OK in 29ms (Views: 27.9ms | ActiveRecord: 0.0ms)


Started GET "/assets/comments.self-e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855.css?body=1" for ::1 at 2016-10-08 22:36:39 +0900


Started GET "/assets/application.self-e80e8f2318043e8af94dddc2adad5a4f09739a8ebb323b3ab31cd71d45fd9113.css?body=1" for ::1 at 2016-10-08 22:36:39 +0900


Started GET "/assets/users.self-e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855.css?body=1" for ::1 at 2016-10-08 22:36:39 +0900


Started GET "/assets/jquery.self-bd7ddd393353a8d2480a622e80342adf488fb6006d667e8b42e4c0073393abee.js?body=1" for ::1 at 2016-10-08 22:36:39 +0900


Started GET "/assets/papers.self-e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855.css?body=1" for ::1 at 2016-10-08 22:36:39 +0900


Started GET "/assets/likes.self-e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855.css?body=1" for ::1 at 2016-10-08 22:36:39 +0900


Started GET "/assets/jquery_ujs.self-784a997f6726036b1993eb2217c9cb558e1cbb801c6da88105588c56f13b466a.js?body=1" for ::1 at 2016-10-08 22:36:39 +0900


Started GET "/assets/turbolinks.self-c5acd7a204f5f25ce7a1d8a0e4d92e28d34c9e2df2c7371cd7af88e147e4ad82.js?body=1" for ::1 at 2016-10-08 22:36:39 +0900


Started GET "/assets/comments.self-877aef30ae1b040ab8a3aba4e3e309a11d7f2612f44dde450b5c157aa5f95c05.js?body=1" for ::1 at 2016-10-08 22:36:39 +0900


Started GET "/assets/likes.self-877aef30ae1b040ab8a3aba4e3e309a11d7f2612f44dde450b5c157aa5f95c05.js?body=1" for ::1 at 2016-10-08 22:36:39 +0900


Started GET "/assets/papers.self-877aef30ae1b040ab8a3aba4e3e309a11d7f2612f44dde450b5c157aa5f95c05.js?body=1" for ::1 at 2016-10-08 22:36:39 +0900


Started GET "/assets/users.self-877aef30ae1b040ab8a3aba4e3e309a11d7f2612f44dde450b5c157aa5f95c05.js?body=1" for ::1 at 2016-10-08 22:36:39 +0900


Started GET "/assets/application.self-3b8dabdc891efe46b9a144b400ad69e37d7e5876bdc39dee783419a69d7ca819.js?body=1" for ::1 at 2016-10-08 22:36:39 +0900


Started GET "/papers/1/comments/new" for ::1 at 2016-10-08 22:41:36 +0900
Processing by CommentsController#new as HTML
  Parameters: {"paper_id"=>"1"}
  Rendered comments/new.html.erb within layouts/application (0.1ms)
Completed 200 OK in 54ms (Views: 53.4ms | ActiveRecord: 0.0ms)


Started GET "/assets/comments.self-e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855.css?body=1" for ::1 at 2016-10-08 22:41:36 +0900


Started GET "/assets/likes.self-e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855.css?body=1" for ::1 at 2016-10-08 22:41:36 +0900


Started GET "/assets/application.self-e80e8f2318043e8af94dddc2adad5a4f09739a8ebb323b3ab31cd71d45fd9113.css?body=1" for ::1 at 2016-10-08 22:41:36 +0900


Started GET "/assets/users.self-e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855.css?body=1" for ::1 at 2016-10-08 22:41:36 +0900


Started GET "/assets/papers.self-e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855.css?body=1" for ::1 at 2016-10-08 22:41:36 +0900


Started GET "/assets/jquery.self-bd7ddd393353a8d2480a622e80342adf488fb6006d667e8b42e4c0073393abee.js?body=1" for ::1 at 2016-10-08 22:41:36 +0900


Started GET "/assets/jquery_ujs.self-784a997f6726036b1993eb2217c9cb558e1cbb801c6da88105588c56f13b466a.js?body=1" for ::1 at 2016-10-08 22:41:36 +0900


Started GET "/assets/turbolinks.self-c5acd7a204f5f25ce7a1d8a0e4d92e28d34c9e2df2c7371cd7af88e147e4ad82.js?body=1" for ::1 at 2016-10-08 22:41:36 +0900


Started GET "/assets/comments.self-877aef30ae1b040ab8a3aba4e3e309a11d7f2612f44dde450b5c157aa5f95c05.js?body=1" for ::1 at 2016-10-08 22:41:36 +0900


Started GET "/assets/likes.self-877aef30ae1b040ab8a3aba4e3e309a11d7f2612f44dde450b5c157aa5f95c05.js?body=1" for ::1 at 2016-10-08 22:41:36 +0900


Started GET "/assets/papers.self-877aef30ae1b040ab8a3aba4e3e309a11d7f2612f44dde450b5c157aa5f95c05.js?body=1" for ::1 at 2016-10-08 22:41:36 +0900


Started GET "/assets/users.self-877aef30ae1b040ab8a3aba4e3e309a11d7f2612f44dde450b5c157aa5f95c05.js?body=1" for ::1 at 2016-10-08 22:41:36 +0900


Started GET "/assets/application.self-3b8dabdc891efe46b9a144b400ad69e37d7e5876bdc39dee783419a69d7ca819.js?body=1" for ::1 at 2016-10-08 22:41:36 +0900


Started GET "/" for ::1 at 2016-10-08 22:41:40 +0900
Processing by PapersController#index as HTML
  Rendered papers/index.html.erb within layouts/application (0.1ms)
Completed 200 OK in 32ms (Views: 31.7ms | ActiveRecord: 0.0ms)


Started GET "/" for ::1 at 2016-10-08 22:41:43 +0900
Processing by PapersController#index as HTML
  Rendered papers/index.html.erb within layouts/application (0.1ms)
Completed 200 OK in 25ms (Views: 24.2ms | ActiveRecord: 0.0ms)


Started GET "/assets/comments.self-e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855.css?body=1" for ::1 at 2016-10-08 22:41:43 +0900


Started GET "/assets/papers.self-e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855.css?body=1" for ::1 at 2016-10-08 22:41:43 +0900


Started GET "/assets/application.self-e80e8f2318043e8af94dddc2adad5a4f09739a8ebb323b3ab31cd71d45fd9113.css?body=1" for ::1 at 2016-10-08 22:41:43 +0900


Started GET "/assets/likes.self-e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855.css?body=1" for ::1 at 2016-10-08 22:41:43 +0900


Started GET "/assets/jquery.self-bd7ddd393353a8d2480a622e80342adf488fb6006d667e8b42e4c0073393abee.js?body=1" for ::1 at 2016-10-08 22:41:43 +0900


Started GET "/assets/users.self-e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855.css?body=1" for ::1 at 2016-10-08 22:41:43 +0900


Started GET "/assets/jquery_ujs.self-784a997f6726036b1993eb2217c9cb558e1cbb801c6da88105588c56f13b466a.js?body=1" for ::1 at 2016-10-08 22:41:43 +0900


Started GET "/assets/turbolinks.self-c5acd7a204f5f25ce7a1d8a0e4d92e28d34c9e2df2c7371cd7af88e147e4ad82.js?body=1" for ::1 at 2016-10-08 22:41:43 +0900


Started GET "/assets/comments.self-877aef30ae1b040ab8a3aba4e3e309a11d7f2612f44dde450b5c157aa5f95c05.js?body=1" for ::1 at 2016-10-08 22:41:43 +0900


Started GET "/assets/likes.self-877aef30ae1b040ab8a3aba4e3e309a11d7f2612f44dde450b5c157aa5f95c05.js?body=1" for ::1 at 2016-10-08 22:41:43 +0900


Started GET "/assets/papers.self-877aef30ae1b040ab8a3aba4e3e309a11d7f2612f44dde450b5c157aa5f95c05.js?body=1" for ::1 at 2016-10-08 22:41:43 +0900


Started GET "/assets/users.self-877aef30ae1b040ab8a3aba4e3e309a11d7f2612f44dde450b5c157aa5f95c05.js?body=1" for ::1 at 2016-10-08 22:41:43 +0900


Started GET "/assets/application.self-3b8dabdc891efe46b9a144b400ad69e37d7e5876bdc39dee783419a69d7ca819.js?body=1" for ::1 at 2016-10-08 22:41:43 +0900


Started GET "/" for ::1 at 2016-10-08 22:41:45 +0900
Processing by PapersController#index as HTML
  Rendered papers/index.html.erb within layouts/application (0.1ms)
Completed 200 OK in 27ms (Views: 26.2ms | ActiveRecord: 0.0ms)


Started GET "/" for ::1 at 2016-10-08 22:49:43 +0900
Processing by PapersController#index as HTML
  Rendered papers/index.html.erb within layouts/application (0.4ms)
Completed 500 Internal Server Error in 29ms (ActiveRecord: 0.0ms)

SyntaxError (/Users/tech-camp/projects/arxivpicks/app/views/layouts/application.html.erb:12: syntax error, unexpected '<', expecting keyword_end
    <div> <a href="/"> ArxivPicks </a> </div>
     ^
/Users/tech-camp/projects/arxivpicks/app/views/layouts/application.html.erb:12: unknown regexp options - dv
/Users/tech-camp/projects/arxivpicks/app/views/layouts/application.html.erb:13: syntax error, unexpected '<'
    <div> <a href="/papers/search"> 投稿する </a> </div>
     ^
/Users/tech-camp/projects/arxivpicks/app/views/layouts/application.html.erb:13: unknown regexp options - dv
/Users/tech-camp/projects/arxivpicks/app/views/layouts/application.html.erb:14: syntax error, unexpected '<'
  </header>
   ^
/Users/tech-camp/projects/arxivpicks/app/views/layouts/application.html.erb:20: unknown regexp options - ftr
/Users/tech-camp/projects/arxivpicks/app/views/layouts/application.html.erb:20: regexp encoding option 'e' differs from source encoding 'UTF-8'
/Users/tech-camp/projects/arxivpicks/app/views/layouts/application.html.erb:21: syntax error, unexpected '<'
</body>
 ^
/Users/tech-camp/projects/arxivpicks/app/views/layouts/application.html.erb:22: unknown regexp options - htl
/Users/tech-camp/projects/arxivpicks/app/views/layouts/application.html.erb:23: unterminated string meets end of file
/Users/tech-camp/projects/arxivpicks/app/views/layouts/application.html.erb:23: syntax error, unexpected end-of-input, expecting keyword_end):
  app/views/layouts/application.html.erb:12: syntax error, unexpected '<', expecting keyword_end
  app/views/layouts/application.html.erb:12: unknown regexp options - dv
  app/views/layouts/application.html.erb:13: syntax error, unexpected '<'
  app/views/layouts/application.html.erb:13: unknown regexp options - dv
  app/views/layouts/application.html.erb:14: syntax error, unexpected '<'
  app/views/layouts/application.html.erb:20: unknown regexp options - ftr
  app/views/layouts/application.html.erb:20: regexp encoding option 'e' differs from source encoding 'UTF-8'
  app/views/layouts/application.html.erb:21: syntax error, unexpected '<'
  app/views/layouts/application.html.erb:22: unknown regexp options - htl
  app/views/layouts/application.html.erb:23: unterminated string meets end of file
  app/views/layouts/application.html.erb:23: syntax error, unexpected end-of-input, expecting keyword_end


  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/_source.erb (9.4ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/_trace.html.erb (5.5ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/_request_and_response.html.erb (2.5ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/diagnostics.html.erb within rescues/layout (83.1ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/web-console-2.3.0/lib/web_console/templates/_markup.html.erb (0.8ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/web-console-2.3.0/lib/web_console/templates/_inner_console_markup.html.erb within layouts/inlined_string (0.6ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/web-console-2.3.0/lib/web_console/templates/_prompt_box_markup.html.erb within layouts/inlined_string (0.9ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/web-console-2.3.0/lib/web_console/templates/style.css.erb within layouts/inlined_string (0.5ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/web-console-2.3.0/lib/web_console/templates/console.js.erb within layouts/javascript (70.5ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/web-console-2.3.0/lib/web_console/templates/main.js.erb within layouts/javascript (0.9ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/web-console-2.3.0/lib/web_console/templates/error_page.js.erb within layouts/javascript (0.5ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/web-console-2.3.0/lib/web_console/templates/index.html.erb (148.8ms)


Started GET "/" for ::1 at 2016-10-08 22:50:00 +0900
Processing by PapersController#index as HTML
  Rendered papers/index.html.erb within layouts/application (0.1ms)
Completed 200 OK in 57ms (Views: 56.2ms | ActiveRecord: 0.0ms)


Started GET "/assets/comments.self-e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855.css?body=1" for ::1 at 2016-10-08 22:50:00 +0900


Started GET "/assets/papers.self-e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855.css?body=1" for ::1 at 2016-10-08 22:50:00 +0900


Started GET "/assets/application.self-e80e8f2318043e8af94dddc2adad5a4f09739a8ebb323b3ab31cd71d45fd9113.css?body=1" for ::1 at 2016-10-08 22:50:00 +0900


Started GET "/assets/likes.self-e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855.css?body=1" for ::1 at 2016-10-08 22:50:00 +0900


Started GET "/assets/jquery.self-bd7ddd393353a8d2480a622e80342adf488fb6006d667e8b42e4c0073393abee.js?body=1" for ::1 at 2016-10-08 22:50:00 +0900


Started GET "/assets/users.self-e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855.css?body=1" for ::1 at 2016-10-08 22:50:00 +0900


Started GET "/assets/jquery_ujs.self-784a997f6726036b1993eb2217c9cb558e1cbb801c6da88105588c56f13b466a.js?body=1" for ::1 at 2016-10-08 22:50:00 +0900


Started GET "/assets/turbolinks.self-c5acd7a204f5f25ce7a1d8a0e4d92e28d34c9e2df2c7371cd7af88e147e4ad82.js?body=1" for ::1 at 2016-10-08 22:50:00 +0900


Started GET "/assets/comments.self-877aef30ae1b040ab8a3aba4e3e309a11d7f2612f44dde450b5c157aa5f95c05.js?body=1" for ::1 at 2016-10-08 22:50:00 +0900


Started GET "/assets/likes.self-877aef30ae1b040ab8a3aba4e3e309a11d7f2612f44dde450b5c157aa5f95c05.js?body=1" for ::1 at 2016-10-08 22:50:00 +0900


Started GET "/assets/papers.self-877aef30ae1b040ab8a3aba4e3e309a11d7f2612f44dde450b5c157aa5f95c05.js?body=1" for ::1 at 2016-10-08 22:50:00 +0900


Started GET "/assets/users.self-877aef30ae1b040ab8a3aba4e3e309a11d7f2612f44dde450b5c157aa5f95c05.js?body=1" for ::1 at 2016-10-08 22:50:00 +0900


Started GET "/assets/application.self-3b8dabdc891efe46b9a144b400ad69e37d7e5876bdc39dee783419a69d7ca819.js?body=1" for ::1 at 2016-10-08 22:50:00 +0900


Started GET "/papers/search" for ::1 at 2016-10-08 22:51:05 +0900
Processing by PapersController#search as HTML
  Rendered papers/search.html.erb within layouts/application (0.5ms)
Completed 200 OK in 30ms (Views: 29.5ms | ActiveRecord: 0.0ms)


Started GET "/papers/search" for ::1 at 2016-10-08 22:51:08 +0900
Processing by PapersController#search as HTML
  Rendered papers/search.html.erb within layouts/application (0.0ms)
Completed 200 OK in 28ms (Views: 27.3ms | ActiveRecord: 0.0ms)


Started GET "/papers/search" for ::1 at 2016-10-08 22:51:38 +0900
Processing by PapersController#search as HTML
  Rendered papers/search.html.erb within layouts/application (0.0ms)
Completed 200 OK in 29ms (Views: 28.6ms | ActiveRecord: 0.0ms)


Started GET "/papers/search" for ::1 at 2016-10-08 23:00:44 +0900
Processing by PapersController#search as HTML
  Rendered papers/search.html.erb within layouts/application (0.0ms)
Completed 200 OK in 51ms (Views: 49.8ms | ActiveRecord: 0.0ms)


Started GET "/assets/comments.self-e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855.css?body=1" for ::1 at 2016-10-08 23:00:44 +0900


Started GET "/assets/likes.self-e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855.css?body=1" for ::1 at 2016-10-08 23:00:44 +0900


Started GET "/assets/papers.self-e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855.css?body=1" for ::1 at 2016-10-08 23:00:44 +0900


Started GET "/assets/application.self-e80e8f2318043e8af94dddc2adad5a4f09739a8ebb323b3ab31cd71d45fd9113.css?body=1" for ::1 at 2016-10-08 23:00:44 +0900


Started GET "/assets/jquery.self-bd7ddd393353a8d2480a622e80342adf488fb6006d667e8b42e4c0073393abee.js?body=1" for ::1 at 2016-10-08 23:00:44 +0900


Started GET "/assets/users.self-e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855.css?body=1" for ::1 at 2016-10-08 23:00:44 +0900


Started GET "/assets/jquery_ujs.self-784a997f6726036b1993eb2217c9cb558e1cbb801c6da88105588c56f13b466a.js?body=1" for ::1 at 2016-10-08 23:00:44 +0900


Started GET "/assets/turbolinks.self-c5acd7a204f5f25ce7a1d8a0e4d92e28d34c9e2df2c7371cd7af88e147e4ad82.js?body=1" for ::1 at 2016-10-08 23:00:44 +0900


Started GET "/assets/comments.self-877aef30ae1b040ab8a3aba4e3e309a11d7f2612f44dde450b5c157aa5f95c05.js?body=1" for ::1 at 2016-10-08 23:00:44 +0900


Started GET "/assets/likes.self-877aef30ae1b040ab8a3aba4e3e309a11d7f2612f44dde450b5c157aa5f95c05.js?body=1" for ::1 at 2016-10-08 23:00:44 +0900


Started GET "/assets/papers.self-877aef30ae1b040ab8a3aba4e3e309a11d7f2612f44dde450b5c157aa5f95c05.js?body=1" for ::1 at 2016-10-08 23:00:44 +0900


Started GET "/assets/users.self-877aef30ae1b040ab8a3aba4e3e309a11d7f2612f44dde450b5c157aa5f95c05.js?body=1" for ::1 at 2016-10-08 23:00:44 +0900


Started GET "/assets/application.self-3b8dabdc891efe46b9a144b400ad69e37d7e5876bdc39dee783419a69d7ca819.js?body=1" for ::1 at 2016-10-08 23:00:44 +0900


Started GET "/papers/search?utf8=%E2%9C%93&keyword=" for ::1 at 2016-10-08 23:00:50 +0900
Processing by PapersController#search as HTML
  Parameters: {"utf8"=>"✓", "keyword"=>""}
  Rendered papers/search.html.erb within layouts/application (0.0ms)
Completed 200 OK in 27ms (Views: 25.9ms | ActiveRecord: 0.0ms)


Started GET "/papers/search?utf8=%E2%9C%93&keyword=" for ::1 at 2016-10-08 23:19:16 +0900
Processing by PapersController#search as HTML
  Parameters: {"utf8"=>"✓", "keyword"=>""}
Redirected to http://localhost:3000
Completed 302 Found in 8ms (ActiveRecord: 0.0ms)


Started GET "/" for ::1 at 2016-10-08 23:19:17 +0900
Processing by PapersController#index as HTML
  [1m[35mPaper Load (2.2ms)[0m  SELECT  `papers`.* FROM `papers`  ORDER BY id DESC LIMIT 5 OFFSET 0
  Rendered papers/index.html.erb within layouts/application (71.1ms)
Completed 200 OK in 131ms (Views: 104.5ms | ActiveRecord: 25.2ms)


Started GET "/assets/comments.self-e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855.css?body=1" for ::1 at 2016-10-08 23:19:17 +0900


Started GET "/assets/likes.self-e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855.css?body=1" for ::1 at 2016-10-08 23:19:17 +0900


Started GET "/assets/jquery.self-bd7ddd393353a8d2480a622e80342adf488fb6006d667e8b42e4c0073393abee.js?body=1" for ::1 at 2016-10-08 23:19:17 +0900


Started GET "/assets/application.self-e80e8f2318043e8af94dddc2adad5a4f09739a8ebb323b3ab31cd71d45fd9113.css?body=1" for ::1 at 2016-10-08 23:19:17 +0900


Started GET "/assets/users.self-e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855.css?body=1" for ::1 at 2016-10-08 23:19:17 +0900


Started GET "/assets/papers.self-e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855.css?body=1" for ::1 at 2016-10-08 23:19:17 +0900


Started GET "/assets/jquery_ujs.self-784a997f6726036b1993eb2217c9cb558e1cbb801c6da88105588c56f13b466a.js?body=1" for ::1 at 2016-10-08 23:19:17 +0900


Started GET "/assets/turbolinks.self-c5acd7a204f5f25ce7a1d8a0e4d92e28d34c9e2df2c7371cd7af88e147e4ad82.js?body=1" for ::1 at 2016-10-08 23:19:17 +0900


Started GET "/assets/comments.self-877aef30ae1b040ab8a3aba4e3e309a11d7f2612f44dde450b5c157aa5f95c05.js?body=1" for ::1 at 2016-10-08 23:19:17 +0900


Started GET "/assets/likes.self-877aef30ae1b040ab8a3aba4e3e309a11d7f2612f44dde450b5c157aa5f95c05.js?body=1" for ::1 at 2016-10-08 23:19:17 +0900


Started GET "/assets/papers.self-877aef30ae1b040ab8a3aba4e3e309a11d7f2612f44dde450b5c157aa5f95c05.js?body=1" for ::1 at 2016-10-08 23:19:17 +0900


Started GET "/assets/users.self-877aef30ae1b040ab8a3aba4e3e309a11d7f2612f44dde450b5c157aa5f95c05.js?body=1" for ::1 at 2016-10-08 23:19:17 +0900


Started GET "/assets/application.self-3b8dabdc891efe46b9a144b400ad69e37d7e5876bdc39dee783419a69d7ca819.js?body=1" for ::1 at 2016-10-08 23:19:17 +0900


Started GET "/papers/search?utf8=%E2%9C%93&keyword=Neural" for ::1 at 2016-10-08 23:19:32 +0900
Processing by PapersController#search as HTML
  Parameters: {"utf8"=>"✓", "keyword"=>"Neural"}
Redirected to http://localhost:3000
Completed 302 Found in 1ms (ActiveRecord: 0.0ms)


Started GET "/" for ::1 at 2016-10-08 23:19:32 +0900
Processing by PapersController#index as HTML
  [1m[36mPaper Load (0.4ms)[0m  [1mSELECT  `papers`.* FROM `papers`  ORDER BY id DESC LIMIT 5 OFFSET 0[0m
  Rendered papers/index.html.erb within layouts/application (1.7ms)
Completed 200 OK in 33ms (Views: 31.2ms | ActiveRecord: 0.4ms)


Started GET "/papers/search?utf8=%E2%9C%93&keyword=Neural" for ::1 at 2016-10-08 23:19:43 +0900
Processing by PapersController#search as HTML
  Parameters: {"utf8"=>"✓", "keyword"=>"Neural"}
Redirected to http://localhost:3000
Completed 302 Found in 1ms (ActiveRecord: 0.0ms)


Started GET "/" for ::1 at 2016-10-08 23:19:43 +0900
Processing by PapersController#index as HTML
  [1m[35mPaper Load (0.4ms)[0m  SELECT  `papers`.* FROM `papers`  ORDER BY id DESC LIMIT 5 OFFSET 0
  Rendered papers/index.html.erb within layouts/application (1.4ms)
Completed 200 OK in 28ms (Views: 26.3ms | ActiveRecord: 0.4ms)


Started GET "/" for ::1 at 2016-10-08 23:20:00 +0900
Processing by PapersController#index as HTML
  [1m[36mPaper Load (0.4ms)[0m  [1mSELECT  `papers`.* FROM `papers`  ORDER BY id DESC LIMIT 5 OFFSET 0[0m
  Rendered papers/index.html.erb within layouts/application (35.3ms)
Completed 200 OK in 87ms (Views: 55.8ms | ActiveRecord: 26.5ms)


Started GET "/assets/likes.self-e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855.css?body=1" for ::1 at 2016-10-08 23:20:01 +0900


Started GET "/assets/comments.self-e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855.css?body=1" for ::1 at 2016-10-08 23:20:01 +0900


Started GET "/assets/users.self-e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855.css?body=1" for ::1 at 2016-10-08 23:20:01 +0900


Started GET "/assets/papers.self-e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855.css?body=1" for ::1 at 2016-10-08 23:20:01 +0900


Started GET "/assets/jquery.self-bd7ddd393353a8d2480a622e80342adf488fb6006d667e8b42e4c0073393abee.js?body=1" for ::1 at 2016-10-08 23:20:01 +0900


Started GET "/assets/application.self-e80e8f2318043e8af94dddc2adad5a4f09739a8ebb323b3ab31cd71d45fd9113.css?body=1" for ::1 at 2016-10-08 23:20:01 +0900


Started GET "/assets/jquery_ujs.self-784a997f6726036b1993eb2217c9cb558e1cbb801c6da88105588c56f13b466a.js?body=1" for ::1 at 2016-10-08 23:20:01 +0900


Started GET "/assets/turbolinks.self-c5acd7a204f5f25ce7a1d8a0e4d92e28d34c9e2df2c7371cd7af88e147e4ad82.js?body=1" for ::1 at 2016-10-08 23:20:01 +0900


Started GET "/assets/comments.self-877aef30ae1b040ab8a3aba4e3e309a11d7f2612f44dde450b5c157aa5f95c05.js?body=1" for ::1 at 2016-10-08 23:20:01 +0900


Started GET "/assets/likes.self-877aef30ae1b040ab8a3aba4e3e309a11d7f2612f44dde450b5c157aa5f95c05.js?body=1" for ::1 at 2016-10-08 23:20:01 +0900


Started GET "/assets/papers.self-877aef30ae1b040ab8a3aba4e3e309a11d7f2612f44dde450b5c157aa5f95c05.js?body=1" for ::1 at 2016-10-08 23:20:01 +0900


Started GET "/assets/users.self-877aef30ae1b040ab8a3aba4e3e309a11d7f2612f44dde450b5c157aa5f95c05.js?body=1" for ::1 at 2016-10-08 23:20:01 +0900


Started GET "/assets/application.self-3b8dabdc891efe46b9a144b400ad69e37d7e5876bdc39dee783419a69d7ca819.js?body=1" for ::1 at 2016-10-08 23:20:01 +0900


Started GET "/papers/search?utf8=%E2%9C%93&keyword=" for ::1 at 2016-10-08 23:20:03 +0900
Processing by PapersController#search as HTML
  Parameters: {"utf8"=>"✓", "keyword"=>""}
  Rendered papers/search.html.erb within layouts/application (0.1ms)
Completed 200 OK in 26ms (Views: 25.7ms | ActiveRecord: 0.0ms)


Started GET "/papers/search?utf8=%E2%9C%93&keyword=Neural" for ::1 at 2016-10-08 23:20:07 +0900
Processing by PapersController#search as HTML
  Parameters: {"utf8"=>"✓", "keyword"=>"Neural"}
  Rendered papers/search.html.erb within layouts/application (0.0ms)
Completed 200 OK in 25ms (Views: 23.7ms | ActiveRecord: 0.0ms)


Started GET "/papers/search?utf8=%E2%9C%93&keyword=" for ::1 at 2016-10-08 23:20:09 +0900
Processing by PapersController#search as HTML
  Parameters: {"utf8"=>"✓", "keyword"=>""}
  Rendered papers/search.html.erb within layouts/application (0.0ms)
Completed 200 OK in 23ms (Views: 22.7ms | ActiveRecord: 0.0ms)


Started GET "/papers/search?utf8=%E2%9C%93&keyword=Neural" for ::1 at 2016-10-08 23:20:14 +0900
Processing by PapersController#search as HTML
  Parameters: {"utf8"=>"✓", "keyword"=>"Neural"}
  Rendered papers/search.html.erb within layouts/application (0.0ms)
Completed 200 OK in 26ms (Views: 25.9ms | ActiveRecord: 0.0ms)


Started GET "/papers/search?utf8=%E2%9C%93&keyword=a" for ::1 at 2016-10-08 23:20:33 +0900
Processing by PapersController#search as HTML
  Parameters: {"utf8"=>"✓", "keyword"=>"a"}
  Rendered papers/search.html.erb within layouts/application (0.0ms)
Completed 200 OK in 24ms (Views: 23.3ms | ActiveRecord: 0.0ms)


Started GET "/papers/search?utf8=%E2%9C%93&keyword=" for ::1 at 2016-10-08 23:22:52 +0900
Processing by PapersController#search as HTML
  Parameters: {"utf8"=>"✓", "keyword"=>""}
  Rendered papers/search.html.erb within layouts/application (0.1ms)
Completed 200 OK in 51ms (Views: 46.1ms | ActiveRecord: 0.0ms)


Started GET "/papers/search?utf8=%E2%9C%93&keyword=a" for ::1 at 2016-10-08 23:22:55 +0900
Processing by PapersController#search as HTML
  Parameters: {"utf8"=>"✓", "keyword"=>"a"}
  Rendered papers/search.html.erb within layouts/application (0.0ms)
Completed 200 OK in 37ms (Views: 36.5ms | ActiveRecord: 0.0ms)


Started GET "/papers/search?utf8=%E2%9C%93&keyword=" for ::1 at 2016-10-08 23:23:32 +0900
Processing by PapersController#search as HTML
  Parameters: {"utf8"=>"✓", "keyword"=>""}
  [1m[35mPaper Load (9.2ms)[0m  SELECT  `papers`.* FROM `papers` WHERE (title LIKE('%%')) LIMIT 20
Completed 500 Internal Server Error in 39ms (ActiveRecord: 0.0ms)

NameError (undefined local variable or method `pry' for #<PapersController:0x007fed9ebeadc8>
Did you mean?  p
               proc
               try):
  app/controllers/papers_controller.rb:9:in `search'


  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/_source.erb (4.6ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/_trace.html.erb (3.5ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/_request_and_response.html.erb (1.5ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/diagnostics.html.erb within rescues/layout (74.3ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/web-console-2.3.0/lib/web_console/templates/_markup.html.erb (0.6ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/web-console-2.3.0/lib/web_console/templates/_inner_console_markup.html.erb within layouts/inlined_string (0.7ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/web-console-2.3.0/lib/web_console/templates/_prompt_box_markup.html.erb within layouts/inlined_string (0.4ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/web-console-2.3.0/lib/web_console/templates/style.css.erb within layouts/inlined_string (0.6ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/web-console-2.3.0/lib/web_console/templates/console.js.erb within layouts/javascript (68.1ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/web-console-2.3.0/lib/web_console/templates/main.js.erb within layouts/javascript (0.3ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/web-console-2.3.0/lib/web_console/templates/error_page.js.erb within layouts/javascript (0.5ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/web-console-2.3.0/lib/web_console/templates/index.html.erb (138.8ms)


Started GET "/papers/search?utf8=%E2%9C%93&keyword=" for ::1 at 2016-10-08 23:24:33 +0900
Processing by PapersController#search as HTML
  Parameters: {"utf8"=>"✓", "keyword"=>""}
Completed 500 Internal Server Error in 15ms (ActiveRecord: 0.0ms)

NoMethodError (undefined method `pry' for #<Binding:0x007fed9fd94538>
Did you mean?  try):
  app/controllers/papers_controller.rb:9:in `search'


  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/_source.erb (5.8ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/_trace.html.erb (3.2ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/_request_and_response.html.erb (2.0ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/diagnostics.html.erb within rescues/layout (83.0ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/web-console-2.3.0/lib/web_console/templates/_markup.html.erb (0.7ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/web-console-2.3.0/lib/web_console/templates/_inner_console_markup.html.erb within layouts/inlined_string (0.6ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/web-console-2.3.0/lib/web_console/templates/_prompt_box_markup.html.erb within layouts/inlined_string (0.7ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/web-console-2.3.0/lib/web_console/templates/style.css.erb within layouts/inlined_string (0.9ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/web-console-2.3.0/lib/web_console/templates/console.js.erb within layouts/javascript (60.9ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/web-console-2.3.0/lib/web_console/templates/main.js.erb within layouts/javascript (0.6ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/web-console-2.3.0/lib/web_console/templates/error_page.js.erb within layouts/javascript (1.2ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/web-console-2.3.0/lib/web_console/templates/index.html.erb (146.6ms)


Started GET "/papers/search?utf8=%E2%9C%93&keyword=" for ::1 at 2016-10-08 23:25:29 +0900
Processing by PapersController#search as HTML
  Parameters: {"utf8"=>"✓", "keyword"=>""}
Completed 500 Internal Server Error in 3ms (ActiveRecord: 0.0ms)

NoMethodError (undefined method `pry' for #<Binding:0x007fed9b71abc0>
Did you mean?  try):
  app/controllers/papers_controller.rb:9:in `search'


  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/_source.erb (7.0ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/_trace.html.erb (3.4ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/_request_and_response.html.erb (1.4ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/diagnostics.html.erb within rescues/layout (74.3ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/web-console-2.3.0/lib/web_console/templates/_markup.html.erb (0.5ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/web-console-2.3.0/lib/web_console/templates/_inner_console_markup.html.erb within layouts/inlined_string (0.4ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/web-console-2.3.0/lib/web_console/templates/_prompt_box_markup.html.erb within layouts/inlined_string (0.3ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/web-console-2.3.0/lib/web_console/templates/style.css.erb within layouts/inlined_string (0.5ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/web-console-2.3.0/lib/web_console/templates/console.js.erb within layouts/javascript (55.5ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/web-console-2.3.0/lib/web_console/templates/main.js.erb within layouts/javascript (0.4ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/web-console-2.3.0/lib/web_console/templates/error_page.js.erb within layouts/javascript (0.6ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/web-console-2.3.0/lib/web_console/templates/index.html.erb (159.8ms)


Started GET "/papers/search?utf8=%E2%9C%93&keyword=" for ::1 at 2016-10-08 23:25:44 +0900
  [1m[36mActiveRecord::SchemaMigration Load (0.6ms)[0m  [1mSELECT `schema_migrations`.* FROM `schema_migrations`[0m
Processing by PapersController#search as HTML
  Parameters: {"utf8"=>"✓", "keyword"=>""}
  [1m[35mPaper Load (0.5ms)[0m  SELECT  `papers`.* FROM `papers` WHERE (title LIKE('%%')) LIMIT 20


Started GET "/papers/search?utf8=%E2%9C%93&keyword=Neural" for ::1 at 2016-10-08 23:26:31 +0900
  [1m[36mActiveRecord::SchemaMigration Load (0.3ms)[0m  [1mSELECT `schema_migrations`.* FROM `schema_migrations`[0m
Processing by PapersController#search as HTML
  Parameters: {"utf8"=>"✓", "keyword"=>"Neural"}
  [1m[35mPaper Load (1.3ms)[0m  SELECT  `papers`.* FROM `papers` WHERE (title LIKE('%Neural%')) LIMIT 20
  Rendered papers/search.html.erb within layouts/application (3.9ms)
Completed 200 OK in 28038ms (Views: 344.0ms | ActiveRecord: 12.4ms)


Started GET "/" for ::1 at 2016-10-08 23:27:41 +0900
Processing by PapersController#index as HTML
  [1m[36mPaper Load (0.3ms)[0m  [1mSELECT  `papers`.* FROM `papers`  ORDER BY id DESC LIMIT 5 OFFSET 0[0m
  Rendered papers/index.html.erb within layouts/application (2.5ms)
Completed 200 OK in 31ms (Views: 27.9ms | ActiveRecord: 0.3ms)


Started GET "/papers/search?utf8=%E2%9C%93&keyword=Neural" for ::1 at 2016-10-08 23:27:50 +0900
Processing by PapersController#search as HTML
  Parameters: {"utf8"=>"✓", "keyword"=>"Neural"}
  [1m[35mPaper Load (1.3ms)[0m  SELECT  `papers`.* FROM `papers` WHERE (title LIKE('%Neural%')) LIMIT 20
  Rendered papers/search.html.erb within layouts/application (0.1ms)
Completed 200 OK in 91560ms (Views: 33.7ms | ActiveRecord: 1.3ms)


Started GET "/papers/search?utf8=%E2%9C%93&keyword=Neural" for ::1 at 2016-10-08 23:29:22 +0900
Processing by PapersController#search as HTML
  Parameters: {"utf8"=>"✓", "keyword"=>"Neural"}
  Rendered papers/search.html.erb within layouts/application (0.0ms)
Completed 200 OK in 40ms (Views: 34.4ms | ActiveRecord: 0.0ms)


Started GET "/papers/search?utf8=%E2%9C%93&keyword=Neural" for ::1 at 2016-10-08 23:29:34 +0900
Processing by PapersController#search as HTML
  Parameters: {"utf8"=>"✓", "keyword"=>"Neural"}
  Rendered papers/search.html.erb within layouts/application (0.0ms)
Completed 200 OK in 27ms (Views: 25.8ms | ActiveRecord: 0.0ms)


Started GET "/papers/search?utf8=%E2%9C%93&keyword=Neural" for ::1 at 2016-10-08 23:29:48 +0900
  [1m[36mActiveRecord::SchemaMigration Load (0.3ms)[0m  [1mSELECT `schema_migrations`.* FROM `schema_migrations`[0m
Processing by PapersController#search as HTML
  Parameters: {"utf8"=>"✓", "keyword"=>"Neural"}
  Rendered papers/search.html.erb within layouts/application (1.9ms)
Completed 200 OK in 367ms (Views: 351.8ms | ActiveRecord: 0.0ms)


Started GET "/papers/search?utf8=%E2%9C%93&keyword=Neural" for ::1 at 2016-10-08 23:29:57 +0900
Processing by PapersController#search as HTML
  Parameters: {"utf8"=>"✓", "keyword"=>"Neural"}
  Rendered papers/search.html.erb within layouts/application (0.1ms)
Completed 200 OK in 29ms (Views: 28.6ms | ActiveRecord: 0.0ms)


Started GET "/papers/search?utf8=%E2%9C%93&keyword=Neural" for ::1 at 2016-10-08 23:30:34 +0900
Processing by PapersController#search as HTML
  Parameters: {"utf8"=>"✓", "keyword"=>"Neural"}
  [1m[35mPaper Load (1.5ms)[0m  SELECT  `papers`.* FROM `papers` WHERE (title LIKE('%Neural%')) LIMIT 20
  Rendered papers/search.html.erb within layouts/application (31.0ms)
Completed 200 OK in 79ms (Views: 74.1ms | ActiveRecord: 4.2ms)


Started GET "/papers/search?utf8=%E2%9C%93&keyword=Neural" for ::1 at 2016-10-08 23:35:47 +0900
Processing by PapersController#search as HTML
  Parameters: {"utf8"=>"✓", "keyword"=>"Neural"}
  [1m[36mPaper Load (1.8ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE (title LIKE('%Neural%')) LIMIT 20[0m
  Rendered papers/search.html.erb within layouts/application (39.3ms)
Completed 500 Internal Server Error in 50ms (ActiveRecord: 1.8ms)

ActionView::Template::Error (Missing partial papers/__item, application/__item with {:locale=>[:en], :formats=>[:html], :variants=>[], :handlers=>[:erb, :builder, :raw, :ruby, :coffee, :jbuilder]}. Searched in:
  * "/Users/tech-camp/projects/arxivpicks/app/views"
  * "/Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/devise-4.2.0/app/views"
  * "/Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/kaminari-bootstrap-3.0.1/app/views"
  * "/Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/kaminari-0.17.0/app/views"
):
    1: <% @papers.each do |paper| %>
    2:   <%= render partial: "_item", locals: { paper: paper } %>
    3: <% end %>
  app/views/papers/search.html.erb:2:in `block in _app_views_papers_search_html_erb__1973343433459805586_70276053694160'
  app/views/papers/search.html.erb:1:in `_app_views_papers_search_html_erb__1973343433459805586_70276053694160'


  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/_source.erb (7.3ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/_trace.html.erb (4.5ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/_request_and_response.html.erb (1.4ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/template_error.html.erb within rescues/layout (83.1ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/web-console-2.3.0/lib/web_console/templates/_markup.html.erb (0.7ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/web-console-2.3.0/lib/web_console/templates/_inner_console_markup.html.erb within layouts/inlined_string (0.6ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/web-console-2.3.0/lib/web_console/templates/_prompt_box_markup.html.erb within layouts/inlined_string (0.4ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/web-console-2.3.0/lib/web_console/templates/style.css.erb within layouts/inlined_string (0.5ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/web-console-2.3.0/lib/web_console/templates/console.js.erb within layouts/javascript (87.7ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/web-console-2.3.0/lib/web_console/templates/main.js.erb within layouts/javascript (0.4ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/web-console-2.3.0/lib/web_console/templates/error_page.js.erb within layouts/javascript (0.5ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/web-console-2.3.0/lib/web_console/templates/index.html.erb (178.5ms)


Started GET "/papers/search?utf8=%E2%9C%93&keyword=Neural" for ::1 at 2016-10-08 23:36:45 +0900
Processing by PapersController#search as HTML
  Parameters: {"utf8"=>"✓", "keyword"=>"Neural"}
  [1m[35mPaper Load (1.5ms)[0m  SELECT  `papers`.* FROM `papers` WHERE (title LIKE('%Neural%')) LIMIT 20
  Rendered papers/_item.html.erb (0.5ms)
  Rendered papers/_item.html.erb (0.1ms)
  Rendered papers/_item.html.erb (0.0ms)
  Rendered papers/_item.html.erb (0.0ms)
  Rendered papers/_item.html.erb (0.0ms)
  Rendered papers/_item.html.erb (0.0ms)
  Rendered papers/_item.html.erb (0.0ms)
  Rendered papers/_item.html.erb (0.0ms)
  Rendered papers/_item.html.erb (0.0ms)
  Rendered papers/_item.html.erb (0.1ms)
  Rendered papers/_item.html.erb (0.0ms)
  Rendered papers/_item.html.erb (0.0ms)
  Rendered papers/_item.html.erb (0.0ms)
  Rendered papers/_item.html.erb (0.0ms)
  Rendered papers/_item.html.erb (0.0ms)
  Rendered papers/_item.html.erb (0.1ms)
  Rendered papers/_item.html.erb (0.0ms)
  Rendered papers/_item.html.erb (0.1ms)
  Rendered papers/_item.html.erb (0.0ms)
  Rendered papers/_item.html.erb (0.0ms)
  Rendered papers/search.html.erb within layouts/application (22.8ms)
Completed 200 OK in 78ms (Views: 75.5ms | ActiveRecord: 1.5ms)


Started GET "/assets/comments.self-e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855.css?body=1" for ::1 at 2016-10-08 23:36:45 +0900


Started GET "/assets/likes.self-e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855.css?body=1" for ::1 at 2016-10-08 23:36:45 +0900


Started GET "/assets/papers.self-e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855.css?body=1" for ::1 at 2016-10-08 23:36:45 +0900


Started GET "/assets/users.self-e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855.css?body=1" for ::1 at 2016-10-08 23:36:45 +0900


Started GET "/assets/application.self-e80e8f2318043e8af94dddc2adad5a4f09739a8ebb323b3ab31cd71d45fd9113.css?body=1" for ::1 at 2016-10-08 23:36:45 +0900


Started GET "/assets/jquery_ujs.self-784a997f6726036b1993eb2217c9cb558e1cbb801c6da88105588c56f13b466a.js?body=1" for ::1 at 2016-10-08 23:36:45 +0900


Started GET "/assets/jquery.self-bd7ddd393353a8d2480a622e80342adf488fb6006d667e8b42e4c0073393abee.js?body=1" for ::1 at 2016-10-08 23:36:45 +0900


Started GET "/assets/turbolinks.self-c5acd7a204f5f25ce7a1d8a0e4d92e28d34c9e2df2c7371cd7af88e147e4ad82.js?body=1" for ::1 at 2016-10-08 23:36:45 +0900


Started GET "/assets/comments.self-877aef30ae1b040ab8a3aba4e3e309a11d7f2612f44dde450b5c157aa5f95c05.js?body=1" for ::1 at 2016-10-08 23:36:45 +0900


Started GET "/assets/likes.self-877aef30ae1b040ab8a3aba4e3e309a11d7f2612f44dde450b5c157aa5f95c05.js?body=1" for ::1 at 2016-10-08 23:36:45 +0900


Started GET "/assets/papers.self-877aef30ae1b040ab8a3aba4e3e309a11d7f2612f44dde450b5c157aa5f95c05.js?body=1" for ::1 at 2016-10-08 23:36:45 +0900


Started GET "/assets/users.self-877aef30ae1b040ab8a3aba4e3e309a11d7f2612f44dde450b5c157aa5f95c05.js?body=1" for ::1 at 2016-10-08 23:36:45 +0900


Started GET "/assets/application.self-3b8dabdc891efe46b9a144b400ad69e37d7e5876bdc39dee783419a69d7ca819.js?body=1" for ::1 at 2016-10-08 23:36:45 +0900


Started GET "/" for ::1 at 2016-10-08 23:36:50 +0900
Processing by PapersController#index as HTML
  [1m[36mPaper Load (0.3ms)[0m  [1mSELECT  `papers`.* FROM `papers`  ORDER BY id DESC LIMIT 5 OFFSET 0[0m
  Rendered papers/_item.html.erb (0.1ms)
  Rendered papers/_item.html.erb (0.1ms)
  Rendered papers/_item.html.erb (0.1ms)
  Rendered papers/_item.html.erb (0.1ms)
  Rendered papers/_item.html.erb (0.1ms)
  Rendered papers/index.html.erb within layouts/application (11.3ms)
Completed 200 OK in 38ms (Views: 35.4ms | ActiveRecord: 0.3ms)


Started GET "/papers/search?utf8=%E2%9C%93&keyword=" for ::1 at 2016-10-08 23:51:57 +0900
Processing by PapersController#search as HTML
  Parameters: {"utf8"=>"✓", "keyword"=>""}
  [1m[35mPaper Load (0.7ms)[0m  SELECT  `papers`.* FROM `papers` WHERE (title LIKE('%%')) LIMIT 20
  Rendered papers/_item.html.erb (0.5ms)
  Rendered papers/_item.html.erb (0.1ms)
  Rendered papers/_item.html.erb (0.1ms)
  Rendered papers/_item.html.erb (0.1ms)
  Rendered papers/_item.html.erb (0.1ms)
  Rendered papers/_item.html.erb (0.1ms)
  Rendered papers/_item.html.erb (0.1ms)
  Rendered papers/_item.html.erb (0.1ms)
  Rendered papers/_item.html.erb (0.1ms)
  Rendered papers/_item.html.erb (0.1ms)
  Rendered papers/_item.html.erb (0.1ms)
  Rendered papers/_item.html.erb (0.1ms)
  Rendered papers/_item.html.erb (0.1ms)
  Rendered papers/_item.html.erb (0.1ms)
  Rendered papers/_item.html.erb (0.1ms)
  Rendered papers/_item.html.erb (0.1ms)
  Rendered papers/_item.html.erb (0.1ms)
  Rendered papers/_item.html.erb (0.1ms)
  Rendered papers/_item.html.erb (0.1ms)
  Rendered papers/_item.html.erb (0.1ms)
  Rendered papers/search.html.erb within layouts/application (56.7ms)
Completed 200 OK in 110ms (Views: 78.3ms | ActiveRecord: 26.6ms)


Started GET "/papers/3" for ::1 at 2016-10-08 23:52:00 +0900
Processing by PapersController#show as HTML
  Parameters: {"id"=>"3"}
  [1m[36mPaper Load (17.3ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`id` = 3 LIMIT 1[0m
  Rendered papers/show.html.erb within layouts/application (37.9ms)
Completed 500 Internal Server Error in 106ms (ActiveRecord: 17.3ms)

ActionView::Template::Error (undefined local variable or method `paper' for #<#<Class:0x007fd4d663c790>:0x007fd4d6486a68>
Did you mean?  @paper):
    1: <div>
    2:   <%= link_to "#{@paper.title}", "#{paper.url}" %>
    3: </div>
  app/views/papers/show.html.erb:2:in `_app_views_papers_show_html_erb__3238495100161371660_70276078280380'


  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/_source.erb (9.2ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/_trace.html.erb (2.3ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/_request_and_response.html.erb (1.0ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/template_error.html.erb within rescues/layout (71.0ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/web-console-2.3.0/lib/web_console/templates/_markup.html.erb (0.7ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/web-console-2.3.0/lib/web_console/templates/_inner_console_markup.html.erb within layouts/inlined_string (0.5ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/web-console-2.3.0/lib/web_console/templates/_prompt_box_markup.html.erb within layouts/inlined_string (0.4ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/web-console-2.3.0/lib/web_console/templates/style.css.erb within layouts/inlined_string (0.3ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/web-console-2.3.0/lib/web_console/templates/console.js.erb within layouts/javascript (59.5ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/web-console-2.3.0/lib/web_console/templates/main.js.erb within layouts/javascript (0.3ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/web-console-2.3.0/lib/web_console/templates/error_page.js.erb within layouts/javascript (0.5ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/web-console-2.3.0/lib/web_console/templates/index.html.erb (133.2ms)


Started GET "/papers/3" for ::1 at 2016-10-08 23:52:21 +0900
Processing by PapersController#show as HTML
  Parameters: {"id"=>"3"}
  [1m[35mPaper Load (0.3ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`id` = 3 LIMIT 1
  Rendered papers/show.html.erb within layouts/application (35.9ms)
Completed 500 Internal Server Error in 55ms (ActiveRecord: 2.1ms)

ActionView::Template::Error (undefined local variable or method `paper' for #<#<Class:0x007fd4d41ddc78>:0x007fd4d9c51858>
Did you mean?  @paper):
    1: <div>
    2:   <%= link_to "#{@paper.title}", "#{paper.url}" %>
    3: </div>
  app/views/papers/show.html.erb:2:in `_app_views_papers_show_html_erb__3238495100161371660_70276078280380'


  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/_source.erb (6.4ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/_trace.html.erb (2.7ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/_request_and_response.html.erb (1.0ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/template_error.html.erb within rescues/layout (65.8ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/web-console-2.3.0/lib/web_console/templates/_markup.html.erb (0.5ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/web-console-2.3.0/lib/web_console/templates/_inner_console_markup.html.erb within layouts/inlined_string (0.6ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/web-console-2.3.0/lib/web_console/templates/_prompt_box_markup.html.erb within layouts/inlined_string (0.5ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/web-console-2.3.0/lib/web_console/templates/style.css.erb within layouts/inlined_string (0.3ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/web-console-2.3.0/lib/web_console/templates/console.js.erb within layouts/javascript (55.3ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/web-console-2.3.0/lib/web_console/templates/main.js.erb within layouts/javascript (0.3ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/web-console-2.3.0/lib/web_console/templates/error_page.js.erb within layouts/javascript (0.7ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/web-console-2.3.0/lib/web_console/templates/index.html.erb (130.7ms)


Started GET "/papers/3" for ::1 at 2016-10-08 23:52:43 +0900
Processing by PapersController#show as HTML
  Parameters: {"id"=>"3"}
  [1m[36mPaper Load (0.5ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`id` = 3 LIMIT 1[0m
  Rendered papers/show.html.erb within layouts/application (0.4ms)
Completed 200 OK in 26ms (Views: 24.0ms | ActiveRecord: 0.5ms)


Started GET "/assets/likes.self-e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855.css?body=1" for ::1 at 2016-10-08 23:52:43 +0900


Started GET "/assets/comments.self-e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855.css?body=1" for ::1 at 2016-10-08 23:52:43 +0900


Started GET "/assets/application.self-e80e8f2318043e8af94dddc2adad5a4f09739a8ebb323b3ab31cd71d45fd9113.css?body=1" for ::1 at 2016-10-08 23:52:43 +0900


Started GET "/assets/users.self-e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855.css?body=1" for ::1 at 2016-10-08 23:52:43 +0900


Started GET "/assets/jquery.self-bd7ddd393353a8d2480a622e80342adf488fb6006d667e8b42e4c0073393abee.js?body=1" for ::1 at 2016-10-08 23:52:43 +0900


Started GET "/assets/papers.self-e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855.css?body=1" for ::1 at 2016-10-08 23:52:43 +0900


Started GET "/assets/jquery_ujs.self-784a997f6726036b1993eb2217c9cb558e1cbb801c6da88105588c56f13b466a.js?body=1" for ::1 at 2016-10-08 23:52:43 +0900


Started GET "/assets/turbolinks.self-c5acd7a204f5f25ce7a1d8a0e4d92e28d34c9e2df2c7371cd7af88e147e4ad82.js?body=1" for ::1 at 2016-10-08 23:52:43 +0900


Started GET "/assets/comments.self-877aef30ae1b040ab8a3aba4e3e309a11d7f2612f44dde450b5c157aa5f95c05.js?body=1" for ::1 at 2016-10-08 23:52:43 +0900


Started GET "/assets/likes.self-877aef30ae1b040ab8a3aba4e3e309a11d7f2612f44dde450b5c157aa5f95c05.js?body=1" for ::1 at 2016-10-08 23:52:43 +0900


Started GET "/assets/papers.self-877aef30ae1b040ab8a3aba4e3e309a11d7f2612f44dde450b5c157aa5f95c05.js?body=1" for ::1 at 2016-10-08 23:52:43 +0900


Started GET "/assets/users.self-877aef30ae1b040ab8a3aba4e3e309a11d7f2612f44dde450b5c157aa5f95c05.js?body=1" for ::1 at 2016-10-08 23:52:43 +0900


Started GET "/assets/application.self-3b8dabdc891efe46b9a144b400ad69e37d7e5876bdc39dee783419a69d7ca819.js?body=1" for ::1 at 2016-10-08 23:52:43 +0900


Started GET "/users/sign_up" for ::1 at 2016-10-08 23:55:45 +0900
Processing by Devise::RegistrationsController#new as HTML
  Rendered devise/shared/_links.html.erb (1.4ms)
  Rendered devise/registrations/new.html.erb within layouts/application (39.9ms)
Completed 200 OK in 120ms (Views: 89.4ms | ActiveRecord: 13.4ms)


Started GET "/users/sign_up" for ::1 at 2016-10-08 23:55:45 +0900
Processing by Devise::RegistrationsController#new as HTML
  Rendered devise/shared/_links.html.erb (0.2ms)
  Rendered devise/registrations/new.html.erb within layouts/application (2.7ms)
Completed 200 OK in 27ms (Views: 26.3ms | ActiveRecord: 0.0ms)


Started GET "/users/sign_in" for ::1 at 2016-10-08 23:55:51 +0900
Processing by Devise::SessionsController#new as HTML
  Rendered devise/shared/_links.html.erb (0.5ms)
  Rendered devise/sessions/new.html.erb within layouts/application (6.9ms)
Completed 200 OK in 39ms (Views: 36.5ms | ActiveRecord: 0.0ms)


Started GET "/users/sign_in" for ::1 at 2016-10-09 00:01:48 +0900
Processing by Devise::SessionsController#new as HTML
  Rendered devise/shared/_links.html.erb (0.3ms)
  Rendered devise/sessions/new.html.erb within layouts/application (3.0ms)
Completed 200 OK in 35ms (Views: 33.1ms | ActiveRecord: 0.0ms)


Started GET "/assets/comments.self-e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855.css?body=1" for ::1 at 2016-10-09 00:01:48 +0900


Started GET "/assets/likes.self-e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855.css?body=1" for ::1 at 2016-10-09 00:01:48 +0900


Started GET "/assets/papers.self-e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855.css?body=1" for ::1 at 2016-10-09 00:01:48 +0900


Started GET "/assets/application.self-e80e8f2318043e8af94dddc2adad5a4f09739a8ebb323b3ab31cd71d45fd9113.css?body=1" for ::1 at 2016-10-09 00:01:48 +0900


Started GET "/assets/jquery_ujs.self-784a997f6726036b1993eb2217c9cb558e1cbb801c6da88105588c56f13b466a.js?body=1" for ::1 at 2016-10-09 00:01:48 +0900


Started GET "/assets/users.self-e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855.css?body=1" for ::1 at 2016-10-09 00:01:48 +0900


Started GET "/assets/jquery.self-bd7ddd393353a8d2480a622e80342adf488fb6006d667e8b42e4c0073393abee.js?body=1" for ::1 at 2016-10-09 00:01:48 +0900


Started GET "/assets/turbolinks.self-c5acd7a204f5f25ce7a1d8a0e4d92e28d34c9e2df2c7371cd7af88e147e4ad82.js?body=1" for ::1 at 2016-10-09 00:01:48 +0900


Started GET "/assets/comments.self-877aef30ae1b040ab8a3aba4e3e309a11d7f2612f44dde450b5c157aa5f95c05.js?body=1" for ::1 at 2016-10-09 00:01:48 +0900


Started GET "/assets/likes.self-877aef30ae1b040ab8a3aba4e3e309a11d7f2612f44dde450b5c157aa5f95c05.js?body=1" for ::1 at 2016-10-09 00:01:48 +0900


Started GET "/assets/papers.self-877aef30ae1b040ab8a3aba4e3e309a11d7f2612f44dde450b5c157aa5f95c05.js?body=1" for ::1 at 2016-10-09 00:01:48 +0900


Started GET "/assets/users.self-877aef30ae1b040ab8a3aba4e3e309a11d7f2612f44dde450b5c157aa5f95c05.js?body=1" for ::1 at 2016-10-09 00:01:48 +0900


Started GET "/assets/application.self-3b8dabdc891efe46b9a144b400ad69e37d7e5876bdc39dee783419a69d7ca819.js?body=1" for ::1 at 2016-10-09 00:01:48 +0900


Started GET "/users/sign_up" for ::1 at 2016-10-09 00:01:54 +0900
Processing by Devise::RegistrationsController#new as HTML
  Rendered devise/registrations/new.html.erb within layouts/application (40.4ms)
Completed 500 Internal Server Error in 56ms (ActiveRecord: 0.0ms)

ActionView::Template::Error (undefined method `name_field' for #<ActionView::Helpers::FormBuilder:0x007fd4d91d2328>
Did you mean?  number_field
               range_field
               time_field
               date_field):
     5: 
     6:   <div class="field">
     7:     <%= f.label :name %><br />
     8:     <%= f.name_field :name, autofocus: true %>
     9:   </div>
    10: 
    11:   <div class="field">
  app/views/devise/registrations/new.html.erb:8:in `block in _app_views_devise_registrations_new_html_erb__772234761176533558_70276074363000'
  app/views/devise/registrations/new.html.erb:3:in `_app_views_devise_registrations_new_html_erb__772234761176533558_70276074363000'


  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/_source.erb (6.6ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/_trace.html.erb (4.6ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/_request_and_response.html.erb (1.2ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/template_error.html.erb within rescues/layout (70.8ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/web-console-2.3.0/lib/web_console/templates/_markup.html.erb (0.6ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/web-console-2.3.0/lib/web_console/templates/_inner_console_markup.html.erb within layouts/inlined_string (0.7ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/web-console-2.3.0/lib/web_console/templates/_prompt_box_markup.html.erb within layouts/inlined_string (0.3ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/web-console-2.3.0/lib/web_console/templates/style.css.erb within layouts/inlined_string (0.5ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/web-console-2.3.0/lib/web_console/templates/console.js.erb within layouts/javascript (66.6ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/web-console-2.3.0/lib/web_console/templates/main.js.erb within layouts/javascript (0.4ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/web-console-2.3.0/lib/web_console/templates/error_page.js.erb within layouts/javascript (0.7ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/web-console-2.3.0/lib/web_console/templates/index.html.erb (143.0ms)


Started GET "/users/sign_up" for ::1 at 2016-10-09 00:02:27 +0900
Processing by Devise::RegistrationsController#new as HTML
  Rendered devise/registrations/new.html.erb within layouts/application (47.1ms)
Completed 500 Internal Server Error in 61ms (ActiveRecord: 0.0ms)

ActionView::Template::Error (undefined method `name_field' for #<ActionView::Helpers::FormBuilder:0x007fd4d5eca390>
Did you mean?  number_field
               range_field
               time_field
               date_field):
     5: 
     6:   <div class="field">
     7:     <%= f.label :name %><br />
     8:     <%= f.name_field :name, autofocus: true %>
     9:   </div>
    10: 
    11:   <div class="field">
  app/views/devise/registrations/new.html.erb:8:in `block in _app_views_devise_registrations_new_html_erb__772234761176533558_70276049575020'
  app/views/devise/registrations/new.html.erb:3:in `_app_views_devise_registrations_new_html_erb__772234761176533558_70276049575020'


  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/_source.erb (5.9ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/_trace.html.erb (2.6ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/_request_and_response.html.erb (0.9ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/template_error.html.erb within rescues/layout (70.2ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/web-console-2.3.0/lib/web_console/templates/_markup.html.erb (0.7ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/web-console-2.3.0/lib/web_console/templates/_inner_console_markup.html.erb within layouts/inlined_string (0.4ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/web-console-2.3.0/lib/web_console/templates/_prompt_box_markup.html.erb within layouts/inlined_string (0.4ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/web-console-2.3.0/lib/web_console/templates/style.css.erb within layouts/inlined_string (0.4ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/web-console-2.3.0/lib/web_console/templates/console.js.erb within layouts/javascript (60.0ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/web-console-2.3.0/lib/web_console/templates/main.js.erb within layouts/javascript (0.3ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/web-console-2.3.0/lib/web_console/templates/error_page.js.erb within layouts/javascript (0.5ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/web-console-2.3.0/lib/web_console/templates/index.html.erb (137.3ms)


Started GET "/users/sign_up" for ::1 at 2016-10-09 00:02:51 +0900
Processing by Devise::RegistrationsController#new as HTML
  Rendered devise/registrations/new.html.erb within layouts/application (42.3ms)
Completed 500 Internal Server Error in 56ms (ActiveRecord: 0.0ms)

ActionView::Template::Error (undefined method `input' for #<ActionView::Helpers::FormBuilder:0x007fd4d31a5220>):
     5: 
     6:   <div class="field">
     7:     <%= f.label :name %><br />
     8:     <%= f.input :name, autofocus: true %>
     9:   </div>
    10: 
    11:   <div class="field">
  app/views/devise/registrations/new.html.erb:8:in `block in _app_views_devise_registrations_new_html_erb__772234761176533558_70276076981400'
  app/views/devise/registrations/new.html.erb:3:in `_app_views_devise_registrations_new_html_erb__772234761176533558_70276076981400'


  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/_source.erb (6.8ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/_trace.html.erb (3.3ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/_request_and_response.html.erb (1.2ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/template_error.html.erb within rescues/layout (64.6ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/web-console-2.3.0/lib/web_console/templates/_markup.html.erb (0.5ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/web-console-2.3.0/lib/web_console/templates/_inner_console_markup.html.erb within layouts/inlined_string (0.4ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/web-console-2.3.0/lib/web_console/templates/_prompt_box_markup.html.erb within layouts/inlined_string (0.3ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/web-console-2.3.0/lib/web_console/templates/style.css.erb within layouts/inlined_string (0.5ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/web-console-2.3.0/lib/web_console/templates/console.js.erb within layouts/javascript (69.9ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/web-console-2.3.0/lib/web_console/templates/main.js.erb within layouts/javascript (0.3ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/web-console-2.3.0/lib/web_console/templates/error_page.js.erb within layouts/javascript (0.5ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/web-console-2.3.0/lib/web_console/templates/index.html.erb (144.2ms)


Started GET "/users/sign_up" for ::1 at 2016-10-09 00:03:03 +0900
Processing by Devise::RegistrationsController#new as HTML
  Rendered devise/registrations/new.html.erb within layouts/application (46.3ms)
Completed 500 Internal Server Error in 58ms (ActiveRecord: 0.0ms)

ActionView::Template::Error (undefined method `input_field' for #<ActionView::Helpers::FormBuilder:0x007fd4d98469e8>):
     5: 
     6:   <div class="field">
     7:     <%= f.label :name %><br />
     8:     <%= f.input_field :name, autofocus: true %>
     9:   </div>
    10: 
    11:   <div class="field">
  app/views/devise/registrations/new.html.erb:8:in `block in _app_views_devise_registrations_new_html_erb__772234761176533558_70276079787940'
  app/views/devise/registrations/new.html.erb:3:in `_app_views_devise_registrations_new_html_erb__772234761176533558_70276079787940'


  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/_source.erb (8.7ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/_trace.html.erb (3.5ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/_request_and_response.html.erb (0.9ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/template_error.html.erb within rescues/layout (73.4ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/web-console-2.3.0/lib/web_console/templates/_markup.html.erb (0.4ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/web-console-2.3.0/lib/web_console/templates/_inner_console_markup.html.erb within layouts/inlined_string (0.3ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/web-console-2.3.0/lib/web_console/templates/_prompt_box_markup.html.erb within layouts/inlined_string (0.4ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/web-console-2.3.0/lib/web_console/templates/style.css.erb within layouts/inlined_string (0.4ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/web-console-2.3.0/lib/web_console/templates/console.js.erb within layouts/javascript (62.0ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/web-console-2.3.0/lib/web_console/templates/main.js.erb within layouts/javascript (0.4ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/web-console-2.3.0/lib/web_console/templates/error_page.js.erb within layouts/javascript (0.7ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/web-console-2.3.0/lib/web_console/templates/index.html.erb (135.1ms)


Started GET "/users/sign_up" for ::1 at 2016-10-09 00:03:44 +0900
Processing by Devise::RegistrationsController#new as HTML
  Rendered devise/shared/_links.html.erb (0.5ms)
  Rendered devise/registrations/new.html.erb within layouts/application (6.0ms)
Completed 200 OK in 60ms (Views: 58.4ms | ActiveRecord: 0.0ms)


Started GET "/assets/comments.self-e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855.css?body=1" for ::1 at 2016-10-09 00:03:44 +0900


Started GET "/assets/users.self-e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855.css?body=1" for ::1 at 2016-10-09 00:03:44 +0900


Started GET "/assets/likes.self-e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855.css?body=1" for ::1 at 2016-10-09 00:03:44 +0900


Started GET "/assets/papers.self-e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855.css?body=1" for ::1 at 2016-10-09 00:03:44 +0900


Started GET "/assets/jquery.self-bd7ddd393353a8d2480a622e80342adf488fb6006d667e8b42e4c0073393abee.js?body=1" for ::1 at 2016-10-09 00:03:44 +0900


Started GET "/assets/application.self-e80e8f2318043e8af94dddc2adad5a4f09739a8ebb323b3ab31cd71d45fd9113.css?body=1" for ::1 at 2016-10-09 00:03:44 +0900


Started GET "/assets/jquery_ujs.self-784a997f6726036b1993eb2217c9cb558e1cbb801c6da88105588c56f13b466a.js?body=1" for ::1 at 2016-10-09 00:03:44 +0900


Started GET "/assets/turbolinks.self-c5acd7a204f5f25ce7a1d8a0e4d92e28d34c9e2df2c7371cd7af88e147e4ad82.js?body=1" for ::1 at 2016-10-09 00:03:44 +0900


Started GET "/assets/comments.self-877aef30ae1b040ab8a3aba4e3e309a11d7f2612f44dde450b5c157aa5f95c05.js?body=1" for ::1 at 2016-10-09 00:03:44 +0900


Started GET "/assets/papers.self-877aef30ae1b040ab8a3aba4e3e309a11d7f2612f44dde450b5c157aa5f95c05.js?body=1" for ::1 at 2016-10-09 00:03:44 +0900


Started GET "/assets/likes.self-877aef30ae1b040ab8a3aba4e3e309a11d7f2612f44dde450b5c157aa5f95c05.js?body=1" for ::1 at 2016-10-09 00:03:44 +0900


Started GET "/assets/users.self-877aef30ae1b040ab8a3aba4e3e309a11d7f2612f44dde450b5c157aa5f95c05.js?body=1" for ::1 at 2016-10-09 00:03:44 +0900


Started GET "/assets/application.self-3b8dabdc891efe46b9a144b400ad69e37d7e5876bdc39dee783419a69d7ca819.js?body=1" for ::1 at 2016-10-09 00:03:44 +0900


Started GET "/users/sign_up" for ::1 at 2016-10-09 00:05:06 +0900
Processing by Devise::RegistrationsController#new as HTML
  Rendered devise/shared/_links.html.erb (0.2ms)
  Rendered devise/registrations/new.html.erb within layouts/application (6.1ms)
Completed 200 OK in 49ms (Views: 48.3ms | ActiveRecord: 0.0ms)


Started GET "/assets/comments.self-e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855.css?body=1" for ::1 at 2016-10-09 00:05:06 +0900


Started GET "/assets/likes.self-e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855.css?body=1" for ::1 at 2016-10-09 00:05:06 +0900


Started GET "/assets/jquery.self-bd7ddd393353a8d2480a622e80342adf488fb6006d667e8b42e4c0073393abee.js?body=1" for ::1 at 2016-10-09 00:05:06 +0900


Started GET "/assets/users.self-e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855.css?body=1" for ::1 at 2016-10-09 00:05:06 +0900


Started GET "/assets/papers.self-e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855.css?body=1" for ::1 at 2016-10-09 00:05:06 +0900


Started GET "/assets/application.self-e80e8f2318043e8af94dddc2adad5a4f09739a8ebb323b3ab31cd71d45fd9113.css?body=1" for ::1 at 2016-10-09 00:05:06 +0900


Started GET "/assets/jquery_ujs.self-784a997f6726036b1993eb2217c9cb558e1cbb801c6da88105588c56f13b466a.js?body=1" for ::1 at 2016-10-09 00:05:06 +0900


Started GET "/assets/turbolinks.self-c5acd7a204f5f25ce7a1d8a0e4d92e28d34c9e2df2c7371cd7af88e147e4ad82.js?body=1" for ::1 at 2016-10-09 00:05:06 +0900


Started GET "/assets/comments.self-877aef30ae1b040ab8a3aba4e3e309a11d7f2612f44dde450b5c157aa5f95c05.js?body=1" for ::1 at 2016-10-09 00:05:06 +0900


Started GET "/assets/likes.self-877aef30ae1b040ab8a3aba4e3e309a11d7f2612f44dde450b5c157aa5f95c05.js?body=1" for ::1 at 2016-10-09 00:05:06 +0900


Started GET "/assets/papers.self-877aef30ae1b040ab8a3aba4e3e309a11d7f2612f44dde450b5c157aa5f95c05.js?body=1" for ::1 at 2016-10-09 00:05:06 +0900


Started GET "/assets/users.self-877aef30ae1b040ab8a3aba4e3e309a11d7f2612f44dde450b5c157aa5f95c05.js?body=1" for ::1 at 2016-10-09 00:05:06 +0900


Started GET "/assets/application.self-3b8dabdc891efe46b9a144b400ad69e37d7e5876bdc39dee783419a69d7ca819.js?body=1" for ::1 at 2016-10-09 00:05:06 +0900


Started POST "/users" for ::1 at 2016-10-09 00:05:40 +0900
Processing by Devise::RegistrationsController#create as HTML
  Parameters: {"utf8"=>"✓", "authenticity_token"=>"73SEBO1toMCXjFQ3tW47PsMxOvfpkx36ZtP49EnItsIoSJ2RFik4/fjGuMXk8Ws0CZHnLs1TGcMaKRiAAvKexg==", "user"=>{"name"=>"島岡聖世", "introduction"=>"東北大学", "email"=>"simaokasonse@yahoo.co.jp", "password"=>"[FILTERED]", "password_confirmation"=>"[FILTERED]"}, "commit"=>"Sign up"}
Unpermitted parameters: name, introduction
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mUser Exists (25.4ms)[0m  [1mSELECT  1 AS one FROM `users` WHERE `users`.`email` = BINARY 'simaokasonse@yahoo.co.jp' LIMIT 1[0m
  [1m[35mSQL (0.9ms)[0m  INSERT INTO `users` (`email`, `encrypted_password`, `created_at`, `updated_at`) VALUES ('simaokasonse@yahoo.co.jp', '$2a$11$lz5KWuGTju7M5fNeU2NKsevCLg.B44HHqiF5Pve3ahYxFjWjSYsWy', '2016-10-08 15:05:41', '2016-10-08 15:05:41')
  [1m[36m (3.8ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (1.6ms)[0m  [1mUPDATE `users` SET `last_sign_in_at` = '2016-10-08 15:05:41', `current_sign_in_at` = '2016-10-08 15:05:41', `last_sign_in_ip` = '::1', `current_sign_in_ip` = '::1', `sign_in_count` = 1, `updated_at` = '2016-10-08 15:05:41' WHERE `users`.`id` = 1[0m
  [1m[35m (3.1ms)[0m  COMMIT
Redirected to http://localhost:3000/
Completed 302 Found in 342ms (ActiveRecord: 35.4ms)


Started GET "/" for ::1 at 2016-10-09 00:05:41 +0900
Processing by PapersController#index as HTML
  [1m[36mPaper Load (0.3ms)[0m  [1mSELECT  `papers`.* FROM `papers`  ORDER BY id DESC LIMIT 5 OFFSET 0[0m
  Rendered papers/_item.html.erb (0.2ms)
  Rendered papers/_item.html.erb (0.1ms)
  Rendered papers/_item.html.erb (0.1ms)
  Rendered papers/_item.html.erb (0.1ms)
  Rendered papers/_item.html.erb (0.1ms)
  Rendered papers/index.html.erb within layouts/application (7.0ms)
Completed 200 OK in 31ms (Views: 29.6ms | ActiveRecord: 0.3ms)


Started GET "/" for ::1 at 2016-10-09 00:08:11 +0900
Processing by PapersController#index as HTML
  [1m[35mPaper Load (0.3ms)[0m  SELECT  `papers`.* FROM `papers`  ORDER BY id DESC LIMIT 5 OFFSET 0
  Rendered papers/_item.html.erb (0.2ms)
  Rendered papers/_item.html.erb (0.1ms)
  Rendered papers/_item.html.erb (0.1ms)
  Rendered papers/_item.html.erb (0.1ms)
  Rendered papers/_item.html.erb (0.1ms)
  Rendered papers/index.html.erb within layouts/application (7.4ms)
  [1m[36mUser Load (0.4ms)[0m  [1mSELECT  `users`.* FROM `users` WHERE `users`.`id` = 1  ORDER BY `users`.`id` ASC LIMIT 1[0m
Completed 200 OK in 38ms (Views: 36.5ms | ActiveRecord: 0.7ms)


Started GET "/assets/comments.self-e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855.css?body=1" for ::1 at 2016-10-09 00:08:11 +0900


Started GET "/assets/application.self-e80e8f2318043e8af94dddc2adad5a4f09739a8ebb323b3ab31cd71d45fd9113.css?body=1" for ::1 at 2016-10-09 00:08:11 +0900


Started GET "/assets/jquery.self-bd7ddd393353a8d2480a622e80342adf488fb6006d667e8b42e4c0073393abee.js?body=1" for ::1 at 2016-10-09 00:08:11 +0900


Started GET "/assets/likes.self-e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855.css?body=1" for ::1 at 2016-10-09 00:08:11 +0900


Started GET "/assets/papers.self-e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855.css?body=1" for ::1 at 2016-10-09 00:08:11 +0900


Started GET "/assets/users.self-e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855.css?body=1" for ::1 at 2016-10-09 00:08:11 +0900


Started GET "/assets/jquery_ujs.self-784a997f6726036b1993eb2217c9cb558e1cbb801c6da88105588c56f13b466a.js?body=1" for ::1 at 2016-10-09 00:08:11 +0900


Started GET "/assets/turbolinks.self-c5acd7a204f5f25ce7a1d8a0e4d92e28d34c9e2df2c7371cd7af88e147e4ad82.js?body=1" for ::1 at 2016-10-09 00:08:11 +0900


Started GET "/assets/comments.self-877aef30ae1b040ab8a3aba4e3e309a11d7f2612f44dde450b5c157aa5f95c05.js?body=1" for ::1 at 2016-10-09 00:08:11 +0900


Started GET "/assets/likes.self-877aef30ae1b040ab8a3aba4e3e309a11d7f2612f44dde450b5c157aa5f95c05.js?body=1" for ::1 at 2016-10-09 00:08:11 +0900


Started GET "/assets/papers.self-877aef30ae1b040ab8a3aba4e3e309a11d7f2612f44dde450b5c157aa5f95c05.js?body=1" for ::1 at 2016-10-09 00:08:11 +0900


Started GET "/assets/users.self-877aef30ae1b040ab8a3aba4e3e309a11d7f2612f44dde450b5c157aa5f95c05.js?body=1" for ::1 at 2016-10-09 00:08:11 +0900


Started GET "/assets/application.self-3b8dabdc891efe46b9a144b400ad69e37d7e5876bdc39dee783419a69d7ca819.js?body=1" for ::1 at 2016-10-09 00:08:11 +0900


Started GET "/papers/search?utf8=%E2%9C%93&keyword=" for ::1 at 2016-10-09 00:08:25 +0900
Processing by PapersController#search as HTML
  Parameters: {"utf8"=>"✓", "keyword"=>""}
  [1m[35mPaper Load (0.5ms)[0m  SELECT  `papers`.* FROM `papers` WHERE (title LIKE('%%')) LIMIT 20
  Rendered papers/_item.html.erb (0.2ms)
  Rendered papers/_item.html.erb (0.1ms)
  Rendered papers/_item.html.erb (0.1ms)
  Rendered papers/_item.html.erb (0.1ms)
  Rendered papers/_item.html.erb (0.1ms)
  Rendered papers/_item.html.erb (0.1ms)
  Rendered papers/_item.html.erb (0.1ms)
  Rendered papers/_item.html.erb (0.1ms)
  Rendered papers/_item.html.erb (0.1ms)
  Rendered papers/_item.html.erb (0.1ms)
  Rendered papers/_item.html.erb (0.1ms)
  Rendered papers/_item.html.erb (0.1ms)
  Rendered papers/_item.html.erb (0.1ms)
  Rendered papers/_item.html.erb (0.1ms)
  Rendered papers/_item.html.erb (0.1ms)
  Rendered papers/_item.html.erb (0.1ms)
  Rendered papers/_item.html.erb (0.1ms)
  Rendered papers/_item.html.erb (0.1ms)
  Rendered papers/_item.html.erb (0.1ms)
  Rendered papers/_item.html.erb (0.1ms)
  Rendered papers/search.html.erb within layouts/application (22.7ms)
  [1m[36mUser Load (0.3ms)[0m  [1mSELECT  `users`.* FROM `users` WHERE `users`.`id` = 1  ORDER BY `users`.`id` ASC LIMIT 1[0m
Completed 500 Internal Server Error in 122ms (ActiveRecord: 0.8ms)

ActionView::Template::Error (undefined local variable or method `curret_user' for #<#<Class:0x007fd4d41ddc78>:0x007fd4d8d618e8>
Did you mean?  current_user):
    17:     </div>
    18:     <div>
    19:       <% if user_signed_in? %>
    20:         <strong> こんにちは、<%= curret_user.name%> </strong>
    21:       <% end %>
    22:     </div>
    23:     <div> <a href="/"> ArxivPicks </a> </div>
  app/views/layouts/application.html.erb:20:in `_app_views_layouts_application_html_erb__2015107031066719694_70276073833360'


  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/_source.erb (5.8ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/_trace.html.erb (2.8ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/_request_and_response.html.erb (1.5ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/template_error.html.erb within rescues/layout (76.5ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/web-console-2.3.0/lib/web_console/templates/_markup.html.erb (0.6ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/web-console-2.3.0/lib/web_console/templates/_inner_console_markup.html.erb within layouts/inlined_string (0.6ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/web-console-2.3.0/lib/web_console/templates/_prompt_box_markup.html.erb within layouts/inlined_string (0.5ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/web-console-2.3.0/lib/web_console/templates/style.css.erb within layouts/inlined_string (0.4ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/web-console-2.3.0/lib/web_console/templates/console.js.erb within layouts/javascript (62.8ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/web-console-2.3.0/lib/web_console/templates/main.js.erb within layouts/javascript (0.4ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/web-console-2.3.0/lib/web_console/templates/error_page.js.erb within layouts/javascript (0.5ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/web-console-2.3.0/lib/web_console/templates/index.html.erb (138.4ms)


Started GET "/papers/search?utf8=%E2%9C%93&keyword=" for ::1 at 2016-10-09 00:08:49 +0900
Processing by PapersController#search as HTML
  Parameters: {"utf8"=>"✓", "keyword"=>""}
  [1m[35mPaper Load (0.4ms)[0m  SELECT  `papers`.* FROM `papers` WHERE (title LIKE('%%')) LIMIT 20
  Rendered papers/_item.html.erb (0.1ms)
  Rendered papers/_item.html.erb (0.1ms)
  Rendered papers/_item.html.erb (0.1ms)
  Rendered papers/_item.html.erb (0.1ms)
  Rendered papers/_item.html.erb (0.1ms)
  Rendered papers/_item.html.erb (0.1ms)
  Rendered papers/_item.html.erb (0.1ms)
  Rendered papers/_item.html.erb (0.1ms)
  Rendered papers/_item.html.erb (0.2ms)
  Rendered papers/_item.html.erb (0.1ms)
  Rendered papers/_item.html.erb (0.1ms)
  Rendered papers/_item.html.erb (0.1ms)
  Rendered papers/_item.html.erb (0.1ms)
  Rendered papers/_item.html.erb (0.1ms)
  Rendered papers/_item.html.erb (0.1ms)
  Rendered papers/_item.html.erb (0.1ms)
  Rendered papers/_item.html.erb (0.1ms)
  Rendered papers/_item.html.erb (0.1ms)
  Rendered papers/_item.html.erb (0.1ms)
  Rendered papers/_item.html.erb (0.1ms)
  Rendered papers/search.html.erb within layouts/application (23.8ms)
  [1m[36mUser Load (0.5ms)[0m  [1mSELECT  `users`.* FROM `users` WHERE `users`.`id` = 1  ORDER BY `users`.`id` ASC LIMIT 1[0m
Completed 200 OK in 51ms (Views: 49.4ms | ActiveRecord: 0.9ms)


Started GET "/papers/search?utf8=%E2%9C%93&keyword=" for ::1 at 2016-10-09 00:12:50 +0900
Processing by PapersController#search as HTML
  Parameters: {"utf8"=>"✓", "keyword"=>""}
  [1m[35mPaper Load (0.5ms)[0m  SELECT  `papers`.* FROM `papers` WHERE (title LIKE('%%')) LIMIT 20
  Rendered papers/_item.html.erb (0.2ms)
  Rendered papers/_item.html.erb (0.1ms)
  Rendered papers/_item.html.erb (0.1ms)
  Rendered papers/_item.html.erb (0.1ms)
  Rendered papers/_item.html.erb (0.1ms)
  Rendered papers/_item.html.erb (0.1ms)
  Rendered papers/_item.html.erb (0.1ms)
  Rendered papers/_item.html.erb (0.1ms)
  Rendered papers/_item.html.erb (0.1ms)
  Rendered papers/_item.html.erb (0.1ms)
  Rendered papers/_item.html.erb (0.1ms)
  Rendered papers/_item.html.erb (0.1ms)
  Rendered papers/_item.html.erb (0.1ms)
  Rendered papers/_item.html.erb (0.1ms)
  Rendered papers/_item.html.erb (0.1ms)
  Rendered papers/_item.html.erb (0.1ms)
  Rendered papers/_item.html.erb (0.1ms)
  Rendered papers/_item.html.erb (0.1ms)
  Rendered papers/_item.html.erb (0.1ms)
  Rendered papers/_item.html.erb (0.1ms)
  Rendered papers/search.html.erb within layouts/application (55.1ms)
  [1m[36mUser Load (0.4ms)[0m  [1mSELECT  `users`.* FROM `users` WHERE `users`.`id` = 1  ORDER BY `users`.`id` ASC LIMIT 1[0m
Completed 200 OK in 136ms (Views: 79.0ms | ActiveRecord: 46.7ms)


Started GET "/assets/comments.self-e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855.css?body=1" for ::1 at 2016-10-09 00:12:50 +0900


Started GET "/assets/papers.self-e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855.css?body=1" for ::1 at 2016-10-09 00:12:50 +0900


Started GET "/assets/application.self-e80e8f2318043e8af94dddc2adad5a4f09739a8ebb323b3ab31cd71d45fd9113.css?body=1" for ::1 at 2016-10-09 00:12:50 +0900


Started GET "/assets/users.self-e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855.css?body=1" for ::1 at 2016-10-09 00:12:50 +0900


Started GET "/assets/likes.self-e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855.css?body=1" for ::1 at 2016-10-09 00:12:50 +0900


Started GET "/assets/jquery.self-bd7ddd393353a8d2480a622e80342adf488fb6006d667e8b42e4c0073393abee.js?body=1" for ::1 at 2016-10-09 00:12:50 +0900


Started GET "/assets/jquery_ujs.self-784a997f6726036b1993eb2217c9cb558e1cbb801c6da88105588c56f13b466a.js?body=1" for ::1 at 2016-10-09 00:12:50 +0900


Started GET "/assets/turbolinks.self-c5acd7a204f5f25ce7a1d8a0e4d92e28d34c9e2df2c7371cd7af88e147e4ad82.js?body=1" for ::1 at 2016-10-09 00:12:50 +0900


Started GET "/assets/comments.self-877aef30ae1b040ab8a3aba4e3e309a11d7f2612f44dde450b5c157aa5f95c05.js?body=1" for ::1 at 2016-10-09 00:12:50 +0900


Started GET "/assets/likes.self-877aef30ae1b040ab8a3aba4e3e309a11d7f2612f44dde450b5c157aa5f95c05.js?body=1" for ::1 at 2016-10-09 00:12:50 +0900


Started GET "/assets/papers.self-877aef30ae1b040ab8a3aba4e3e309a11d7f2612f44dde450b5c157aa5f95c05.js?body=1" for ::1 at 2016-10-09 00:12:50 +0900


Started GET "/assets/users.self-877aef30ae1b040ab8a3aba4e3e309a11d7f2612f44dde450b5c157aa5f95c05.js?body=1" for ::1 at 2016-10-09 00:12:50 +0900


Started GET "/assets/application.self-3b8dabdc891efe46b9a144b400ad69e37d7e5876bdc39dee783419a69d7ca819.js?body=1" for ::1 at 2016-10-09 00:12:50 +0900


Started GET "/users/sign_up" for ::1 at 2016-10-09 00:13:00 +0900
Processing by Devise::RegistrationsController#new as HTML
  Rendered devise/shared/_links.html.erb (0.5ms)
  Rendered devise/registrations/new.html.erb within layouts/application (4.7ms)
Completed 200 OK in 44ms (Views: 36.3ms | ActiveRecord: 0.0ms)


Started POST "/users" for ::1 at 2016-10-09 00:13:12 +0900
Processing by Devise::RegistrationsController#create as HTML
  Parameters: {"utf8"=>"✓", "authenticity_token"=>"RY4in6UMZgButcr2mIjMfEcWm9qfWaD9/g+gMy1W8CeCsjsKXkj+PQH/JgTJF5x2jbZGA7uZpMSC9UBHZmzYIw==", "user"=>{"name"=>"島岡聖世", "introduction"=>"東北大学", "email"=>"simaokasonse@yahoo.co.jp", "password"=>"[FILTERED]", "password_confirmation"=>"[FILTERED]"}, "commit"=>"Sign up"}
  [1m[35m (0.3ms)[0m  BEGIN
  [1m[36mUser Exists (0.4ms)[0m  [1mSELECT  1 AS one FROM `users` WHERE `users`.`email` = BINARY 'simaokasonse@yahoo.co.jp' LIMIT 1[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `users` (`email`, `encrypted_password`, `name`, `introduction`, `created_at`, `updated_at`) VALUES ('simaokasonse@yahoo.co.jp', '$2a$11$/7c8y30n9hHhm0i/ts0qfOOOkoN1uyVnMryTklf6KPKUKyAVyxSzS', '島岡聖世', '東北大学', '2016-10-08 15:13:13', '2016-10-08 15:13:13')
  [1m[36m (8.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.6ms)[0m  [1mUPDATE `users` SET `last_sign_in_at` = '2016-10-08 15:13:13', `current_sign_in_at` = '2016-10-08 15:13:13', `last_sign_in_ip` = '::1', `current_sign_in_ip` = '::1', `sign_in_count` = 1, `updated_at` = '2016-10-08 15:13:13' WHERE `users`.`id` = 2[0m
  [1m[35m (0.6ms)[0m  COMMIT
Redirected to http://localhost:3000/
Completed 302 Found in 226ms (ActiveRecord: 10.8ms)


Started GET "/" for ::1 at 2016-10-09 00:13:13 +0900
Processing by PapersController#index as HTML
  [1m[36mPaper Load (0.3ms)[0m  [1mSELECT  `papers`.* FROM `papers`  ORDER BY id DESC LIMIT 5 OFFSET 0[0m
  Rendered papers/_item.html.erb (0.1ms)
  Rendered papers/_item.html.erb (0.1ms)
  Rendered papers/_item.html.erb (0.1ms)
  Rendered papers/_item.html.erb (0.1ms)
  Rendered papers/_item.html.erb (0.1ms)
  Rendered papers/index.html.erb within layouts/application (6.7ms)
  [1m[35mUser Load (0.3ms)[0m  SELECT  `users`.* FROM `users` WHERE `users`.`id` = 2  ORDER BY `users`.`id` ASC LIMIT 1
Completed 200 OK in 35ms (Views: 33.6ms | ActiveRecord: 0.7ms)


Started GET "/" for ::1 at 2016-10-09 00:14:05 +0900
Processing by PapersController#index as HTML
  [1m[36mPaper Load (0.4ms)[0m  [1mSELECT  `papers`.* FROM `papers`  ORDER BY id DESC LIMIT 5 OFFSET 0[0m
  Rendered papers/_item.html.erb (0.1ms)
  Rendered papers/_item.html.erb (0.1ms)
  Rendered papers/_item.html.erb (0.2ms)
  Rendered papers/_item.html.erb (0.1ms)
  Rendered papers/_item.html.erb (0.1ms)
  Rendered papers/index.html.erb within layouts/application (8.7ms)
  [1m[35mUser Load (0.4ms)[0m  SELECT  `users`.* FROM `users` WHERE `users`.`id` = 2  ORDER BY `users`.`id` ASC LIMIT 1
Completed 200 OK in 36ms (Views: 34.8ms | ActiveRecord: 0.8ms)


Started GET "/assets/comments.self-e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855.css?body=1" for ::1 at 2016-10-09 00:14:05 +0900


Started GET "/assets/users.self-e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855.css?body=1" for ::1 at 2016-10-09 00:14:05 +0900


Started GET "/assets/likes.self-e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855.css?body=1" for ::1 at 2016-10-09 00:14:05 +0900


Started GET "/assets/papers.self-e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855.css?body=1" for ::1 at 2016-10-09 00:14:05 +0900


Started GET "/assets/application.self-e80e8f2318043e8af94dddc2adad5a4f09739a8ebb323b3ab31cd71d45fd9113.css?body=1" for ::1 at 2016-10-09 00:14:05 +0900


Started GET "/assets/jquery.self-bd7ddd393353a8d2480a622e80342adf488fb6006d667e8b42e4c0073393abee.js?body=1" for ::1 at 2016-10-09 00:14:05 +0900


Started GET "/assets/jquery_ujs.self-784a997f6726036b1993eb2217c9cb558e1cbb801c6da88105588c56f13b466a.js?body=1" for ::1 at 2016-10-09 00:14:05 +0900


Started GET "/assets/turbolinks.self-c5acd7a204f5f25ce7a1d8a0e4d92e28d34c9e2df2c7371cd7af88e147e4ad82.js?body=1" for ::1 at 2016-10-09 00:14:05 +0900


Started GET "/assets/comments.self-877aef30ae1b040ab8a3aba4e3e309a11d7f2612f44dde450b5c157aa5f95c05.js?body=1" for ::1 at 2016-10-09 00:14:05 +0900


Started GET "/assets/likes.self-877aef30ae1b040ab8a3aba4e3e309a11d7f2612f44dde450b5c157aa5f95c05.js?body=1" for ::1 at 2016-10-09 00:14:05 +0900


Started GET "/assets/papers.self-877aef30ae1b040ab8a3aba4e3e309a11d7f2612f44dde450b5c157aa5f95c05.js?body=1" for ::1 at 2016-10-09 00:14:05 +0900


Started GET "/assets/users.self-877aef30ae1b040ab8a3aba4e3e309a11d7f2612f44dde450b5c157aa5f95c05.js?body=1" for ::1 at 2016-10-09 00:14:05 +0900


Started GET "/assets/application.self-3b8dabdc891efe46b9a144b400ad69e37d7e5876bdc39dee783419a69d7ca819.js?body=1" for ::1 at 2016-10-09 00:14:05 +0900


Started GET "/" for ::1 at 2016-10-09 00:17:28 +0900
Processing by PapersController#index as HTML
  [1m[36mPaper Load (0.5ms)[0m  [1mSELECT  `papers`.* FROM `papers`  ORDER BY id DESC LIMIT 5 OFFSET 0[0m
  Rendered papers/_item.html.erb (0.1ms)
  Rendered papers/_item.html.erb (0.1ms)
  Rendered papers/_item.html.erb (0.1ms)
  Rendered papers/_item.html.erb (0.1ms)
  Rendered papers/_item.html.erb (0.1ms)
  Rendered papers/index.html.erb within layouts/application (7.7ms)
  [1m[35mUser Load (0.5ms)[0m  SELECT  `users`.* FROM `users` WHERE `users`.`id` = 2  ORDER BY `users`.`id` ASC LIMIT 1
Completed 200 OK in 56ms (Views: 53.9ms | ActiveRecord: 1.0ms)


Started GET "/assets/comments.self-e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855.css?body=1" for ::1 at 2016-10-09 00:17:28 +0900


Started GET "/assets/likes.self-e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855.css?body=1" for ::1 at 2016-10-09 00:17:28 +0900


Started GET "/assets/papers.self-e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855.css?body=1" for ::1 at 2016-10-09 00:17:28 +0900


Started GET "/assets/users.self-e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855.css?body=1" for ::1 at 2016-10-09 00:17:28 +0900


Started GET "/assets/application.self-e80e8f2318043e8af94dddc2adad5a4f09739a8ebb323b3ab31cd71d45fd9113.css?body=1" for ::1 at 2016-10-09 00:17:28 +0900


Started GET "/assets/jquery.self-bd7ddd393353a8d2480a622e80342adf488fb6006d667e8b42e4c0073393abee.js?body=1" for ::1 at 2016-10-09 00:17:28 +0900


Started GET "/assets/jquery_ujs.self-784a997f6726036b1993eb2217c9cb558e1cbb801c6da88105588c56f13b466a.js?body=1" for ::1 at 2016-10-09 00:17:28 +0900


Started GET "/assets/turbolinks.self-c5acd7a204f5f25ce7a1d8a0e4d92e28d34c9e2df2c7371cd7af88e147e4ad82.js?body=1" for ::1 at 2016-10-09 00:17:28 +0900


Started GET "/assets/comments.self-877aef30ae1b040ab8a3aba4e3e309a11d7f2612f44dde450b5c157aa5f95c05.js?body=1" for ::1 at 2016-10-09 00:17:28 +0900


Started GET "/assets/likes.self-877aef30ae1b040ab8a3aba4e3e309a11d7f2612f44dde450b5c157aa5f95c05.js?body=1" for ::1 at 2016-10-09 00:17:28 +0900


Started GET "/assets/papers.self-877aef30ae1b040ab8a3aba4e3e309a11d7f2612f44dde450b5c157aa5f95c05.js?body=1" for ::1 at 2016-10-09 00:17:28 +0900


Started GET "/assets/users.self-877aef30ae1b040ab8a3aba4e3e309a11d7f2612f44dde450b5c157aa5f95c05.js?body=1" for ::1 at 2016-10-09 00:17:28 +0900


Started GET "/assets/application.self-3b8dabdc891efe46b9a144b400ad69e37d7e5876bdc39dee783419a69d7ca819.js?body=1" for ::1 at 2016-10-09 00:17:28 +0900


Started DELETE "/users/sign_out" for ::1 at 2016-10-09 00:17:30 +0900
Processing by Devise::SessionsController#destroy as HTML
  Parameters: {"authenticity_token"=>"Ao9e+kXO3QB2yyrNCFuMJZ/2vy/c60USYW3xZQlgmCLFs0dvvopFPRmBxj9ZxNwvVVZi9vgrQSsdlxERQlqwJg=="}
  [1m[36mUser Load (0.4ms)[0m  [1mSELECT  `users`.* FROM `users` WHERE `users`.`id` = 2  ORDER BY `users`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36m (0.1ms)[0m  [1mCOMMIT[0m
Redirected to http://localhost:3000/
Completed 302 Found in 9ms (ActiveRecord: 0.7ms)


Started GET "/" for ::1 at 2016-10-09 00:17:30 +0900
Processing by PapersController#index as HTML
  [1m[35mPaper Load (0.4ms)[0m  SELECT  `papers`.* FROM `papers`  ORDER BY id DESC LIMIT 5 OFFSET 0
  Rendered papers/_item.html.erb (0.2ms)
  Rendered papers/_item.html.erb (0.1ms)
  Rendered papers/_item.html.erb (0.1ms)
  Rendered papers/_item.html.erb (0.1ms)
  Rendered papers/_item.html.erb (0.1ms)
  Rendered papers/index.html.erb within layouts/application (6.1ms)
Completed 200 OK in 28ms (Views: 27.0ms | ActiveRecord: 0.4ms)


Started GET "/users/sign_up" for ::1 at 2016-10-09 00:17:31 +0900
Processing by Devise::RegistrationsController#new as HTML
  Parameters: {"authenticity_token"=>"sRIOSTZCsd1SyPL5/2cIaNJPL6e4PLMvNgC00cPWuI8MMtQolEn436SW3oqGwUChUSc+JL2Y6wPU/eer4WvxsA=="}
  Rendered devise/shared/_links.html.erb (0.3ms)
  Rendered devise/registrations/new.html.erb within layouts/application (5.0ms)
Completed 200 OK in 49ms (Views: 47.7ms | ActiveRecord: 0.0ms)


Started GET "/users/sign_up" for ::1 at 2016-10-09 00:17:42 +0900
Processing by Devise::RegistrationsController#new as HTML
  Parameters: {"authenticity_token"=>"WSnTFxdkRzXePJGFiqKPUHDeA3TBrhSAtzG6/KJTE7DkCQl2tW8ONyhivfbzBMeZ87YS98QKTKxVzOmGgO5ajw=="}
  Rendered devise/shared/_links.html.erb (0.2ms)
  Rendered devise/registrations/new.html.erb within layouts/application (3.9ms)
Completed 200 OK in 38ms (Views: 37.2ms | ActiveRecord: 0.0ms)


Started GET "/users/sign_in" for ::1 at 2016-10-09 00:17:46 +0900
Processing by Devise::SessionsController#new as HTML
  Parameters: {"authenticity_token"=>"YcNRoS8QbFZCF9gDDXL2v9gp1dYHgeGKGLNJwphGTR/c44vAjRslVLRJ9HB01L52W0HEVQIluab6Thq4uvsEIA=="}
  Rendered devise/shared/_links.html.erb (0.4ms)
  Rendered devise/sessions/new.html.erb within layouts/application (3.0ms)
Completed 200 OK in 35ms (Views: 34.5ms | ActiveRecord: 0.0ms)


Started POST "/users/sign_in" for ::1 at 2016-10-09 00:17:53 +0900
Processing by Devise::SessionsController#create as HTML
  Parameters: {"utf8"=>"✓", "authenticity_token"=>"xmlswerOnXoLZGI81IHnU2D2egRNihbxQLcVuffYw1R7SbagSMXUeP06Tk+tJ6+a455rh0guTt2iSkbD1WWKaw==", "user"=>{"email"=>"simaokasonse@yahoo.co.jp", "password"=>"[FILTERED]", "remember_me"=>"1"}, "commit"=>"Log in"}
  [1m[36mUser Load (0.4ms)[0m  [1mSELECT  `users`.* FROM `users` WHERE `users`.`email` = 'simaokasonse@yahoo.co.jp'  ORDER BY `users`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.4ms)[0m  [1mUPDATE `users` SET `remember_created_at` = '2016-10-08 15:17:54', `updated_at` = '2016-10-08 15:17:54' WHERE `users`.`id` = 2[0m
  [1m[35m (9.4ms)[0m  COMMIT
  [1m[36m (0.3ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.5ms)[0m  UPDATE `users` SET `current_sign_in_at` = '2016-10-08 15:17:54', `sign_in_count` = 2, `updated_at` = '2016-10-08 15:17:54' WHERE `users`.`id` = 2
  [1m[36m (6.6ms)[0m  [1mCOMMIT[0m
Redirected to http://localhost:3000/
Completed 302 Found in 251ms (ActiveRecord: 17.7ms)


Started GET "/" for ::1 at 2016-10-09 00:17:54 +0900
Processing by PapersController#index as HTML
  [1m[35mPaper Load (0.3ms)[0m  SELECT  `papers`.* FROM `papers`  ORDER BY id DESC LIMIT 5 OFFSET 0
  Rendered papers/_item.html.erb (0.1ms)
  Rendered papers/_item.html.erb (0.1ms)
  Rendered papers/_item.html.erb (0.1ms)
  Rendered papers/_item.html.erb (0.1ms)
  Rendered papers/_item.html.erb (0.2ms)
  Rendered papers/index.html.erb within layouts/application (6.7ms)
  [1m[36mUser Load (0.4ms)[0m  [1mSELECT  `users`.* FROM `users` WHERE `users`.`id` = 2  ORDER BY `users`.`id` ASC LIMIT 1[0m
Completed 200 OK in 31ms (Views: 29.1ms | ActiveRecord: 0.7ms)


Started DELETE "/users/sign_out" for ::1 at 2016-10-09 00:17:56 +0900
Processing by Devise::SessionsController#destroy as HTML
  Parameters: {"authenticity_token"=>"J/I3DA+lxYhBwv54cmU/GZy68U5ugEKI+/T0NlyzbpLwfs/2YbwOCld9VxRnPLgNfCmGbVYDK9qtNFDHQeOAAw=="}
  [1m[35mUser Load (0.3ms)[0m  SELECT  `users`.* FROM `users` WHERE `users`.`id` = 2  ORDER BY `users`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.5ms)[0m  UPDATE `users` SET `remember_created_at` = NULL, `updated_at` = '2016-10-08 15:17:56' WHERE `users`.`id` = 2
  [1m[36m (6.4ms)[0m  [1mCOMMIT[0m
Redirected to http://localhost:3000/
Completed 302 Found in 21ms (ActiveRecord: 7.5ms)


Started GET "/" for ::1 at 2016-10-09 00:17:56 +0900
Processing by PapersController#index as HTML
  [1m[35mPaper Load (0.3ms)[0m  SELECT  `papers`.* FROM `papers`  ORDER BY id DESC LIMIT 5 OFFSET 0
  Rendered papers/_item.html.erb (0.1ms)
  Rendered papers/_item.html.erb (0.1ms)
  Rendered papers/_item.html.erb (0.1ms)
  Rendered papers/_item.html.erb (0.1ms)
  Rendered papers/_item.html.erb (0.1ms)
  Rendered papers/index.html.erb within layouts/application (6.1ms)
Completed 200 OK in 28ms (Views: 26.6ms | ActiveRecord: 0.3ms)


Started GET "/users/sign_in" for ::1 at 2016-10-09 00:17:57 +0900
Processing by Devise::SessionsController#new as HTML
  Parameters: {"authenticity_token"=>"vNWzNKrqsb/CaaerKaLxQtP9Ass+ZqxGrZi4RWhHDuNryzfim49Hw4Ng403ocQhYkL3i+yfIRwb3wJZ3TMB9iw=="}
  Rendered devise/shared/_links.html.erb (0.3ms)
  Rendered devise/sessions/new.html.erb within layouts/application (3.2ms)
Completed 200 OK in 31ms (Views: 30.6ms | ActiveRecord: 0.0ms)


Started POST "/users/sign_in" for ::1 at 2016-10-09 00:18:00 +0900
Processing by Devise::SessionsController#create as HTML
  Parameters: {"utf8"=>"✓", "authenticity_token"=>"j+7kJoSYcx5PWbHinEFd7BHTXL9Zvxb5uqG1R8MkoNRY8GDwtf2FYg5Q9QRdkqT2UpO8j0AR/bng+Zt156PTvA==", "user"=>{"email"=>"simaokasonse@yahoo.co.jp", "password"=>"[FILTERED]", "remember_me"=>"0"}, "commit"=>"Log in"}
  [1m[36mUser Load (0.4ms)[0m  [1mSELECT  `users`.* FROM `users` WHERE `users`.`email` = 'simaokasonse@yahoo.co.jp'  ORDER BY `users`.`id` ASC LIMIT 1[0m
  [1m[35m (0.3ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mUPDATE `users` SET `last_sign_in_at` = '2016-10-08 15:17:54', `current_sign_in_at` = '2016-10-08 15:18:00', `sign_in_count` = 3, `updated_at` = '2016-10-08 15:18:00' WHERE `users`.`id` = 2[0m
  [1m[35m (8.6ms)[0m  COMMIT
Redirected to http://localhost:3000/
Completed 302 Found in 213ms (ActiveRecord: 9.6ms)


Started GET "/" for ::1 at 2016-10-09 00:18:00 +0900
Processing by PapersController#index as HTML
  [1m[36mPaper Load (0.3ms)[0m  [1mSELECT  `papers`.* FROM `papers`  ORDER BY id DESC LIMIT 5 OFFSET 0[0m
  Rendered papers/_item.html.erb (0.1ms)
  Rendered papers/_item.html.erb (0.1ms)
  Rendered papers/_item.html.erb (0.1ms)
  Rendered papers/_item.html.erb (0.1ms)
  Rendered papers/_item.html.erb (0.1ms)
  Rendered papers/index.html.erb within layouts/application (23.7ms)
  [1m[35mUser Load (0.4ms)[0m  SELECT  `users`.* FROM `users` WHERE `users`.`id` = 2  ORDER BY `users`.`id` ASC LIMIT 1
Completed 200 OK in 61ms (Views: 59.3ms | ActiveRecord: 0.7ms)


Started DELETE "/users/sign_out" for ::1 at 2016-10-09 00:18:05 +0900
Processing by Devise::SessionsController#destroy as HTML
  Parameters: {"authenticity_token"=>"qMcdjMTn9+7CjnybMHP8+B13O6Ux3wjV1hK0ccMsH7LAu8aQjN1MWMSS56miTP316z5SNaIxwjI5G6MmWAZOxA=="}
  [1m[36mUser Load (0.3ms)[0m  [1mSELECT  `users`.* FROM `users` WHERE `users`.`id` = 2  ORDER BY `users`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36m (0.1ms)[0m  [1mCOMMIT[0m
Redirected to http://localhost:3000/
Completed 302 Found in 4ms (ActiveRecord: 0.6ms)


Started GET "/" for ::1 at 2016-10-09 00:18:05 +0900
Processing by PapersController#index as HTML
  [1m[35mPaper Load (0.3ms)[0m  SELECT  `papers`.* FROM `papers`  ORDER BY id DESC LIMIT 5 OFFSET 0
  Rendered papers/_item.html.erb (0.1ms)
  Rendered papers/_item.html.erb (0.1ms)
  Rendered papers/_item.html.erb (0.1ms)
  Rendered papers/_item.html.erb (0.2ms)
  Rendered papers/_item.html.erb (0.1ms)
  Rendered papers/index.html.erb within layouts/application (7.4ms)
Completed 200 OK in 34ms (Views: 32.7ms | ActiveRecord: 0.3ms)


Started GET "/users/sign_in" for ::1 at 2016-10-09 00:18:07 +0900
Processing by Devise::SessionsController#new as HTML
  Parameters: {"authenticity_token"=>"8f06pL5Ggj7sgHwwWUhhjcRjWHBc6a/W6pAhGCJCusFDj2oiir4wGJxWG+YAFXOQ926rsKqd7u9qo5nClQEu6w=="}
  Rendered devise/shared/_links.html.erb (0.3ms)
  Rendered devise/sessions/new.html.erb within layouts/application (3.0ms)
Completed 200 OK in 39ms (Views: 37.8ms | ActiveRecord: 0.0ms)


Started POST "/users/sign_in" for ::1 at 2016-10-09 00:23:48 +0900
Processing by Devise::SessionsController#create as HTML
  Parameters: {"utf8"=>"✓", "authenticity_token"=>"esp5Cu8sNGP4mFDlYNuCTqxcpmDQn3g+0I8nyGLtXvfIuCmM29SGRYhONzM5hpBTn1FVoCbrOQdQvJ8S1a7K3Q==", "user"=>{"email"=>"simaokasonse@yahoo.co.jp", "password"=>"[FILTERED]", "remember_me"=>"0"}, "commit"=>"Log in"}
  [1m[36mUser Load (0.5ms)[0m  [1mSELECT  `users`.* FROM `users` WHERE `users`.`email` = 'simaokasonse@yahoo.co.jp'  ORDER BY `users`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.4ms)[0m  [1mUPDATE `users` SET `last_sign_in_at` = '2016-10-08 15:18:00', `current_sign_in_at` = '2016-10-08 15:23:48', `sign_in_count` = 4, `updated_at` = '2016-10-08 15:23:48' WHERE `users`.`id` = 2[0m
  [1m[35m (9.0ms)[0m  COMMIT
Redirected to http://localhost:3000/
Completed 302 Found in 221ms (ActiveRecord: 10.1ms)


Started GET "/" for ::1 at 2016-10-09 00:23:48 +0900
Processing by PapersController#index as HTML
  [1m[36mPaper Load (0.4ms)[0m  [1mSELECT  `papers`.* FROM `papers`  ORDER BY id DESC LIMIT 5 OFFSET 0[0m
  Rendered papers/_item.html.erb (0.2ms)
  Rendered papers/_item.html.erb (0.1ms)
  Rendered papers/_item.html.erb (0.1ms)
  Rendered papers/_item.html.erb (0.1ms)
  Rendered papers/_item.html.erb (0.1ms)
  Rendered papers/index.html.erb within layouts/application (8.5ms)
  [1m[35mUser Load (0.3ms)[0m  SELECT  `users`.* FROM `users` WHERE `users`.`id` = 2  ORDER BY `users`.`id` ASC LIMIT 1
Completed 200 OK in 54ms (Views: 52.5ms | ActiveRecord: 0.7ms)


Started GET "/papers/998" for ::1 at 2016-10-09 00:23:52 +0900
Processing by PapersController#show as HTML
  Parameters: {"id"=>"998"}
  [1m[36mPaper Load (0.3ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`id` = 998 LIMIT 1[0m
  Rendered papers/show.html.erb within layouts/application (0.2ms)
  [1m[35mUser Load (0.4ms)[0m  SELECT  `users`.* FROM `users` WHERE `users`.`id` = 2  ORDER BY `users`.`id` ASC LIMIT 1
Completed 200 OK in 37ms (Views: 35.2ms | ActiveRecord: 0.7ms)


Started GET "/papers/998" for ::1 at 2016-10-09 00:29:33 +0900
Processing by PapersController#show as HTML
  Parameters: {"id"=>"998"}
  [1m[36mPaper Load (0.4ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`id` = 998 LIMIT 1[0m
  Rendered papers/show.html.erb within layouts/application (2.0ms)
Completed 500 Internal Server Error in 11ms (ActiveRecord: 0.4ms)

SyntaxError (/Users/tech-camp/projects/arxivpicks/app/views/papers/show.html.erb:7: syntax error, unexpected '<', expecting ')'
  <% end );@output_buffer.safe_append='
   ^
/Users/tech-camp/projects/arxivpicks/app/views/papers/show.html.erb:9: syntax error, unexpected keyword_ensure, expecting keyword_end
/Users/tech-camp/projects/arxivpicks/app/views/papers/show.html.erb:11: syntax error, unexpected end-of-input, expecting keyword_end):
  app/views/papers/show.html.erb:7: syntax error, unexpected '<', expecting ')'
  app/views/papers/show.html.erb:9: syntax error, unexpected keyword_ensure, expecting keyword_end
  app/views/papers/show.html.erb:11: syntax error, unexpected end-of-input, expecting keyword_end


  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/_source.erb (11.2ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/_trace.html.erb (5.1ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/_request_and_response.html.erb (1.2ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/diagnostics.html.erb within rescues/layout (77.2ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/web-console-2.3.0/lib/web_console/templates/_markup.html.erb (0.7ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/web-console-2.3.0/lib/web_console/templates/_inner_console_markup.html.erb within layouts/inlined_string (0.6ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/web-console-2.3.0/lib/web_console/templates/_prompt_box_markup.html.erb within layouts/inlined_string (0.4ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/web-console-2.3.0/lib/web_console/templates/style.css.erb within layouts/inlined_string (0.7ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/web-console-2.3.0/lib/web_console/templates/console.js.erb within layouts/javascript (65.6ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/web-console-2.3.0/lib/web_console/templates/main.js.erb within layouts/javascript (0.4ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/web-console-2.3.0/lib/web_console/templates/error_page.js.erb within layouts/javascript (0.7ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/web-console-2.3.0/lib/web_console/templates/index.html.erb (152.2ms)


Started GET "/papers/998" for ::1 at 2016-10-09 00:29:44 +0900
Processing by PapersController#show as HTML
  Parameters: {"id"=>"998"}
  [1m[35mPaper Load (0.4ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`id` = 998 LIMIT 1
  [1m[36mUser Load (0.4ms)[0m  [1mSELECT  `users`.* FROM `users` WHERE `users`.`id` = 2  ORDER BY `users`.`id` ASC LIMIT 1[0m
  Rendered papers/show.html.erb within layouts/application (2.5ms)
Completed 200 OK in 52ms (Views: 49.8ms | ActiveRecord: 0.7ms)


Started GET "/assets/comments.self-e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855.css?body=1" for ::1 at 2016-10-09 00:29:44 +0900


Started GET "/assets/likes.self-e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855.css?body=1" for ::1 at 2016-10-09 00:29:44 +0900


Started GET "/assets/application.self-e80e8f2318043e8af94dddc2adad5a4f09739a8ebb323b3ab31cd71d45fd9113.css?body=1" for ::1 at 2016-10-09 00:29:44 +0900


Started GET "/assets/papers.self-e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855.css?body=1" for ::1 at 2016-10-09 00:29:44 +0900


Started GET "/assets/users.self-e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855.css?body=1" for ::1 at 2016-10-09 00:29:44 +0900


Started GET "/assets/jquery.self-bd7ddd393353a8d2480a622e80342adf488fb6006d667e8b42e4c0073393abee.js?body=1" for ::1 at 2016-10-09 00:29:44 +0900


Started GET "/assets/jquery_ujs.self-784a997f6726036b1993eb2217c9cb558e1cbb801c6da88105588c56f13b466a.js?body=1" for ::1 at 2016-10-09 00:29:44 +0900


Started GET "/assets/turbolinks.self-c5acd7a204f5f25ce7a1d8a0e4d92e28d34c9e2df2c7371cd7af88e147e4ad82.js?body=1" for ::1 at 2016-10-09 00:29:44 +0900


Started GET "/assets/comments.self-877aef30ae1b040ab8a3aba4e3e309a11d7f2612f44dde450b5c157aa5f95c05.js?body=1" for ::1 at 2016-10-09 00:29:44 +0900


Started GET "/assets/likes.self-877aef30ae1b040ab8a3aba4e3e309a11d7f2612f44dde450b5c157aa5f95c05.js?body=1" for ::1 at 2016-10-09 00:29:44 +0900


Started GET "/assets/papers.self-877aef30ae1b040ab8a3aba4e3e309a11d7f2612f44dde450b5c157aa5f95c05.js?body=1" for ::1 at 2016-10-09 00:29:44 +0900


Started GET "/assets/users.self-877aef30ae1b040ab8a3aba4e3e309a11d7f2612f44dde450b5c157aa5f95c05.js?body=1" for ::1 at 2016-10-09 00:29:44 +0900


Started GET "/assets/application.self-3b8dabdc891efe46b9a144b400ad69e37d7e5876bdc39dee783419a69d7ca819.js?body=1" for ::1 at 2016-10-09 00:29:44 +0900


Started GET "/papers/998" for ::1 at 2016-10-09 00:30:23 +0900
Processing by PapersController#show as HTML
  Parameters: {"id"=>"998"}
  [1m[35mPaper Load (0.3ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`id` = 998 LIMIT 1
  [1m[36mUser Load (0.4ms)[0m  [1mSELECT  `users`.* FROM `users` WHERE `users`.`id` = 2  ORDER BY `users`.`id` ASC LIMIT 1[0m
  Rendered papers/show.html.erb within layouts/application (2.0ms)
Completed 200 OK in 25ms (Views: 23.2ms | ActiveRecord: 0.7ms)


Started GET "/assets/comments.self-e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855.css?body=1" for ::1 at 2016-10-09 00:30:23 +0900


Started GET "/assets/papers.self-e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855.css?body=1" for ::1 at 2016-10-09 00:30:23 +0900


Started GET "/assets/likes.self-e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855.css?body=1" for ::1 at 2016-10-09 00:30:23 +0900


Started GET "/assets/users.self-e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855.css?body=1" for ::1 at 2016-10-09 00:30:23 +0900


Started GET "/assets/jquery_ujs.self-784a997f6726036b1993eb2217c9cb558e1cbb801c6da88105588c56f13b466a.js?body=1" for ::1 at 2016-10-09 00:30:23 +0900


Started GET "/assets/application.self-e80e8f2318043e8af94dddc2adad5a4f09739a8ebb323b3ab31cd71d45fd9113.css?body=1" for ::1 at 2016-10-09 00:30:23 +0900


Started GET "/assets/jquery.self-bd7ddd393353a8d2480a622e80342adf488fb6006d667e8b42e4c0073393abee.js?body=1" for ::1 at 2016-10-09 00:30:23 +0900


Started GET "/assets/turbolinks.self-c5acd7a204f5f25ce7a1d8a0e4d92e28d34c9e2df2c7371cd7af88e147e4ad82.js?body=1" for ::1 at 2016-10-09 00:30:23 +0900


Started GET "/assets/comments.self-877aef30ae1b040ab8a3aba4e3e309a11d7f2612f44dde450b5c157aa5f95c05.js?body=1" for ::1 at 2016-10-09 00:30:23 +0900


Started GET "/assets/likes.self-877aef30ae1b040ab8a3aba4e3e309a11d7f2612f44dde450b5c157aa5f95c05.js?body=1" for ::1 at 2016-10-09 00:30:23 +0900


Started GET "/assets/papers.self-877aef30ae1b040ab8a3aba4e3e309a11d7f2612f44dde450b5c157aa5f95c05.js?body=1" for ::1 at 2016-10-09 00:30:23 +0900


Started GET "/assets/users.self-877aef30ae1b040ab8a3aba4e3e309a11d7f2612f44dde450b5c157aa5f95c05.js?body=1" for ::1 at 2016-10-09 00:30:23 +0900


Started GET "/assets/application.self-3b8dabdc891efe46b9a144b400ad69e37d7e5876bdc39dee783419a69d7ca819.js?body=1" for ::1 at 2016-10-09 00:30:23 +0900


Started GET "/papers/998/comments/new" for ::1 at 2016-10-09 00:30:26 +0900
Processing by CommentsController#new as HTML
  Parameters: {"paper_id"=>"998"}
  Rendered comments/new.html.erb within layouts/application (0.4ms)
  [1m[35mUser Load (0.3ms)[0m  SELECT  `users`.* FROM `users` WHERE `users`.`id` = 2  ORDER BY `users`.`id` ASC LIMIT 1
Completed 200 OK in 29ms (Views: 27.7ms | ActiveRecord: 0.3ms)


Started GET "/" for ::1 at 2016-10-09 00:30:49 +0900
Processing by PapersController#index as HTML
  [1m[36mPaper Load (0.3ms)[0m  [1mSELECT  `papers`.* FROM `papers`  ORDER BY id ASC LIMIT 5 OFFSET 0[0m
  Rendered papers/_item.html.erb (0.2ms)
  Rendered papers/_item.html.erb (0.1ms)
  Rendered papers/_item.html.erb (0.1ms)
  Rendered papers/_item.html.erb (0.1ms)
  Rendered papers/_item.html.erb (0.1ms)
  Rendered papers/index.html.erb within layouts/application (36.3ms)
  [1m[35mUser Load (0.4ms)[0m  SELECT  `users`.* FROM `users` WHERE `users`.`id` = 2  ORDER BY `users`.`id` ASC LIMIT 1
Completed 200 OK in 96ms (Views: 55.9ms | ActiveRecord: 27.7ms)


Started GET "/papers/2" for ::1 at 2016-10-09 00:30:50 +0900
Processing by PapersController#show as HTML
  Parameters: {"id"=>"2"}
  [1m[36mPaper Load (0.4ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`id` = 2 LIMIT 1[0m
  [1m[35mUser Load (0.5ms)[0m  SELECT  `users`.* FROM `users` WHERE `users`.`id` = 2  ORDER BY `users`.`id` ASC LIMIT 1
  Rendered papers/show.html.erb within layouts/application (2.2ms)
Completed 200 OK in 38ms (Views: 34.8ms | ActiveRecord: 0.8ms)


Started GET "/papers/2/comments/new" for ::1 at 2016-10-09 00:30:53 +0900
Processing by CommentsController#new as HTML
  Parameters: {"paper_id"=>"2"}
  Rendered comments/new.html.erb within layouts/application (0.1ms)
  [1m[36mUser Load (0.4ms)[0m  [1mSELECT  `users`.* FROM `users` WHERE `users`.`id` = 2  ORDER BY `users`.`id` ASC LIMIT 1[0m
Completed 200 OK in 29ms (Views: 27.9ms | ActiveRecord: 0.4ms)


Started DELETE "/users/sign_out" for ::1 at 2016-10-09 00:30:55 +0900
Processing by Devise::SessionsController#destroy as HTML
  Parameters: {"authenticity_token"=>"etgWz5eo7nmtPMW5/jhfStIpGZ1Y7zlf9RLXOHywIJgSCeEmj7UGN2wLjh2koe3XWw4zrovY2DlOgm9M5yh5HA=="}
  [1m[35mUser Load (0.4ms)[0m  SELECT  `users`.* FROM `users` WHERE `users`.`id` = 2  ORDER BY `users`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35m (0.2ms)[0m  COMMIT
Redirected to http://localhost:3000/
Completed 302 Found in 6ms (ActiveRecord: 0.8ms)


Started GET "/" for ::1 at 2016-10-09 00:30:55 +0900
Processing by PapersController#index as HTML
  [1m[36mPaper Load (0.3ms)[0m  [1mSELECT  `papers`.* FROM `papers`  ORDER BY id ASC LIMIT 5 OFFSET 0[0m
  Rendered papers/_item.html.erb (0.1ms)
  Rendered papers/_item.html.erb (0.1ms)
  Rendered papers/_item.html.erb (0.1ms)
  Rendered papers/_item.html.erb (0.1ms)
  Rendered papers/_item.html.erb (0.1ms)
  Rendered papers/index.html.erb within layouts/application (6.0ms)
Completed 200 OK in 30ms (Views: 28.9ms | ActiveRecord: 0.3ms)


Started GET "/papers/1" for ::1 at 2016-10-09 00:30:57 +0900
Processing by PapersController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[35mPaper Load (0.4ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`id` = 1 LIMIT 1
  Rendered papers/show.html.erb within layouts/application (0.5ms)
Completed 200 OK in 39ms (Views: 36.0ms | ActiveRecord: 0.4ms)


Started GET "/users/sign_in" for ::1 at 2016-10-09 00:30:58 +0900
Processing by Devise::SessionsController#new as HTML
  Rendered devise/shared/_links.html.erb (0.6ms)
  Rendered devise/sessions/new.html.erb within layouts/application (4.2ms)
Completed 200 OK in 53ms (Views: 51.1ms | ActiveRecord: 0.0ms)


Started POST "/users/sign_in" for ::1 at 2016-10-09 00:31:00 +0900
Processing by Devise::SessionsController#create as HTML
  Parameters: {"utf8"=>"✓", "authenticity_token"=>"5l+ishWGx/pVydqoBYTBchDdhNb+R371aqxBVxtp0XkYWX9YoJhoeHBP3fJ+o2Gf3grGOemm2kbCWE7qM+6xPA==", "user"=>{"email"=>"simaokasonse@yahoo.co.jp", "password"=>"[FILTERED]", "remember_me"=>"0"}, "commit"=>"Log in"}
  [1m[36mUser Load (0.6ms)[0m  [1mSELECT  `users`.* FROM `users` WHERE `users`.`email` = 'simaokasonse@yahoo.co.jp'  ORDER BY `users`.`id` ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mUPDATE `users` SET `last_sign_in_at` = '2016-10-08 15:23:48', `current_sign_in_at` = '2016-10-08 15:31:00', `sign_in_count` = 5, `updated_at` = '2016-10-08 15:31:00' WHERE `users`.`id` = 2[0m
  [1m[35m (9.2ms)[0m  COMMIT
Redirected to http://localhost:3000/
Completed 302 Found in 224ms (ActiveRecord: 10.4ms)


Started GET "/" for ::1 at 2016-10-09 00:31:00 +0900
Processing by PapersController#index as HTML
  [1m[36mPaper Load (0.3ms)[0m  [1mSELECT  `papers`.* FROM `papers`  ORDER BY id ASC LIMIT 5 OFFSET 0[0m
  Rendered papers/_item.html.erb (0.1ms)
  Rendered papers/_item.html.erb (0.1ms)
  Rendered papers/_item.html.erb (0.1ms)
  Rendered papers/_item.html.erb (0.1ms)
  Rendered papers/_item.html.erb (0.1ms)
  Rendered papers/index.html.erb within layouts/application (6.7ms)
  [1m[35mUser Load (0.4ms)[0m  SELECT  `users`.* FROM `users` WHERE `users`.`id` = 2  ORDER BY `users`.`id` ASC LIMIT 1
Completed 200 OK in 29ms (Views: 28.0ms | ActiveRecord: 0.7ms)


Started GET "/" for ::1 at 2016-10-09 00:31:04 +0900
Processing by PapersController#index as HTML
  [1m[36mPaper Load (0.4ms)[0m  [1mSELECT  `papers`.* FROM `papers`  ORDER BY id ASC LIMIT 5 OFFSET 0[0m
  Rendered papers/_item.html.erb (0.1ms)
  Rendered papers/_item.html.erb (0.1ms)
  Rendered papers/_item.html.erb (0.2ms)
  Rendered papers/_item.html.erb (0.1ms)
  Rendered papers/_item.html.erb (0.1ms)
  Rendered papers/index.html.erb within layouts/application (9.1ms)
  [1m[35mUser Load (0.4ms)[0m  SELECT  `users`.* FROM `users` WHERE `users`.`id` = 2  ORDER BY `users`.`id` ASC LIMIT 1
Completed 200 OK in 37ms (Views: 35.4ms | ActiveRecord: 0.7ms)


Started GET "/papers/2" for ::1 at 2016-10-09 00:31:08 +0900
Processing by PapersController#show as HTML
  Parameters: {"id"=>"2"}
  [1m[36mPaper Load (0.5ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`id` = 2 LIMIT 1[0m
  [1m[35mUser Load (0.4ms)[0m  SELECT  `users`.* FROM `users` WHERE `users`.`id` = 2  ORDER BY `users`.`id` ASC LIMIT 1
  Rendered papers/show.html.erb within layouts/application (1.9ms)
Completed 200 OK in 32ms (Views: 29.0ms | ActiveRecord: 0.9ms)


Started GET "/papers/2/comments/new" for ::1 at 2016-10-09 00:35:26 +0900
Processing by CommentsController#new as HTML
  Parameters: {"paper_id"=>"2"}
  [1m[36mPaper Load (0.5ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`id` = 2 LIMIT 1[0m
  Rendered comments/new.html.erb within layouts/application (0.0ms)
  [1m[35mUser Load (0.3ms)[0m  SELECT  `users`.* FROM `users` WHERE `users`.`id` = 2  ORDER BY `users`.`id` ASC LIMIT 1
Completed 200 OK in 99ms (Views: 35.5ms | ActiveRecord: 32.9ms)


Started GET "/papers/2/comments/new" for ::1 at 2016-10-09 00:36:21 +0900
Processing by CommentsController#new as HTML
  Parameters: {"paper_id"=>"2"}
  [1m[36mPaper Load (0.3ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`id` = 2 LIMIT 1[0m
  Rendered comments/new.html.erb within layouts/application (0.6ms)
  [1m[35mUser Load (0.4ms)[0m  SELECT  `users`.* FROM `users` WHERE `users`.`id` = 2  ORDER BY `users`.`id` ASC LIMIT 1
Completed 200 OK in 37ms (Views: 34.8ms | ActiveRecord: 0.7ms)


Started GET "/assets/comments.self-e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855.css?body=1" for ::1 at 2016-10-09 00:36:21 +0900


Started GET "/assets/likes.self-e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855.css?body=1" for ::1 at 2016-10-09 00:36:21 +0900


Started GET "/assets/papers.self-e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855.css?body=1" for ::1 at 2016-10-09 00:36:21 +0900


Started GET "/assets/jquery_ujs.self-784a997f6726036b1993eb2217c9cb558e1cbb801c6da88105588c56f13b466a.js?body=1" for ::1 at 2016-10-09 00:36:21 +0900


Started GET "/assets/application.self-e80e8f2318043e8af94dddc2adad5a4f09739a8ebb323b3ab31cd71d45fd9113.css?body=1" for ::1 at 2016-10-09 00:36:21 +0900


Started GET "/assets/users.self-e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855.css?body=1" for ::1 at 2016-10-09 00:36:21 +0900


Started GET "/assets/jquery.self-bd7ddd393353a8d2480a622e80342adf488fb6006d667e8b42e4c0073393abee.js?body=1" for ::1 at 2016-10-09 00:36:21 +0900


Started GET "/assets/turbolinks.self-c5acd7a204f5f25ce7a1d8a0e4d92e28d34c9e2df2c7371cd7af88e147e4ad82.js?body=1" for ::1 at 2016-10-09 00:36:21 +0900


Started GET "/assets/comments.self-877aef30ae1b040ab8a3aba4e3e309a11d7f2612f44dde450b5c157aa5f95c05.js?body=1" for ::1 at 2016-10-09 00:36:21 +0900


Started GET "/assets/likes.self-877aef30ae1b040ab8a3aba4e3e309a11d7f2612f44dde450b5c157aa5f95c05.js?body=1" for ::1 at 2016-10-09 00:36:21 +0900


Started GET "/assets/papers.self-877aef30ae1b040ab8a3aba4e3e309a11d7f2612f44dde450b5c157aa5f95c05.js?body=1" for ::1 at 2016-10-09 00:36:21 +0900


Started GET "/assets/users.self-877aef30ae1b040ab8a3aba4e3e309a11d7f2612f44dde450b5c157aa5f95c05.js?body=1" for ::1 at 2016-10-09 00:36:21 +0900


Started GET "/assets/application.self-3b8dabdc891efe46b9a144b400ad69e37d7e5876bdc39dee783419a69d7ca819.js?body=1" for ::1 at 2016-10-09 00:36:21 +0900


Started GET "/papers/2/comments/new" for ::1 at 2016-10-09 00:41:18 +0900
Processing by CommentsController#new as HTML
  Parameters: {"paper_id"=>"2"}
  [1m[36mPaper Load (0.5ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`id` = 2 LIMIT 1[0m
  Rendered comments/new.html.erb within layouts/application (36.1ms)
Completed 500 Internal Server Error in 46ms (ActiveRecord: 0.5ms)

ActionView::Template::Error (undefined method `comments_path' for #<#<Class:0x007fd4d321f5c0>:0x007fd4d5c33dc0>
Did you mean?  font_path):
    1: <div>
    2:   <h1> <%= @paper.title %> </h1>
    3:     <%= form_for [@product, @comment] do |f| %>
    4:           <div style="margin: 8px 0">
    5:             <%= f.text_area :review, placeholder: 'コメントする', style: 'width: 100%;height: 300px;' %>
    6:           </div>
  app/views/comments/new.html.erb:3:in `_app_views_comments_new_html_erb__2105721726482216366_70276048062140'


  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/_source.erb (6.4ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/_trace.html.erb (3.1ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/_request_and_response.html.erb (1.7ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/template_error.html.erb within rescues/layout (74.4ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/web-console-2.3.0/lib/web_console/templates/_markup.html.erb (0.7ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/web-console-2.3.0/lib/web_console/templates/_inner_console_markup.html.erb within layouts/inlined_string (0.6ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/web-console-2.3.0/lib/web_console/templates/_prompt_box_markup.html.erb within layouts/inlined_string (0.5ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/web-console-2.3.0/lib/web_console/templates/style.css.erb within layouts/inlined_string (0.5ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/web-console-2.3.0/lib/web_console/templates/console.js.erb within layouts/javascript (64.8ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/web-console-2.3.0/lib/web_console/templates/main.js.erb within layouts/javascript (0.5ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/web-console-2.3.0/lib/web_console/templates/error_page.js.erb within layouts/javascript (0.9ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/web-console-2.3.0/lib/web_console/templates/index.html.erb (140.9ms)


Started GET "/papers/2/comments/new" for ::1 at 2016-10-09 00:41:33 +0900
Processing by CommentsController#new as HTML
  Parameters: {"paper_id"=>"2"}
  [1m[35mPaper Load (0.4ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`id` = 2 LIMIT 1
  Rendered comments/new.html.erb within layouts/application (34.5ms)
Completed 500 Internal Server Error in 120ms (ActiveRecord: 45.6ms)

ActionView::Template::Error (undefined method `comments_path' for #<#<Class:0x007fd4d9130be0>:0x007fd4dab288b8>
Did you mean?  font_path):
    1: <div>
    2:   <h1> <%= @paper.title %> </h1>
    3:     <%= form_for [@product, @comment] do |f| %>
    4:           <div style="margin: 8px 0">
    5:             <%= f.text_area :review, placeholder: 'コメントする', style: 'width: 100%;height: 300px;' %>
    6:           </div>
  app/views/comments/new.html.erb:3:in `_app_views_comments_new_html_erb__2105721726482216366_70276048062140'


  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/_source.erb (5.9ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/_trace.html.erb (2.6ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/_request_and_response.html.erb (1.0ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/template_error.html.erb within rescues/layout (70.0ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/web-console-2.3.0/lib/web_console/templates/_markup.html.erb (0.5ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/web-console-2.3.0/lib/web_console/templates/_inner_console_markup.html.erb within layouts/inlined_string (0.4ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/web-console-2.3.0/lib/web_console/templates/_prompt_box_markup.html.erb within layouts/inlined_string (0.5ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/web-console-2.3.0/lib/web_console/templates/style.css.erb within layouts/inlined_string (0.4ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/web-console-2.3.0/lib/web_console/templates/console.js.erb within layouts/javascript (59.5ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/web-console-2.3.0/lib/web_console/templates/main.js.erb within layouts/javascript (0.4ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/web-console-2.3.0/lib/web_console/templates/error_page.js.erb within layouts/javascript (0.6ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/web-console-2.3.0/lib/web_console/templates/index.html.erb (128.1ms)


Started GET "/papers/2/comments/new" for ::1 at 2016-10-09 00:43:00 +0900
Processing by CommentsController#new as HTML
  Parameters: {"paper_id"=>"2"}
  [1m[36mPaper Load (0.3ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`id` = 2 LIMIT 1[0m
  Rendered comments/new.html.erb within layouts/application (35.1ms)
Completed 500 Internal Server Error in 43ms (ActiveRecord: 0.3ms)

ActionView::Template::Error (undefined method `comments_path' for #<#<Class:0x007fd4d9130be0>:0x007fd4d8f92b58>
Did you mean?  font_path):
    1: <div>
    2:   <h1> <%= @paper.title %> </h1>
    3:   <%= form_for [@product, @comment] do |f| %>
    4:     <div style="margin: 8px 0">
    5:       <%= f.text_area :comment, placeholder: 'コメントする', style: 'width: 100%;height: 300px;' %>
    6:     </div>
  app/views/comments/new.html.erb:3:in `_app_views_comments_new_html_erb__2105721726482216366_70276074998420'


  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/_source.erb (6.3ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/_trace.html.erb (2.8ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/_request_and_response.html.erb (1.2ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/template_error.html.erb within rescues/layout (75.3ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/web-console-2.3.0/lib/web_console/templates/_markup.html.erb (0.8ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/web-console-2.3.0/lib/web_console/templates/_inner_console_markup.html.erb within layouts/inlined_string (0.5ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/web-console-2.3.0/lib/web_console/templates/_prompt_box_markup.html.erb within layouts/inlined_string (0.4ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/web-console-2.3.0/lib/web_console/templates/style.css.erb within layouts/inlined_string (0.4ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/web-console-2.3.0/lib/web_console/templates/console.js.erb within layouts/javascript (54.6ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/web-console-2.3.0/lib/web_console/templates/main.js.erb within layouts/javascript (0.4ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/web-console-2.3.0/lib/web_console/templates/error_page.js.erb within layouts/javascript (0.9ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/web-console-2.3.0/lib/web_console/templates/index.html.erb (131.3ms)


Started GET "/papers/2/comments/new" for ::1 at 2016-10-09 00:43:19 +0900
Processing by CommentsController#new as HTML
  Parameters: {"paper_id"=>"2"}
  [1m[35mPaper Load (0.3ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`id` = 2 LIMIT 1
  Rendered comments/new.html.erb within layouts/application (30.7ms)
  [1m[36mUser Load (0.5ms)[0m  [1mSELECT  `users`.* FROM `users` WHERE `users`.`id` = 2  ORDER BY `users`.`id` ASC LIMIT 1[0m
Completed 200 OK in 102ms (Views: 80.8ms | ActiveRecord: 20.3ms)


Started GET "/assets/comments.self-e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855.css?body=1" for ::1 at 2016-10-09 00:43:20 +0900


Started GET "/assets/likes.self-e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855.css?body=1" for ::1 at 2016-10-09 00:43:20 +0900


Started GET "/assets/users.self-e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855.css?body=1" for ::1 at 2016-10-09 00:43:20 +0900


Started GET "/assets/papers.self-e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855.css?body=1" for ::1 at 2016-10-09 00:43:20 +0900


Started GET "/assets/application.self-e80e8f2318043e8af94dddc2adad5a4f09739a8ebb323b3ab31cd71d45fd9113.css?body=1" for ::1 at 2016-10-09 00:43:20 +0900


Started GET "/assets/jquery.self-bd7ddd393353a8d2480a622e80342adf488fb6006d667e8b42e4c0073393abee.js?body=1" for ::1 at 2016-10-09 00:43:20 +0900


Started GET "/assets/jquery_ujs.self-784a997f6726036b1993eb2217c9cb558e1cbb801c6da88105588c56f13b466a.js?body=1" for ::1 at 2016-10-09 00:43:20 +0900


Started GET "/assets/turbolinks.self-c5acd7a204f5f25ce7a1d8a0e4d92e28d34c9e2df2c7371cd7af88e147e4ad82.js?body=1" for ::1 at 2016-10-09 00:43:20 +0900


Started GET "/assets/comments.self-877aef30ae1b040ab8a3aba4e3e309a11d7f2612f44dde450b5c157aa5f95c05.js?body=1" for ::1 at 2016-10-09 00:43:20 +0900


Started GET "/assets/likes.self-877aef30ae1b040ab8a3aba4e3e309a11d7f2612f44dde450b5c157aa5f95c05.js?body=1" for ::1 at 2016-10-09 00:43:20 +0900


Started GET "/assets/papers.self-877aef30ae1b040ab8a3aba4e3e309a11d7f2612f44dde450b5c157aa5f95c05.js?body=1" for ::1 at 2016-10-09 00:43:20 +0900


Started GET "/assets/users.self-877aef30ae1b040ab8a3aba4e3e309a11d7f2612f44dde450b5c157aa5f95c05.js?body=1" for ::1 at 2016-10-09 00:43:20 +0900


Started GET "/assets/application.self-3b8dabdc891efe46b9a144b400ad69e37d7e5876bdc39dee783419a69d7ca819.js?body=1" for ::1 at 2016-10-09 00:43:20 +0900


Started POST "/papers/2/comments" for ::1 at 2016-10-09 00:43:32 +0900
Processing by CommentsController#create as HTML
  Parameters: {"utf8"=>"✓", "authenticity_token"=>"8uwLWMHewNmAZHhMHglmE/CNDQmzXl4re8RrSzXJIKpZ7CqA8tVj4maVBsUK3p7bBpxALmCKnHNr0JipxdFUuw==", "comment"=>{"comment"=>""}, "button"=>"", "paper_id"=>"2"}
Completed 500 Internal Server Error in 11ms (ActiveRecord: 0.0ms)

ActionView::MissingTemplate (Missing template comments/create, application/create with {:locale=>[:en], :formats=>[:html], :variants=>[], :handlers=>[:erb, :builder, :raw, :ruby, :coffee, :jbuilder]}. Searched in:
  * "/Users/tech-camp/projects/arxivpicks/app/views"
  * "/Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/devise-4.2.0/app/views"
  * "/Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/kaminari-bootstrap-3.0.1/app/views"
  * "/Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/kaminari-0.17.0/app/views"
):
  actionview (4.2.6) lib/action_view/path_set.rb:46:in `find'
  actionview (4.2.6) lib/action_view/lookup_context.rb:121:in `find'
  actionview (4.2.6) lib/action_view/renderer/abstract_renderer.rb:18:in `find_template'
  actionview (4.2.6) lib/action_view/renderer/template_renderer.rb:40:in `determine_template'
  actionview (4.2.6) lib/action_view/renderer/template_renderer.rb:8:in `render'
  actionview (4.2.6) lib/action_view/renderer/renderer.rb:46:in `render_template'
  actionview (4.2.6) lib/action_view/renderer/renderer.rb:27:in `render'
  actionview (4.2.6) lib/action_view/rendering.rb:100:in `_render_template'
  actionpack (4.2.6) lib/action_controller/metal/streaming.rb:217:in `_render_template'
  actionview (4.2.6) lib/action_view/rendering.rb:83:in `render_to_body'
  actionpack (4.2.6) lib/action_controller/metal/rendering.rb:32:in `render_to_body'
  actionpack (4.2.6) lib/action_controller/metal/renderers.rb:37:in `render_to_body'
  actionpack (4.2.6) lib/abstract_controller/rendering.rb:25:in `render'
  actionpack (4.2.6) lib/action_controller/metal/rendering.rb:16:in `render'
  actionpack (4.2.6) lib/action_controller/metal/instrumentation.rb:44:in `block (2 levels) in render'
  activesupport (4.2.6) lib/active_support/core_ext/benchmark.rb:12:in `block in ms'
  /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/2.3.0/benchmark.rb:308:in `realtime'
  activesupport (4.2.6) lib/active_support/core_ext/benchmark.rb:12:in `ms'
  actionpack (4.2.6) lib/action_controller/metal/instrumentation.rb:44:in `block in render'
  actionpack (4.2.6) lib/action_controller/metal/instrumentation.rb:87:in `cleanup_view_runtime'
  activerecord (4.2.6) lib/active_record/railties/controller_runtime.rb:25:in `cleanup_view_runtime'
  actionpack (4.2.6) lib/action_controller/metal/instrumentation.rb:43:in `render'
  actionpack (4.2.6) lib/action_controller/metal/implicit_render.rb:10:in `default_render'
  actionpack (4.2.6) lib/action_controller/metal/implicit_render.rb:5:in `send_action'
  actionpack (4.2.6) lib/abstract_controller/base.rb:198:in `process_action'
  actionpack (4.2.6) lib/action_controller/metal/rendering.rb:10:in `process_action'
  actionpack (4.2.6) lib/abstract_controller/callbacks.rb:20:in `block in process_action'
  activesupport (4.2.6) lib/active_support/callbacks.rb:117:in `call'
  activesupport (4.2.6) lib/active_support/callbacks.rb:555:in `block (2 levels) in compile'
  activesupport (4.2.6) lib/active_support/callbacks.rb:505:in `call'
  activesupport (4.2.6) lib/active_support/callbacks.rb:92:in `__run_callbacks__'
  activesupport (4.2.6) lib/active_support/callbacks.rb:778:in `_run_process_action_callbacks'
  activesupport (4.2.6) lib/active_support/callbacks.rb:81:in `run_callbacks'
  actionpack (4.2.6) lib/abstract_controller/callbacks.rb:19:in `process_action'
  actionpack (4.2.6) lib/action_controller/metal/rescue.rb:29:in `process_action'
  actionpack (4.2.6) lib/action_controller/metal/instrumentation.rb:32:in `block in process_action'
  activesupport (4.2.6) lib/active_support/notifications.rb:164:in `block in instrument'
  activesupport (4.2.6) lib/active_support/notifications/instrumenter.rb:20:in `instrument'
  activesupport (4.2.6) lib/active_support/notifications.rb:164:in `instrument'
  actionpack (4.2.6) lib/action_controller/metal/instrumentation.rb:30:in `process_action'
  actionpack (4.2.6) lib/action_controller/metal/params_wrapper.rb:250:in `process_action'
  activerecord (4.2.6) lib/active_record/railties/controller_runtime.rb:18:in `process_action'
  actionpack (4.2.6) lib/abstract_controller/base.rb:137:in `process'
  actionview (4.2.6) lib/action_view/rendering.rb:30:in `process'
  actionpack (4.2.6) lib/action_controller/metal.rb:196:in `dispatch'
  actionpack (4.2.6) lib/action_controller/metal/rack_delegation.rb:13:in `dispatch'
  actionpack (4.2.6) lib/action_controller/metal.rb:237:in `block in action'
  actionpack (4.2.6) lib/action_dispatch/routing/route_set.rb:74:in `dispatch'
  actionpack (4.2.6) lib/action_dispatch/routing/route_set.rb:43:in `serve'
  actionpack (4.2.6) lib/action_dispatch/journey/router.rb:43:in `block in serve'
  actionpack (4.2.6) lib/action_dispatch/journey/router.rb:30:in `each'
  actionpack (4.2.6) lib/action_dispatch/journey/router.rb:30:in `serve'
  actionpack (4.2.6) lib/action_dispatch/routing/route_set.rb:817:in `call'
  warden (1.2.6) lib/warden/manager.rb:35:in `block in call'
  warden (1.2.6) lib/warden/manager.rb:34:in `catch'
  warden (1.2.6) lib/warden/manager.rb:34:in `call'
  rack (1.6.4) lib/rack/etag.rb:24:in `call'
  rack (1.6.4) lib/rack/conditionalget.rb:38:in `call'
  rack (1.6.4) lib/rack/head.rb:13:in `call'
  actionpack (4.2.6) lib/action_dispatch/middleware/params_parser.rb:27:in `call'
  actionpack (4.2.6) lib/action_dispatch/middleware/flash.rb:260:in `call'
  rack (1.6.4) lib/rack/session/abstract/id.rb:225:in `context'
  rack (1.6.4) lib/rack/session/abstract/id.rb:220:in `call'
  actionpack (4.2.6) lib/action_dispatch/middleware/cookies.rb:560:in `call'
  activerecord (4.2.6) lib/active_record/query_cache.rb:36:in `call'
  activerecord (4.2.6) lib/active_record/connection_adapters/abstract/connection_pool.rb:653:in `call'
  activerecord (4.2.6) lib/active_record/migration.rb:377:in `call'
  actionpack (4.2.6) lib/action_dispatch/middleware/callbacks.rb:29:in `block in call'
  activesupport (4.2.6) lib/active_support/callbacks.rb:88:in `__run_callbacks__'
  activesupport (4.2.6) lib/active_support/callbacks.rb:778:in `_run_call_callbacks'
  activesupport (4.2.6) lib/active_support/callbacks.rb:81:in `run_callbacks'
  actionpack (4.2.6) lib/action_dispatch/middleware/callbacks.rb:27:in `call'
  actionpack (4.2.6) lib/action_dispatch/middleware/reloader.rb:73:in `call'
  actionpack (4.2.6) lib/action_dispatch/middleware/remote_ip.rb:78:in `call'
  actionpack (4.2.6) lib/action_dispatch/middleware/debug_exceptions.rb:17:in `call'
  web-console (2.3.0) lib/web_console/middleware.rb:28:in `block in call'
  web-console (2.3.0) lib/web_console/middleware.rb:18:in `catch'
  web-console (2.3.0) lib/web_console/middleware.rb:18:in `call'
  actionpack (4.2.6) lib/action_dispatch/middleware/show_exceptions.rb:30:in `call'
  railties (4.2.6) lib/rails/rack/logger.rb:38:in `call_app'
  railties (4.2.6) lib/rails/rack/logger.rb:20:in `block in call'
  activesupport (4.2.6) lib/active_support/tagged_logging.rb:68:in `block in tagged'
  activesupport (4.2.6) lib/active_support/tagged_logging.rb:26:in `tagged'
  activesupport (4.2.6) lib/active_support/tagged_logging.rb:68:in `tagged'
  railties (4.2.6) lib/rails/rack/logger.rb:20:in `call'
  actionpack (4.2.6) lib/action_dispatch/middleware/request_id.rb:21:in `call'
  rack (1.6.4) lib/rack/methodoverride.rb:22:in `call'
  rack (1.6.4) lib/rack/runtime.rb:18:in `call'
  activesupport (4.2.6) lib/active_support/cache/strategy/local_cache_middleware.rb:28:in `call'
  rack (1.6.4) lib/rack/lock.rb:17:in `call'
  actionpack (4.2.6) lib/action_dispatch/middleware/static.rb:120:in `call'
  rack (1.6.4) lib/rack/sendfile.rb:113:in `call'
  railties (4.2.6) lib/rails/engine.rb:518:in `call'
  railties (4.2.6) lib/rails/application.rb:165:in `call'
  rack (1.6.4) lib/rack/lock.rb:17:in `call'
  rack (1.6.4) lib/rack/content_length.rb:15:in `call'
  rack (1.6.4) lib/rack/handler/webrick.rb:88:in `service'
  /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/2.3.0/webrick/httpserver.rb:140:in `service'
  /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/2.3.0/webrick/httpserver.rb:96:in `run'
  /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/2.3.0/webrick/server.rb:296:in `block in start_thread'


  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/_source.erb (9.5ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/_trace.html.erb (2.2ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/_request_and_response.html.erb (1.0ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/missing_template.html.erb within rescues/layout (71.7ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/web-console-2.3.0/lib/web_console/templates/_markup.html.erb (0.5ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/web-console-2.3.0/lib/web_console/templates/_inner_console_markup.html.erb within layouts/inlined_string (0.5ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/web-console-2.3.0/lib/web_console/templates/_prompt_box_markup.html.erb within layouts/inlined_string (0.4ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/web-console-2.3.0/lib/web_console/templates/style.css.erb within layouts/inlined_string (0.5ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/web-console-2.3.0/lib/web_console/templates/console.js.erb within layouts/javascript (70.2ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/web-console-2.3.0/lib/web_console/templates/main.js.erb within layouts/javascript (0.3ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/web-console-2.3.0/lib/web_console/templates/error_page.js.erb within layouts/javascript (0.5ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/web-console-2.3.0/lib/web_console/templates/index.html.erb (142.3ms)


Started POST "/papers/2/comments" for ::1 at 2016-10-09 00:46:31 +0900
Processing by CommentsController#create as HTML
  Parameters: {"utf8"=>"✓", "authenticity_token"=>"8uwLWMHewNmAZHhMHglmE/CNDQmzXl4re8RrSzXJIKpZ7CqA8tVj4maVBsUK3p7bBpxALmCKnHNr0JipxdFUuw==", "comment"=>{"comment"=>""}, "button"=>"", "paper_id"=>"2"}
Redirected to http://localhost:3000/papers/2
Completed 302 Found in 7ms (ActiveRecord: 0.0ms)


Started GET "/papers/2" for ::1 at 2016-10-09 00:46:31 +0900
Processing by PapersController#show as HTML
  Parameters: {"id"=>"2"}
  [1m[35mPaper Load (0.5ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`id` = 2 LIMIT 1
  [1m[36mUser Load (0.5ms)[0m  [1mSELECT  `users`.* FROM `users` WHERE `users`.`id` = 2  ORDER BY `users`.`id` ASC LIMIT 1[0m
  Rendered papers/show.html.erb within layouts/application (33.1ms)
Completed 200 OK in 116ms (Views: 56.5ms | ActiveRecord: 46.6ms)


Started GET "/assets/comments.self-e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855.css?body=1" for ::1 at 2016-10-09 00:46:31 +0900


Started GET "/assets/likes.self-e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855.css?body=1" for ::1 at 2016-10-09 00:46:31 +0900


Started GET "/assets/jquery_ujs.self-784a997f6726036b1993eb2217c9cb558e1cbb801c6da88105588c56f13b466a.js?body=1" for ::1 at 2016-10-09 00:46:31 +0900


Started GET "/assets/papers.self-e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855.css?body=1" for ::1 at 2016-10-09 00:46:31 +0900


Started GET "/assets/application.self-e80e8f2318043e8af94dddc2adad5a4f09739a8ebb323b3ab31cd71d45fd9113.css?body=1" for ::1 at 2016-10-09 00:46:31 +0900


Started GET "/assets/jquery.self-bd7ddd393353a8d2480a622e80342adf488fb6006d667e8b42e4c0073393abee.js?body=1" for ::1 at 2016-10-09 00:46:31 +0900


Started GET "/assets/users.self-e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855.css?body=1" for ::1 at 2016-10-09 00:46:31 +0900


Started GET "/assets/turbolinks.self-c5acd7a204f5f25ce7a1d8a0e4d92e28d34c9e2df2c7371cd7af88e147e4ad82.js?body=1" for ::1 at 2016-10-09 00:46:31 +0900


Started GET "/assets/comments.self-877aef30ae1b040ab8a3aba4e3e309a11d7f2612f44dde450b5c157aa5f95c05.js?body=1" for ::1 at 2016-10-09 00:46:31 +0900


Started GET "/assets/likes.self-877aef30ae1b040ab8a3aba4e3e309a11d7f2612f44dde450b5c157aa5f95c05.js?body=1" for ::1 at 2016-10-09 00:46:31 +0900


Started GET "/assets/papers.self-877aef30ae1b040ab8a3aba4e3e309a11d7f2612f44dde450b5c157aa5f95c05.js?body=1" for ::1 at 2016-10-09 00:46:31 +0900


Started GET "/assets/users.self-877aef30ae1b040ab8a3aba4e3e309a11d7f2612f44dde450b5c157aa5f95c05.js?body=1" for ::1 at 2016-10-09 00:46:31 +0900


Started GET "/assets/application.self-3b8dabdc891efe46b9a144b400ad69e37d7e5876bdc39dee783419a69d7ca819.js?body=1" for ::1 at 2016-10-09 00:46:31 +0900


Started GET "/papers/2/comments/new" for ::1 at 2016-10-09 00:46:35 +0900
Processing by CommentsController#new as HTML
  Parameters: {"paper_id"=>"2"}
  [1m[35mPaper Load (0.4ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`id` = 2 LIMIT 1
  Rendered comments/new.html.erb within layouts/application (1.7ms)
  [1m[36mUser Load (0.4ms)[0m  [1mSELECT  `users`.* FROM `users` WHERE `users`.`id` = 2  ORDER BY `users`.`id` ASC LIMIT 1[0m
Completed 200 OK in 73ms (Views: 35.8ms | ActiveRecord: 19.3ms)


Started POST "/papers/2/comments" for ::1 at 2016-10-09 00:46:36 +0900
Processing by CommentsController#create as HTML
  Parameters: {"utf8"=>"✓", "authenticity_token"=>"sYeyWmGU/ExO8wv0T6n/gWzxVUC7S4wyw/3mHlMreyAah5OCUp9fd6gCdX1bfgdJmuAYZ2ifTmrT6RX8ozMPMQ==", "comment"=>{"comment"=>""}, "button"=>"", "paper_id"=>"2"}
Redirected to http://localhost:3000/papers/2
Completed 302 Found in 1ms (ActiveRecord: 0.0ms)


Started GET "/papers/2" for ::1 at 2016-10-09 00:46:36 +0900
Processing by PapersController#show as HTML
  Parameters: {"id"=>"2"}
  [1m[35mPaper Load (0.3ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`id` = 2 LIMIT 1
  [1m[36mUser Load (0.4ms)[0m  [1mSELECT  `users`.* FROM `users` WHERE `users`.`id` = 2  ORDER BY `users`.`id` ASC LIMIT 1[0m
  Rendered papers/show.html.erb within layouts/application (1.6ms)
Completed 200 OK in 30ms (Views: 28.7ms | ActiveRecord: 0.7ms)


Started GET "/papers/2/comments/new" for ::1 at 2016-10-09 00:49:59 +0900
Processing by CommentsController#new as HTML
  Parameters: {"paper_id"=>"2"}
  [1m[35mPaper Load (0.5ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`id` = 2 LIMIT 1
  Rendered comments/new.html.erb within layouts/application (1.3ms)
  [1m[36mUser Load (0.3ms)[0m  [1mSELECT  `users`.* FROM `users` WHERE `users`.`id` = 2  ORDER BY `users`.`id` ASC LIMIT 1[0m
Completed 200 OK in 76ms (Views: 37.6ms | ActiveRecord: 14.8ms)


Started POST "/papers/2/comments" for ::1 at 2016-10-09 00:50:06 +0900
Processing by CommentsController#create as HTML
  Parameters: {"utf8"=>"✓", "authenticity_token"=>"68SxasZpIL1DVqIrsvDcq/EENQKQpePTdTLsAUo9/G5AxJCy9WKDhqWn3KKmJyRjBxV4JUNxIYtlJh/juiWIfw==", "comment"=>{"comment"=>"読んでいません！"}, "button"=>"", "paper_id"=>"2"}
  [1m[35mUser Load (0.3ms)[0m  SELECT  `users`.* FROM `users` WHERE `users`.`id` = 2  ORDER BY `users`.`id` ASC LIMIT 1
Completed 500 Internal Server Error in 4ms (ActiveRecord: 0.3ms)

ActiveRecord::UnknownAttributeError (unknown attribute 'product_id' for Comment.):
  app/controllers/comments_controller.rb:9:in `create'


  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/_source.erb (6.5ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/_trace.html.erb (3.5ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/_request_and_response.html.erb (1.8ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/diagnostics.html.erb within rescues/layout (95.1ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/web-console-2.3.0/lib/web_console/templates/_markup.html.erb (0.7ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/web-console-2.3.0/lib/web_console/templates/_inner_console_markup.html.erb within layouts/inlined_string (0.4ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/web-console-2.3.0/lib/web_console/templates/_prompt_box_markup.html.erb within layouts/inlined_string (0.7ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/web-console-2.3.0/lib/web_console/templates/style.css.erb within layouts/inlined_string (0.5ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/web-console-2.3.0/lib/web_console/templates/console.js.erb within layouts/javascript (71.0ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/web-console-2.3.0/lib/web_console/templates/main.js.erb within layouts/javascript (0.6ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/web-console-2.3.0/lib/web_console/templates/error_page.js.erb within layouts/javascript (0.6ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/web-console-2.3.0/lib/web_console/templates/index.html.erb (152.5ms)


Started POST "/papers/2/comments" for ::1 at 2016-10-09 00:50:27 +0900
Processing by CommentsController#create as HTML
  Parameters: {"utf8"=>"✓", "authenticity_token"=>"68SxasZpIL1DVqIrsvDcq/EENQKQpePTdTLsAUo9/G5AxJCy9WKDhqWn3KKmJyRjBxV4JUNxIYtlJh/juiWIfw==", "comment"=>{"comment"=>"読んでいません！"}, "button"=>"", "paper_id"=>"2"}
  [1m[36mUser Load (0.5ms)[0m  [1mSELECT  `users`.* FROM `users` WHERE `users`.`id` = 2  ORDER BY `users`.`id` ASC LIMIT 1[0m
Completed 500 Internal Server Error in 40ms (ActiveRecord: 12.8ms)

ActiveRecord::UnknownAttributeError (unknown attribute 'product_id' for Comment.):
  app/controllers/comments_controller.rb:9:in `create'


  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/_source.erb (5.4ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/_trace.html.erb (2.9ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/_request_and_response.html.erb (1.1ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/diagnostics.html.erb within rescues/layout (72.1ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/web-console-2.3.0/lib/web_console/templates/_markup.html.erb (0.7ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/web-console-2.3.0/lib/web_console/templates/_inner_console_markup.html.erb within layouts/inlined_string (0.4ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/web-console-2.3.0/lib/web_console/templates/_prompt_box_markup.html.erb within layouts/inlined_string (0.6ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/web-console-2.3.0/lib/web_console/templates/style.css.erb within layouts/inlined_string (0.4ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/web-console-2.3.0/lib/web_console/templates/console.js.erb within layouts/javascript (68.5ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/web-console-2.3.0/lib/web_console/templates/main.js.erb within layouts/javascript (0.4ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/web-console-2.3.0/lib/web_console/templates/error_page.js.erb within layouts/javascript (0.5ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/web-console-2.3.0/lib/web_console/templates/index.html.erb (141.4ms)


Started POST "/papers/2/comments" for ::1 at 2016-10-09 00:50:42 +0900
Processing by CommentsController#create as HTML
  Parameters: {"utf8"=>"✓", "authenticity_token"=>"68SxasZpIL1DVqIrsvDcq/EENQKQpePTdTLsAUo9/G5AxJCy9WKDhqWn3KKmJyRjBxV4JUNxIYtlJh/juiWIfw==", "comment"=>{"comment"=>"読んでいません！"}, "button"=>"", "paper_id"=>"2"}
  [1m[35mUser Load (0.5ms)[0m  SELECT  `users`.* FROM `users` WHERE `users`.`id` = 2  ORDER BY `users`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.6ms)[0m  INSERT INTO `comments` (`comment`, `paper_id`, `created_at`, `updated_at`) VALUES ('読んでいません！', 2, '2016-10-08 15:50:43', '2016-10-08 15:50:43')
  [1m[36m (1.3ms)[0m  [1mCOMMIT[0m
Redirected to http://localhost:3000/papers/2
Completed 302 Found in 45ms (ActiveRecord: 15.1ms)


Started GET "/papers/2" for ::1 at 2016-10-09 00:50:43 +0900
Processing by PapersController#show as HTML
  Parameters: {"id"=>"2"}
  [1m[35mPaper Load (0.3ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`id` = 2 LIMIT 1
  [1m[36mUser Load (0.4ms)[0m  [1mSELECT  `users`.* FROM `users` WHERE `users`.`id` = 2  ORDER BY `users`.`id` ASC LIMIT 1[0m
  Rendered papers/show.html.erb within layouts/application (2.1ms)
Completed 200 OK in 42ms (Views: 29.3ms | ActiveRecord: 2.8ms)


Started GET "/assets/comments.self-e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855.css?body=1" for ::1 at 2016-10-09 00:50:43 +0900


Started GET "/assets/papers.self-e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855.css?body=1" for ::1 at 2016-10-09 00:50:43 +0900


Started GET "/assets/likes.self-e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855.css?body=1" for ::1 at 2016-10-09 00:50:43 +0900


Started GET "/assets/jquery_ujs.self-784a997f6726036b1993eb2217c9cb558e1cbb801c6da88105588c56f13b466a.js?body=1" for ::1 at 2016-10-09 00:50:43 +0900


Started GET "/assets/jquery.self-bd7ddd393353a8d2480a622e80342adf488fb6006d667e8b42e4c0073393abee.js?body=1" for ::1 at 2016-10-09 00:50:43 +0900


Started GET "/assets/users.self-e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855.css?body=1" for ::1 at 2016-10-09 00:50:43 +0900


Started GET "/assets/application.self-e80e8f2318043e8af94dddc2adad5a4f09739a8ebb323b3ab31cd71d45fd9113.css?body=1" for ::1 at 2016-10-09 00:50:43 +0900


Started GET "/assets/turbolinks.self-c5acd7a204f5f25ce7a1d8a0e4d92e28d34c9e2df2c7371cd7af88e147e4ad82.js?body=1" for ::1 at 2016-10-09 00:50:43 +0900


Started GET "/assets/comments.self-877aef30ae1b040ab8a3aba4e3e309a11d7f2612f44dde450b5c157aa5f95c05.js?body=1" for ::1 at 2016-10-09 00:50:43 +0900


Started GET "/assets/likes.self-877aef30ae1b040ab8a3aba4e3e309a11d7f2612f44dde450b5c157aa5f95c05.js?body=1" for ::1 at 2016-10-09 00:50:43 +0900


Started GET "/assets/papers.self-877aef30ae1b040ab8a3aba4e3e309a11d7f2612f44dde450b5c157aa5f95c05.js?body=1" for ::1 at 2016-10-09 00:50:43 +0900


Started GET "/assets/users.self-877aef30ae1b040ab8a3aba4e3e309a11d7f2612f44dde450b5c157aa5f95c05.js?body=1" for ::1 at 2016-10-09 00:50:43 +0900


Started GET "/assets/application.self-3b8dabdc891efe46b9a144b400ad69e37d7e5876bdc39dee783419a69d7ca819.js?body=1" for ::1 at 2016-10-09 00:50:43 +0900


Started GET "/papers/2" for ::1 at 2016-10-09 01:02:24 +0900
Processing by PapersController#show as HTML
  Parameters: {"id"=>"2"}
  [1m[35mPaper Load (0.5ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`id` = 2 LIMIT 1
Completed 500 Internal Server Error in 37ms (ActiveRecord: 10.8ms)

NoMethodError (undefined method `coments' for #<Class:0x007fd4d31802b8>
Did you mean?  columns):
  app/controllers/papers_controller.rb:13:in `show'


  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/_source.erb (4.3ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/_trace.html.erb (2.9ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/_request_and_response.html.erb (1.5ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/diagnostics.html.erb within rescues/layout (70.1ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/web-console-2.3.0/lib/web_console/templates/_markup.html.erb (0.5ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/web-console-2.3.0/lib/web_console/templates/_inner_console_markup.html.erb within layouts/inlined_string (0.4ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/web-console-2.3.0/lib/web_console/templates/_prompt_box_markup.html.erb within layouts/inlined_string (0.6ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/web-console-2.3.0/lib/web_console/templates/style.css.erb within layouts/inlined_string (0.4ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/web-console-2.3.0/lib/web_console/templates/console.js.erb within layouts/javascript (57.5ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/web-console-2.3.0/lib/web_console/templates/main.js.erb within layouts/javascript (0.4ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/web-console-2.3.0/lib/web_console/templates/error_page.js.erb within layouts/javascript (0.6ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/web-console-2.3.0/lib/web_console/templates/index.html.erb (128.6ms)


Started GET "/papers/2" for ::1 at 2016-10-09 01:02:41 +0900
Processing by PapersController#show as HTML
  Parameters: {"id"=>"2"}
  [1m[36mPaper Load (0.6ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`id` = 2 LIMIT 1[0m
Completed 500 Internal Server Error in 31ms (ActiveRecord: 10.8ms)

NoMethodError (undefined method `coments' for #<Paper:0x007fd4d31b5580>
Did you mean?  comments
               comments=):
  app/controllers/papers_controller.rb:13:in `show'


  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/_source.erb (7.4ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/_trace.html.erb (2.6ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/_request_and_response.html.erb (1.2ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/diagnostics.html.erb within rescues/layout (73.7ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/web-console-2.3.0/lib/web_console/templates/_markup.html.erb (0.7ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/web-console-2.3.0/lib/web_console/templates/_inner_console_markup.html.erb within layouts/inlined_string (0.4ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/web-console-2.3.0/lib/web_console/templates/_prompt_box_markup.html.erb within layouts/inlined_string (0.4ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/web-console-2.3.0/lib/web_console/templates/style.css.erb within layouts/inlined_string (0.4ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/web-console-2.3.0/lib/web_console/templates/console.js.erb within layouts/javascript (58.2ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/web-console-2.3.0/lib/web_console/templates/main.js.erb within layouts/javascript (0.4ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/web-console-2.3.0/lib/web_console/templates/error_page.js.erb within layouts/javascript (0.5ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/web-console-2.3.0/lib/web_console/templates/index.html.erb (136.3ms)


Started GET "/papers/2" for ::1 at 2016-10-09 01:02:55 +0900
Processing by PapersController#show as HTML
  Parameters: {"id"=>"2"}
  [1m[35mPaper Load (0.6ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`id` = 2 LIMIT 1
  [1m[36mUser Load (0.4ms)[0m  [1mSELECT  `users`.* FROM `users` WHERE `users`.`id` = 2  ORDER BY `users`.`id` ASC LIMIT 1[0m
  Rendered papers/show.html.erb within layouts/application (15.4ms)
Completed 500 Internal Server Error in 106ms (ActiveRecord: 33.1ms)

ActionView::Template::Error (undefined method `each' for nil:NilClass):
    10:   <%= link_to "#{@paper.title}", "#{@paper.url}" %>
    11:   </div>
    12:   <div>
    13:   <% @comment.each do |comment| %>
    14:     <div>
    15:       <strong> <%= comment.user %> </strong><br>
    16:       <div> 
  app/views/papers/show.html.erb:13:in `_app_views_papers_show_html_erb__3238495100161371660_70276054218620'


  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/_source.erb (5.6ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/_trace.html.erb (2.9ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/_request_and_response.html.erb (1.0ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/template_error.html.erb within rescues/layout (67.4ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/web-console-2.3.0/lib/web_console/templates/_markup.html.erb (0.4ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/web-console-2.3.0/lib/web_console/templates/_inner_console_markup.html.erb within layouts/inlined_string (0.5ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/web-console-2.3.0/lib/web_console/templates/_prompt_box_markup.html.erb within layouts/inlined_string (0.4ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/web-console-2.3.0/lib/web_console/templates/style.css.erb within layouts/inlined_string (0.6ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/web-console-2.3.0/lib/web_console/templates/console.js.erb within layouts/javascript (55.3ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/web-console-2.3.0/lib/web_console/templates/main.js.erb within layouts/javascript (0.3ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/web-console-2.3.0/lib/web_console/templates/error_page.js.erb within layouts/javascript (0.5ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/web-console-2.3.0/lib/web_console/templates/index.html.erb (123.5ms)


Started POST "/papers/2/comments" for ::1 at 2016-10-09 01:04:30 +0900
Processing by CommentsController#create as HTML
  Parameters: {"utf8"=>"✓", "authenticity_token"=>"VD6lIZe0EXGkr+51z1cfAt8LVDFPt1HPLAYYkbWEjaH/PoT5pL+ySkJekPzbgOfKKRoZFpxjk5c8EutzRZz5sA==", "comment"=>{"comment"=>"読んでいません！"}, "button"=>"", "paper_id"=>"2"}
  [1m[35mUser Load (0.4ms)[0m  SELECT  `users`.* FROM `users` WHERE `users`.`id` = 2  ORDER BY `users`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `comments` (`comment`, `paper_id`, `created_at`, `updated_at`) VALUES ('読んでいません！', 2, '2016-10-08 16:04:30', '2016-10-08 16:04:30')
  [1m[36m (8.3ms)[0m  [1mCOMMIT[0m
Redirected to http://localhost:3000/papers/2
Completed 302 Found in 17ms (ActiveRecord: 9.3ms)


Started GET "/papers/2" for ::1 at 2016-10-09 01:04:30 +0900
Processing by PapersController#show as HTML
  Parameters: {"id"=>"2"}
  [1m[35mPaper Load (0.4ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`id` = 2 LIMIT 1
  [1m[36mUser Load (0.4ms)[0m  [1mSELECT  `users`.* FROM `users` WHERE `users`.`id` = 2  ORDER BY `users`.`id` ASC LIMIT 1[0m
  Rendered papers/show.html.erb within layouts/application (5.1ms)
Completed 500 Internal Server Error in 13ms (ActiveRecord: 0.7ms)

ActionView::Template::Error (undefined method `each' for nil:NilClass):
    10:   <%= link_to "#{@paper.title}", "#{@paper.url}" %>
    11:   </div>
    12:   <div>
    13:   <% @comment.each do |comment| %>
    14:     <div>
    15:       <strong> <%= comment.user %> </strong><br>
    16:       <div> 
  app/views/papers/show.html.erb:13:in `_app_views_papers_show_html_erb__3238495100161371660_70276054218620'


  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/_source.erb (7.0ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/_trace.html.erb (2.5ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/_request_and_response.html.erb (1.3ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/template_error.html.erb within rescues/layout (73.9ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/web-console-2.3.0/lib/web_console/templates/_markup.html.erb (0.5ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/web-console-2.3.0/lib/web_console/templates/_inner_console_markup.html.erb within layouts/inlined_string (0.5ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/web-console-2.3.0/lib/web_console/templates/_prompt_box_markup.html.erb within layouts/inlined_string (0.6ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/web-console-2.3.0/lib/web_console/templates/style.css.erb within layouts/inlined_string (0.4ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/web-console-2.3.0/lib/web_console/templates/console.js.erb within layouts/javascript (53.6ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/web-console-2.3.0/lib/web_console/templates/main.js.erb within layouts/javascript (0.4ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/web-console-2.3.0/lib/web_console/templates/error_page.js.erb within layouts/javascript (0.5ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/web-console-2.3.0/lib/web_console/templates/index.html.erb (130.4ms)


Started POST "/papers/2/comments" for ::1 at 2016-10-09 01:05:29 +0900
Processing by CommentsController#create as HTML
  Parameters: {"utf8"=>"✓", "authenticity_token"=>"VD6lIZe0EXGkr+51z1cfAt8LVDFPt1HPLAYYkbWEjaH/PoT5pL+ySkJekPzbgOfKKRoZFpxjk5c8EutzRZz5sA==", "comment"=>{"comment"=>"読んでいません！"}, "button"=>"", "paper_id"=>"2"}
  [1m[35mUser Load (0.7ms)[0m  SELECT  `users`.* FROM `users` WHERE `users`.`id` = 2  ORDER BY `users`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO `comments` (`created_at`, `updated_at`) VALUES ('2016-10-08 16:06:44', '2016-10-08 16:06:44')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
Redirected to http://localhost:3000/papers/2
Completed 302 Found in 74616ms (ActiveRecord: 21.3ms)


Started GET "/papers/2" for ::1 at 2016-10-09 01:06:44 +0900
Processing by PapersController#show as HTML
  Parameters: {"id"=>"2"}
  [1m[35mPaper Load (0.3ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`id` = 2 LIMIT 1
  [1m[36mUser Load (0.3ms)[0m  [1mSELECT  `users`.* FROM `users` WHERE `users`.`id` = 2  ORDER BY `users`.`id` ASC LIMIT 1[0m
  Rendered papers/show.html.erb within layouts/application (21.0ms)
Completed 500 Internal Server Error in 61ms (ActiveRecord: 7.7ms)

ActionView::Template::Error (undefined method `each' for nil:NilClass):
    10:   <%= link_to "#{@paper.title}", "#{@paper.url}" %>
    11:   </div>
    12:   <div>
    13:   <% @comment.each do |comment| %>
    14:     <div>
    15:       <strong> <%= comment.user %> </strong><br>
    16:       <div> 
  app/views/papers/show.html.erb:13:in `_app_views_papers_show_html_erb__3238495100161371660_70276054218620'


  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/_source.erb (6.5ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/_trace.html.erb (3.6ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/_request_and_response.html.erb (1.1ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/template_error.html.erb within rescues/layout (84.3ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/web-console-2.3.0/lib/web_console/templates/_markup.html.erb (0.5ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/web-console-2.3.0/lib/web_console/templates/_inner_console_markup.html.erb within layouts/inlined_string (0.4ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/web-console-2.3.0/lib/web_console/templates/_prompt_box_markup.html.erb within layouts/inlined_string (0.5ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/web-console-2.3.0/lib/web_console/templates/style.css.erb within layouts/inlined_string (0.5ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/web-console-2.3.0/lib/web_console/templates/console.js.erb within layouts/javascript (71.7ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/web-console-2.3.0/lib/web_console/templates/main.js.erb within layouts/javascript (0.5ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/web-console-2.3.0/lib/web_console/templates/error_page.js.erb within layouts/javascript (0.6ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/web-console-2.3.0/lib/web_console/templates/index.html.erb (158.3ms)


Started POST "/papers/2/comments" for ::1 at 2016-10-09 01:07:06 +0900
Processing by CommentsController#create as HTML
  Parameters: {"utf8"=>"✓", "authenticity_token"=>"VD6lIZe0EXGkr+51z1cfAt8LVDFPt1HPLAYYkbWEjaH/PoT5pL+ySkJekPzbgOfKKRoZFpxjk5c8EutzRZz5sA==", "comment"=>{"comment"=>"読んでいません！"}, "button"=>"", "paper_id"=>"2"}
  [1m[35mUser Load (0.4ms)[0m  SELECT  `users`.* FROM `users` WHERE `users`.`id` = 2  ORDER BY `users`.`id` ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO `comments` (`comment`, `paper_id`, `user_id`, `created_at`, `updated_at`) VALUES ('読んでいません！', 2, 2, '2016-10-08 16:07:06', '2016-10-08 16:07:06')
  [1m[36m (0.4ms)[0m  [1mCOMMIT[0m
Redirected to http://localhost:3000/papers/2
Completed 302 Found in 44ms (ActiveRecord: 14.2ms)


Started GET "/papers/2" for ::1 at 2016-10-09 01:07:06 +0900
Processing by PapersController#show as HTML
  Parameters: {"id"=>"2"}
  [1m[35mPaper Load (0.4ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`id` = 2 LIMIT 1
  [1m[36mUser Load (0.3ms)[0m  [1mSELECT  `users`.* FROM `users` WHERE `users`.`id` = 2  ORDER BY `users`.`id` ASC LIMIT 1[0m
  Rendered papers/show.html.erb within layouts/application (6.3ms)
Completed 500 Internal Server Error in 31ms (ActiveRecord: 2.3ms)

ActionView::Template::Error (undefined method `each' for nil:NilClass):
    10:   <%= link_to "#{@paper.title}", "#{@paper.url}" %>
    11:   </div>
    12:   <div>
    13:   <% @comment.each do |comment| %>
    14:     <div>
    15:       <strong> <%= comment.user %> </strong><br>
    16:       <div> 
  app/views/papers/show.html.erb:13:in `_app_views_papers_show_html_erb__3238495100161371660_70276054218620'


  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/_source.erb (9.6ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/_trace.html.erb (3.5ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/_request_and_response.html.erb (1.2ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/template_error.html.erb within rescues/layout (75.5ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/web-console-2.3.0/lib/web_console/templates/_markup.html.erb (0.8ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/web-console-2.3.0/lib/web_console/templates/_inner_console_markup.html.erb within layouts/inlined_string (0.5ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/web-console-2.3.0/lib/web_console/templates/_prompt_box_markup.html.erb within layouts/inlined_string (0.5ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/web-console-2.3.0/lib/web_console/templates/style.css.erb within layouts/inlined_string (0.6ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/web-console-2.3.0/lib/web_console/templates/console.js.erb within layouts/javascript (63.0ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/web-console-2.3.0/lib/web_console/templates/main.js.erb within layouts/javascript (0.5ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/web-console-2.3.0/lib/web_console/templates/error_page.js.erb within layouts/javascript (0.5ms)
  Rendered /Users/tech-camp/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/web-console-2.3.0/lib/web_console/templates/index.html.erb (142.6ms)


Started GET "/papers/2" for ::1 at 2016-10-09 01:08:27 +0900
Processing by PapersController#show as HTML
  Parameters: {"id"=>"2"}
  [1m[35mPaper Load (0.4ms)[0m  SELECT  `papers`.* FROM `papers` WHERE `papers`.`id` = 2 LIMIT 1
  [1m[36mUser Load (0.4ms)[0m  [1mSELECT  `users`.* FROM `users` WHERE `users`.`id` = 2  ORDER BY `users`.`id` ASC LIMIT 1[0m
  [1m[35mComment Load (0.3ms)[0m  SELECT `comments`.* FROM `comments` WHERE `comments`.`paper_id` = 2
  Rendered papers/show.html.erb within layouts/application (3.4ms)
Completed 200 OK in 29ms (Views: 26.3ms | ActiveRecord: 1.0ms)


Started GET "/assets/comments.self-e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855.css?body=1" for ::1 at 2016-10-09 01:08:27 +0900


Started GET "/assets/likes.self-e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855.css?body=1" for ::1 at 2016-10-09 01:08:27 +0900


Started GET "/assets/papers.self-e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855.css?body=1" for ::1 at 2016-10-09 01:08:27 +0900


Started GET "/assets/application.self-e80e8f2318043e8af94dddc2adad5a4f09739a8ebb323b3ab31cd71d45fd9113.css?body=1" for ::1 at 2016-10-09 01:08:27 +0900


Started GET "/assets/users.self-e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855.css?body=1" for ::1 at 2016-10-09 01:08:27 +0900


Started GET "/assets/jquery.self-bd7ddd393353a8d2480a622e80342adf488fb6006d667e8b42e4c0073393abee.js?body=1" for ::1 at 2016-10-09 01:08:27 +0900


Started GET "/assets/jquery_ujs.self-784a997f6726036b1993eb2217c9cb558e1cbb801c6da88105588c56f13b466a.js?body=1" for ::1 at 2016-10-09 01:08:27 +0900


Started GET "/assets/turbolinks.self-c5acd7a204f5f25ce7a1d8a0e4d92e28d34c9e2df2c7371cd7af88e147e4ad82.js?body=1" for ::1 at 2016-10-09 01:08:27 +0900


Started GET "/assets/comments.self-877aef30ae1b040ab8a3aba4e3e309a11d7f2612f44dde450b5c157aa5f95c05.js?body=1" for ::1 at 2016-10-09 01:08:27 +0900


Started GET "/assets/likes.self-877aef30ae1b040ab8a3aba4e3e309a11d7f2612f44dde450b5c157aa5f95c05.js?body=1" for ::1 at 2016-10-09 01:08:27 +0900


Started GET "/assets/papers.self-877aef30ae1b040ab8a3aba4e3e309a11d7f2612f44dde450b5c157aa5f95c05.js?body=1" for ::1 at 2016-10-09 01:08:27 +0900


Started GET "/assets/users.self-877aef30ae1b040ab8a3aba4e3e309a11d7f2612f44dde450b5c157aa5f95c05.js?body=1" for ::1 at 2016-10-09 01:08:27 +0900


Started GET "/assets/application.self-3b8dabdc891efe46b9a144b400ad69e37d7e5876bdc39dee783419a69d7ca819.js?body=1" for ::1 at 2016-10-09 01:08:27 +0900


Started GET "/papers/2/comments/new" for ::1 at 2016-10-09 01:08:43 +0900
Processing by CommentsController#new as HTML
  Parameters: {"paper_id"=>"2"}
  [1m[36mPaper Load (0.4ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`id` = 2 LIMIT 1[0m
  Rendered comments/new.html.erb within layouts/application (1.4ms)
  [1m[35mUser Load (0.3ms)[0m  SELECT  `users`.* FROM `users` WHERE `users`.`id` = 2  ORDER BY `users`.`id` ASC LIMIT 1
Completed 200 OK in 35ms (Views: 32.5ms | ActiveRecord: 0.7ms)


Started POST "/papers/2/comments" for ::1 at 2016-10-09 01:08:48 +0900
Processing by CommentsController#create as HTML
  Parameters: {"utf8"=>"✓", "authenticity_token"=>"WrMHdMrnkKTX8eMXgdgiehzjPNWk9Uc5i7LeST8nTrLxsyas+ewznzEAnZ6VD9qy6vJx8nchhWGbpi2rzz86ow==", "comment"=>{"comment"=>"楽しい"}, "button"=>"", "paper_id"=>"2"}
  [1m[36mUser Load (0.4ms)[0m  [1mSELECT  `users`.* FROM `users` WHERE `users`.`id` = 2  ORDER BY `users`.`id` ASC LIMIT 1[0m
  [1m[35m (0.3ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO `comments` (`comment`, `paper_id`, `user_id`, `created_at`, `updated_at`) VALUES ('楽しい', 2, 2, '2016-10-08 16:08:48', '2016-10-08 16:08:48')[0m
  [1m[35m (8.4ms)[0m  COMMIT
Redirected to http://localhost:3000/papers/2
Completed 302 Found in 16ms (ActiveRecord: 9.5ms)


Started GET "/papers/2" for ::1 at 2016-10-09 01:08:48 +0900
Processing by PapersController#show as HTML
  Parameters: {"id"=>"2"}
  [1m[36mPaper Load (0.5ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`id` = 2 LIMIT 1[0m
  [1m[35mUser Load (0.4ms)[0m  SELECT  `users`.* FROM `users` WHERE `users`.`id` = 2  ORDER BY `users`.`id` ASC LIMIT 1
  [1m[36mComment Load (0.3ms)[0m  [1mSELECT `comments`.* FROM `comments` WHERE `comments`.`paper_id` = 2[0m
  [1m[35mUser Load (0.5ms)[0m  SELECT  `users`.* FROM `users` WHERE `users`.`id` = 2 LIMIT 1
  Rendered papers/show.html.erb within layouts/application (21.2ms)
Completed 200 OK in 54ms (Views: 48.9ms | ActiveRecord: 1.7ms)


Started GET "/papers/2" for ::1 at 2016-10-09 01:09:30 +0900
Processing by PapersController#show as HTML
  Parameters: {"id"=>"2"}
  [1m[36mPaper Load (0.4ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`id` = 2 LIMIT 1[0m
  [1m[35mUser Load (0.4ms)[0m  SELECT  `users`.* FROM `users` WHERE `users`.`id` = 2  ORDER BY `users`.`id` ASC LIMIT 1
  [1m[36mComment Load (0.3ms)[0m  [1mSELECT `comments`.* FROM `comments` WHERE `comments`.`paper_id` = 2[0m
  [1m[35mUser Load (0.3ms)[0m  SELECT  `users`.* FROM `users` WHERE `users`.`id` = 2 LIMIT 1
  Rendered papers/show.html.erb within layouts/application (6.4ms)
Completed 200 OK in 40ms (Views: 36.1ms | ActiveRecord: 1.5ms)


Started GET "/assets/comments.self-e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855.css?body=1" for ::1 at 2016-10-09 01:09:30 +0900


Started GET "/assets/papers.self-e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855.css?body=1" for ::1 at 2016-10-09 01:09:30 +0900


Started GET "/assets/jquery_ujs.self-784a997f6726036b1993eb2217c9cb558e1cbb801c6da88105588c56f13b466a.js?body=1" for ::1 at 2016-10-09 01:09:30 +0900


Started GET "/assets/application.self-e80e8f2318043e8af94dddc2adad5a4f09739a8ebb323b3ab31cd71d45fd9113.css?body=1" for ::1 at 2016-10-09 01:09:30 +0900


Started GET "/assets/users.self-e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855.css?body=1" for ::1 at 2016-10-09 01:09:30 +0900


Started GET "/assets/jquery.self-bd7ddd393353a8d2480a622e80342adf488fb6006d667e8b42e4c0073393abee.js?body=1" for ::1 at 2016-10-09 01:09:30 +0900


Started GET "/assets/likes.self-e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855.css?body=1" for ::1 at 2016-10-09 01:09:30 +0900


Started GET "/assets/turbolinks.self-c5acd7a204f5f25ce7a1d8a0e4d92e28d34c9e2df2c7371cd7af88e147e4ad82.js?body=1" for ::1 at 2016-10-09 01:09:30 +0900


Started GET "/assets/comments.self-877aef30ae1b040ab8a3aba4e3e309a11d7f2612f44dde450b5c157aa5f95c05.js?body=1" for ::1 at 2016-10-09 01:09:30 +0900


Started GET "/assets/likes.self-877aef30ae1b040ab8a3aba4e3e309a11d7f2612f44dde450b5c157aa5f95c05.js?body=1" for ::1 at 2016-10-09 01:09:30 +0900


Started GET "/assets/papers.self-877aef30ae1b040ab8a3aba4e3e309a11d7f2612f44dde450b5c157aa5f95c05.js?body=1" for ::1 at 2016-10-09 01:09:30 +0900


Started GET "/assets/users.self-877aef30ae1b040ab8a3aba4e3e309a11d7f2612f44dde450b5c157aa5f95c05.js?body=1" for ::1 at 2016-10-09 01:09:30 +0900


Started GET "/assets/application.self-3b8dabdc891efe46b9a144b400ad69e37d7e5876bdc39dee783419a69d7ca819.js?body=1" for ::1 at 2016-10-09 01:09:30 +0900


Started GET "/papers/2" for ::1 at 2016-10-09 01:09:34 +0900
Processing by PapersController#show as HTML
  Parameters: {"id"=>"2"}
  [1m[36mPaper Load (0.4ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`id` = 2 LIMIT 1[0m
  [1m[35mUser Load (0.3ms)[0m  SELECT  `users`.* FROM `users` WHERE `users`.`id` = 2  ORDER BY `users`.`id` ASC LIMIT 1
  [1m[36mComment Load (0.3ms)[0m  [1mSELECT `comments`.* FROM `comments` WHERE `comments`.`paper_id` = 2[0m
  [1m[35mUser Load (0.3ms)[0m  SELECT  `users`.* FROM `users` WHERE `users`.`id` = 2 LIMIT 1
  Rendered papers/show.html.erb within layouts/application (3.6ms)
Completed 200 OK in 27ms (Views: 24.1ms | ActiveRecord: 1.3ms)


Started GET "/assets/comments.self-e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855.css?body=1" for ::1 at 2016-10-09 01:09:34 +0900


Started GET "/assets/application.self-e80e8f2318043e8af94dddc2adad5a4f09739a8ebb323b3ab31cd71d45fd9113.css?body=1" for ::1 at 2016-10-09 01:09:34 +0900


Started GET "/assets/jquery_ujs.self-784a997f6726036b1993eb2217c9cb558e1cbb801c6da88105588c56f13b466a.js?body=1" for ::1 at 2016-10-09 01:09:34 +0900


Started GET "/assets/jquery.self-bd7ddd393353a8d2480a622e80342adf488fb6006d667e8b42e4c0073393abee.js?body=1" for ::1 at 2016-10-09 01:09:34 +0900


Started GET "/assets/likes.self-e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855.css?body=1" for ::1 at 2016-10-09 01:09:34 +0900


Started GET "/assets/papers.self-e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855.css?body=1" for ::1 at 2016-10-09 01:09:34 +0900


Started GET "/assets/users.self-e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855.css?body=1" for ::1 at 2016-10-09 01:09:34 +0900


Started GET "/assets/turbolinks.self-c5acd7a204f5f25ce7a1d8a0e4d92e28d34c9e2df2c7371cd7af88e147e4ad82.js?body=1" for ::1 at 2016-10-09 01:09:34 +0900


Started GET "/assets/comments.self-877aef30ae1b040ab8a3aba4e3e309a11d7f2612f44dde450b5c157aa5f95c05.js?body=1" for ::1 at 2016-10-09 01:09:34 +0900


Started GET "/assets/likes.self-877aef30ae1b040ab8a3aba4e3e309a11d7f2612f44dde450b5c157aa5f95c05.js?body=1" for ::1 at 2016-10-09 01:09:34 +0900


Started GET "/assets/papers.self-877aef30ae1b040ab8a3aba4e3e309a11d7f2612f44dde450b5c157aa5f95c05.js?body=1" for ::1 at 2016-10-09 01:09:34 +0900


Started GET "/assets/users.self-877aef30ae1b040ab8a3aba4e3e309a11d7f2612f44dde450b5c157aa5f95c05.js?body=1" for ::1 at 2016-10-09 01:09:34 +0900


Started GET "/assets/application.self-3b8dabdc891efe46b9a144b400ad69e37d7e5876bdc39dee783419a69d7ca819.js?body=1" for ::1 at 2016-10-09 01:09:34 +0900


Started GET "/papers/2" for ::1 at 2016-10-09 01:09:38 +0900
Processing by PapersController#show as HTML
  Parameters: {"id"=>"2"}
  [1m[36mPaper Load (0.4ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`id` = 2 LIMIT 1[0m
  [1m[35mUser Load (0.3ms)[0m  SELECT  `users`.* FROM `users` WHERE `users`.`id` = 2  ORDER BY `users`.`id` ASC LIMIT 1
  [1m[36mComment Load (0.4ms)[0m  [1mSELECT `comments`.* FROM `comments` WHERE `comments`.`paper_id` = 2[0m
  [1m[35mUser Load (0.5ms)[0m  SELECT  `users`.* FROM `users` WHERE `users`.`id` = 2 LIMIT 1
  Rendered papers/show.html.erb within layouts/application (6.0ms)
Completed 200 OK in 31ms (Views: 28.3ms | ActiveRecord: 1.5ms)


Started GET "/assets/comments.self-e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855.css?body=1" for ::1 at 2016-10-09 01:09:38 +0900


Started GET "/assets/likes.self-e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855.css?body=1" for ::1 at 2016-10-09 01:09:38 +0900


Started GET "/assets/application.self-e80e8f2318043e8af94dddc2adad5a4f09739a8ebb323b3ab31cd71d45fd9113.css?body=1" for ::1 at 2016-10-09 01:09:38 +0900


Started GET "/assets/jquery.self-bd7ddd393353a8d2480a622e80342adf488fb6006d667e8b42e4c0073393abee.js?body=1" for ::1 at 2016-10-09 01:09:38 +0900


Started GET "/assets/users.self-e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855.css?body=1" for ::1 at 2016-10-09 01:09:38 +0900


Started GET "/assets/papers.self-e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855.css?body=1" for ::1 at 2016-10-09 01:09:38 +0900


Started GET "/assets/jquery_ujs.self-784a997f6726036b1993eb2217c9cb558e1cbb801c6da88105588c56f13b466a.js?body=1" for ::1 at 2016-10-09 01:09:38 +0900


Started GET "/assets/turbolinks.self-c5acd7a204f5f25ce7a1d8a0e4d92e28d34c9e2df2c7371cd7af88e147e4ad82.js?body=1" for ::1 at 2016-10-09 01:09:38 +0900


Started GET "/assets/comments.self-877aef30ae1b040ab8a3aba4e3e309a11d7f2612f44dde450b5c157aa5f95c05.js?body=1" for ::1 at 2016-10-09 01:09:38 +0900


Started GET "/assets/likes.self-877aef30ae1b040ab8a3aba4e3e309a11d7f2612f44dde450b5c157aa5f95c05.js?body=1" for ::1 at 2016-10-09 01:09:38 +0900


Started GET "/assets/papers.self-877aef30ae1b040ab8a3aba4e3e309a11d7f2612f44dde450b5c157aa5f95c05.js?body=1" for ::1 at 2016-10-09 01:09:38 +0900


Started GET "/assets/users.self-877aef30ae1b040ab8a3aba4e3e309a11d7f2612f44dde450b5c157aa5f95c05.js?body=1" for ::1 at 2016-10-09 01:09:38 +0900


Started GET "/assets/application.self-3b8dabdc891efe46b9a144b400ad69e37d7e5876bdc39dee783419a69d7ca819.js?body=1" for ::1 at 2016-10-09 01:09:38 +0900


Started GET "/papers/2" for ::1 at 2016-10-09 01:09:51 +0900
Processing by PapersController#show as HTML
  Parameters: {"id"=>"2"}
  [1m[36mPaper Load (0.3ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`id` = 2 LIMIT 1[0m
  [1m[35mUser Load (0.4ms)[0m  SELECT  `users`.* FROM `users` WHERE `users`.`id` = 2  ORDER BY `users`.`id` ASC LIMIT 1
  [1m[36mComment Load (0.3ms)[0m  [1mSELECT `comments`.* FROM `comments` WHERE `comments`.`paper_id` = 2[0m
  [1m[35mUser Load (0.3ms)[0m  SELECT  `users`.* FROM `users` WHERE `users`.`id` = 2 LIMIT 1
  Rendered papers/show.html.erb within layouts/application (4.6ms)
Completed 200 OK in 30ms (Views: 27.0ms | ActiveRecord: 1.3ms)


Started GET "/assets/comments.self-e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855.css?body=1" for ::1 at 2016-10-09 01:09:51 +0900


Started GET "/assets/likes.self-e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855.css?body=1" for ::1 at 2016-10-09 01:09:51 +0900


Started GET "/assets/papers.self-e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855.css?body=1" for ::1 at 2016-10-09 01:09:51 +0900


Started GET "/assets/jquery.self-bd7ddd393353a8d2480a622e80342adf488fb6006d667e8b42e4c0073393abee.js?body=1" for ::1 at 2016-10-09 01:09:51 +0900


Started GET "/assets/application.self-e80e8f2318043e8af94dddc2adad5a4f09739a8ebb323b3ab31cd71d45fd9113.css?body=1" for ::1 at 2016-10-09 01:09:51 +0900


Started GET "/assets/users.self-e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855.css?body=1" for ::1 at 2016-10-09 01:09:51 +0900


Started GET "/assets/jquery_ujs.self-784a997f6726036b1993eb2217c9cb558e1cbb801c6da88105588c56f13b466a.js?body=1" for ::1 at 2016-10-09 01:09:51 +0900


Started GET "/assets/turbolinks.self-c5acd7a204f5f25ce7a1d8a0e4d92e28d34c9e2df2c7371cd7af88e147e4ad82.js?body=1" for ::1 at 2016-10-09 01:09:51 +0900


Started GET "/assets/comments.self-877aef30ae1b040ab8a3aba4e3e309a11d7f2612f44dde450b5c157aa5f95c05.js?body=1" for ::1 at 2016-10-09 01:09:51 +0900


Started GET "/assets/likes.self-877aef30ae1b040ab8a3aba4e3e309a11d7f2612f44dde450b5c157aa5f95c05.js?body=1" for ::1 at 2016-10-09 01:09:51 +0900


Started GET "/assets/papers.self-877aef30ae1b040ab8a3aba4e3e309a11d7f2612f44dde450b5c157aa5f95c05.js?body=1" for ::1 at 2016-10-09 01:09:51 +0900


Started GET "/assets/users.self-877aef30ae1b040ab8a3aba4e3e309a11d7f2612f44dde450b5c157aa5f95c05.js?body=1" for ::1 at 2016-10-09 01:09:51 +0900


Started GET "/assets/application.self-3b8dabdc891efe46b9a144b400ad69e37d7e5876bdc39dee783419a69d7ca819.js?body=1" for ::1 at 2016-10-09 01:09:51 +0900


Started GET "/papers/2" for ::1 at 2016-10-09 01:10:07 +0900
Processing by PapersController#show as HTML
  Parameters: {"id"=>"2"}
  [1m[36mPaper Load (0.3ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`id` = 2 LIMIT 1[0m
  [1m[35mUser Load (0.3ms)[0m  SELECT  `users`.* FROM `users` WHERE `users`.`id` = 2  ORDER BY `users`.`id` ASC LIMIT 1
  [1m[36mComment Load (0.4ms)[0m  [1mSELECT `comments`.* FROM `comments` WHERE `comments`.`paper_id` = 2[0m
  [1m[35mUser Load (0.3ms)[0m  SELECT  `users`.* FROM `users` WHERE `users`.`id` = 2 LIMIT 1
  Rendered papers/show.html.erb within layouts/application (5.0ms)
Completed 200 OK in 32ms (Views: 29.3ms | ActiveRecord: 1.3ms)


Started GET "/assets/comments.self-e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855.css?body=1" for ::1 at 2016-10-09 01:10:07 +0900


Started GET "/assets/application.self-e80e8f2318043e8af94dddc2adad5a4f09739a8ebb323b3ab31cd71d45fd9113.css?body=1" for ::1 at 2016-10-09 01:10:07 +0900


Started GET "/assets/papers.self-e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855.css?body=1" for ::1 at 2016-10-09 01:10:07 +0900


Started GET "/assets/users.self-e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855.css?body=1" for ::1 at 2016-10-09 01:10:07 +0900


Started GET "/assets/likes.self-e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855.css?body=1" for ::1 at 2016-10-09 01:10:07 +0900


Started GET "/assets/jquery.self-bd7ddd393353a8d2480a622e80342adf488fb6006d667e8b42e4c0073393abee.js?body=1" for ::1 at 2016-10-09 01:10:07 +0900


Started GET "/assets/jquery_ujs.self-784a997f6726036b1993eb2217c9cb558e1cbb801c6da88105588c56f13b466a.js?body=1" for ::1 at 2016-10-09 01:10:07 +0900


Started GET "/assets/turbolinks.self-c5acd7a204f5f25ce7a1d8a0e4d92e28d34c9e2df2c7371cd7af88e147e4ad82.js?body=1" for ::1 at 2016-10-09 01:10:07 +0900


Started GET "/assets/comments.self-877aef30ae1b040ab8a3aba4e3e309a11d7f2612f44dde450b5c157aa5f95c05.js?body=1" for ::1 at 2016-10-09 01:10:07 +0900


Started GET "/assets/likes.self-877aef30ae1b040ab8a3aba4e3e309a11d7f2612f44dde450b5c157aa5f95c05.js?body=1" for ::1 at 2016-10-09 01:10:07 +0900


Started GET "/assets/papers.self-877aef30ae1b040ab8a3aba4e3e309a11d7f2612f44dde450b5c157aa5f95c05.js?body=1" for ::1 at 2016-10-09 01:10:07 +0900


Started GET "/assets/users.self-877aef30ae1b040ab8a3aba4e3e309a11d7f2612f44dde450b5c157aa5f95c05.js?body=1" for ::1 at 2016-10-09 01:10:07 +0900


Started GET "/assets/application.self-3b8dabdc891efe46b9a144b400ad69e37d7e5876bdc39dee783419a69d7ca819.js?body=1" for ::1 at 2016-10-09 01:10:07 +0900


Started DELETE "/users/sign_out" for ::1 at 2016-10-09 01:10:30 +0900
Processing by Devise::SessionsController#destroy as HTML
  Parameters: {"authenticity_token"=>"Ji+s/Njq93OZuHjrJRyl0Y2EuoJIoNwPHn21rT4edfiNL40k6+FUSH9JBmIxy10Ze5X3pZt0HlcOaUZPzgYB6Q=="}
  [1m[36mUser Load (0.4ms)[0m  [1mSELECT  `users`.* FROM `users` WHERE `users`.`id` = 2  ORDER BY `users`.`id` ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36m (0.1ms)[0m  [1mCOMMIT[0m
Redirected to http://localhost:3000/
Completed 302 Found in 5ms (ActiveRecord: 0.6ms)


Started GET "/" for ::1 at 2016-10-09 01:10:30 +0900
Processing by PapersController#index as HTML
  [1m[35mPaper Load (0.3ms)[0m  SELECT  `papers`.* FROM `papers`  ORDER BY id ASC LIMIT 5 OFFSET 0
  Rendered papers/_item.html.erb (0.2ms)
  Rendered papers/_item.html.erb (0.1ms)
  Rendered papers/_item.html.erb (0.1ms)
  Rendered papers/_item.html.erb (0.1ms)
  Rendered papers/_item.html.erb (0.1ms)
  Rendered papers/index.html.erb within layouts/application (7.9ms)
Completed 200 OK in 33ms (Views: 31.3ms | ActiveRecord: 0.3ms)


Started GET "/papers/2" for ::1 at 2016-10-09 01:10:31 +0900
Processing by PapersController#show as HTML
  Parameters: {"id"=>"2"}
  [1m[36mPaper Load (1.0ms)[0m  [1mSELECT  `papers`.* FROM `papers` WHERE `papers`.`id` = 2 LIMIT 1[0m
  [1m[35mComment Load (0.3ms)[0m  SELECT `comments`.* FROM `comments` WHERE `comments`.`paper_id` = 2
  [1m[36mUser Load (0.2ms)[0m  [1mSELECT  `users`.* FROM `users` WHERE `users`.`id` = 2 LIMIT 1[0m
  Rendered papers/show.html.erb within layouts/application (2.4ms)
Completed 200 OK in 36ms (Views: 31.6ms | ActiveRecord: 1.6ms)
